// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RpcMessage.proto

#ifndef PROTOBUF_RpcMessage_2eproto__INCLUDED
#define PROTOBUF_RpcMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace game {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RpcMessage_2eproto();
void protobuf_AssignDesc_RpcMessage_2eproto();
void protobuf_ShutdownFile_RpcMessage_2eproto();

class GLQuitSubFishGameMessage;
class GLSendMailMessage;
class LGLoginSubGameMessage;
class GLLoginSubGameMessage;
class LGQuitSubGameMessage;
class GLQuitSubGameMessage;
class LGUpdateMoney1Message;
class GLUpdateRoundInfoMessage;
class GLSystemNoticeMessage;
class LGPlayerBetZJHMessage;
class GLPlayerBetZJHMessage;
class GLSyncSSCZJHMessage;
class SSC_Winer;
class SSC_Bet;
class LGSyncTableDataMessage;
class LGStopFishServerMessage;
class LGReloadFishTableMessage;
class LGStartFishServerMessage;
class LGMiniGameProcessMessage;
class GLMiniGameProcessMessage;
class GLSyncPlayerMoneyMessage;

enum Protos_Rpc {
  LGLoginSubGame = 6207,
  GLLoginSubGame = 6208,
  LGQuitSubGame = 6209,
  GLQuitSubGame = 6210,
  LGUpdateMoney1 = 6211,
  GLUpdateRoundInfo = 6212,
  GLSystemNotice = 6213,
  GLQuitSubFishGame = 6214,
  LGStopFishServer = 6215,
  LGReloadFishTable = 6216,
  LGStartFishServer = 6217,
  LGPlayerBetZJH = 6300,
  GLPlayerBetZJH = 6301,
  GLSyncSSCZJH = 6302,
  LGSyncTableData = 6303,
  GLSendMail = 6304,
  LGMiniGameProcess = 6309,
  GLMiniGameProcess = 6310,
  GLSyncPlayerMoney = 6311
};
bool Protos_Rpc_IsValid(int value);
const Protos_Rpc Protos_Rpc_MIN = LGLoginSubGame;
const Protos_Rpc Protos_Rpc_MAX = GLSyncPlayerMoney;
const int Protos_Rpc_ARRAYSIZE = Protos_Rpc_MAX + 1;

const ::google::protobuf::EnumDescriptor* Protos_Rpc_descriptor();
inline const ::std::string& Protos_Rpc_Name(Protos_Rpc value) {
  return ::google::protobuf::internal::NameOfEnum(
    Protos_Rpc_descriptor(), value);
}
inline bool Protos_Rpc_Parse(
    const ::std::string& name, Protos_Rpc* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Protos_Rpc>(
    Protos_Rpc_descriptor(), name, value);
}
// ===================================================================

class GLQuitSubFishGameMessage : public ::google::protobuf::Message {
 public:
  GLQuitSubFishGameMessage();
  virtual ~GLQuitSubFishGameMessage();
  
  GLQuitSubFishGameMessage(const GLQuitSubFishGameMessage& from);
  
  inline GLQuitSubFishGameMessage& operator=(const GLQuitSubFishGameMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GLQuitSubFishGameMessage& default_instance();
  
  void Swap(GLQuitSubFishGameMessage* other);
  
  // implements Message ----------------------------------------------
  
  GLQuitSubFishGameMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GLQuitSubFishGameMessage& from);
  void MergeFrom(const GLQuitSubFishGameMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .com.game.proto.Protos_Rpc msgID = 1 [default = GLQuitSubFishGame];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline com::game::proto::Protos_Rpc msgid() const;
  inline void set_msgid(com::game::proto::Protos_Rpc value);
  
  // required double money1 = 2;
  inline bool has_money1() const;
  inline void clear_money1();
  static const int kMoney1FieldNumber = 2;
  inline double money1() const;
  inline void set_money1(double value);
  
  // required double money2 = 3;
  inline bool has_money2() const;
  inline void clear_money2();
  static const int kMoney2FieldNumber = 3;
  inline double money2() const;
  inline void set_money2(double value);
  
  // optional bool offLine = 4;
  inline bool has_offline() const;
  inline void clear_offline();
  static const int kOffLineFieldNumber = 4;
  inline bool offline() const;
  inline void set_offline(bool value);
  
  // optional double winMoney1 = 6;
  inline bool has_winmoney1() const;
  inline void clear_winmoney1();
  static const int kWinMoney1FieldNumber = 6;
  inline double winmoney1() const;
  inline void set_winmoney1(double value);
  
  // optional double winMoney2 = 7;
  inline bool has_winmoney2() const;
  inline void clear_winmoney2();
  static const int kWinMoney2FieldNumber = 7;
  inline double winmoney2() const;
  inline void set_winmoney2(double value);
  
  // optional double loseMoney1 = 8;
  inline bool has_losemoney1() const;
  inline void clear_losemoney1();
  static const int kLoseMoney1FieldNumber = 8;
  inline double losemoney1() const;
  inline void set_losemoney1(double value);
  
  // optional double loseMoney2 = 9;
  inline bool has_losemoney2() const;
  inline void clear_losemoney2();
  static const int kLoseMoney2FieldNumber = 9;
  inline double losemoney2() const;
  inline void set_losemoney2(double value);
  
  // optional int32 playround = 10;
  inline bool has_playround() const;
  inline void clear_playround();
  static const int kPlayroundFieldNumber = 10;
  inline ::google::protobuf::int32 playround() const;
  inline void set_playround(::google::protobuf::int32 value);
  
  // optional int32 dayWinNum = 11;
  inline bool has_daywinnum() const;
  inline void clear_daywinnum();
  static const int kDayWinNumFieldNumber = 11;
  inline ::google::protobuf::int32 daywinnum() const;
  inline void set_daywinnum(::google::protobuf::int32 value);
  
  // optional int32 dayLoseNum = 12;
  inline bool has_daylosenum() const;
  inline void clear_daylosenum();
  static const int kDayLoseNumFieldNumber = 12;
  inline ::google::protobuf::int32 daylosenum() const;
  inline void set_daylosenum(::google::protobuf::int32 value);
  
  // optional int32 mapModelId = 13;
  inline bool has_mapmodelid() const;
  inline void clear_mapmodelid();
  static const int kMapModelIdFieldNumber = 13;
  inline ::google::protobuf::int32 mapmodelid() const;
  inline void set_mapmodelid(::google::protobuf::int32 value);
  
  // optional int32 continueWinNum = 14;
  inline bool has_continuewinnum() const;
  inline void clear_continuewinnum();
  static const int kContinueWinNumFieldNumber = 14;
  inline ::google::protobuf::int32 continuewinnum() const;
  inline void set_continuewinnum(::google::protobuf::int32 value);
  
  // optional double gameMaxWinMoney = 15;
  inline bool has_gamemaxwinmoney() const;
  inline void clear_gamemaxwinmoney();
  static const int kGameMaxWinMoneyFieldNumber = 15;
  inline double gamemaxwinmoney() const;
  inline void set_gamemaxwinmoney(double value);
  
  // optional int32 charmValue = 16;
  inline bool has_charmvalue() const;
  inline void clear_charmvalue();
  static const int kCharmValueFieldNumber = 16;
  inline ::google::protobuf::int32 charmvalue() const;
  inline void set_charmvalue(::google::protobuf::int32 value);
  
  // optional string others = 17;
  inline bool has_others() const;
  inline void clear_others();
  static const int kOthersFieldNumber = 17;
  inline const ::std::string& others() const;
  inline void set_others(const ::std::string& value);
  inline void set_others(const char* value);
  inline void set_others(const char* value, size_t size);
  inline ::std::string* mutable_others();
  inline ::std::string* release_others();
  
  // optional string achDataMap = 18;
  inline bool has_achdatamap() const;
  inline void clear_achdatamap();
  static const int kAchDataMapFieldNumber = 18;
  inline const ::std::string& achdatamap() const;
  inline void set_achdatamap(const ::std::string& value);
  inline void set_achdatamap(const char* value);
  inline void set_achdatamap(const char* value, size_t size);
  inline ::std::string* mutable_achdatamap();
  inline ::std::string* release_achdatamap();
  
  // optional string sameTableMap = 19;
  inline bool has_sametablemap() const;
  inline void clear_sametablemap();
  static const int kSameTableMapFieldNumber = 19;
  inline const ::std::string& sametablemap() const;
  inline void set_sametablemap(const ::std::string& value);
  inline void set_sametablemap(const char* value);
  inline void set_sametablemap(const char* value, size_t size);
  inline ::std::string* mutable_sametablemap();
  inline ::std::string* release_sametablemap();
  
  // optional double taxMoney = 20;
  inline bool has_taxmoney() const;
  inline void clear_taxmoney();
  static const int kTaxMoneyFieldNumber = 20;
  inline double taxmoney() const;
  inline void set_taxmoney(double value);
  
  // @@protoc_insertion_point(class_scope:com.game.proto.GLQuitSubFishGameMessage)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_money1();
  inline void clear_has_money1();
  inline void set_has_money2();
  inline void clear_has_money2();
  inline void set_has_offline();
  inline void clear_has_offline();
  inline void set_has_winmoney1();
  inline void clear_has_winmoney1();
  inline void set_has_winmoney2();
  inline void clear_has_winmoney2();
  inline void set_has_losemoney1();
  inline void clear_has_losemoney1();
  inline void set_has_losemoney2();
  inline void clear_has_losemoney2();
  inline void set_has_playround();
  inline void clear_has_playround();
  inline void set_has_daywinnum();
  inline void clear_has_daywinnum();
  inline void set_has_daylosenum();
  inline void clear_has_daylosenum();
  inline void set_has_mapmodelid();
  inline void clear_has_mapmodelid();
  inline void set_has_continuewinnum();
  inline void clear_has_continuewinnum();
  inline void set_has_gamemaxwinmoney();
  inline void clear_has_gamemaxwinmoney();
  inline void set_has_charmvalue();
  inline void clear_has_charmvalue();
  inline void set_has_others();
  inline void clear_has_others();
  inline void set_has_achdatamap();
  inline void clear_has_achdatamap();
  inline void set_has_sametablemap();
  inline void clear_has_sametablemap();
  inline void set_has_taxmoney();
  inline void clear_has_taxmoney();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  double money1_;
  int msgid_;
  bool offline_;
  double money2_;
  double winmoney1_;
  double winmoney2_;
  double losemoney1_;
  double losemoney2_;
  ::google::protobuf::int32 playround_;
  ::google::protobuf::int32 daywinnum_;
  ::google::protobuf::int32 daylosenum_;
  ::google::protobuf::int32 mapmodelid_;
  double gamemaxwinmoney_;
  ::google::protobuf::int32 continuewinnum_;
  ::google::protobuf::int32 charmvalue_;
  ::std::string* others_;
  ::std::string* achdatamap_;
  ::std::string* sametablemap_;
  double taxmoney_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(19 + 31) / 32];
  
  friend void  protobuf_AddDesc_RpcMessage_2eproto();
  friend void protobuf_AssignDesc_RpcMessage_2eproto();
  friend void protobuf_ShutdownFile_RpcMessage_2eproto();
  
  void InitAsDefaultInstance();
  static GLQuitSubFishGameMessage* default_instance_;
};
// -------------------------------------------------------------------

class GLSendMailMessage : public ::google::protobuf::Message {
 public:
  GLSendMailMessage();
  virtual ~GLSendMailMessage();
  
  GLSendMailMessage(const GLSendMailMessage& from);
  
  inline GLSendMailMessage& operator=(const GLSendMailMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GLSendMailMessage& default_instance();
  
  void Swap(GLSendMailMessage* other);
  
  // implements Message ----------------------------------------------
  
  GLSendMailMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GLSendMailMessage& from);
  void MergeFrom(const GLSendMailMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .com.game.proto.Protos_Rpc msgID = 1 [default = GLSendMail];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline com::game::proto::Protos_Rpc msgid() const;
  inline void set_msgid(com::game::proto::Protos_Rpc value);
  
  // optional string sendName = 2;
  inline bool has_sendname() const;
  inline void clear_sendname();
  static const int kSendNameFieldNumber = 2;
  inline const ::std::string& sendname() const;
  inline void set_sendname(const ::std::string& value);
  inline void set_sendname(const char* value);
  inline void set_sendname(const char* value, size_t size);
  inline ::std::string* mutable_sendname();
  inline ::std::string* release_sendname();
  
  // optional int64 receiverId = 3;
  inline bool has_receiverid() const;
  inline void clear_receiverid();
  static const int kReceiverIdFieldNumber = 3;
  inline ::google::protobuf::int64 receiverid() const;
  inline void set_receiverid(::google::protobuf::int64 value);
  
  // optional string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional string title = 5;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 5;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  
  // optional string content = 6;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 6;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  
  // optional double money = 7;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 7;
  inline double money() const;
  inline void set_money(double value);
  
  // optional int32 reason = 8;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 8;
  inline ::google::protobuf::int32 reason() const;
  inline void set_reason(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.game.proto.GLSendMailMessage)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_sendname();
  inline void clear_has_sendname();
  inline void set_has_receiverid();
  inline void clear_has_receiverid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_reason();
  inline void clear_has_reason();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* sendname_;
  ::google::protobuf::int64 receiverid_;
  ::std::string* name_;
  int msgid_;
  ::google::protobuf::int32 reason_;
  ::std::string* title_;
  ::std::string* content_;
  double money_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_RpcMessage_2eproto();
  friend void protobuf_AssignDesc_RpcMessage_2eproto();
  friend void protobuf_ShutdownFile_RpcMessage_2eproto();
  
  void InitAsDefaultInstance();
  static GLSendMailMessage* default_instance_;
};
// -------------------------------------------------------------------

class LGLoginSubGameMessage : public ::google::protobuf::Message {
 public:
  LGLoginSubGameMessage();
  virtual ~LGLoginSubGameMessage();
  
  LGLoginSubGameMessage(const LGLoginSubGameMessage& from);
  
  inline LGLoginSubGameMessage& operator=(const LGLoginSubGameMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LGLoginSubGameMessage& default_instance();
  
  void Swap(LGLoginSubGameMessage* other);
  
  // implements Message ----------------------------------------------
  
  LGLoginSubGameMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LGLoginSubGameMessage& from);
  void MergeFrom(const LGLoginSubGameMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .com.game.proto.Protos_Rpc msgID = 1 [default = LGLoginSubGame];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline com::game::proto::Protos_Rpc msgid() const;
  inline void set_msgid(com::game::proto::Protos_Rpc value);
  
  // optional int32 rpcId = 2;
  inline bool has_rpcid() const;
  inline void clear_rpcid();
  static const int kRpcIdFieldNumber = 2;
  inline ::google::protobuf::int32 rpcid() const;
  inline void set_rpcid(::google::protobuf::int32 value);
  
  // required double money1 = 3;
  inline bool has_money1() const;
  inline void clear_money1();
  static const int kMoney1FieldNumber = 3;
  inline double money1() const;
  inline void set_money1(double value);
  
  // required double money2 = 4;
  inline bool has_money2() const;
  inline void clear_money2();
  static const int kMoney2FieldNumber = 4;
  inline double money2() const;
  inline void set_money2(double value);
  
  // required string name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required string address = 6;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 6;
  inline const ::std::string& address() const;
  inline void set_address(const ::std::string& value);
  inline void set_address(const char* value);
  inline void set_address(const char* value, size_t size);
  inline ::std::string* mutable_address();
  inline ::std::string* release_address();
  
  // required string icon = 7;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 7;
  inline const ::std::string& icon() const;
  inline void set_icon(const ::std::string& value);
  inline void set_icon(const char* value);
  inline void set_icon(const char* value, size_t size);
  inline ::std::string* mutable_icon();
  inline ::std::string* release_icon();
  
  // required int32 sex = 8;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 8;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);
  
  // required string fr = 9;
  inline bool has_fr() const;
  inline void clear_fr();
  static const int kFrFieldNumber = 9;
  inline const ::std::string& fr() const;
  inline void set_fr(const ::std::string& value);
  inline void set_fr(const char* value);
  inline void set_fr(const char* value, size_t size);
  inline ::std::string* mutable_fr();
  inline ::std::string* release_fr();
  
  // required string platform = 10;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 10;
  inline const ::std::string& platform() const;
  inline void set_platform(const ::std::string& value);
  inline void set_platform(const char* value);
  inline void set_platform(const char* value, size_t size);
  inline ::std::string* mutable_platform();
  inline ::std::string* release_platform();
  
  // required int32 loginid = 11;
  inline bool has_loginid() const;
  inline void clear_loginid();
  static const int kLoginidFieldNumber = 11;
  inline ::google::protobuf::int32 loginid() const;
  inline void set_loginid(::google::protobuf::int32 value);
  
  // required string loginIp = 12;
  inline bool has_loginip() const;
  inline void clear_loginip();
  static const int kLoginIpFieldNumber = 12;
  inline const ::std::string& loginip() const;
  inline void set_loginip(const ::std::string& value);
  inline void set_loginip(const char* value);
  inline void set_loginip(const char* value, size_t size);
  inline ::std::string* mutable_loginip();
  inline ::std::string* release_loginip();
  
  // required int32 deleteAt = 13;
  inline bool has_deleteat() const;
  inline void clear_deleteat();
  static const int kDeleteAtFieldNumber = 13;
  inline ::google::protobuf::int32 deleteat() const;
  inline void set_deleteat(::google::protobuf::int32 value);
  
  // required int32 gmLevel = 14;
  inline bool has_gmlevel() const;
  inline void clear_gmlevel();
  static const int kGmLevelFieldNumber = 14;
  inline ::google::protobuf::int32 gmlevel() const;
  inline void set_gmlevel(::google::protobuf::int32 value);
  
  // required int32 robot = 15;
  inline bool has_robot() const;
  inline void clear_robot();
  static const int kRobotFieldNumber = 15;
  inline ::google::protobuf::int32 robot() const;
  inline void set_robot(::google::protobuf::int32 value);
  
  // optional string others = 16;
  inline bool has_others() const;
  inline void clear_others();
  static const int kOthersFieldNumber = 16;
  inline const ::std::string& others() const;
  inline void set_others(const ::std::string& value);
  inline void set_others(const char* value);
  inline void set_others(const char* value, size_t size);
  inline ::std::string* mutable_others();
  inline ::std::string* release_others();
  
  // required int32 titleIndex = 17;
  inline bool has_titleindex() const;
  inline void clear_titleindex();
  static const int kTitleIndexFieldNumber = 17;
  inline ::google::protobuf::int32 titleindex() const;
  inline void set_titleindex(::google::protobuf::int32 value);
  
  // required double gameMaxWinMoney = 18;
  inline bool has_gamemaxwinmoney() const;
  inline void clear_gamemaxwinmoney();
  static const int kGameMaxWinMoneyFieldNumber = 18;
  inline double gamemaxwinmoney() const;
  inline void set_gamemaxwinmoney(double value);
  
  // required int32 charmValue = 19;
  inline bool has_charmvalue() const;
  inline void clear_charmvalue();
  static const int kCharmValueFieldNumber = 19;
  inline ::google::protobuf::int32 charmvalue() const;
  inline void set_charmvalue(::google::protobuf::int32 value);
  
  // required int32 vip = 20;
  inline bool has_vip() const;
  inline void clear_vip();
  static const int kVipFieldNumber = 20;
  inline ::google::protobuf::int32 vip() const;
  inline void set_vip(::google::protobuf::int32 value);
  
  // required int32 barrageNum = 21;
  inline bool has_barragenum() const;
  inline void clear_barragenum();
  static const int kBarrageNumFieldNumber = 21;
  inline ::google::protobuf::int32 barragenum() const;
  inline void set_barragenum(::google::protobuf::int32 value);
  
  // required string userName = 22;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUserNameFieldNumber = 22;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  
  // required double taxRatio = 23;
  inline bool has_taxratio() const;
  inline void clear_taxratio();
  static const int kTaxRatioFieldNumber = 23;
  inline double taxratio() const;
  inline void set_taxratio(double value);
  
  // required int32 cardBg = 24;
  inline bool has_cardbg() const;
  inline void clear_cardbg();
  static const int kCardBgFieldNumber = 24;
  inline ::google::protobuf::int32 cardbg() const;
  inline void set_cardbg(::google::protobuf::int32 value);
  
  // required int32 headIcon = 25;
  inline bool has_headicon() const;
  inline void clear_headicon();
  static const int kHeadIconFieldNumber = 25;
  inline ::google::protobuf::int32 headicon() const;
  inline void set_headicon(::google::protobuf::int32 value);
  
  // required string signature = 26;
  inline bool has_signature() const;
  inline void clear_signature();
  static const int kSignatureFieldNumber = 26;
  inline const ::std::string& signature() const;
  inline void set_signature(const ::std::string& value);
  inline void set_signature(const char* value);
  inline void set_signature(const char* value, size_t size);
  inline ::std::string* mutable_signature();
  inline ::std::string* release_signature();
  
  // optional string achDataMap = 27;
  inline bool has_achdatamap() const;
  inline void clear_achdatamap();
  static const int kAchDataMapFieldNumber = 27;
  inline const ::std::string& achdatamap() const;
  inline void set_achdatamap(const ::std::string& value);
  inline void set_achdatamap(const char* value);
  inline void set_achdatamap(const char* value, size_t size);
  inline ::std::string* mutable_achdatamap();
  inline ::std::string* release_achdatamap();
  
  // required int64 taxFreeCardEndTime = 28;
  inline bool has_taxfreecardendtime() const;
  inline void clear_taxfreecardendtime();
  static const int kTaxFreeCardEndTimeFieldNumber = 28;
  inline ::google::protobuf::int64 taxfreecardendtime() const;
  inline void set_taxfreecardendtime(::google::protobuf::int64 value);
  
  // required double taxFreeCardRate = 29;
  inline bool has_taxfreecardrate() const;
  inline void clear_taxfreecardrate();
  static const int kTaxFreeCardRateFieldNumber = 29;
  inline double taxfreecardrate() const;
  inline void set_taxfreecardrate(double value);
  
  // optional double bankMoney1 = 30;
  inline bool has_bankmoney1() const;
  inline void clear_bankmoney1();
  static const int kBankMoney1FieldNumber = 30;
  inline double bankmoney1() const;
  inline void set_bankmoney1(double value);
  
  // optional double bankMoney2 = 31;
  inline bool has_bankmoney2() const;
  inline void clear_bankmoney2();
  static const int kBankMoney2FieldNumber = 31;
  inline double bankmoney2() const;
  inline void set_bankmoney2(double value);
  
  // optional double agencyRechargeMoney = 32;
  inline bool has_agencyrechargemoney() const;
  inline void clear_agencyrechargemoney();
  static const int kAgencyRechargeMoneyFieldNumber = 32;
  inline double agencyrechargemoney() const;
  inline void set_agencyrechargemoney(double value);
  
  // optional double officialRechargeMoney = 33;
  inline bool has_officialrechargemoney() const;
  inline void clear_officialrechargemoney();
  static const int kOfficialRechargeMoneyFieldNumber = 33;
  inline double officialrechargemoney() const;
  inline void set_officialrechargemoney(double value);
  
  // optional double withdrawMoney = 34;
  inline bool has_withdrawmoney() const;
  inline void clear_withdrawmoney();
  static const int kWithdrawMoneyFieldNumber = 34;
  inline double withdrawmoney() const;
  inline void set_withdrawmoney(double value);
  
  // optional int64 playGameTime = 35;
  inline bool has_playgametime() const;
  inline void clear_playgametime();
  static const int kPlayGameTimeFieldNumber = 35;
  inline ::google::protobuf::int64 playgametime() const;
  inline void set_playgametime(::google::protobuf::int64 value);
  
  // optional int64 onlineTime = 36;
  inline bool has_onlinetime() const;
  inline void clear_onlinetime();
  static const int kOnlineTimeFieldNumber = 36;
  inline ::google::protobuf::int64 onlinetime() const;
  inline void set_onlinetime(::google::protobuf::int64 value);
  
  // optional int32 dayOnlineTime = 37;
  inline bool has_dayonlinetime() const;
  inline void clear_dayonlinetime();
  static const int kDayOnlineTimeFieldNumber = 37;
  inline ::google::protobuf::int32 dayonlinetime() const;
  inline void set_dayonlinetime(::google::protobuf::int32 value);
  
  // optional int32 ratioValue = 38;
  inline bool has_ratiovalue() const;
  inline void clear_ratiovalue();
  static const int kRatioValueFieldNumber = 38;
  inline ::google::protobuf::int32 ratiovalue() const;
  inline void set_ratiovalue(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.game.proto.LGLoginSubGameMessage)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_rpcid();
  inline void clear_has_rpcid();
  inline void set_has_money1();
  inline void clear_has_money1();
  inline void set_has_money2();
  inline void clear_has_money2();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_address();
  inline void clear_has_address();
  inline void set_has_icon();
  inline void clear_has_icon();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_fr();
  inline void clear_has_fr();
  inline void set_has_platform();
  inline void clear_has_platform();
  inline void set_has_loginid();
  inline void clear_has_loginid();
  inline void set_has_loginip();
  inline void clear_has_loginip();
  inline void set_has_deleteat();
  inline void clear_has_deleteat();
  inline void set_has_gmlevel();
  inline void clear_has_gmlevel();
  inline void set_has_robot();
  inline void clear_has_robot();
  inline void set_has_others();
  inline void clear_has_others();
  inline void set_has_titleindex();
  inline void clear_has_titleindex();
  inline void set_has_gamemaxwinmoney();
  inline void clear_has_gamemaxwinmoney();
  inline void set_has_charmvalue();
  inline void clear_has_charmvalue();
  inline void set_has_vip();
  inline void clear_has_vip();
  inline void set_has_barragenum();
  inline void clear_has_barragenum();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_taxratio();
  inline void clear_has_taxratio();
  inline void set_has_cardbg();
  inline void clear_has_cardbg();
  inline void set_has_headicon();
  inline void clear_has_headicon();
  inline void set_has_signature();
  inline void clear_has_signature();
  inline void set_has_achdatamap();
  inline void clear_has_achdatamap();
  inline void set_has_taxfreecardendtime();
  inline void clear_has_taxfreecardendtime();
  inline void set_has_taxfreecardrate();
  inline void clear_has_taxfreecardrate();
  inline void set_has_bankmoney1();
  inline void clear_has_bankmoney1();
  inline void set_has_bankmoney2();
  inline void clear_has_bankmoney2();
  inline void set_has_agencyrechargemoney();
  inline void clear_has_agencyrechargemoney();
  inline void set_has_officialrechargemoney();
  inline void clear_has_officialrechargemoney();
  inline void set_has_withdrawmoney();
  inline void clear_has_withdrawmoney();
  inline void set_has_playgametime();
  inline void clear_has_playgametime();
  inline void set_has_onlinetime();
  inline void clear_has_onlinetime();
  inline void set_has_dayonlinetime();
  inline void clear_has_dayonlinetime();
  inline void set_has_ratiovalue();
  inline void clear_has_ratiovalue();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int msgid_;
  ::google::protobuf::int32 rpcid_;
  double money1_;
  double money2_;
  ::std::string* name_;
  ::std::string* address_;
  ::std::string* icon_;
  ::std::string* fr_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 loginid_;
  ::std::string* platform_;
  ::std::string* loginip_;
  ::google::protobuf::int32 deleteat_;
  ::google::protobuf::int32 gmlevel_;
  ::std::string* others_;
  ::google::protobuf::int32 robot_;
  ::google::protobuf::int32 titleindex_;
  double gamemaxwinmoney_;
  ::google::protobuf::int32 charmvalue_;
  ::google::protobuf::int32 vip_;
  ::std::string* username_;
  ::google::protobuf::int32 barragenum_;
  ::google::protobuf::int32 cardbg_;
  double taxratio_;
  ::std::string* signature_;
  ::std::string* achdatamap_;
  ::google::protobuf::int64 taxfreecardendtime_;
  double taxfreecardrate_;
  double bankmoney1_;
  double bankmoney2_;
  ::google::protobuf::int32 headicon_;
  ::google::protobuf::int32 dayonlinetime_;
  double agencyrechargemoney_;
  double officialrechargemoney_;
  double withdrawmoney_;
  ::google::protobuf::int64 playgametime_;
  ::google::protobuf::int64 onlinetime_;
  ::google::protobuf::int32 ratiovalue_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(38 + 31) / 32];
  
  friend void  protobuf_AddDesc_RpcMessage_2eproto();
  friend void protobuf_AssignDesc_RpcMessage_2eproto();
  friend void protobuf_ShutdownFile_RpcMessage_2eproto();
  
  void InitAsDefaultInstance();
  static LGLoginSubGameMessage* default_instance_;
};
// -------------------------------------------------------------------

class GLLoginSubGameMessage : public ::google::protobuf::Message {
 public:
  GLLoginSubGameMessage();
  virtual ~GLLoginSubGameMessage();
  
  GLLoginSubGameMessage(const GLLoginSubGameMessage& from);
  
  inline GLLoginSubGameMessage& operator=(const GLLoginSubGameMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GLLoginSubGameMessage& default_instance();
  
  void Swap(GLLoginSubGameMessage* other);
  
  // implements Message ----------------------------------------------
  
  GLLoginSubGameMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GLLoginSubGameMessage& from);
  void MergeFrom(const GLLoginSubGameMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .com.game.proto.Protos_Rpc msgID = 1 [default = GLLoginSubGame];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline com::game::proto::Protos_Rpc msgid() const;
  inline void set_msgid(com::game::proto::Protos_Rpc value);
  
  // optional int32 rpcId = 2;
  inline bool has_rpcid() const;
  inline void clear_rpcid();
  static const int kRpcIdFieldNumber = 2;
  inline ::google::protobuf::int32 rpcid() const;
  inline void set_rpcid(::google::protobuf::int32 value);
  
  // optional int32 isReconnect = 3;
  inline bool has_isreconnect() const;
  inline void clear_isreconnect();
  static const int kIsReconnectFieldNumber = 3;
  inline ::google::protobuf::int32 isreconnect() const;
  inline void set_isreconnect(::google::protobuf::int32 value);
  
  // optional bool loginSubGame = 4;
  inline bool has_loginsubgame() const;
  inline void clear_loginsubgame();
  static const int kLoginSubGameFieldNumber = 4;
  inline bool loginsubgame() const;
  inline void set_loginsubgame(bool value);
  
  // optional int32 mapModelId = 5;
  inline bool has_mapmodelid() const;
  inline void clear_mapmodelid();
  static const int kMapModelIdFieldNumber = 5;
  inline ::google::protobuf::int32 mapmodelid() const;
  inline void set_mapmodelid(::google::protobuf::int32 value);
  
  // optional string fishIp = 6;
  inline bool has_fiship() const;
  inline void clear_fiship();
  static const int kFishIpFieldNumber = 6;
  inline const ::std::string& fiship() const;
  inline void set_fiship(const ::std::string& value);
  inline void set_fiship(const char* value);
  inline void set_fiship(const char* value, size_t size);
  inline ::std::string* mutable_fiship();
  inline ::std::string* release_fiship();
  
  // optional int32 fishPort = 7;
  inline bool has_fishport() const;
  inline void clear_fishport();
  static const int kFishPortFieldNumber = 7;
  inline ::google::protobuf::int32 fishport() const;
  inline void set_fishport(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.game.proto.GLLoginSubGameMessage)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_rpcid();
  inline void clear_has_rpcid();
  inline void set_has_isreconnect();
  inline void clear_has_isreconnect();
  inline void set_has_loginsubgame();
  inline void clear_has_loginsubgame();
  inline void set_has_mapmodelid();
  inline void clear_has_mapmodelid();
  inline void set_has_fiship();
  inline void clear_has_fiship();
  inline void set_has_fishport();
  inline void clear_has_fishport();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int msgid_;
  ::google::protobuf::int32 rpcid_;
  ::google::protobuf::int32 isreconnect_;
  bool loginsubgame_;
  ::std::string* fiship_;
  ::google::protobuf::int32 mapmodelid_;
  ::google::protobuf::int32 fishport_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_RpcMessage_2eproto();
  friend void protobuf_AssignDesc_RpcMessage_2eproto();
  friend void protobuf_ShutdownFile_RpcMessage_2eproto();
  
  void InitAsDefaultInstance();
  static GLLoginSubGameMessage* default_instance_;
};
// -------------------------------------------------------------------

class LGQuitSubGameMessage : public ::google::protobuf::Message {
 public:
  LGQuitSubGameMessage();
  virtual ~LGQuitSubGameMessage();
  
  LGQuitSubGameMessage(const LGQuitSubGameMessage& from);
  
  inline LGQuitSubGameMessage& operator=(const LGQuitSubGameMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LGQuitSubGameMessage& default_instance();
  
  void Swap(LGQuitSubGameMessage* other);
  
  // implements Message ----------------------------------------------
  
  LGQuitSubGameMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LGQuitSubGameMessage& from);
  void MergeFrom(const LGQuitSubGameMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .com.game.proto.Protos_Rpc msgID = 1 [default = LGQuitSubGame];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline com::game::proto::Protos_Rpc msgid() const;
  inline void set_msgid(com::game::proto::Protos_Rpc value);
  
  // optional int32 rpcId = 2;
  inline bool has_rpcid() const;
  inline void clear_rpcid();
  static const int kRpcIdFieldNumber = 2;
  inline ::google::protobuf::int32 rpcid() const;
  inline void set_rpcid(::google::protobuf::int32 value);
  
  // optional bool offLine = 3;
  inline bool has_offline() const;
  inline void clear_offline();
  static const int kOffLineFieldNumber = 3;
  inline bool offline() const;
  inline void set_offline(bool value);
  
  // @@protoc_insertion_point(class_scope:com.game.proto.LGQuitSubGameMessage)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_rpcid();
  inline void clear_has_rpcid();
  inline void set_has_offline();
  inline void clear_has_offline();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int msgid_;
  ::google::protobuf::int32 rpcid_;
  bool offline_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_RpcMessage_2eproto();
  friend void protobuf_AssignDesc_RpcMessage_2eproto();
  friend void protobuf_ShutdownFile_RpcMessage_2eproto();
  
  void InitAsDefaultInstance();
  static LGQuitSubGameMessage* default_instance_;
};
// -------------------------------------------------------------------

class GLQuitSubGameMessage : public ::google::protobuf::Message {
 public:
  GLQuitSubGameMessage();
  virtual ~GLQuitSubGameMessage();
  
  GLQuitSubGameMessage(const GLQuitSubGameMessage& from);
  
  inline GLQuitSubGameMessage& operator=(const GLQuitSubGameMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GLQuitSubGameMessage& default_instance();
  
  void Swap(GLQuitSubGameMessage* other);
  
  // implements Message ----------------------------------------------
  
  GLQuitSubGameMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GLQuitSubGameMessage& from);
  void MergeFrom(const GLQuitSubGameMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .com.game.proto.Protos_Rpc msgID = 1 [default = GLQuitSubGame];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline com::game::proto::Protos_Rpc msgid() const;
  inline void set_msgid(com::game::proto::Protos_Rpc value);
  
  // optional int32 rpcId = 2;
  inline bool has_rpcid() const;
  inline void clear_rpcid();
  static const int kRpcIdFieldNumber = 2;
  inline ::google::protobuf::int32 rpcid() const;
  inline void set_rpcid(::google::protobuf::int32 value);
  
  // optional bool quitSubGame = 3;
  inline bool has_quitsubgame() const;
  inline void clear_quitsubgame();
  static const int kQuitSubGameFieldNumber = 3;
  inline bool quitsubgame() const;
  inline void set_quitsubgame(bool value);
  
  // optional double money1 = 4;
  inline bool has_money1() const;
  inline void clear_money1();
  static const int kMoney1FieldNumber = 4;
  inline double money1() const;
  inline void set_money1(double value);
  
  // optional double money2 = 5;
  inline bool has_money2() const;
  inline void clear_money2();
  static const int kMoney2FieldNumber = 5;
  inline double money2() const;
  inline void set_money2(double value);
  
  // optional double winMoney1 = 6;
  inline bool has_winmoney1() const;
  inline void clear_winmoney1();
  static const int kWinMoney1FieldNumber = 6;
  inline double winmoney1() const;
  inline void set_winmoney1(double value);
  
  // optional double winMoney2 = 7;
  inline bool has_winmoney2() const;
  inline void clear_winmoney2();
  static const int kWinMoney2FieldNumber = 7;
  inline double winmoney2() const;
  inline void set_winmoney2(double value);
  
  // optional double loseMoney1 = 8;
  inline bool has_losemoney1() const;
  inline void clear_losemoney1();
  static const int kLoseMoney1FieldNumber = 8;
  inline double losemoney1() const;
  inline void set_losemoney1(double value);
  
  // optional double loseMoney2 = 9;
  inline bool has_losemoney2() const;
  inline void clear_losemoney2();
  static const int kLoseMoney2FieldNumber = 9;
  inline double losemoney2() const;
  inline void set_losemoney2(double value);
  
  // optional int32 playround = 10;
  inline bool has_playround() const;
  inline void clear_playround();
  static const int kPlayroundFieldNumber = 10;
  inline ::google::protobuf::int32 playround() const;
  inline void set_playround(::google::protobuf::int32 value);
  
  // required int32 dayWinNum = 11;
  inline bool has_daywinnum() const;
  inline void clear_daywinnum();
  static const int kDayWinNumFieldNumber = 11;
  inline ::google::protobuf::int32 daywinnum() const;
  inline void set_daywinnum(::google::protobuf::int32 value);
  
  // required int32 dayLoseNum = 12;
  inline bool has_daylosenum() const;
  inline void clear_daylosenum();
  static const int kDayLoseNumFieldNumber = 12;
  inline ::google::protobuf::int32 daylosenum() const;
  inline void set_daylosenum(::google::protobuf::int32 value);
  
  // optional int32 mapModelId = 13;
  inline bool has_mapmodelid() const;
  inline void clear_mapmodelid();
  static const int kMapModelIdFieldNumber = 13;
  inline ::google::protobuf::int32 mapmodelid() const;
  inline void set_mapmodelid(::google::protobuf::int32 value);
  
  // required int32 continueWinNum = 14;
  inline bool has_continuewinnum() const;
  inline void clear_continuewinnum();
  static const int kContinueWinNumFieldNumber = 14;
  inline ::google::protobuf::int32 continuewinnum() const;
  inline void set_continuewinnum(::google::protobuf::int32 value);
  
  // required double gameMaxWinMoney = 15;
  inline bool has_gamemaxwinmoney() const;
  inline void clear_gamemaxwinmoney();
  static const int kGameMaxWinMoneyFieldNumber = 15;
  inline double gamemaxwinmoney() const;
  inline void set_gamemaxwinmoney(double value);
  
  // required int32 charmValue = 16;
  inline bool has_charmvalue() const;
  inline void clear_charmvalue();
  static const int kCharmValueFieldNumber = 16;
  inline ::google::protobuf::int32 charmvalue() const;
  inline void set_charmvalue(::google::protobuf::int32 value);
  
  // optional string others = 17;
  inline bool has_others() const;
  inline void clear_others();
  static const int kOthersFieldNumber = 17;
  inline const ::std::string& others() const;
  inline void set_others(const ::std::string& value);
  inline void set_others(const char* value);
  inline void set_others(const char* value, size_t size);
  inline ::std::string* mutable_others();
  inline ::std::string* release_others();
  
  // optional string achDataMap = 18;
  inline bool has_achdatamap() const;
  inline void clear_achdatamap();
  static const int kAchDataMapFieldNumber = 18;
  inline const ::std::string& achdatamap() const;
  inline void set_achdatamap(const ::std::string& value);
  inline void set_achdatamap(const char* value);
  inline void set_achdatamap(const char* value, size_t size);
  inline ::std::string* mutable_achdatamap();
  inline ::std::string* release_achdatamap();
  
  // optional string sameTableMap = 19;
  inline bool has_sametablemap() const;
  inline void clear_sametablemap();
  static const int kSameTableMapFieldNumber = 19;
  inline const ::std::string& sametablemap() const;
  inline void set_sametablemap(const ::std::string& value);
  inline void set_sametablemap(const char* value);
  inline void set_sametablemap(const char* value, size_t size);
  inline ::std::string* mutable_sametablemap();
  inline ::std::string* release_sametablemap();
  
  // optional double taxMoney = 20;
  inline bool has_taxmoney() const;
  inline void clear_taxmoney();
  static const int kTaxMoneyFieldNumber = 20;
  inline double taxmoney() const;
  inline void set_taxmoney(double value);
  
  // optional int32 subGameId = 21;
  inline bool has_subgameid() const;
  inline void clear_subgameid();
  static const int kSubGameIdFieldNumber = 21;
  inline ::google::protobuf::int32 subgameid() const;
  inline void set_subgameid(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.game.proto.GLQuitSubGameMessage)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_rpcid();
  inline void clear_has_rpcid();
  inline void set_has_quitsubgame();
  inline void clear_has_quitsubgame();
  inline void set_has_money1();
  inline void clear_has_money1();
  inline void set_has_money2();
  inline void clear_has_money2();
  inline void set_has_winmoney1();
  inline void clear_has_winmoney1();
  inline void set_has_winmoney2();
  inline void clear_has_winmoney2();
  inline void set_has_losemoney1();
  inline void clear_has_losemoney1();
  inline void set_has_losemoney2();
  inline void clear_has_losemoney2();
  inline void set_has_playround();
  inline void clear_has_playround();
  inline void set_has_daywinnum();
  inline void clear_has_daywinnum();
  inline void set_has_daylosenum();
  inline void clear_has_daylosenum();
  inline void set_has_mapmodelid();
  inline void clear_has_mapmodelid();
  inline void set_has_continuewinnum();
  inline void clear_has_continuewinnum();
  inline void set_has_gamemaxwinmoney();
  inline void clear_has_gamemaxwinmoney();
  inline void set_has_charmvalue();
  inline void clear_has_charmvalue();
  inline void set_has_others();
  inline void clear_has_others();
  inline void set_has_achdatamap();
  inline void clear_has_achdatamap();
  inline void set_has_sametablemap();
  inline void clear_has_sametablemap();
  inline void set_has_taxmoney();
  inline void clear_has_taxmoney();
  inline void set_has_subgameid();
  inline void clear_has_subgameid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int msgid_;
  ::google::protobuf::int32 rpcid_;
  double money1_;
  double money2_;
  double winmoney1_;
  bool quitsubgame_;
  ::google::protobuf::int32 playround_;
  double winmoney2_;
  double losemoney1_;
  double losemoney2_;
  ::google::protobuf::int32 daywinnum_;
  ::google::protobuf::int32 daylosenum_;
  ::google::protobuf::int32 mapmodelid_;
  ::google::protobuf::int32 continuewinnum_;
  double gamemaxwinmoney_;
  ::std::string* others_;
  ::std::string* achdatamap_;
  ::google::protobuf::int32 charmvalue_;
  ::google::protobuf::int32 subgameid_;
  ::std::string* sametablemap_;
  double taxmoney_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(21 + 31) / 32];
  
  friend void  protobuf_AddDesc_RpcMessage_2eproto();
  friend void protobuf_AssignDesc_RpcMessage_2eproto();
  friend void protobuf_ShutdownFile_RpcMessage_2eproto();
  
  void InitAsDefaultInstance();
  static GLQuitSubGameMessage* default_instance_;
};
// -------------------------------------------------------------------

class LGUpdateMoney1Message : public ::google::protobuf::Message {
 public:
  LGUpdateMoney1Message();
  virtual ~LGUpdateMoney1Message();
  
  LGUpdateMoney1Message(const LGUpdateMoney1Message& from);
  
  inline LGUpdateMoney1Message& operator=(const LGUpdateMoney1Message& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LGUpdateMoney1Message& default_instance();
  
  void Swap(LGUpdateMoney1Message* other);
  
  // implements Message ----------------------------------------------
  
  LGUpdateMoney1Message* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LGUpdateMoney1Message& from);
  void MergeFrom(const LGUpdateMoney1Message& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .com.game.proto.Protos_Rpc msgID = 1 [default = LGUpdateMoney1];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline com::game::proto::Protos_Rpc msgid() const;
  inline void set_msgid(com::game::proto::Protos_Rpc value);
  
  // required double money1 = 2;
  inline bool has_money1() const;
  inline void clear_money1();
  static const int kMoney1FieldNumber = 2;
  inline double money1() const;
  inline void set_money1(double value);
  
  // required double money2 = 3;
  inline bool has_money2() const;
  inline void clear_money2();
  static const int kMoney2FieldNumber = 3;
  inline double money2() const;
  inline void set_money2(double value);
  
  // required int32 reason = 4;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 4;
  inline ::google::protobuf::int32 reason() const;
  inline void set_reason(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.game.proto.LGUpdateMoney1Message)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_money1();
  inline void clear_has_money1();
  inline void set_has_money2();
  inline void clear_has_money2();
  inline void set_has_reason();
  inline void clear_has_reason();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  double money1_;
  int msgid_;
  ::google::protobuf::int32 reason_;
  double money2_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_RpcMessage_2eproto();
  friend void protobuf_AssignDesc_RpcMessage_2eproto();
  friend void protobuf_ShutdownFile_RpcMessage_2eproto();
  
  void InitAsDefaultInstance();
  static LGUpdateMoney1Message* default_instance_;
};
// -------------------------------------------------------------------

class GLUpdateRoundInfoMessage : public ::google::protobuf::Message {
 public:
  GLUpdateRoundInfoMessage();
  virtual ~GLUpdateRoundInfoMessage();
  
  GLUpdateRoundInfoMessage(const GLUpdateRoundInfoMessage& from);
  
  inline GLUpdateRoundInfoMessage& operator=(const GLUpdateRoundInfoMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GLUpdateRoundInfoMessage& default_instance();
  
  void Swap(GLUpdateRoundInfoMessage* other);
  
  // implements Message ----------------------------------------------
  
  GLUpdateRoundInfoMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GLUpdateRoundInfoMessage& from);
  void MergeFrom(const GLUpdateRoundInfoMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .com.game.proto.Protos_Rpc msgID = 1 [default = GLUpdateRoundInfo];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline com::game::proto::Protos_Rpc msgid() const;
  inline void set_msgid(com::game::proto::Protos_Rpc value);
  
  // required double money1 = 2;
  inline bool has_money1() const;
  inline void clear_money1();
  static const int kMoney1FieldNumber = 2;
  inline double money1() const;
  inline void set_money1(double value);
  
  // required double money2 = 3;
  inline bool has_money2() const;
  inline void clear_money2();
  static const int kMoney2FieldNumber = 3;
  inline double money2() const;
  inline void set_money2(double value);
  
  // optional int32 playerNum = 4;
  inline bool has_playernum() const;
  inline void clear_playernum();
  static const int kPlayerNumFieldNumber = 4;
  inline ::google::protobuf::int32 playernum() const;
  inline void set_playernum(::google::protobuf::int32 value);
  
  // optional string gameRecord = 5;
  inline bool has_gamerecord() const;
  inline void clear_gamerecord();
  static const int kGameRecordFieldNumber = 5;
  inline const ::std::string& gamerecord() const;
  inline void set_gamerecord(const ::std::string& value);
  inline void set_gamerecord(const char* value);
  inline void set_gamerecord(const char* value, size_t size);
  inline ::std::string* mutable_gamerecord();
  inline ::std::string* release_gamerecord();
  
  // optional int32 subGameId = 6;
  inline bool has_subgameid() const;
  inline void clear_subgameid();
  static const int kSubGameIdFieldNumber = 6;
  inline ::google::protobuf::int32 subgameid() const;
  inline void set_subgameid(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.game.proto.GLUpdateRoundInfoMessage)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_money1();
  inline void clear_has_money1();
  inline void set_has_money2();
  inline void clear_has_money2();
  inline void set_has_playernum();
  inline void clear_has_playernum();
  inline void set_has_gamerecord();
  inline void clear_has_gamerecord();
  inline void set_has_subgameid();
  inline void clear_has_subgameid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  double money1_;
  int msgid_;
  ::google::protobuf::int32 playernum_;
  double money2_;
  ::std::string* gamerecord_;
  ::google::protobuf::int32 subgameid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_RpcMessage_2eproto();
  friend void protobuf_AssignDesc_RpcMessage_2eproto();
  friend void protobuf_ShutdownFile_RpcMessage_2eproto();
  
  void InitAsDefaultInstance();
  static GLUpdateRoundInfoMessage* default_instance_;
};
// -------------------------------------------------------------------

class GLSystemNoticeMessage : public ::google::protobuf::Message {
 public:
  GLSystemNoticeMessage();
  virtual ~GLSystemNoticeMessage();
  
  GLSystemNoticeMessage(const GLSystemNoticeMessage& from);
  
  inline GLSystemNoticeMessage& operator=(const GLSystemNoticeMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GLSystemNoticeMessage& default_instance();
  
  void Swap(GLSystemNoticeMessage* other);
  
  // implements Message ----------------------------------------------
  
  GLSystemNoticeMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GLSystemNoticeMessage& from);
  void MergeFrom(const GLSystemNoticeMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .com.game.proto.Protos_Rpc msgID = 1 [default = GLSystemNotice];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline com::game::proto::Protos_Rpc msgid() const;
  inline void set_msgid(com::game::proto::Protos_Rpc value);
  
  // optional double winMoney = 2;
  inline bool has_winmoney() const;
  inline void clear_winmoney();
  static const int kWinMoneyFieldNumber = 2;
  inline double winmoney() const;
  inline void set_winmoney(double value);
  
  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional string gameName = 4;
  inline bool has_gamename() const;
  inline void clear_gamename();
  static const int kGameNameFieldNumber = 4;
  inline const ::std::string& gamename() const;
  inline void set_gamename(const ::std::string& value);
  inline void set_gamename(const char* value);
  inline void set_gamename(const char* value, size_t size);
  inline ::std::string* mutable_gamename();
  inline ::std::string* release_gamename();
  
  // optional string mapName = 5;
  inline bool has_mapname() const;
  inline void clear_mapname();
  static const int kMapNameFieldNumber = 5;
  inline const ::std::string& mapname() const;
  inline void set_mapname(const ::std::string& value);
  inline void set_mapname(const char* value);
  inline void set_mapname(const char* value, size_t size);
  inline ::std::string* mutable_mapname();
  inline ::std::string* release_mapname();
  
  // optional string cardType = 6;
  inline bool has_cardtype() const;
  inline void clear_cardtype();
  static const int kCardTypeFieldNumber = 6;
  inline const ::std::string& cardtype() const;
  inline void set_cardtype(const ::std::string& value);
  inline void set_cardtype(const char* value);
  inline void set_cardtype(const char* value, size_t size);
  inline ::std::string* mutable_cardtype();
  inline ::std::string* release_cardtype();
  
  // optional int32 type = 7;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 7;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.game.proto.GLSystemNoticeMessage)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_winmoney();
  inline void clear_has_winmoney();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_gamename();
  inline void clear_has_gamename();
  inline void set_has_mapname();
  inline void clear_has_mapname();
  inline void set_has_cardtype();
  inline void clear_has_cardtype();
  inline void set_has_type();
  inline void clear_has_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  double winmoney_;
  ::std::string* name_;
  ::std::string* gamename_;
  int msgid_;
  ::google::protobuf::int32 type_;
  ::std::string* mapname_;
  ::std::string* cardtype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_RpcMessage_2eproto();
  friend void protobuf_AssignDesc_RpcMessage_2eproto();
  friend void protobuf_ShutdownFile_RpcMessage_2eproto();
  
  void InitAsDefaultInstance();
  static GLSystemNoticeMessage* default_instance_;
};
// -------------------------------------------------------------------

class LGPlayerBetZJHMessage : public ::google::protobuf::Message {
 public:
  LGPlayerBetZJHMessage();
  virtual ~LGPlayerBetZJHMessage();
  
  LGPlayerBetZJHMessage(const LGPlayerBetZJHMessage& from);
  
  inline LGPlayerBetZJHMessage& operator=(const LGPlayerBetZJHMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LGPlayerBetZJHMessage& default_instance();
  
  void Swap(LGPlayerBetZJHMessage* other);
  
  // implements Message ----------------------------------------------
  
  LGPlayerBetZJHMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LGPlayerBetZJHMessage& from);
  void MergeFrom(const LGPlayerBetZJHMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .com.game.proto.Protos_Rpc msgID = 1 [default = LGPlayerBetZJH];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline com::game::proto::Protos_Rpc msgid() const;
  inline void set_msgid(com::game::proto::Protos_Rpc value);
  
  // optional int32 rpcId = 2;
  inline bool has_rpcid() const;
  inline void clear_rpcid();
  static const int kRpcIdFieldNumber = 2;
  inline ::google::protobuf::int32 rpcid() const;
  inline void set_rpcid(::google::protobuf::int32 value);
  
  // required string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required string icon = 4;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 4;
  inline const ::std::string& icon() const;
  inline void set_icon(const ::std::string& value);
  inline void set_icon(const char* value);
  inline void set_icon(const char* value, size_t size);
  inline ::std::string* mutable_icon();
  inline ::std::string* release_icon();
  
  // repeated .com.game.proto.SSC_Bet bets = 5;
  inline int bets_size() const;
  inline void clear_bets();
  static const int kBetsFieldNumber = 5;
  inline const ::com::game::proto::SSC_Bet& bets(int index) const;
  inline ::com::game::proto::SSC_Bet* mutable_bets(int index);
  inline ::com::game::proto::SSC_Bet* add_bets();
  inline const ::google::protobuf::RepeatedPtrField< ::com::game::proto::SSC_Bet >&
      bets() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::game::proto::SSC_Bet >*
      mutable_bets();
  
  // required bool isRobot = 6;
  inline bool has_isrobot() const;
  inline void clear_isrobot();
  static const int kIsRobotFieldNumber = 6;
  inline bool isrobot() const;
  inline void set_isrobot(bool value);
  
  // @@protoc_insertion_point(class_scope:com.game.proto.LGPlayerBetZJHMessage)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_rpcid();
  inline void clear_has_rpcid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_icon();
  inline void clear_has_icon();
  inline void set_has_isrobot();
  inline void clear_has_isrobot();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int msgid_;
  ::google::protobuf::int32 rpcid_;
  ::std::string* name_;
  ::std::string* icon_;
  ::google::protobuf::RepeatedPtrField< ::com::game::proto::SSC_Bet > bets_;
  bool isrobot_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_RpcMessage_2eproto();
  friend void protobuf_AssignDesc_RpcMessage_2eproto();
  friend void protobuf_ShutdownFile_RpcMessage_2eproto();
  
  void InitAsDefaultInstance();
  static LGPlayerBetZJHMessage* default_instance_;
};
// -------------------------------------------------------------------

class GLPlayerBetZJHMessage : public ::google::protobuf::Message {
 public:
  GLPlayerBetZJHMessage();
  virtual ~GLPlayerBetZJHMessage();
  
  GLPlayerBetZJHMessage(const GLPlayerBetZJHMessage& from);
  
  inline GLPlayerBetZJHMessage& operator=(const GLPlayerBetZJHMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GLPlayerBetZJHMessage& default_instance();
  
  void Swap(GLPlayerBetZJHMessage* other);
  
  // implements Message ----------------------------------------------
  
  GLPlayerBetZJHMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GLPlayerBetZJHMessage& from);
  void MergeFrom(const GLPlayerBetZJHMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .com.game.proto.Protos_Rpc msgID = 1 [default = GLPlayerBetZJH];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline com::game::proto::Protos_Rpc msgid() const;
  inline void set_msgid(com::game::proto::Protos_Rpc value);
  
  // optional int32 rpcId = 2;
  inline bool has_rpcid() const;
  inline void clear_rpcid();
  static const int kRpcIdFieldNumber = 2;
  inline ::google::protobuf::int32 rpcid() const;
  inline void set_rpcid(::google::protobuf::int32 value);
  
  // repeated .com.game.proto.SSC_Bet bets = 3;
  inline int bets_size() const;
  inline void clear_bets();
  static const int kBetsFieldNumber = 3;
  inline const ::com::game::proto::SSC_Bet& bets(int index) const;
  inline ::com::game::proto::SSC_Bet* mutable_bets(int index);
  inline ::com::game::proto::SSC_Bet* add_bets();
  inline const ::google::protobuf::RepeatedPtrField< ::com::game::proto::SSC_Bet >&
      bets() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::game::proto::SSC_Bet >*
      mutable_bets();
  
  // optional bool isSucceed = 4;
  inline bool has_issucceed() const;
  inline void clear_issucceed();
  static const int kIsSucceedFieldNumber = 4;
  inline bool issucceed() const;
  inline void set_issucceed(bool value);
  
  // @@protoc_insertion_point(class_scope:com.game.proto.GLPlayerBetZJHMessage)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_rpcid();
  inline void clear_has_rpcid();
  inline void set_has_issucceed();
  inline void clear_has_issucceed();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int msgid_;
  ::google::protobuf::int32 rpcid_;
  ::google::protobuf::RepeatedPtrField< ::com::game::proto::SSC_Bet > bets_;
  bool issucceed_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_RpcMessage_2eproto();
  friend void protobuf_AssignDesc_RpcMessage_2eproto();
  friend void protobuf_ShutdownFile_RpcMessage_2eproto();
  
  void InitAsDefaultInstance();
  static GLPlayerBetZJHMessage* default_instance_;
};
// -------------------------------------------------------------------

class GLSyncSSCZJHMessage : public ::google::protobuf::Message {
 public:
  GLSyncSSCZJHMessage();
  virtual ~GLSyncSSCZJHMessage();
  
  GLSyncSSCZJHMessage(const GLSyncSSCZJHMessage& from);
  
  inline GLSyncSSCZJHMessage& operator=(const GLSyncSSCZJHMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GLSyncSSCZJHMessage& default_instance();
  
  void Swap(GLSyncSSCZJHMessage* other);
  
  // implements Message ----------------------------------------------
  
  GLSyncSSCZJHMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GLSyncSSCZJHMessage& from);
  void MergeFrom(const GLSyncSSCZJHMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .com.game.proto.Protos_Rpc msgID = 1 [default = GLSyncSSCZJH];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline com::game::proto::Protos_Rpc msgid() const;
  inline void set_msgid(com::game::proto::Protos_Rpc value);
  
  // required int32 nextOpenTime = 2;
  inline bool has_nextopentime() const;
  inline void clear_nextopentime();
  static const int kNextOpenTimeFieldNumber = 2;
  inline ::google::protobuf::int32 nextopentime() const;
  inline void set_nextopentime(::google::protobuf::int32 value);
  
  // repeated int32 curResult = 3;
  inline int curresult_size() const;
  inline void clear_curresult();
  static const int kCurResultFieldNumber = 3;
  inline ::google::protobuf::int32 curresult(int index) const;
  inline void set_curresult(int index, ::google::protobuf::int32 value);
  inline void add_curresult(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      curresult() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_curresult();
  
  // optional int32 curResultType = 4;
  inline bool has_curresulttype() const;
  inline void clear_curresulttype();
  static const int kCurResultTypeFieldNumber = 4;
  inline ::google::protobuf::int32 curresulttype() const;
  inline void set_curresulttype(::google::protobuf::int32 value);
  
  // optional .com.game.proto.SSC_Winer preSantiaoWiner = 5;
  inline bool has_presantiaowiner() const;
  inline void clear_presantiaowiner();
  static const int kPreSantiaoWinerFieldNumber = 5;
  inline const ::com::game::proto::SSC_Winer& presantiaowiner() const;
  inline ::com::game::proto::SSC_Winer* mutable_presantiaowiner();
  inline ::com::game::proto::SSC_Winer* release_presantiaowiner();
  
  // optional int32 preSantiaoTime = 6;
  inline bool has_presantiaotime() const;
  inline void clear_presantiaotime();
  static const int kPreSantiaoTimeFieldNumber = 6;
  inline ::google::protobuf::int32 presantiaotime() const;
  inline void set_presantiaotime(::google::protobuf::int32 value);
  
  // repeated .com.game.proto.SSC_Winer preWiners = 7;
  inline int prewiners_size() const;
  inline void clear_prewiners();
  static const int kPreWinersFieldNumber = 7;
  inline const ::com::game::proto::SSC_Winer& prewiners(int index) const;
  inline ::com::game::proto::SSC_Winer* mutable_prewiners(int index);
  inline ::com::game::proto::SSC_Winer* add_prewiners();
  inline const ::google::protobuf::RepeatedPtrField< ::com::game::proto::SSC_Winer >&
      prewiners() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::game::proto::SSC_Winer >*
      mutable_prewiners();
  
  // repeated .com.game.proto.SSC_Winer bigWiners = 8;
  inline int bigwiners_size() const;
  inline void clear_bigwiners();
  static const int kBigWinersFieldNumber = 8;
  inline const ::com::game::proto::SSC_Winer& bigwiners(int index) const;
  inline ::com::game::proto::SSC_Winer* mutable_bigwiners(int index);
  inline ::com::game::proto::SSC_Winer* add_bigwiners();
  inline const ::google::protobuf::RepeatedPtrField< ::com::game::proto::SSC_Winer >&
      bigwiners() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::game::proto::SSC_Winer >*
      mutable_bigwiners();
  
  // repeated int32 history = 9;
  inline int history_size() const;
  inline void clear_history();
  static const int kHistoryFieldNumber = 9;
  inline ::google::protobuf::int32 history(int index) const;
  inline void set_history(int index, ::google::protobuf::int32 value);
  inline void add_history(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      history() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_history();
  
  // repeated .com.game.proto.SSC_Bet curBetALL = 10;
  inline int curbetall_size() const;
  inline void clear_curbetall();
  static const int kCurBetALLFieldNumber = 10;
  inline const ::com::game::proto::SSC_Bet& curbetall(int index) const;
  inline ::com::game::proto::SSC_Bet* mutable_curbetall(int index);
  inline ::com::game::proto::SSC_Bet* add_curbetall();
  inline const ::google::protobuf::RepeatedPtrField< ::com::game::proto::SSC_Bet >&
      curbetall() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::game::proto::SSC_Bet >*
      mutable_curbetall();
  
  // optional int32 sscServer = 11;
  inline bool has_sscserver() const;
  inline void clear_sscserver();
  static const int kSscServerFieldNumber = 11;
  inline ::google::protobuf::int32 sscserver() const;
  inline void set_sscserver(::google::protobuf::int32 value);
  
  // optional int32 ratio = 12;
  inline bool has_ratio() const;
  inline void clear_ratio();
  static const int kRatioFieldNumber = 12;
  inline ::google::protobuf::int32 ratio() const;
  inline void set_ratio(::google::protobuf::int32 value);
  
  // repeated .com.game.proto.SSC_Winer preBeforeBigWiner = 13;
  inline int prebeforebigwiner_size() const;
  inline void clear_prebeforebigwiner();
  static const int kPreBeforeBigWinerFieldNumber = 13;
  inline const ::com::game::proto::SSC_Winer& prebeforebigwiner(int index) const;
  inline ::com::game::proto::SSC_Winer* mutable_prebeforebigwiner(int index);
  inline ::com::game::proto::SSC_Winer* add_prebeforebigwiner();
  inline const ::google::protobuf::RepeatedPtrField< ::com::game::proto::SSC_Winer >&
      prebeforebigwiner() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::game::proto::SSC_Winer >*
      mutable_prebeforebigwiner();
  
  // @@protoc_insertion_point(class_scope:com.game.proto.GLSyncSSCZJHMessage)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_nextopentime();
  inline void clear_has_nextopentime();
  inline void set_has_curresulttype();
  inline void clear_has_curresulttype();
  inline void set_has_presantiaowiner();
  inline void clear_has_presantiaowiner();
  inline void set_has_presantiaotime();
  inline void clear_has_presantiaotime();
  inline void set_has_sscserver();
  inline void clear_has_sscserver();
  inline void set_has_ratio();
  inline void clear_has_ratio();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int msgid_;
  ::google::protobuf::int32 nextopentime_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > curresult_;
  ::com::game::proto::SSC_Winer* presantiaowiner_;
  ::google::protobuf::int32 curresulttype_;
  ::google::protobuf::int32 presantiaotime_;
  ::google::protobuf::RepeatedPtrField< ::com::game::proto::SSC_Winer > prewiners_;
  ::google::protobuf::RepeatedPtrField< ::com::game::proto::SSC_Winer > bigwiners_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > history_;
  ::google::protobuf::RepeatedPtrField< ::com::game::proto::SSC_Bet > curbetall_;
  ::google::protobuf::int32 sscserver_;
  ::google::protobuf::int32 ratio_;
  ::google::protobuf::RepeatedPtrField< ::com::game::proto::SSC_Winer > prebeforebigwiner_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];
  
  friend void  protobuf_AddDesc_RpcMessage_2eproto();
  friend void protobuf_AssignDesc_RpcMessage_2eproto();
  friend void protobuf_ShutdownFile_RpcMessage_2eproto();
  
  void InitAsDefaultInstance();
  static GLSyncSSCZJHMessage* default_instance_;
};
// -------------------------------------------------------------------

class SSC_Winer : public ::google::protobuf::Message {
 public:
  SSC_Winer();
  virtual ~SSC_Winer();
  
  SSC_Winer(const SSC_Winer& from);
  
  inline SSC_Winer& operator=(const SSC_Winer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SSC_Winer& default_instance();
  
  void Swap(SSC_Winer* other);
  
  // implements Message ----------------------------------------------
  
  SSC_Winer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SSC_Winer& from);
  void MergeFrom(const SSC_Winer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required string icon = 2;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 2;
  inline const ::std::string& icon() const;
  inline void set_icon(const ::std::string& value);
  inline void set_icon(const char* value);
  inline void set_icon(const char* value, size_t size);
  inline ::std::string* mutable_icon();
  inline ::std::string* release_icon();
  
  // required int32 winMoney = 3;
  inline bool has_winmoney() const;
  inline void clear_winmoney();
  static const int kWinMoneyFieldNumber = 3;
  inline ::google::protobuf::int32 winmoney() const;
  inline void set_winmoney(::google::protobuf::int32 value);
  
  // optional string winTime = 4;
  inline bool has_wintime() const;
  inline void clear_wintime();
  static const int kWinTimeFieldNumber = 4;
  inline const ::std::string& wintime() const;
  inline void set_wintime(const ::std::string& value);
  inline void set_wintime(const char* value);
  inline void set_wintime(const char* value, size_t size);
  inline ::std::string* mutable_wintime();
  inline ::std::string* release_wintime();
  
  // optional string spcialType = 5;
  inline bool has_spcialtype() const;
  inline void clear_spcialtype();
  static const int kSpcialTypeFieldNumber = 5;
  inline const ::std::string& spcialtype() const;
  inline void set_spcialtype(const ::std::string& value);
  inline void set_spcialtype(const char* value);
  inline void set_spcialtype(const char* value, size_t size);
  inline ::std::string* mutable_spcialtype();
  inline ::std::string* release_spcialtype();
  
  // @@protoc_insertion_point(class_scope:com.game.proto.SSC_Winer)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_icon();
  inline void clear_has_icon();
  inline void set_has_winmoney();
  inline void clear_has_winmoney();
  inline void set_has_wintime();
  inline void clear_has_wintime();
  inline void set_has_spcialtype();
  inline void clear_has_spcialtype();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::std::string* icon_;
  ::std::string* wintime_;
  ::std::string* spcialtype_;
  ::google::protobuf::int32 winmoney_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_RpcMessage_2eproto();
  friend void protobuf_AssignDesc_RpcMessage_2eproto();
  friend void protobuf_ShutdownFile_RpcMessage_2eproto();
  
  void InitAsDefaultInstance();
  static SSC_Winer* default_instance_;
};
// -------------------------------------------------------------------

class SSC_Bet : public ::google::protobuf::Message {
 public:
  SSC_Bet();
  virtual ~SSC_Bet();
  
  SSC_Bet(const SSC_Bet& from);
  
  inline SSC_Bet& operator=(const SSC_Bet& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SSC_Bet& default_instance();
  
  void Swap(SSC_Bet* other);
  
  // implements Message ----------------------------------------------
  
  SSC_Bet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SSC_Bet& from);
  void MergeFrom(const SSC_Bet& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 betIndex = 1;
  inline bool has_betindex() const;
  inline void clear_betindex();
  static const int kBetIndexFieldNumber = 1;
  inline ::google::protobuf::int32 betindex() const;
  inline void set_betindex(::google::protobuf::int32 value);
  
  // required int32 betMoney = 2;
  inline bool has_betmoney() const;
  inline void clear_betmoney();
  static const int kBetMoneyFieldNumber = 2;
  inline ::google::protobuf::int32 betmoney() const;
  inline void set_betmoney(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.game.proto.SSC_Bet)
 private:
  inline void set_has_betindex();
  inline void clear_has_betindex();
  inline void set_has_betmoney();
  inline void clear_has_betmoney();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 betindex_;
  ::google::protobuf::int32 betmoney_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_RpcMessage_2eproto();
  friend void protobuf_AssignDesc_RpcMessage_2eproto();
  friend void protobuf_ShutdownFile_RpcMessage_2eproto();
  
  void InitAsDefaultInstance();
  static SSC_Bet* default_instance_;
};
// -------------------------------------------------------------------

class LGSyncTableDataMessage : public ::google::protobuf::Message {
 public:
  LGSyncTableDataMessage();
  virtual ~LGSyncTableDataMessage();
  
  LGSyncTableDataMessage(const LGSyncTableDataMessage& from);
  
  inline LGSyncTableDataMessage& operator=(const LGSyncTableDataMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LGSyncTableDataMessage& default_instance();
  
  void Swap(LGSyncTableDataMessage* other);
  
  // implements Message ----------------------------------------------
  
  LGSyncTableDataMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LGSyncTableDataMessage& from);
  void MergeFrom(const LGSyncTableDataMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .com.game.proto.Protos_Rpc msgID = 1 [default = LGSyncTableData];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline com::game::proto::Protos_Rpc msgid() const;
  inline void set_msgid(com::game::proto::Protos_Rpc value);
  
  // optional int32 rpcId = 2;
  inline bool has_rpcid() const;
  inline void clear_rpcid();
  static const int kRpcIdFieldNumber = 2;
  inline ::google::protobuf::int32 rpcid() const;
  inline void set_rpcid(::google::protobuf::int32 value);
  
  // required int32 loginId = 3;
  inline bool has_loginid() const;
  inline void clear_loginid();
  static const int kLoginIdFieldNumber = 3;
  inline ::google::protobuf::int32 loginid() const;
  inline void set_loginid(::google::protobuf::int32 value);
  
  // optional string tableJson = 4;
  inline bool has_tablejson() const;
  inline void clear_tablejson();
  static const int kTableJsonFieldNumber = 4;
  inline const ::std::string& tablejson() const;
  inline void set_tablejson(const ::std::string& value);
  inline void set_tablejson(const char* value);
  inline void set_tablejson(const char* value, size_t size);
  inline ::std::string* mutable_tablejson();
  inline ::std::string* release_tablejson();
  
  // @@protoc_insertion_point(class_scope:com.game.proto.LGSyncTableDataMessage)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_rpcid();
  inline void clear_has_rpcid();
  inline void set_has_loginid();
  inline void clear_has_loginid();
  inline void set_has_tablejson();
  inline void clear_has_tablejson();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int msgid_;
  ::google::protobuf::int32 rpcid_;
  ::std::string* tablejson_;
  ::google::protobuf::int32 loginid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_RpcMessage_2eproto();
  friend void protobuf_AssignDesc_RpcMessage_2eproto();
  friend void protobuf_ShutdownFile_RpcMessage_2eproto();
  
  void InitAsDefaultInstance();
  static LGSyncTableDataMessage* default_instance_;
};
// -------------------------------------------------------------------

class LGStopFishServerMessage : public ::google::protobuf::Message {
 public:
  LGStopFishServerMessage();
  virtual ~LGStopFishServerMessage();
  
  LGStopFishServerMessage(const LGStopFishServerMessage& from);
  
  inline LGStopFishServerMessage& operator=(const LGStopFishServerMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LGStopFishServerMessage& default_instance();
  
  void Swap(LGStopFishServerMessage* other);
  
  // implements Message ----------------------------------------------
  
  LGStopFishServerMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LGStopFishServerMessage& from);
  void MergeFrom(const LGStopFishServerMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .com.game.proto.Protos_Rpc msgID = 1 [default = LGStopFishServer];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline com::game::proto::Protos_Rpc msgid() const;
  inline void set_msgid(com::game::proto::Protos_Rpc value);
  
  // optional int32 rpcId = 2;
  inline bool has_rpcid() const;
  inline void clear_rpcid();
  static const int kRpcIdFieldNumber = 2;
  inline ::google::protobuf::int32 rpcid() const;
  inline void set_rpcid(::google::protobuf::int32 value);
  
  // required int64 closeTime = 3;
  inline bool has_closetime() const;
  inline void clear_closetime();
  static const int kCloseTimeFieldNumber = 3;
  inline ::google::protobuf::int64 closetime() const;
  inline void set_closetime(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:com.game.proto.LGStopFishServerMessage)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_rpcid();
  inline void clear_has_rpcid();
  inline void set_has_closetime();
  inline void clear_has_closetime();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int msgid_;
  ::google::protobuf::int32 rpcid_;
  ::google::protobuf::int64 closetime_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_RpcMessage_2eproto();
  friend void protobuf_AssignDesc_RpcMessage_2eproto();
  friend void protobuf_ShutdownFile_RpcMessage_2eproto();
  
  void InitAsDefaultInstance();
  static LGStopFishServerMessage* default_instance_;
};
// -------------------------------------------------------------------

class LGReloadFishTableMessage : public ::google::protobuf::Message {
 public:
  LGReloadFishTableMessage();
  virtual ~LGReloadFishTableMessage();
  
  LGReloadFishTableMessage(const LGReloadFishTableMessage& from);
  
  inline LGReloadFishTableMessage& operator=(const LGReloadFishTableMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LGReloadFishTableMessage& default_instance();
  
  void Swap(LGReloadFishTableMessage* other);
  
  // implements Message ----------------------------------------------
  
  LGReloadFishTableMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LGReloadFishTableMessage& from);
  void MergeFrom(const LGReloadFishTableMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .com.game.proto.Protos_Rpc msgID = 1 [default = LGReloadFishTable];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline com::game::proto::Protos_Rpc msgid() const;
  inline void set_msgid(com::game::proto::Protos_Rpc value);
  
  // optional int32 rpcId = 2;
  inline bool has_rpcid() const;
  inline void clear_rpcid();
  static const int kRpcIdFieldNumber = 2;
  inline ::google::protobuf::int32 rpcid() const;
  inline void set_rpcid(::google::protobuf::int32 value);
  
  // optional string configString = 3;
  inline bool has_configstring() const;
  inline void clear_configstring();
  static const int kConfigStringFieldNumber = 3;
  inline const ::std::string& configstring() const;
  inline void set_configstring(const ::std::string& value);
  inline void set_configstring(const char* value);
  inline void set_configstring(const char* value, size_t size);
  inline ::std::string* mutable_configstring();
  inline ::std::string* release_configstring();
  
  // @@protoc_insertion_point(class_scope:com.game.proto.LGReloadFishTableMessage)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_rpcid();
  inline void clear_has_rpcid();
  inline void set_has_configstring();
  inline void clear_has_configstring();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int msgid_;
  ::google::protobuf::int32 rpcid_;
  ::std::string* configstring_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_RpcMessage_2eproto();
  friend void protobuf_AssignDesc_RpcMessage_2eproto();
  friend void protobuf_ShutdownFile_RpcMessage_2eproto();
  
  void InitAsDefaultInstance();
  static LGReloadFishTableMessage* default_instance_;
};
// -------------------------------------------------------------------

class LGStartFishServerMessage : public ::google::protobuf::Message {
 public:
  LGStartFishServerMessage();
  virtual ~LGStartFishServerMessage();
  
  LGStartFishServerMessage(const LGStartFishServerMessage& from);
  
  inline LGStartFishServerMessage& operator=(const LGStartFishServerMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LGStartFishServerMessage& default_instance();
  
  void Swap(LGStartFishServerMessage* other);
  
  // implements Message ----------------------------------------------
  
  LGStartFishServerMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LGStartFishServerMessage& from);
  void MergeFrom(const LGStartFishServerMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .com.game.proto.Protos_Rpc msgID = 1 [default = LGStartFishServer];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline com::game::proto::Protos_Rpc msgid() const;
  inline void set_msgid(com::game::proto::Protos_Rpc value);
  
  // optional int32 rpcId = 2;
  inline bool has_rpcid() const;
  inline void clear_rpcid();
  static const int kRpcIdFieldNumber = 2;
  inline ::google::protobuf::int32 rpcid() const;
  inline void set_rpcid(::google::protobuf::int32 value);
  
  // required int64 startTime = 3;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStartTimeFieldNumber = 3;
  inline ::google::protobuf::int64 starttime() const;
  inline void set_starttime(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:com.game.proto.LGStartFishServerMessage)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_rpcid();
  inline void clear_has_rpcid();
  inline void set_has_starttime();
  inline void clear_has_starttime();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int msgid_;
  ::google::protobuf::int32 rpcid_;
  ::google::protobuf::int64 starttime_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_RpcMessage_2eproto();
  friend void protobuf_AssignDesc_RpcMessage_2eproto();
  friend void protobuf_ShutdownFile_RpcMessage_2eproto();
  
  void InitAsDefaultInstance();
  static LGStartFishServerMessage* default_instance_;
};
// -------------------------------------------------------------------

class LGMiniGameProcessMessage : public ::google::protobuf::Message {
 public:
  LGMiniGameProcessMessage();
  virtual ~LGMiniGameProcessMessage();
  
  LGMiniGameProcessMessage(const LGMiniGameProcessMessage& from);
  
  inline LGMiniGameProcessMessage& operator=(const LGMiniGameProcessMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LGMiniGameProcessMessage& default_instance();
  
  void Swap(LGMiniGameProcessMessage* other);
  
  // implements Message ----------------------------------------------
  
  LGMiniGameProcessMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LGMiniGameProcessMessage& from);
  void MergeFrom(const LGMiniGameProcessMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .com.game.proto.Protos_Rpc msgID = 1 [default = LGMiniGameProcess];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline com::game::proto::Protos_Rpc msgid() const;
  inline void set_msgid(com::game::proto::Protos_Rpc value);
  
  // required int32 miniGameId = 2;
  inline bool has_minigameid() const;
  inline void clear_minigameid();
  static const int kMiniGameIdFieldNumber = 2;
  inline ::google::protobuf::int32 minigameid() const;
  inline void set_minigameid(::google::protobuf::int32 value);
  
  // optional string miniGameInfos = 3;
  inline bool has_minigameinfos() const;
  inline void clear_minigameinfos();
  static const int kMiniGameInfosFieldNumber = 3;
  inline const ::std::string& minigameinfos() const;
  inline void set_minigameinfos(const ::std::string& value);
  inline void set_minigameinfos(const char* value);
  inline void set_minigameinfos(const char* value, size_t size);
  inline ::std::string* mutable_minigameinfos();
  inline ::std::string* release_minigameinfos();
  
  // optional string otherInfos = 4;
  inline bool has_otherinfos() const;
  inline void clear_otherinfos();
  static const int kOtherInfosFieldNumber = 4;
  inline const ::std::string& otherinfos() const;
  inline void set_otherinfos(const ::std::string& value);
  inline void set_otherinfos(const char* value);
  inline void set_otherinfos(const char* value, size_t size);
  inline ::std::string* mutable_otherinfos();
  inline ::std::string* release_otherinfos();
  
  // @@protoc_insertion_point(class_scope:com.game.proto.LGMiniGameProcessMessage)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_minigameid();
  inline void clear_has_minigameid();
  inline void set_has_minigameinfos();
  inline void clear_has_minigameinfos();
  inline void set_has_otherinfos();
  inline void clear_has_otherinfos();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int msgid_;
  ::google::protobuf::int32 minigameid_;
  ::std::string* minigameinfos_;
  ::std::string* otherinfos_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_RpcMessage_2eproto();
  friend void protobuf_AssignDesc_RpcMessage_2eproto();
  friend void protobuf_ShutdownFile_RpcMessage_2eproto();
  
  void InitAsDefaultInstance();
  static LGMiniGameProcessMessage* default_instance_;
};
// -------------------------------------------------------------------

class GLMiniGameProcessMessage : public ::google::protobuf::Message {
 public:
  GLMiniGameProcessMessage();
  virtual ~GLMiniGameProcessMessage();
  
  GLMiniGameProcessMessage(const GLMiniGameProcessMessage& from);
  
  inline GLMiniGameProcessMessage& operator=(const GLMiniGameProcessMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GLMiniGameProcessMessage& default_instance();
  
  void Swap(GLMiniGameProcessMessage* other);
  
  // implements Message ----------------------------------------------
  
  GLMiniGameProcessMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GLMiniGameProcessMessage& from);
  void MergeFrom(const GLMiniGameProcessMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .com.game.proto.Protos_Rpc msgID = 1 [default = GLMiniGameProcess];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline com::game::proto::Protos_Rpc msgid() const;
  inline void set_msgid(com::game::proto::Protos_Rpc value);
  
  // required int32 miniGameId = 2;
  inline bool has_minigameid() const;
  inline void clear_minigameid();
  static const int kMiniGameIdFieldNumber = 2;
  inline ::google::protobuf::int32 minigameid() const;
  inline void set_minigameid(::google::protobuf::int32 value);
  
  // optional string miniGameInfos = 3;
  inline bool has_minigameinfos() const;
  inline void clear_minigameinfos();
  static const int kMiniGameInfosFieldNumber = 3;
  inline const ::std::string& minigameinfos() const;
  inline void set_minigameinfos(const ::std::string& value);
  inline void set_minigameinfos(const char* value);
  inline void set_minigameinfos(const char* value, size_t size);
  inline ::std::string* mutable_minigameinfos();
  inline ::std::string* release_minigameinfos();
  
  // optional string otherInfos = 4;
  inline bool has_otherinfos() const;
  inline void clear_otherinfos();
  static const int kOtherInfosFieldNumber = 4;
  inline const ::std::string& otherinfos() const;
  inline void set_otherinfos(const ::std::string& value);
  inline void set_otherinfos(const char* value);
  inline void set_otherinfos(const char* value, size_t size);
  inline ::std::string* mutable_otherinfos();
  inline ::std::string* release_otherinfos();
  
  // @@protoc_insertion_point(class_scope:com.game.proto.GLMiniGameProcessMessage)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_minigameid();
  inline void clear_has_minigameid();
  inline void set_has_minigameinfos();
  inline void clear_has_minigameinfos();
  inline void set_has_otherinfos();
  inline void clear_has_otherinfos();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int msgid_;
  ::google::protobuf::int32 minigameid_;
  ::std::string* minigameinfos_;
  ::std::string* otherinfos_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_RpcMessage_2eproto();
  friend void protobuf_AssignDesc_RpcMessage_2eproto();
  friend void protobuf_ShutdownFile_RpcMessage_2eproto();
  
  void InitAsDefaultInstance();
  static GLMiniGameProcessMessage* default_instance_;
};
// -------------------------------------------------------------------

class GLSyncPlayerMoneyMessage : public ::google::protobuf::Message {
 public:
  GLSyncPlayerMoneyMessage();
  virtual ~GLSyncPlayerMoneyMessage();
  
  GLSyncPlayerMoneyMessage(const GLSyncPlayerMoneyMessage& from);
  
  inline GLSyncPlayerMoneyMessage& operator=(const GLSyncPlayerMoneyMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GLSyncPlayerMoneyMessage& default_instance();
  
  void Swap(GLSyncPlayerMoneyMessage* other);
  
  // implements Message ----------------------------------------------
  
  GLSyncPlayerMoneyMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GLSyncPlayerMoneyMessage& from);
  void MergeFrom(const GLSyncPlayerMoneyMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .com.game.proto.Protos_Rpc msgID = 1 [default = GLSyncPlayerMoney];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline com::game::proto::Protos_Rpc msgid() const;
  inline void set_msgid(com::game::proto::Protos_Rpc value);
  
  // optional int32 subGameId = 2;
  inline bool has_subgameid() const;
  inline void clear_subgameid();
  static const int kSubGameIdFieldNumber = 2;
  inline ::google::protobuf::int32 subgameid() const;
  inline void set_subgameid(::google::protobuf::int32 value);
  
  // optional int32 subType = 3;
  inline bool has_subtype() const;
  inline void clear_subtype();
  static const int kSubTypeFieldNumber = 3;
  inline ::google::protobuf::int32 subtype() const;
  inline void set_subtype(::google::protobuf::int32 value);
  
  // optional string mapName = 4;
  inline bool has_mapname() const;
  inline void clear_mapname();
  static const int kMapNameFieldNumber = 4;
  inline const ::std::string& mapname() const;
  inline void set_mapname(const ::std::string& value);
  inline void set_mapname(const char* value);
  inline void set_mapname(const char* value, size_t size);
  inline ::std::string* mutable_mapname();
  inline ::std::string* release_mapname();
  
  // optional string mapLine = 5;
  inline bool has_mapline() const;
  inline void clear_mapline();
  static const int kMapLineFieldNumber = 5;
  inline const ::std::string& mapline() const;
  inline void set_mapline(const ::std::string& value);
  inline void set_mapline(const char* value);
  inline void set_mapline(const char* value, size_t size);
  inline ::std::string* mutable_mapline();
  inline ::std::string* release_mapline();
  
  // optional double money1 = 6;
  inline bool has_money1() const;
  inline void clear_money1();
  static const int kMoney1FieldNumber = 6;
  inline double money1() const;
  inline void set_money1(double value);
  
  // optional double money2 = 7;
  inline bool has_money2() const;
  inline void clear_money2();
  static const int kMoney2FieldNumber = 7;
  inline double money2() const;
  inline void set_money2(double value);
  
  // optional double bankmoney1 = 8;
  inline bool has_bankmoney1() const;
  inline void clear_bankmoney1();
  static const int kBankmoney1FieldNumber = 8;
  inline double bankmoney1() const;
  inline void set_bankmoney1(double value);
  
  // optional double bankmoney2 = 9;
  inline bool has_bankmoney2() const;
  inline void clear_bankmoney2();
  static const int kBankmoney2FieldNumber = 9;
  inline double bankmoney2() const;
  inline void set_bankmoney2(double value);
  
  // optional string others = 10;
  inline bool has_others() const;
  inline void clear_others();
  static const int kOthersFieldNumber = 10;
  inline const ::std::string& others() const;
  inline void set_others(const ::std::string& value);
  inline void set_others(const char* value);
  inline void set_others(const char* value, size_t size);
  inline ::std::string* mutable_others();
  inline ::std::string* release_others();
  
  // @@protoc_insertion_point(class_scope:com.game.proto.GLSyncPlayerMoneyMessage)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_subgameid();
  inline void clear_has_subgameid();
  inline void set_has_subtype();
  inline void clear_has_subtype();
  inline void set_has_mapname();
  inline void clear_has_mapname();
  inline void set_has_mapline();
  inline void clear_has_mapline();
  inline void set_has_money1();
  inline void clear_has_money1();
  inline void set_has_money2();
  inline void clear_has_money2();
  inline void set_has_bankmoney1();
  inline void clear_has_bankmoney1();
  inline void set_has_bankmoney2();
  inline void clear_has_bankmoney2();
  inline void set_has_others();
  inline void clear_has_others();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int msgid_;
  ::google::protobuf::int32 subgameid_;
  ::std::string* mapname_;
  ::std::string* mapline_;
  double money1_;
  double money2_;
  double bankmoney1_;
  double bankmoney2_;
  ::std::string* others_;
  ::google::protobuf::int32 subtype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_RpcMessage_2eproto();
  friend void protobuf_AssignDesc_RpcMessage_2eproto();
  friend void protobuf_ShutdownFile_RpcMessage_2eproto();
  
  void InitAsDefaultInstance();
  static GLSyncPlayerMoneyMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// GLQuitSubFishGameMessage

// optional .com.game.proto.Protos_Rpc msgID = 1 [default = GLQuitSubFishGame];
inline bool GLQuitSubFishGameMessage::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GLQuitSubFishGameMessage::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GLQuitSubFishGameMessage::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GLQuitSubFishGameMessage::clear_msgid() {
  msgid_ = 6214;
  clear_has_msgid();
}
inline com::game::proto::Protos_Rpc GLQuitSubFishGameMessage::msgid() const {
  return static_cast< com::game::proto::Protos_Rpc >(msgid_);
}
inline void GLQuitSubFishGameMessage::set_msgid(com::game::proto::Protos_Rpc value) {
  GOOGLE_DCHECK(com::game::proto::Protos_Rpc_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required double money1 = 2;
inline bool GLQuitSubFishGameMessage::has_money1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GLQuitSubFishGameMessage::set_has_money1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GLQuitSubFishGameMessage::clear_has_money1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GLQuitSubFishGameMessage::clear_money1() {
  money1_ = 0;
  clear_has_money1();
}
inline double GLQuitSubFishGameMessage::money1() const {
  return money1_;
}
inline void GLQuitSubFishGameMessage::set_money1(double value) {
  set_has_money1();
  money1_ = value;
}

// required double money2 = 3;
inline bool GLQuitSubFishGameMessage::has_money2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GLQuitSubFishGameMessage::set_has_money2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GLQuitSubFishGameMessage::clear_has_money2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GLQuitSubFishGameMessage::clear_money2() {
  money2_ = 0;
  clear_has_money2();
}
inline double GLQuitSubFishGameMessage::money2() const {
  return money2_;
}
inline void GLQuitSubFishGameMessage::set_money2(double value) {
  set_has_money2();
  money2_ = value;
}

// optional bool offLine = 4;
inline bool GLQuitSubFishGameMessage::has_offline() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GLQuitSubFishGameMessage::set_has_offline() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GLQuitSubFishGameMessage::clear_has_offline() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GLQuitSubFishGameMessage::clear_offline() {
  offline_ = false;
  clear_has_offline();
}
inline bool GLQuitSubFishGameMessage::offline() const {
  return offline_;
}
inline void GLQuitSubFishGameMessage::set_offline(bool value) {
  set_has_offline();
  offline_ = value;
}

// optional double winMoney1 = 6;
inline bool GLQuitSubFishGameMessage::has_winmoney1() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GLQuitSubFishGameMessage::set_has_winmoney1() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GLQuitSubFishGameMessage::clear_has_winmoney1() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GLQuitSubFishGameMessage::clear_winmoney1() {
  winmoney1_ = 0;
  clear_has_winmoney1();
}
inline double GLQuitSubFishGameMessage::winmoney1() const {
  return winmoney1_;
}
inline void GLQuitSubFishGameMessage::set_winmoney1(double value) {
  set_has_winmoney1();
  winmoney1_ = value;
}

// optional double winMoney2 = 7;
inline bool GLQuitSubFishGameMessage::has_winmoney2() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GLQuitSubFishGameMessage::set_has_winmoney2() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GLQuitSubFishGameMessage::clear_has_winmoney2() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GLQuitSubFishGameMessage::clear_winmoney2() {
  winmoney2_ = 0;
  clear_has_winmoney2();
}
inline double GLQuitSubFishGameMessage::winmoney2() const {
  return winmoney2_;
}
inline void GLQuitSubFishGameMessage::set_winmoney2(double value) {
  set_has_winmoney2();
  winmoney2_ = value;
}

// optional double loseMoney1 = 8;
inline bool GLQuitSubFishGameMessage::has_losemoney1() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GLQuitSubFishGameMessage::set_has_losemoney1() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GLQuitSubFishGameMessage::clear_has_losemoney1() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GLQuitSubFishGameMessage::clear_losemoney1() {
  losemoney1_ = 0;
  clear_has_losemoney1();
}
inline double GLQuitSubFishGameMessage::losemoney1() const {
  return losemoney1_;
}
inline void GLQuitSubFishGameMessage::set_losemoney1(double value) {
  set_has_losemoney1();
  losemoney1_ = value;
}

// optional double loseMoney2 = 9;
inline bool GLQuitSubFishGameMessage::has_losemoney2() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GLQuitSubFishGameMessage::set_has_losemoney2() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GLQuitSubFishGameMessage::clear_has_losemoney2() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GLQuitSubFishGameMessage::clear_losemoney2() {
  losemoney2_ = 0;
  clear_has_losemoney2();
}
inline double GLQuitSubFishGameMessage::losemoney2() const {
  return losemoney2_;
}
inline void GLQuitSubFishGameMessage::set_losemoney2(double value) {
  set_has_losemoney2();
  losemoney2_ = value;
}

// optional int32 playround = 10;
inline bool GLQuitSubFishGameMessage::has_playround() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GLQuitSubFishGameMessage::set_has_playround() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GLQuitSubFishGameMessage::clear_has_playround() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GLQuitSubFishGameMessage::clear_playround() {
  playround_ = 0;
  clear_has_playround();
}
inline ::google::protobuf::int32 GLQuitSubFishGameMessage::playround() const {
  return playround_;
}
inline void GLQuitSubFishGameMessage::set_playround(::google::protobuf::int32 value) {
  set_has_playround();
  playround_ = value;
}

// optional int32 dayWinNum = 11;
inline bool GLQuitSubFishGameMessage::has_daywinnum() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GLQuitSubFishGameMessage::set_has_daywinnum() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GLQuitSubFishGameMessage::clear_has_daywinnum() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GLQuitSubFishGameMessage::clear_daywinnum() {
  daywinnum_ = 0;
  clear_has_daywinnum();
}
inline ::google::protobuf::int32 GLQuitSubFishGameMessage::daywinnum() const {
  return daywinnum_;
}
inline void GLQuitSubFishGameMessage::set_daywinnum(::google::protobuf::int32 value) {
  set_has_daywinnum();
  daywinnum_ = value;
}

// optional int32 dayLoseNum = 12;
inline bool GLQuitSubFishGameMessage::has_daylosenum() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GLQuitSubFishGameMessage::set_has_daylosenum() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GLQuitSubFishGameMessage::clear_has_daylosenum() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GLQuitSubFishGameMessage::clear_daylosenum() {
  daylosenum_ = 0;
  clear_has_daylosenum();
}
inline ::google::protobuf::int32 GLQuitSubFishGameMessage::daylosenum() const {
  return daylosenum_;
}
inline void GLQuitSubFishGameMessage::set_daylosenum(::google::protobuf::int32 value) {
  set_has_daylosenum();
  daylosenum_ = value;
}

// optional int32 mapModelId = 13;
inline bool GLQuitSubFishGameMessage::has_mapmodelid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GLQuitSubFishGameMessage::set_has_mapmodelid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GLQuitSubFishGameMessage::clear_has_mapmodelid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GLQuitSubFishGameMessage::clear_mapmodelid() {
  mapmodelid_ = 0;
  clear_has_mapmodelid();
}
inline ::google::protobuf::int32 GLQuitSubFishGameMessage::mapmodelid() const {
  return mapmodelid_;
}
inline void GLQuitSubFishGameMessage::set_mapmodelid(::google::protobuf::int32 value) {
  set_has_mapmodelid();
  mapmodelid_ = value;
}

// optional int32 continueWinNum = 14;
inline bool GLQuitSubFishGameMessage::has_continuewinnum() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GLQuitSubFishGameMessage::set_has_continuewinnum() {
  _has_bits_[0] |= 0x00001000u;
}
inline void GLQuitSubFishGameMessage::clear_has_continuewinnum() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void GLQuitSubFishGameMessage::clear_continuewinnum() {
  continuewinnum_ = 0;
  clear_has_continuewinnum();
}
inline ::google::protobuf::int32 GLQuitSubFishGameMessage::continuewinnum() const {
  return continuewinnum_;
}
inline void GLQuitSubFishGameMessage::set_continuewinnum(::google::protobuf::int32 value) {
  set_has_continuewinnum();
  continuewinnum_ = value;
}

// optional double gameMaxWinMoney = 15;
inline bool GLQuitSubFishGameMessage::has_gamemaxwinmoney() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void GLQuitSubFishGameMessage::set_has_gamemaxwinmoney() {
  _has_bits_[0] |= 0x00002000u;
}
inline void GLQuitSubFishGameMessage::clear_has_gamemaxwinmoney() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void GLQuitSubFishGameMessage::clear_gamemaxwinmoney() {
  gamemaxwinmoney_ = 0;
  clear_has_gamemaxwinmoney();
}
inline double GLQuitSubFishGameMessage::gamemaxwinmoney() const {
  return gamemaxwinmoney_;
}
inline void GLQuitSubFishGameMessage::set_gamemaxwinmoney(double value) {
  set_has_gamemaxwinmoney();
  gamemaxwinmoney_ = value;
}

// optional int32 charmValue = 16;
inline bool GLQuitSubFishGameMessage::has_charmvalue() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void GLQuitSubFishGameMessage::set_has_charmvalue() {
  _has_bits_[0] |= 0x00004000u;
}
inline void GLQuitSubFishGameMessage::clear_has_charmvalue() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void GLQuitSubFishGameMessage::clear_charmvalue() {
  charmvalue_ = 0;
  clear_has_charmvalue();
}
inline ::google::protobuf::int32 GLQuitSubFishGameMessage::charmvalue() const {
  return charmvalue_;
}
inline void GLQuitSubFishGameMessage::set_charmvalue(::google::protobuf::int32 value) {
  set_has_charmvalue();
  charmvalue_ = value;
}

// optional string others = 17;
inline bool GLQuitSubFishGameMessage::has_others() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void GLQuitSubFishGameMessage::set_has_others() {
  _has_bits_[0] |= 0x00008000u;
}
inline void GLQuitSubFishGameMessage::clear_has_others() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void GLQuitSubFishGameMessage::clear_others() {
  if (others_ != &::google::protobuf::internal::kEmptyString) {
    others_->clear();
  }
  clear_has_others();
}
inline const ::std::string& GLQuitSubFishGameMessage::others() const {
  return *others_;
}
inline void GLQuitSubFishGameMessage::set_others(const ::std::string& value) {
  set_has_others();
  if (others_ == &::google::protobuf::internal::kEmptyString) {
    others_ = new ::std::string;
  }
  others_->assign(value);
}
inline void GLQuitSubFishGameMessage::set_others(const char* value) {
  set_has_others();
  if (others_ == &::google::protobuf::internal::kEmptyString) {
    others_ = new ::std::string;
  }
  others_->assign(value);
}
inline void GLQuitSubFishGameMessage::set_others(const char* value, size_t size) {
  set_has_others();
  if (others_ == &::google::protobuf::internal::kEmptyString) {
    others_ = new ::std::string;
  }
  others_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GLQuitSubFishGameMessage::mutable_others() {
  set_has_others();
  if (others_ == &::google::protobuf::internal::kEmptyString) {
    others_ = new ::std::string;
  }
  return others_;
}
inline ::std::string* GLQuitSubFishGameMessage::release_others() {
  clear_has_others();
  if (others_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = others_;
    others_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string achDataMap = 18;
inline bool GLQuitSubFishGameMessage::has_achdatamap() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void GLQuitSubFishGameMessage::set_has_achdatamap() {
  _has_bits_[0] |= 0x00010000u;
}
inline void GLQuitSubFishGameMessage::clear_has_achdatamap() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void GLQuitSubFishGameMessage::clear_achdatamap() {
  if (achdatamap_ != &::google::protobuf::internal::kEmptyString) {
    achdatamap_->clear();
  }
  clear_has_achdatamap();
}
inline const ::std::string& GLQuitSubFishGameMessage::achdatamap() const {
  return *achdatamap_;
}
inline void GLQuitSubFishGameMessage::set_achdatamap(const ::std::string& value) {
  set_has_achdatamap();
  if (achdatamap_ == &::google::protobuf::internal::kEmptyString) {
    achdatamap_ = new ::std::string;
  }
  achdatamap_->assign(value);
}
inline void GLQuitSubFishGameMessage::set_achdatamap(const char* value) {
  set_has_achdatamap();
  if (achdatamap_ == &::google::protobuf::internal::kEmptyString) {
    achdatamap_ = new ::std::string;
  }
  achdatamap_->assign(value);
}
inline void GLQuitSubFishGameMessage::set_achdatamap(const char* value, size_t size) {
  set_has_achdatamap();
  if (achdatamap_ == &::google::protobuf::internal::kEmptyString) {
    achdatamap_ = new ::std::string;
  }
  achdatamap_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GLQuitSubFishGameMessage::mutable_achdatamap() {
  set_has_achdatamap();
  if (achdatamap_ == &::google::protobuf::internal::kEmptyString) {
    achdatamap_ = new ::std::string;
  }
  return achdatamap_;
}
inline ::std::string* GLQuitSubFishGameMessage::release_achdatamap() {
  clear_has_achdatamap();
  if (achdatamap_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = achdatamap_;
    achdatamap_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string sameTableMap = 19;
inline bool GLQuitSubFishGameMessage::has_sametablemap() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void GLQuitSubFishGameMessage::set_has_sametablemap() {
  _has_bits_[0] |= 0x00020000u;
}
inline void GLQuitSubFishGameMessage::clear_has_sametablemap() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void GLQuitSubFishGameMessage::clear_sametablemap() {
  if (sametablemap_ != &::google::protobuf::internal::kEmptyString) {
    sametablemap_->clear();
  }
  clear_has_sametablemap();
}
inline const ::std::string& GLQuitSubFishGameMessage::sametablemap() const {
  return *sametablemap_;
}
inline void GLQuitSubFishGameMessage::set_sametablemap(const ::std::string& value) {
  set_has_sametablemap();
  if (sametablemap_ == &::google::protobuf::internal::kEmptyString) {
    sametablemap_ = new ::std::string;
  }
  sametablemap_->assign(value);
}
inline void GLQuitSubFishGameMessage::set_sametablemap(const char* value) {
  set_has_sametablemap();
  if (sametablemap_ == &::google::protobuf::internal::kEmptyString) {
    sametablemap_ = new ::std::string;
  }
  sametablemap_->assign(value);
}
inline void GLQuitSubFishGameMessage::set_sametablemap(const char* value, size_t size) {
  set_has_sametablemap();
  if (sametablemap_ == &::google::protobuf::internal::kEmptyString) {
    sametablemap_ = new ::std::string;
  }
  sametablemap_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GLQuitSubFishGameMessage::mutable_sametablemap() {
  set_has_sametablemap();
  if (sametablemap_ == &::google::protobuf::internal::kEmptyString) {
    sametablemap_ = new ::std::string;
  }
  return sametablemap_;
}
inline ::std::string* GLQuitSubFishGameMessage::release_sametablemap() {
  clear_has_sametablemap();
  if (sametablemap_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sametablemap_;
    sametablemap_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional double taxMoney = 20;
inline bool GLQuitSubFishGameMessage::has_taxmoney() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void GLQuitSubFishGameMessage::set_has_taxmoney() {
  _has_bits_[0] |= 0x00040000u;
}
inline void GLQuitSubFishGameMessage::clear_has_taxmoney() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void GLQuitSubFishGameMessage::clear_taxmoney() {
  taxmoney_ = 0;
  clear_has_taxmoney();
}
inline double GLQuitSubFishGameMessage::taxmoney() const {
  return taxmoney_;
}
inline void GLQuitSubFishGameMessage::set_taxmoney(double value) {
  set_has_taxmoney();
  taxmoney_ = value;
}

// -------------------------------------------------------------------

// GLSendMailMessage

// optional .com.game.proto.Protos_Rpc msgID = 1 [default = GLSendMail];
inline bool GLSendMailMessage::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GLSendMailMessage::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GLSendMailMessage::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GLSendMailMessage::clear_msgid() {
  msgid_ = 6304;
  clear_has_msgid();
}
inline com::game::proto::Protos_Rpc GLSendMailMessage::msgid() const {
  return static_cast< com::game::proto::Protos_Rpc >(msgid_);
}
inline void GLSendMailMessage::set_msgid(com::game::proto::Protos_Rpc value) {
  GOOGLE_DCHECK(com::game::proto::Protos_Rpc_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// optional string sendName = 2;
inline bool GLSendMailMessage::has_sendname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GLSendMailMessage::set_has_sendname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GLSendMailMessage::clear_has_sendname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GLSendMailMessage::clear_sendname() {
  if (sendname_ != &::google::protobuf::internal::kEmptyString) {
    sendname_->clear();
  }
  clear_has_sendname();
}
inline const ::std::string& GLSendMailMessage::sendname() const {
  return *sendname_;
}
inline void GLSendMailMessage::set_sendname(const ::std::string& value) {
  set_has_sendname();
  if (sendname_ == &::google::protobuf::internal::kEmptyString) {
    sendname_ = new ::std::string;
  }
  sendname_->assign(value);
}
inline void GLSendMailMessage::set_sendname(const char* value) {
  set_has_sendname();
  if (sendname_ == &::google::protobuf::internal::kEmptyString) {
    sendname_ = new ::std::string;
  }
  sendname_->assign(value);
}
inline void GLSendMailMessage::set_sendname(const char* value, size_t size) {
  set_has_sendname();
  if (sendname_ == &::google::protobuf::internal::kEmptyString) {
    sendname_ = new ::std::string;
  }
  sendname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GLSendMailMessage::mutable_sendname() {
  set_has_sendname();
  if (sendname_ == &::google::protobuf::internal::kEmptyString) {
    sendname_ = new ::std::string;
  }
  return sendname_;
}
inline ::std::string* GLSendMailMessage::release_sendname() {
  clear_has_sendname();
  if (sendname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sendname_;
    sendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 receiverId = 3;
inline bool GLSendMailMessage::has_receiverid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GLSendMailMessage::set_has_receiverid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GLSendMailMessage::clear_has_receiverid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GLSendMailMessage::clear_receiverid() {
  receiverid_ = GOOGLE_LONGLONG(0);
  clear_has_receiverid();
}
inline ::google::protobuf::int64 GLSendMailMessage::receiverid() const {
  return receiverid_;
}
inline void GLSendMailMessage::set_receiverid(::google::protobuf::int64 value) {
  set_has_receiverid();
  receiverid_ = value;
}

// optional string name = 4;
inline bool GLSendMailMessage::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GLSendMailMessage::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GLSendMailMessage::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GLSendMailMessage::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& GLSendMailMessage::name() const {
  return *name_;
}
inline void GLSendMailMessage::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GLSendMailMessage::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GLSendMailMessage::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GLSendMailMessage::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* GLSendMailMessage::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string title = 5;
inline bool GLSendMailMessage::has_title() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GLSendMailMessage::set_has_title() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GLSendMailMessage::clear_has_title() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GLSendMailMessage::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& GLSendMailMessage::title() const {
  return *title_;
}
inline void GLSendMailMessage::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void GLSendMailMessage::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void GLSendMailMessage::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GLSendMailMessage::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* GLSendMailMessage::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string content = 6;
inline bool GLSendMailMessage::has_content() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GLSendMailMessage::set_has_content() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GLSendMailMessage::clear_has_content() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GLSendMailMessage::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& GLSendMailMessage::content() const {
  return *content_;
}
inline void GLSendMailMessage::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void GLSendMailMessage::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void GLSendMailMessage::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GLSendMailMessage::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* GLSendMailMessage::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional double money = 7;
inline bool GLSendMailMessage::has_money() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GLSendMailMessage::set_has_money() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GLSendMailMessage::clear_has_money() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GLSendMailMessage::clear_money() {
  money_ = 0;
  clear_has_money();
}
inline double GLSendMailMessage::money() const {
  return money_;
}
inline void GLSendMailMessage::set_money(double value) {
  set_has_money();
  money_ = value;
}

// optional int32 reason = 8;
inline bool GLSendMailMessage::has_reason() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GLSendMailMessage::set_has_reason() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GLSendMailMessage::clear_has_reason() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GLSendMailMessage::clear_reason() {
  reason_ = 0;
  clear_has_reason();
}
inline ::google::protobuf::int32 GLSendMailMessage::reason() const {
  return reason_;
}
inline void GLSendMailMessage::set_reason(::google::protobuf::int32 value) {
  set_has_reason();
  reason_ = value;
}

// -------------------------------------------------------------------

// LGLoginSubGameMessage

// optional .com.game.proto.Protos_Rpc msgID = 1 [default = LGLoginSubGame];
inline bool LGLoginSubGameMessage::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LGLoginSubGameMessage::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LGLoginSubGameMessage::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LGLoginSubGameMessage::clear_msgid() {
  msgid_ = 6207;
  clear_has_msgid();
}
inline com::game::proto::Protos_Rpc LGLoginSubGameMessage::msgid() const {
  return static_cast< com::game::proto::Protos_Rpc >(msgid_);
}
inline void LGLoginSubGameMessage::set_msgid(com::game::proto::Protos_Rpc value) {
  GOOGLE_DCHECK(com::game::proto::Protos_Rpc_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// optional int32 rpcId = 2;
inline bool LGLoginSubGameMessage::has_rpcid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LGLoginSubGameMessage::set_has_rpcid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LGLoginSubGameMessage::clear_has_rpcid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LGLoginSubGameMessage::clear_rpcid() {
  rpcid_ = 0;
  clear_has_rpcid();
}
inline ::google::protobuf::int32 LGLoginSubGameMessage::rpcid() const {
  return rpcid_;
}
inline void LGLoginSubGameMessage::set_rpcid(::google::protobuf::int32 value) {
  set_has_rpcid();
  rpcid_ = value;
}

// required double money1 = 3;
inline bool LGLoginSubGameMessage::has_money1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LGLoginSubGameMessage::set_has_money1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LGLoginSubGameMessage::clear_has_money1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LGLoginSubGameMessage::clear_money1() {
  money1_ = 0;
  clear_has_money1();
}
inline double LGLoginSubGameMessage::money1() const {
  return money1_;
}
inline void LGLoginSubGameMessage::set_money1(double value) {
  set_has_money1();
  money1_ = value;
}

// required double money2 = 4;
inline bool LGLoginSubGameMessage::has_money2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LGLoginSubGameMessage::set_has_money2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LGLoginSubGameMessage::clear_has_money2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LGLoginSubGameMessage::clear_money2() {
  money2_ = 0;
  clear_has_money2();
}
inline double LGLoginSubGameMessage::money2() const {
  return money2_;
}
inline void LGLoginSubGameMessage::set_money2(double value) {
  set_has_money2();
  money2_ = value;
}

// required string name = 5;
inline bool LGLoginSubGameMessage::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LGLoginSubGameMessage::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LGLoginSubGameMessage::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LGLoginSubGameMessage::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& LGLoginSubGameMessage::name() const {
  return *name_;
}
inline void LGLoginSubGameMessage::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void LGLoginSubGameMessage::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void LGLoginSubGameMessage::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LGLoginSubGameMessage::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* LGLoginSubGameMessage::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string address = 6;
inline bool LGLoginSubGameMessage::has_address() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LGLoginSubGameMessage::set_has_address() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LGLoginSubGameMessage::clear_has_address() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LGLoginSubGameMessage::clear_address() {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    address_->clear();
  }
  clear_has_address();
}
inline const ::std::string& LGLoginSubGameMessage::address() const {
  return *address_;
}
inline void LGLoginSubGameMessage::set_address(const ::std::string& value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void LGLoginSubGameMessage::set_address(const char* value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void LGLoginSubGameMessage::set_address(const char* value, size_t size) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LGLoginSubGameMessage::mutable_address() {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  return address_;
}
inline ::std::string* LGLoginSubGameMessage::release_address() {
  clear_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = address_;
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string icon = 7;
inline bool LGLoginSubGameMessage::has_icon() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LGLoginSubGameMessage::set_has_icon() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LGLoginSubGameMessage::clear_has_icon() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LGLoginSubGameMessage::clear_icon() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    icon_->clear();
  }
  clear_has_icon();
}
inline const ::std::string& LGLoginSubGameMessage::icon() const {
  return *icon_;
}
inline void LGLoginSubGameMessage::set_icon(const ::std::string& value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void LGLoginSubGameMessage::set_icon(const char* value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void LGLoginSubGameMessage::set_icon(const char* value, size_t size) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LGLoginSubGameMessage::mutable_icon() {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  return icon_;
}
inline ::std::string* LGLoginSubGameMessage::release_icon() {
  clear_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = icon_;
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 sex = 8;
inline bool LGLoginSubGameMessage::has_sex() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LGLoginSubGameMessage::set_has_sex() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LGLoginSubGameMessage::clear_has_sex() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LGLoginSubGameMessage::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 LGLoginSubGameMessage::sex() const {
  return sex_;
}
inline void LGLoginSubGameMessage::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// required string fr = 9;
inline bool LGLoginSubGameMessage::has_fr() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LGLoginSubGameMessage::set_has_fr() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LGLoginSubGameMessage::clear_has_fr() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LGLoginSubGameMessage::clear_fr() {
  if (fr_ != &::google::protobuf::internal::kEmptyString) {
    fr_->clear();
  }
  clear_has_fr();
}
inline const ::std::string& LGLoginSubGameMessage::fr() const {
  return *fr_;
}
inline void LGLoginSubGameMessage::set_fr(const ::std::string& value) {
  set_has_fr();
  if (fr_ == &::google::protobuf::internal::kEmptyString) {
    fr_ = new ::std::string;
  }
  fr_->assign(value);
}
inline void LGLoginSubGameMessage::set_fr(const char* value) {
  set_has_fr();
  if (fr_ == &::google::protobuf::internal::kEmptyString) {
    fr_ = new ::std::string;
  }
  fr_->assign(value);
}
inline void LGLoginSubGameMessage::set_fr(const char* value, size_t size) {
  set_has_fr();
  if (fr_ == &::google::protobuf::internal::kEmptyString) {
    fr_ = new ::std::string;
  }
  fr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LGLoginSubGameMessage::mutable_fr() {
  set_has_fr();
  if (fr_ == &::google::protobuf::internal::kEmptyString) {
    fr_ = new ::std::string;
  }
  return fr_;
}
inline ::std::string* LGLoginSubGameMessage::release_fr() {
  clear_has_fr();
  if (fr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fr_;
    fr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string platform = 10;
inline bool LGLoginSubGameMessage::has_platform() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LGLoginSubGameMessage::set_has_platform() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LGLoginSubGameMessage::clear_has_platform() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LGLoginSubGameMessage::clear_platform() {
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    platform_->clear();
  }
  clear_has_platform();
}
inline const ::std::string& LGLoginSubGameMessage::platform() const {
  return *platform_;
}
inline void LGLoginSubGameMessage::set_platform(const ::std::string& value) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  platform_->assign(value);
}
inline void LGLoginSubGameMessage::set_platform(const char* value) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  platform_->assign(value);
}
inline void LGLoginSubGameMessage::set_platform(const char* value, size_t size) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  platform_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LGLoginSubGameMessage::mutable_platform() {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  return platform_;
}
inline ::std::string* LGLoginSubGameMessage::release_platform() {
  clear_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = platform_;
    platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 loginid = 11;
inline bool LGLoginSubGameMessage::has_loginid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LGLoginSubGameMessage::set_has_loginid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LGLoginSubGameMessage::clear_has_loginid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LGLoginSubGameMessage::clear_loginid() {
  loginid_ = 0;
  clear_has_loginid();
}
inline ::google::protobuf::int32 LGLoginSubGameMessage::loginid() const {
  return loginid_;
}
inline void LGLoginSubGameMessage::set_loginid(::google::protobuf::int32 value) {
  set_has_loginid();
  loginid_ = value;
}

// required string loginIp = 12;
inline bool LGLoginSubGameMessage::has_loginip() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LGLoginSubGameMessage::set_has_loginip() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LGLoginSubGameMessage::clear_has_loginip() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LGLoginSubGameMessage::clear_loginip() {
  if (loginip_ != &::google::protobuf::internal::kEmptyString) {
    loginip_->clear();
  }
  clear_has_loginip();
}
inline const ::std::string& LGLoginSubGameMessage::loginip() const {
  return *loginip_;
}
inline void LGLoginSubGameMessage::set_loginip(const ::std::string& value) {
  set_has_loginip();
  if (loginip_ == &::google::protobuf::internal::kEmptyString) {
    loginip_ = new ::std::string;
  }
  loginip_->assign(value);
}
inline void LGLoginSubGameMessage::set_loginip(const char* value) {
  set_has_loginip();
  if (loginip_ == &::google::protobuf::internal::kEmptyString) {
    loginip_ = new ::std::string;
  }
  loginip_->assign(value);
}
inline void LGLoginSubGameMessage::set_loginip(const char* value, size_t size) {
  set_has_loginip();
  if (loginip_ == &::google::protobuf::internal::kEmptyString) {
    loginip_ = new ::std::string;
  }
  loginip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LGLoginSubGameMessage::mutable_loginip() {
  set_has_loginip();
  if (loginip_ == &::google::protobuf::internal::kEmptyString) {
    loginip_ = new ::std::string;
  }
  return loginip_;
}
inline ::std::string* LGLoginSubGameMessage::release_loginip() {
  clear_has_loginip();
  if (loginip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = loginip_;
    loginip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 deleteAt = 13;
inline bool LGLoginSubGameMessage::has_deleteat() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void LGLoginSubGameMessage::set_has_deleteat() {
  _has_bits_[0] |= 0x00001000u;
}
inline void LGLoginSubGameMessage::clear_has_deleteat() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void LGLoginSubGameMessage::clear_deleteat() {
  deleteat_ = 0;
  clear_has_deleteat();
}
inline ::google::protobuf::int32 LGLoginSubGameMessage::deleteat() const {
  return deleteat_;
}
inline void LGLoginSubGameMessage::set_deleteat(::google::protobuf::int32 value) {
  set_has_deleteat();
  deleteat_ = value;
}

// required int32 gmLevel = 14;
inline bool LGLoginSubGameMessage::has_gmlevel() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void LGLoginSubGameMessage::set_has_gmlevel() {
  _has_bits_[0] |= 0x00002000u;
}
inline void LGLoginSubGameMessage::clear_has_gmlevel() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void LGLoginSubGameMessage::clear_gmlevel() {
  gmlevel_ = 0;
  clear_has_gmlevel();
}
inline ::google::protobuf::int32 LGLoginSubGameMessage::gmlevel() const {
  return gmlevel_;
}
inline void LGLoginSubGameMessage::set_gmlevel(::google::protobuf::int32 value) {
  set_has_gmlevel();
  gmlevel_ = value;
}

// required int32 robot = 15;
inline bool LGLoginSubGameMessage::has_robot() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void LGLoginSubGameMessage::set_has_robot() {
  _has_bits_[0] |= 0x00004000u;
}
inline void LGLoginSubGameMessage::clear_has_robot() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void LGLoginSubGameMessage::clear_robot() {
  robot_ = 0;
  clear_has_robot();
}
inline ::google::protobuf::int32 LGLoginSubGameMessage::robot() const {
  return robot_;
}
inline void LGLoginSubGameMessage::set_robot(::google::protobuf::int32 value) {
  set_has_robot();
  robot_ = value;
}

// optional string others = 16;
inline bool LGLoginSubGameMessage::has_others() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void LGLoginSubGameMessage::set_has_others() {
  _has_bits_[0] |= 0x00008000u;
}
inline void LGLoginSubGameMessage::clear_has_others() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void LGLoginSubGameMessage::clear_others() {
  if (others_ != &::google::protobuf::internal::kEmptyString) {
    others_->clear();
  }
  clear_has_others();
}
inline const ::std::string& LGLoginSubGameMessage::others() const {
  return *others_;
}
inline void LGLoginSubGameMessage::set_others(const ::std::string& value) {
  set_has_others();
  if (others_ == &::google::protobuf::internal::kEmptyString) {
    others_ = new ::std::string;
  }
  others_->assign(value);
}
inline void LGLoginSubGameMessage::set_others(const char* value) {
  set_has_others();
  if (others_ == &::google::protobuf::internal::kEmptyString) {
    others_ = new ::std::string;
  }
  others_->assign(value);
}
inline void LGLoginSubGameMessage::set_others(const char* value, size_t size) {
  set_has_others();
  if (others_ == &::google::protobuf::internal::kEmptyString) {
    others_ = new ::std::string;
  }
  others_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LGLoginSubGameMessage::mutable_others() {
  set_has_others();
  if (others_ == &::google::protobuf::internal::kEmptyString) {
    others_ = new ::std::string;
  }
  return others_;
}
inline ::std::string* LGLoginSubGameMessage::release_others() {
  clear_has_others();
  if (others_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = others_;
    others_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 titleIndex = 17;
inline bool LGLoginSubGameMessage::has_titleindex() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void LGLoginSubGameMessage::set_has_titleindex() {
  _has_bits_[0] |= 0x00010000u;
}
inline void LGLoginSubGameMessage::clear_has_titleindex() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void LGLoginSubGameMessage::clear_titleindex() {
  titleindex_ = 0;
  clear_has_titleindex();
}
inline ::google::protobuf::int32 LGLoginSubGameMessage::titleindex() const {
  return titleindex_;
}
inline void LGLoginSubGameMessage::set_titleindex(::google::protobuf::int32 value) {
  set_has_titleindex();
  titleindex_ = value;
}

// required double gameMaxWinMoney = 18;
inline bool LGLoginSubGameMessage::has_gamemaxwinmoney() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void LGLoginSubGameMessage::set_has_gamemaxwinmoney() {
  _has_bits_[0] |= 0x00020000u;
}
inline void LGLoginSubGameMessage::clear_has_gamemaxwinmoney() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void LGLoginSubGameMessage::clear_gamemaxwinmoney() {
  gamemaxwinmoney_ = 0;
  clear_has_gamemaxwinmoney();
}
inline double LGLoginSubGameMessage::gamemaxwinmoney() const {
  return gamemaxwinmoney_;
}
inline void LGLoginSubGameMessage::set_gamemaxwinmoney(double value) {
  set_has_gamemaxwinmoney();
  gamemaxwinmoney_ = value;
}

// required int32 charmValue = 19;
inline bool LGLoginSubGameMessage::has_charmvalue() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void LGLoginSubGameMessage::set_has_charmvalue() {
  _has_bits_[0] |= 0x00040000u;
}
inline void LGLoginSubGameMessage::clear_has_charmvalue() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void LGLoginSubGameMessage::clear_charmvalue() {
  charmvalue_ = 0;
  clear_has_charmvalue();
}
inline ::google::protobuf::int32 LGLoginSubGameMessage::charmvalue() const {
  return charmvalue_;
}
inline void LGLoginSubGameMessage::set_charmvalue(::google::protobuf::int32 value) {
  set_has_charmvalue();
  charmvalue_ = value;
}

// required int32 vip = 20;
inline bool LGLoginSubGameMessage::has_vip() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void LGLoginSubGameMessage::set_has_vip() {
  _has_bits_[0] |= 0x00080000u;
}
inline void LGLoginSubGameMessage::clear_has_vip() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void LGLoginSubGameMessage::clear_vip() {
  vip_ = 0;
  clear_has_vip();
}
inline ::google::protobuf::int32 LGLoginSubGameMessage::vip() const {
  return vip_;
}
inline void LGLoginSubGameMessage::set_vip(::google::protobuf::int32 value) {
  set_has_vip();
  vip_ = value;
}

// required int32 barrageNum = 21;
inline bool LGLoginSubGameMessage::has_barragenum() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void LGLoginSubGameMessage::set_has_barragenum() {
  _has_bits_[0] |= 0x00100000u;
}
inline void LGLoginSubGameMessage::clear_has_barragenum() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void LGLoginSubGameMessage::clear_barragenum() {
  barragenum_ = 0;
  clear_has_barragenum();
}
inline ::google::protobuf::int32 LGLoginSubGameMessage::barragenum() const {
  return barragenum_;
}
inline void LGLoginSubGameMessage::set_barragenum(::google::protobuf::int32 value) {
  set_has_barragenum();
  barragenum_ = value;
}

// required string userName = 22;
inline bool LGLoginSubGameMessage::has_username() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void LGLoginSubGameMessage::set_has_username() {
  _has_bits_[0] |= 0x00200000u;
}
inline void LGLoginSubGameMessage::clear_has_username() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void LGLoginSubGameMessage::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& LGLoginSubGameMessage::username() const {
  return *username_;
}
inline void LGLoginSubGameMessage::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void LGLoginSubGameMessage::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void LGLoginSubGameMessage::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LGLoginSubGameMessage::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* LGLoginSubGameMessage::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required double taxRatio = 23;
inline bool LGLoginSubGameMessage::has_taxratio() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void LGLoginSubGameMessage::set_has_taxratio() {
  _has_bits_[0] |= 0x00400000u;
}
inline void LGLoginSubGameMessage::clear_has_taxratio() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void LGLoginSubGameMessage::clear_taxratio() {
  taxratio_ = 0;
  clear_has_taxratio();
}
inline double LGLoginSubGameMessage::taxratio() const {
  return taxratio_;
}
inline void LGLoginSubGameMessage::set_taxratio(double value) {
  set_has_taxratio();
  taxratio_ = value;
}

// required int32 cardBg = 24;
inline bool LGLoginSubGameMessage::has_cardbg() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void LGLoginSubGameMessage::set_has_cardbg() {
  _has_bits_[0] |= 0x00800000u;
}
inline void LGLoginSubGameMessage::clear_has_cardbg() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void LGLoginSubGameMessage::clear_cardbg() {
  cardbg_ = 0;
  clear_has_cardbg();
}
inline ::google::protobuf::int32 LGLoginSubGameMessage::cardbg() const {
  return cardbg_;
}
inline void LGLoginSubGameMessage::set_cardbg(::google::protobuf::int32 value) {
  set_has_cardbg();
  cardbg_ = value;
}

// required int32 headIcon = 25;
inline bool LGLoginSubGameMessage::has_headicon() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void LGLoginSubGameMessage::set_has_headicon() {
  _has_bits_[0] |= 0x01000000u;
}
inline void LGLoginSubGameMessage::clear_has_headicon() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void LGLoginSubGameMessage::clear_headicon() {
  headicon_ = 0;
  clear_has_headicon();
}
inline ::google::protobuf::int32 LGLoginSubGameMessage::headicon() const {
  return headicon_;
}
inline void LGLoginSubGameMessage::set_headicon(::google::protobuf::int32 value) {
  set_has_headicon();
  headicon_ = value;
}

// required string signature = 26;
inline bool LGLoginSubGameMessage::has_signature() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void LGLoginSubGameMessage::set_has_signature() {
  _has_bits_[0] |= 0x02000000u;
}
inline void LGLoginSubGameMessage::clear_has_signature() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void LGLoginSubGameMessage::clear_signature() {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    signature_->clear();
  }
  clear_has_signature();
}
inline const ::std::string& LGLoginSubGameMessage::signature() const {
  return *signature_;
}
inline void LGLoginSubGameMessage::set_signature(const ::std::string& value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void LGLoginSubGameMessage::set_signature(const char* value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void LGLoginSubGameMessage::set_signature(const char* value, size_t size) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LGLoginSubGameMessage::mutable_signature() {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  return signature_;
}
inline ::std::string* LGLoginSubGameMessage::release_signature() {
  clear_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = signature_;
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string achDataMap = 27;
inline bool LGLoginSubGameMessage::has_achdatamap() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void LGLoginSubGameMessage::set_has_achdatamap() {
  _has_bits_[0] |= 0x04000000u;
}
inline void LGLoginSubGameMessage::clear_has_achdatamap() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void LGLoginSubGameMessage::clear_achdatamap() {
  if (achdatamap_ != &::google::protobuf::internal::kEmptyString) {
    achdatamap_->clear();
  }
  clear_has_achdatamap();
}
inline const ::std::string& LGLoginSubGameMessage::achdatamap() const {
  return *achdatamap_;
}
inline void LGLoginSubGameMessage::set_achdatamap(const ::std::string& value) {
  set_has_achdatamap();
  if (achdatamap_ == &::google::protobuf::internal::kEmptyString) {
    achdatamap_ = new ::std::string;
  }
  achdatamap_->assign(value);
}
inline void LGLoginSubGameMessage::set_achdatamap(const char* value) {
  set_has_achdatamap();
  if (achdatamap_ == &::google::protobuf::internal::kEmptyString) {
    achdatamap_ = new ::std::string;
  }
  achdatamap_->assign(value);
}
inline void LGLoginSubGameMessage::set_achdatamap(const char* value, size_t size) {
  set_has_achdatamap();
  if (achdatamap_ == &::google::protobuf::internal::kEmptyString) {
    achdatamap_ = new ::std::string;
  }
  achdatamap_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LGLoginSubGameMessage::mutable_achdatamap() {
  set_has_achdatamap();
  if (achdatamap_ == &::google::protobuf::internal::kEmptyString) {
    achdatamap_ = new ::std::string;
  }
  return achdatamap_;
}
inline ::std::string* LGLoginSubGameMessage::release_achdatamap() {
  clear_has_achdatamap();
  if (achdatamap_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = achdatamap_;
    achdatamap_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int64 taxFreeCardEndTime = 28;
inline bool LGLoginSubGameMessage::has_taxfreecardendtime() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void LGLoginSubGameMessage::set_has_taxfreecardendtime() {
  _has_bits_[0] |= 0x08000000u;
}
inline void LGLoginSubGameMessage::clear_has_taxfreecardendtime() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void LGLoginSubGameMessage::clear_taxfreecardendtime() {
  taxfreecardendtime_ = GOOGLE_LONGLONG(0);
  clear_has_taxfreecardendtime();
}
inline ::google::protobuf::int64 LGLoginSubGameMessage::taxfreecardendtime() const {
  return taxfreecardendtime_;
}
inline void LGLoginSubGameMessage::set_taxfreecardendtime(::google::protobuf::int64 value) {
  set_has_taxfreecardendtime();
  taxfreecardendtime_ = value;
}

// required double taxFreeCardRate = 29;
inline bool LGLoginSubGameMessage::has_taxfreecardrate() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void LGLoginSubGameMessage::set_has_taxfreecardrate() {
  _has_bits_[0] |= 0x10000000u;
}
inline void LGLoginSubGameMessage::clear_has_taxfreecardrate() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void LGLoginSubGameMessage::clear_taxfreecardrate() {
  taxfreecardrate_ = 0;
  clear_has_taxfreecardrate();
}
inline double LGLoginSubGameMessage::taxfreecardrate() const {
  return taxfreecardrate_;
}
inline void LGLoginSubGameMessage::set_taxfreecardrate(double value) {
  set_has_taxfreecardrate();
  taxfreecardrate_ = value;
}

// optional double bankMoney1 = 30;
inline bool LGLoginSubGameMessage::has_bankmoney1() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void LGLoginSubGameMessage::set_has_bankmoney1() {
  _has_bits_[0] |= 0x20000000u;
}
inline void LGLoginSubGameMessage::clear_has_bankmoney1() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void LGLoginSubGameMessage::clear_bankmoney1() {
  bankmoney1_ = 0;
  clear_has_bankmoney1();
}
inline double LGLoginSubGameMessage::bankmoney1() const {
  return bankmoney1_;
}
inline void LGLoginSubGameMessage::set_bankmoney1(double value) {
  set_has_bankmoney1();
  bankmoney1_ = value;
}

// optional double bankMoney2 = 31;
inline bool LGLoginSubGameMessage::has_bankmoney2() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void LGLoginSubGameMessage::set_has_bankmoney2() {
  _has_bits_[0] |= 0x40000000u;
}
inline void LGLoginSubGameMessage::clear_has_bankmoney2() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void LGLoginSubGameMessage::clear_bankmoney2() {
  bankmoney2_ = 0;
  clear_has_bankmoney2();
}
inline double LGLoginSubGameMessage::bankmoney2() const {
  return bankmoney2_;
}
inline void LGLoginSubGameMessage::set_bankmoney2(double value) {
  set_has_bankmoney2();
  bankmoney2_ = value;
}

// optional double agencyRechargeMoney = 32;
inline bool LGLoginSubGameMessage::has_agencyrechargemoney() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void LGLoginSubGameMessage::set_has_agencyrechargemoney() {
  _has_bits_[0] |= 0x80000000u;
}
inline void LGLoginSubGameMessage::clear_has_agencyrechargemoney() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void LGLoginSubGameMessage::clear_agencyrechargemoney() {
  agencyrechargemoney_ = 0;
  clear_has_agencyrechargemoney();
}
inline double LGLoginSubGameMessage::agencyrechargemoney() const {
  return agencyrechargemoney_;
}
inline void LGLoginSubGameMessage::set_agencyrechargemoney(double value) {
  set_has_agencyrechargemoney();
  agencyrechargemoney_ = value;
}

// optional double officialRechargeMoney = 33;
inline bool LGLoginSubGameMessage::has_officialrechargemoney() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void LGLoginSubGameMessage::set_has_officialrechargemoney() {
  _has_bits_[1] |= 0x00000001u;
}
inline void LGLoginSubGameMessage::clear_has_officialrechargemoney() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void LGLoginSubGameMessage::clear_officialrechargemoney() {
  officialrechargemoney_ = 0;
  clear_has_officialrechargemoney();
}
inline double LGLoginSubGameMessage::officialrechargemoney() const {
  return officialrechargemoney_;
}
inline void LGLoginSubGameMessage::set_officialrechargemoney(double value) {
  set_has_officialrechargemoney();
  officialrechargemoney_ = value;
}

// optional double withdrawMoney = 34;
inline bool LGLoginSubGameMessage::has_withdrawmoney() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void LGLoginSubGameMessage::set_has_withdrawmoney() {
  _has_bits_[1] |= 0x00000002u;
}
inline void LGLoginSubGameMessage::clear_has_withdrawmoney() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void LGLoginSubGameMessage::clear_withdrawmoney() {
  withdrawmoney_ = 0;
  clear_has_withdrawmoney();
}
inline double LGLoginSubGameMessage::withdrawmoney() const {
  return withdrawmoney_;
}
inline void LGLoginSubGameMessage::set_withdrawmoney(double value) {
  set_has_withdrawmoney();
  withdrawmoney_ = value;
}

// optional int64 playGameTime = 35;
inline bool LGLoginSubGameMessage::has_playgametime() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void LGLoginSubGameMessage::set_has_playgametime() {
  _has_bits_[1] |= 0x00000004u;
}
inline void LGLoginSubGameMessage::clear_has_playgametime() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void LGLoginSubGameMessage::clear_playgametime() {
  playgametime_ = GOOGLE_LONGLONG(0);
  clear_has_playgametime();
}
inline ::google::protobuf::int64 LGLoginSubGameMessage::playgametime() const {
  return playgametime_;
}
inline void LGLoginSubGameMessage::set_playgametime(::google::protobuf::int64 value) {
  set_has_playgametime();
  playgametime_ = value;
}

// optional int64 onlineTime = 36;
inline bool LGLoginSubGameMessage::has_onlinetime() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void LGLoginSubGameMessage::set_has_onlinetime() {
  _has_bits_[1] |= 0x00000008u;
}
inline void LGLoginSubGameMessage::clear_has_onlinetime() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void LGLoginSubGameMessage::clear_onlinetime() {
  onlinetime_ = GOOGLE_LONGLONG(0);
  clear_has_onlinetime();
}
inline ::google::protobuf::int64 LGLoginSubGameMessage::onlinetime() const {
  return onlinetime_;
}
inline void LGLoginSubGameMessage::set_onlinetime(::google::protobuf::int64 value) {
  set_has_onlinetime();
  onlinetime_ = value;
}

// optional int32 dayOnlineTime = 37;
inline bool LGLoginSubGameMessage::has_dayonlinetime() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void LGLoginSubGameMessage::set_has_dayonlinetime() {
  _has_bits_[1] |= 0x00000010u;
}
inline void LGLoginSubGameMessage::clear_has_dayonlinetime() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void LGLoginSubGameMessage::clear_dayonlinetime() {
  dayonlinetime_ = 0;
  clear_has_dayonlinetime();
}
inline ::google::protobuf::int32 LGLoginSubGameMessage::dayonlinetime() const {
  return dayonlinetime_;
}
inline void LGLoginSubGameMessage::set_dayonlinetime(::google::protobuf::int32 value) {
  set_has_dayonlinetime();
  dayonlinetime_ = value;
}

// optional int32 ratioValue = 38;
inline bool LGLoginSubGameMessage::has_ratiovalue() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void LGLoginSubGameMessage::set_has_ratiovalue() {
  _has_bits_[1] |= 0x00000020u;
}
inline void LGLoginSubGameMessage::clear_has_ratiovalue() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void LGLoginSubGameMessage::clear_ratiovalue() {
  ratiovalue_ = 0;
  clear_has_ratiovalue();
}
inline ::google::protobuf::int32 LGLoginSubGameMessage::ratiovalue() const {
  return ratiovalue_;
}
inline void LGLoginSubGameMessage::set_ratiovalue(::google::protobuf::int32 value) {
  set_has_ratiovalue();
  ratiovalue_ = value;
}

// -------------------------------------------------------------------

// GLLoginSubGameMessage

// optional .com.game.proto.Protos_Rpc msgID = 1 [default = GLLoginSubGame];
inline bool GLLoginSubGameMessage::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GLLoginSubGameMessage::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GLLoginSubGameMessage::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GLLoginSubGameMessage::clear_msgid() {
  msgid_ = 6208;
  clear_has_msgid();
}
inline com::game::proto::Protos_Rpc GLLoginSubGameMessage::msgid() const {
  return static_cast< com::game::proto::Protos_Rpc >(msgid_);
}
inline void GLLoginSubGameMessage::set_msgid(com::game::proto::Protos_Rpc value) {
  GOOGLE_DCHECK(com::game::proto::Protos_Rpc_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// optional int32 rpcId = 2;
inline bool GLLoginSubGameMessage::has_rpcid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GLLoginSubGameMessage::set_has_rpcid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GLLoginSubGameMessage::clear_has_rpcid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GLLoginSubGameMessage::clear_rpcid() {
  rpcid_ = 0;
  clear_has_rpcid();
}
inline ::google::protobuf::int32 GLLoginSubGameMessage::rpcid() const {
  return rpcid_;
}
inline void GLLoginSubGameMessage::set_rpcid(::google::protobuf::int32 value) {
  set_has_rpcid();
  rpcid_ = value;
}

// optional int32 isReconnect = 3;
inline bool GLLoginSubGameMessage::has_isreconnect() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GLLoginSubGameMessage::set_has_isreconnect() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GLLoginSubGameMessage::clear_has_isreconnect() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GLLoginSubGameMessage::clear_isreconnect() {
  isreconnect_ = 0;
  clear_has_isreconnect();
}
inline ::google::protobuf::int32 GLLoginSubGameMessage::isreconnect() const {
  return isreconnect_;
}
inline void GLLoginSubGameMessage::set_isreconnect(::google::protobuf::int32 value) {
  set_has_isreconnect();
  isreconnect_ = value;
}

// optional bool loginSubGame = 4;
inline bool GLLoginSubGameMessage::has_loginsubgame() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GLLoginSubGameMessage::set_has_loginsubgame() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GLLoginSubGameMessage::clear_has_loginsubgame() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GLLoginSubGameMessage::clear_loginsubgame() {
  loginsubgame_ = false;
  clear_has_loginsubgame();
}
inline bool GLLoginSubGameMessage::loginsubgame() const {
  return loginsubgame_;
}
inline void GLLoginSubGameMessage::set_loginsubgame(bool value) {
  set_has_loginsubgame();
  loginsubgame_ = value;
}

// optional int32 mapModelId = 5;
inline bool GLLoginSubGameMessage::has_mapmodelid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GLLoginSubGameMessage::set_has_mapmodelid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GLLoginSubGameMessage::clear_has_mapmodelid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GLLoginSubGameMessage::clear_mapmodelid() {
  mapmodelid_ = 0;
  clear_has_mapmodelid();
}
inline ::google::protobuf::int32 GLLoginSubGameMessage::mapmodelid() const {
  return mapmodelid_;
}
inline void GLLoginSubGameMessage::set_mapmodelid(::google::protobuf::int32 value) {
  set_has_mapmodelid();
  mapmodelid_ = value;
}

// optional string fishIp = 6;
inline bool GLLoginSubGameMessage::has_fiship() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GLLoginSubGameMessage::set_has_fiship() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GLLoginSubGameMessage::clear_has_fiship() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GLLoginSubGameMessage::clear_fiship() {
  if (fiship_ != &::google::protobuf::internal::kEmptyString) {
    fiship_->clear();
  }
  clear_has_fiship();
}
inline const ::std::string& GLLoginSubGameMessage::fiship() const {
  return *fiship_;
}
inline void GLLoginSubGameMessage::set_fiship(const ::std::string& value) {
  set_has_fiship();
  if (fiship_ == &::google::protobuf::internal::kEmptyString) {
    fiship_ = new ::std::string;
  }
  fiship_->assign(value);
}
inline void GLLoginSubGameMessage::set_fiship(const char* value) {
  set_has_fiship();
  if (fiship_ == &::google::protobuf::internal::kEmptyString) {
    fiship_ = new ::std::string;
  }
  fiship_->assign(value);
}
inline void GLLoginSubGameMessage::set_fiship(const char* value, size_t size) {
  set_has_fiship();
  if (fiship_ == &::google::protobuf::internal::kEmptyString) {
    fiship_ = new ::std::string;
  }
  fiship_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GLLoginSubGameMessage::mutable_fiship() {
  set_has_fiship();
  if (fiship_ == &::google::protobuf::internal::kEmptyString) {
    fiship_ = new ::std::string;
  }
  return fiship_;
}
inline ::std::string* GLLoginSubGameMessage::release_fiship() {
  clear_has_fiship();
  if (fiship_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fiship_;
    fiship_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 fishPort = 7;
inline bool GLLoginSubGameMessage::has_fishport() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GLLoginSubGameMessage::set_has_fishport() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GLLoginSubGameMessage::clear_has_fishport() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GLLoginSubGameMessage::clear_fishport() {
  fishport_ = 0;
  clear_has_fishport();
}
inline ::google::protobuf::int32 GLLoginSubGameMessage::fishport() const {
  return fishport_;
}
inline void GLLoginSubGameMessage::set_fishport(::google::protobuf::int32 value) {
  set_has_fishport();
  fishport_ = value;
}

// -------------------------------------------------------------------

// LGQuitSubGameMessage

// optional .com.game.proto.Protos_Rpc msgID = 1 [default = LGQuitSubGame];
inline bool LGQuitSubGameMessage::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LGQuitSubGameMessage::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LGQuitSubGameMessage::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LGQuitSubGameMessage::clear_msgid() {
  msgid_ = 6209;
  clear_has_msgid();
}
inline com::game::proto::Protos_Rpc LGQuitSubGameMessage::msgid() const {
  return static_cast< com::game::proto::Protos_Rpc >(msgid_);
}
inline void LGQuitSubGameMessage::set_msgid(com::game::proto::Protos_Rpc value) {
  GOOGLE_DCHECK(com::game::proto::Protos_Rpc_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// optional int32 rpcId = 2;
inline bool LGQuitSubGameMessage::has_rpcid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LGQuitSubGameMessage::set_has_rpcid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LGQuitSubGameMessage::clear_has_rpcid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LGQuitSubGameMessage::clear_rpcid() {
  rpcid_ = 0;
  clear_has_rpcid();
}
inline ::google::protobuf::int32 LGQuitSubGameMessage::rpcid() const {
  return rpcid_;
}
inline void LGQuitSubGameMessage::set_rpcid(::google::protobuf::int32 value) {
  set_has_rpcid();
  rpcid_ = value;
}

// optional bool offLine = 3;
inline bool LGQuitSubGameMessage::has_offline() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LGQuitSubGameMessage::set_has_offline() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LGQuitSubGameMessage::clear_has_offline() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LGQuitSubGameMessage::clear_offline() {
  offline_ = false;
  clear_has_offline();
}
inline bool LGQuitSubGameMessage::offline() const {
  return offline_;
}
inline void LGQuitSubGameMessage::set_offline(bool value) {
  set_has_offline();
  offline_ = value;
}

// -------------------------------------------------------------------

// GLQuitSubGameMessage

// optional .com.game.proto.Protos_Rpc msgID = 1 [default = GLQuitSubGame];
inline bool GLQuitSubGameMessage::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GLQuitSubGameMessage::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GLQuitSubGameMessage::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GLQuitSubGameMessage::clear_msgid() {
  msgid_ = 6210;
  clear_has_msgid();
}
inline com::game::proto::Protos_Rpc GLQuitSubGameMessage::msgid() const {
  return static_cast< com::game::proto::Protos_Rpc >(msgid_);
}
inline void GLQuitSubGameMessage::set_msgid(com::game::proto::Protos_Rpc value) {
  GOOGLE_DCHECK(com::game::proto::Protos_Rpc_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// optional int32 rpcId = 2;
inline bool GLQuitSubGameMessage::has_rpcid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GLQuitSubGameMessage::set_has_rpcid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GLQuitSubGameMessage::clear_has_rpcid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GLQuitSubGameMessage::clear_rpcid() {
  rpcid_ = 0;
  clear_has_rpcid();
}
inline ::google::protobuf::int32 GLQuitSubGameMessage::rpcid() const {
  return rpcid_;
}
inline void GLQuitSubGameMessage::set_rpcid(::google::protobuf::int32 value) {
  set_has_rpcid();
  rpcid_ = value;
}

// optional bool quitSubGame = 3;
inline bool GLQuitSubGameMessage::has_quitsubgame() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GLQuitSubGameMessage::set_has_quitsubgame() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GLQuitSubGameMessage::clear_has_quitsubgame() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GLQuitSubGameMessage::clear_quitsubgame() {
  quitsubgame_ = false;
  clear_has_quitsubgame();
}
inline bool GLQuitSubGameMessage::quitsubgame() const {
  return quitsubgame_;
}
inline void GLQuitSubGameMessage::set_quitsubgame(bool value) {
  set_has_quitsubgame();
  quitsubgame_ = value;
}

// optional double money1 = 4;
inline bool GLQuitSubGameMessage::has_money1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GLQuitSubGameMessage::set_has_money1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GLQuitSubGameMessage::clear_has_money1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GLQuitSubGameMessage::clear_money1() {
  money1_ = 0;
  clear_has_money1();
}
inline double GLQuitSubGameMessage::money1() const {
  return money1_;
}
inline void GLQuitSubGameMessage::set_money1(double value) {
  set_has_money1();
  money1_ = value;
}

// optional double money2 = 5;
inline bool GLQuitSubGameMessage::has_money2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GLQuitSubGameMessage::set_has_money2() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GLQuitSubGameMessage::clear_has_money2() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GLQuitSubGameMessage::clear_money2() {
  money2_ = 0;
  clear_has_money2();
}
inline double GLQuitSubGameMessage::money2() const {
  return money2_;
}
inline void GLQuitSubGameMessage::set_money2(double value) {
  set_has_money2();
  money2_ = value;
}

// optional double winMoney1 = 6;
inline bool GLQuitSubGameMessage::has_winmoney1() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GLQuitSubGameMessage::set_has_winmoney1() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GLQuitSubGameMessage::clear_has_winmoney1() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GLQuitSubGameMessage::clear_winmoney1() {
  winmoney1_ = 0;
  clear_has_winmoney1();
}
inline double GLQuitSubGameMessage::winmoney1() const {
  return winmoney1_;
}
inline void GLQuitSubGameMessage::set_winmoney1(double value) {
  set_has_winmoney1();
  winmoney1_ = value;
}

// optional double winMoney2 = 7;
inline bool GLQuitSubGameMessage::has_winmoney2() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GLQuitSubGameMessage::set_has_winmoney2() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GLQuitSubGameMessage::clear_has_winmoney2() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GLQuitSubGameMessage::clear_winmoney2() {
  winmoney2_ = 0;
  clear_has_winmoney2();
}
inline double GLQuitSubGameMessage::winmoney2() const {
  return winmoney2_;
}
inline void GLQuitSubGameMessage::set_winmoney2(double value) {
  set_has_winmoney2();
  winmoney2_ = value;
}

// optional double loseMoney1 = 8;
inline bool GLQuitSubGameMessage::has_losemoney1() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GLQuitSubGameMessage::set_has_losemoney1() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GLQuitSubGameMessage::clear_has_losemoney1() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GLQuitSubGameMessage::clear_losemoney1() {
  losemoney1_ = 0;
  clear_has_losemoney1();
}
inline double GLQuitSubGameMessage::losemoney1() const {
  return losemoney1_;
}
inline void GLQuitSubGameMessage::set_losemoney1(double value) {
  set_has_losemoney1();
  losemoney1_ = value;
}

// optional double loseMoney2 = 9;
inline bool GLQuitSubGameMessage::has_losemoney2() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GLQuitSubGameMessage::set_has_losemoney2() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GLQuitSubGameMessage::clear_has_losemoney2() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GLQuitSubGameMessage::clear_losemoney2() {
  losemoney2_ = 0;
  clear_has_losemoney2();
}
inline double GLQuitSubGameMessage::losemoney2() const {
  return losemoney2_;
}
inline void GLQuitSubGameMessage::set_losemoney2(double value) {
  set_has_losemoney2();
  losemoney2_ = value;
}

// optional int32 playround = 10;
inline bool GLQuitSubGameMessage::has_playround() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GLQuitSubGameMessage::set_has_playround() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GLQuitSubGameMessage::clear_has_playround() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GLQuitSubGameMessage::clear_playround() {
  playround_ = 0;
  clear_has_playround();
}
inline ::google::protobuf::int32 GLQuitSubGameMessage::playround() const {
  return playround_;
}
inline void GLQuitSubGameMessage::set_playround(::google::protobuf::int32 value) {
  set_has_playround();
  playround_ = value;
}

// required int32 dayWinNum = 11;
inline bool GLQuitSubGameMessage::has_daywinnum() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GLQuitSubGameMessage::set_has_daywinnum() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GLQuitSubGameMessage::clear_has_daywinnum() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GLQuitSubGameMessage::clear_daywinnum() {
  daywinnum_ = 0;
  clear_has_daywinnum();
}
inline ::google::protobuf::int32 GLQuitSubGameMessage::daywinnum() const {
  return daywinnum_;
}
inline void GLQuitSubGameMessage::set_daywinnum(::google::protobuf::int32 value) {
  set_has_daywinnum();
  daywinnum_ = value;
}

// required int32 dayLoseNum = 12;
inline bool GLQuitSubGameMessage::has_daylosenum() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GLQuitSubGameMessage::set_has_daylosenum() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GLQuitSubGameMessage::clear_has_daylosenum() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GLQuitSubGameMessage::clear_daylosenum() {
  daylosenum_ = 0;
  clear_has_daylosenum();
}
inline ::google::protobuf::int32 GLQuitSubGameMessage::daylosenum() const {
  return daylosenum_;
}
inline void GLQuitSubGameMessage::set_daylosenum(::google::protobuf::int32 value) {
  set_has_daylosenum();
  daylosenum_ = value;
}

// optional int32 mapModelId = 13;
inline bool GLQuitSubGameMessage::has_mapmodelid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GLQuitSubGameMessage::set_has_mapmodelid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void GLQuitSubGameMessage::clear_has_mapmodelid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void GLQuitSubGameMessage::clear_mapmodelid() {
  mapmodelid_ = 0;
  clear_has_mapmodelid();
}
inline ::google::protobuf::int32 GLQuitSubGameMessage::mapmodelid() const {
  return mapmodelid_;
}
inline void GLQuitSubGameMessage::set_mapmodelid(::google::protobuf::int32 value) {
  set_has_mapmodelid();
  mapmodelid_ = value;
}

// required int32 continueWinNum = 14;
inline bool GLQuitSubGameMessage::has_continuewinnum() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void GLQuitSubGameMessage::set_has_continuewinnum() {
  _has_bits_[0] |= 0x00002000u;
}
inline void GLQuitSubGameMessage::clear_has_continuewinnum() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void GLQuitSubGameMessage::clear_continuewinnum() {
  continuewinnum_ = 0;
  clear_has_continuewinnum();
}
inline ::google::protobuf::int32 GLQuitSubGameMessage::continuewinnum() const {
  return continuewinnum_;
}
inline void GLQuitSubGameMessage::set_continuewinnum(::google::protobuf::int32 value) {
  set_has_continuewinnum();
  continuewinnum_ = value;
}

// required double gameMaxWinMoney = 15;
inline bool GLQuitSubGameMessage::has_gamemaxwinmoney() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void GLQuitSubGameMessage::set_has_gamemaxwinmoney() {
  _has_bits_[0] |= 0x00004000u;
}
inline void GLQuitSubGameMessage::clear_has_gamemaxwinmoney() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void GLQuitSubGameMessage::clear_gamemaxwinmoney() {
  gamemaxwinmoney_ = 0;
  clear_has_gamemaxwinmoney();
}
inline double GLQuitSubGameMessage::gamemaxwinmoney() const {
  return gamemaxwinmoney_;
}
inline void GLQuitSubGameMessage::set_gamemaxwinmoney(double value) {
  set_has_gamemaxwinmoney();
  gamemaxwinmoney_ = value;
}

// required int32 charmValue = 16;
inline bool GLQuitSubGameMessage::has_charmvalue() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void GLQuitSubGameMessage::set_has_charmvalue() {
  _has_bits_[0] |= 0x00008000u;
}
inline void GLQuitSubGameMessage::clear_has_charmvalue() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void GLQuitSubGameMessage::clear_charmvalue() {
  charmvalue_ = 0;
  clear_has_charmvalue();
}
inline ::google::protobuf::int32 GLQuitSubGameMessage::charmvalue() const {
  return charmvalue_;
}
inline void GLQuitSubGameMessage::set_charmvalue(::google::protobuf::int32 value) {
  set_has_charmvalue();
  charmvalue_ = value;
}

// optional string others = 17;
inline bool GLQuitSubGameMessage::has_others() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void GLQuitSubGameMessage::set_has_others() {
  _has_bits_[0] |= 0x00010000u;
}
inline void GLQuitSubGameMessage::clear_has_others() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void GLQuitSubGameMessage::clear_others() {
  if (others_ != &::google::protobuf::internal::kEmptyString) {
    others_->clear();
  }
  clear_has_others();
}
inline const ::std::string& GLQuitSubGameMessage::others() const {
  return *others_;
}
inline void GLQuitSubGameMessage::set_others(const ::std::string& value) {
  set_has_others();
  if (others_ == &::google::protobuf::internal::kEmptyString) {
    others_ = new ::std::string;
  }
  others_->assign(value);
}
inline void GLQuitSubGameMessage::set_others(const char* value) {
  set_has_others();
  if (others_ == &::google::protobuf::internal::kEmptyString) {
    others_ = new ::std::string;
  }
  others_->assign(value);
}
inline void GLQuitSubGameMessage::set_others(const char* value, size_t size) {
  set_has_others();
  if (others_ == &::google::protobuf::internal::kEmptyString) {
    others_ = new ::std::string;
  }
  others_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GLQuitSubGameMessage::mutable_others() {
  set_has_others();
  if (others_ == &::google::protobuf::internal::kEmptyString) {
    others_ = new ::std::string;
  }
  return others_;
}
inline ::std::string* GLQuitSubGameMessage::release_others() {
  clear_has_others();
  if (others_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = others_;
    others_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string achDataMap = 18;
inline bool GLQuitSubGameMessage::has_achdatamap() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void GLQuitSubGameMessage::set_has_achdatamap() {
  _has_bits_[0] |= 0x00020000u;
}
inline void GLQuitSubGameMessage::clear_has_achdatamap() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void GLQuitSubGameMessage::clear_achdatamap() {
  if (achdatamap_ != &::google::protobuf::internal::kEmptyString) {
    achdatamap_->clear();
  }
  clear_has_achdatamap();
}
inline const ::std::string& GLQuitSubGameMessage::achdatamap() const {
  return *achdatamap_;
}
inline void GLQuitSubGameMessage::set_achdatamap(const ::std::string& value) {
  set_has_achdatamap();
  if (achdatamap_ == &::google::protobuf::internal::kEmptyString) {
    achdatamap_ = new ::std::string;
  }
  achdatamap_->assign(value);
}
inline void GLQuitSubGameMessage::set_achdatamap(const char* value) {
  set_has_achdatamap();
  if (achdatamap_ == &::google::protobuf::internal::kEmptyString) {
    achdatamap_ = new ::std::string;
  }
  achdatamap_->assign(value);
}
inline void GLQuitSubGameMessage::set_achdatamap(const char* value, size_t size) {
  set_has_achdatamap();
  if (achdatamap_ == &::google::protobuf::internal::kEmptyString) {
    achdatamap_ = new ::std::string;
  }
  achdatamap_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GLQuitSubGameMessage::mutable_achdatamap() {
  set_has_achdatamap();
  if (achdatamap_ == &::google::protobuf::internal::kEmptyString) {
    achdatamap_ = new ::std::string;
  }
  return achdatamap_;
}
inline ::std::string* GLQuitSubGameMessage::release_achdatamap() {
  clear_has_achdatamap();
  if (achdatamap_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = achdatamap_;
    achdatamap_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string sameTableMap = 19;
inline bool GLQuitSubGameMessage::has_sametablemap() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void GLQuitSubGameMessage::set_has_sametablemap() {
  _has_bits_[0] |= 0x00040000u;
}
inline void GLQuitSubGameMessage::clear_has_sametablemap() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void GLQuitSubGameMessage::clear_sametablemap() {
  if (sametablemap_ != &::google::protobuf::internal::kEmptyString) {
    sametablemap_->clear();
  }
  clear_has_sametablemap();
}
inline const ::std::string& GLQuitSubGameMessage::sametablemap() const {
  return *sametablemap_;
}
inline void GLQuitSubGameMessage::set_sametablemap(const ::std::string& value) {
  set_has_sametablemap();
  if (sametablemap_ == &::google::protobuf::internal::kEmptyString) {
    sametablemap_ = new ::std::string;
  }
  sametablemap_->assign(value);
}
inline void GLQuitSubGameMessage::set_sametablemap(const char* value) {
  set_has_sametablemap();
  if (sametablemap_ == &::google::protobuf::internal::kEmptyString) {
    sametablemap_ = new ::std::string;
  }
  sametablemap_->assign(value);
}
inline void GLQuitSubGameMessage::set_sametablemap(const char* value, size_t size) {
  set_has_sametablemap();
  if (sametablemap_ == &::google::protobuf::internal::kEmptyString) {
    sametablemap_ = new ::std::string;
  }
  sametablemap_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GLQuitSubGameMessage::mutable_sametablemap() {
  set_has_sametablemap();
  if (sametablemap_ == &::google::protobuf::internal::kEmptyString) {
    sametablemap_ = new ::std::string;
  }
  return sametablemap_;
}
inline ::std::string* GLQuitSubGameMessage::release_sametablemap() {
  clear_has_sametablemap();
  if (sametablemap_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sametablemap_;
    sametablemap_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional double taxMoney = 20;
inline bool GLQuitSubGameMessage::has_taxmoney() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void GLQuitSubGameMessage::set_has_taxmoney() {
  _has_bits_[0] |= 0x00080000u;
}
inline void GLQuitSubGameMessage::clear_has_taxmoney() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void GLQuitSubGameMessage::clear_taxmoney() {
  taxmoney_ = 0;
  clear_has_taxmoney();
}
inline double GLQuitSubGameMessage::taxmoney() const {
  return taxmoney_;
}
inline void GLQuitSubGameMessage::set_taxmoney(double value) {
  set_has_taxmoney();
  taxmoney_ = value;
}

// optional int32 subGameId = 21;
inline bool GLQuitSubGameMessage::has_subgameid() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void GLQuitSubGameMessage::set_has_subgameid() {
  _has_bits_[0] |= 0x00100000u;
}
inline void GLQuitSubGameMessage::clear_has_subgameid() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void GLQuitSubGameMessage::clear_subgameid() {
  subgameid_ = 0;
  clear_has_subgameid();
}
inline ::google::protobuf::int32 GLQuitSubGameMessage::subgameid() const {
  return subgameid_;
}
inline void GLQuitSubGameMessage::set_subgameid(::google::protobuf::int32 value) {
  set_has_subgameid();
  subgameid_ = value;
}

// -------------------------------------------------------------------

// LGUpdateMoney1Message

// optional .com.game.proto.Protos_Rpc msgID = 1 [default = LGUpdateMoney1];
inline bool LGUpdateMoney1Message::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LGUpdateMoney1Message::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LGUpdateMoney1Message::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LGUpdateMoney1Message::clear_msgid() {
  msgid_ = 6211;
  clear_has_msgid();
}
inline com::game::proto::Protos_Rpc LGUpdateMoney1Message::msgid() const {
  return static_cast< com::game::proto::Protos_Rpc >(msgid_);
}
inline void LGUpdateMoney1Message::set_msgid(com::game::proto::Protos_Rpc value) {
  GOOGLE_DCHECK(com::game::proto::Protos_Rpc_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required double money1 = 2;
inline bool LGUpdateMoney1Message::has_money1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LGUpdateMoney1Message::set_has_money1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LGUpdateMoney1Message::clear_has_money1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LGUpdateMoney1Message::clear_money1() {
  money1_ = 0;
  clear_has_money1();
}
inline double LGUpdateMoney1Message::money1() const {
  return money1_;
}
inline void LGUpdateMoney1Message::set_money1(double value) {
  set_has_money1();
  money1_ = value;
}

// required double money2 = 3;
inline bool LGUpdateMoney1Message::has_money2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LGUpdateMoney1Message::set_has_money2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LGUpdateMoney1Message::clear_has_money2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LGUpdateMoney1Message::clear_money2() {
  money2_ = 0;
  clear_has_money2();
}
inline double LGUpdateMoney1Message::money2() const {
  return money2_;
}
inline void LGUpdateMoney1Message::set_money2(double value) {
  set_has_money2();
  money2_ = value;
}

// required int32 reason = 4;
inline bool LGUpdateMoney1Message::has_reason() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LGUpdateMoney1Message::set_has_reason() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LGUpdateMoney1Message::clear_has_reason() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LGUpdateMoney1Message::clear_reason() {
  reason_ = 0;
  clear_has_reason();
}
inline ::google::protobuf::int32 LGUpdateMoney1Message::reason() const {
  return reason_;
}
inline void LGUpdateMoney1Message::set_reason(::google::protobuf::int32 value) {
  set_has_reason();
  reason_ = value;
}

// -------------------------------------------------------------------

// GLUpdateRoundInfoMessage

// optional .com.game.proto.Protos_Rpc msgID = 1 [default = GLUpdateRoundInfo];
inline bool GLUpdateRoundInfoMessage::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GLUpdateRoundInfoMessage::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GLUpdateRoundInfoMessage::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GLUpdateRoundInfoMessage::clear_msgid() {
  msgid_ = 6212;
  clear_has_msgid();
}
inline com::game::proto::Protos_Rpc GLUpdateRoundInfoMessage::msgid() const {
  return static_cast< com::game::proto::Protos_Rpc >(msgid_);
}
inline void GLUpdateRoundInfoMessage::set_msgid(com::game::proto::Protos_Rpc value) {
  GOOGLE_DCHECK(com::game::proto::Protos_Rpc_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required double money1 = 2;
inline bool GLUpdateRoundInfoMessage::has_money1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GLUpdateRoundInfoMessage::set_has_money1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GLUpdateRoundInfoMessage::clear_has_money1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GLUpdateRoundInfoMessage::clear_money1() {
  money1_ = 0;
  clear_has_money1();
}
inline double GLUpdateRoundInfoMessage::money1() const {
  return money1_;
}
inline void GLUpdateRoundInfoMessage::set_money1(double value) {
  set_has_money1();
  money1_ = value;
}

// required double money2 = 3;
inline bool GLUpdateRoundInfoMessage::has_money2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GLUpdateRoundInfoMessage::set_has_money2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GLUpdateRoundInfoMessage::clear_has_money2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GLUpdateRoundInfoMessage::clear_money2() {
  money2_ = 0;
  clear_has_money2();
}
inline double GLUpdateRoundInfoMessage::money2() const {
  return money2_;
}
inline void GLUpdateRoundInfoMessage::set_money2(double value) {
  set_has_money2();
  money2_ = value;
}

// optional int32 playerNum = 4;
inline bool GLUpdateRoundInfoMessage::has_playernum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GLUpdateRoundInfoMessage::set_has_playernum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GLUpdateRoundInfoMessage::clear_has_playernum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GLUpdateRoundInfoMessage::clear_playernum() {
  playernum_ = 0;
  clear_has_playernum();
}
inline ::google::protobuf::int32 GLUpdateRoundInfoMessage::playernum() const {
  return playernum_;
}
inline void GLUpdateRoundInfoMessage::set_playernum(::google::protobuf::int32 value) {
  set_has_playernum();
  playernum_ = value;
}

// optional string gameRecord = 5;
inline bool GLUpdateRoundInfoMessage::has_gamerecord() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GLUpdateRoundInfoMessage::set_has_gamerecord() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GLUpdateRoundInfoMessage::clear_has_gamerecord() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GLUpdateRoundInfoMessage::clear_gamerecord() {
  if (gamerecord_ != &::google::protobuf::internal::kEmptyString) {
    gamerecord_->clear();
  }
  clear_has_gamerecord();
}
inline const ::std::string& GLUpdateRoundInfoMessage::gamerecord() const {
  return *gamerecord_;
}
inline void GLUpdateRoundInfoMessage::set_gamerecord(const ::std::string& value) {
  set_has_gamerecord();
  if (gamerecord_ == &::google::protobuf::internal::kEmptyString) {
    gamerecord_ = new ::std::string;
  }
  gamerecord_->assign(value);
}
inline void GLUpdateRoundInfoMessage::set_gamerecord(const char* value) {
  set_has_gamerecord();
  if (gamerecord_ == &::google::protobuf::internal::kEmptyString) {
    gamerecord_ = new ::std::string;
  }
  gamerecord_->assign(value);
}
inline void GLUpdateRoundInfoMessage::set_gamerecord(const char* value, size_t size) {
  set_has_gamerecord();
  if (gamerecord_ == &::google::protobuf::internal::kEmptyString) {
    gamerecord_ = new ::std::string;
  }
  gamerecord_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GLUpdateRoundInfoMessage::mutable_gamerecord() {
  set_has_gamerecord();
  if (gamerecord_ == &::google::protobuf::internal::kEmptyString) {
    gamerecord_ = new ::std::string;
  }
  return gamerecord_;
}
inline ::std::string* GLUpdateRoundInfoMessage::release_gamerecord() {
  clear_has_gamerecord();
  if (gamerecord_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gamerecord_;
    gamerecord_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 subGameId = 6;
inline bool GLUpdateRoundInfoMessage::has_subgameid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GLUpdateRoundInfoMessage::set_has_subgameid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GLUpdateRoundInfoMessage::clear_has_subgameid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GLUpdateRoundInfoMessage::clear_subgameid() {
  subgameid_ = 0;
  clear_has_subgameid();
}
inline ::google::protobuf::int32 GLUpdateRoundInfoMessage::subgameid() const {
  return subgameid_;
}
inline void GLUpdateRoundInfoMessage::set_subgameid(::google::protobuf::int32 value) {
  set_has_subgameid();
  subgameid_ = value;
}

// -------------------------------------------------------------------

// GLSystemNoticeMessage

// optional .com.game.proto.Protos_Rpc msgID = 1 [default = GLSystemNotice];
inline bool GLSystemNoticeMessage::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GLSystemNoticeMessage::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GLSystemNoticeMessage::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GLSystemNoticeMessage::clear_msgid() {
  msgid_ = 6213;
  clear_has_msgid();
}
inline com::game::proto::Protos_Rpc GLSystemNoticeMessage::msgid() const {
  return static_cast< com::game::proto::Protos_Rpc >(msgid_);
}
inline void GLSystemNoticeMessage::set_msgid(com::game::proto::Protos_Rpc value) {
  GOOGLE_DCHECK(com::game::proto::Protos_Rpc_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// optional double winMoney = 2;
inline bool GLSystemNoticeMessage::has_winmoney() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GLSystemNoticeMessage::set_has_winmoney() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GLSystemNoticeMessage::clear_has_winmoney() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GLSystemNoticeMessage::clear_winmoney() {
  winmoney_ = 0;
  clear_has_winmoney();
}
inline double GLSystemNoticeMessage::winmoney() const {
  return winmoney_;
}
inline void GLSystemNoticeMessage::set_winmoney(double value) {
  set_has_winmoney();
  winmoney_ = value;
}

// optional string name = 3;
inline bool GLSystemNoticeMessage::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GLSystemNoticeMessage::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GLSystemNoticeMessage::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GLSystemNoticeMessage::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& GLSystemNoticeMessage::name() const {
  return *name_;
}
inline void GLSystemNoticeMessage::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GLSystemNoticeMessage::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GLSystemNoticeMessage::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GLSystemNoticeMessage::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* GLSystemNoticeMessage::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string gameName = 4;
inline bool GLSystemNoticeMessage::has_gamename() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GLSystemNoticeMessage::set_has_gamename() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GLSystemNoticeMessage::clear_has_gamename() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GLSystemNoticeMessage::clear_gamename() {
  if (gamename_ != &::google::protobuf::internal::kEmptyString) {
    gamename_->clear();
  }
  clear_has_gamename();
}
inline const ::std::string& GLSystemNoticeMessage::gamename() const {
  return *gamename_;
}
inline void GLSystemNoticeMessage::set_gamename(const ::std::string& value) {
  set_has_gamename();
  if (gamename_ == &::google::protobuf::internal::kEmptyString) {
    gamename_ = new ::std::string;
  }
  gamename_->assign(value);
}
inline void GLSystemNoticeMessage::set_gamename(const char* value) {
  set_has_gamename();
  if (gamename_ == &::google::protobuf::internal::kEmptyString) {
    gamename_ = new ::std::string;
  }
  gamename_->assign(value);
}
inline void GLSystemNoticeMessage::set_gamename(const char* value, size_t size) {
  set_has_gamename();
  if (gamename_ == &::google::protobuf::internal::kEmptyString) {
    gamename_ = new ::std::string;
  }
  gamename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GLSystemNoticeMessage::mutable_gamename() {
  set_has_gamename();
  if (gamename_ == &::google::protobuf::internal::kEmptyString) {
    gamename_ = new ::std::string;
  }
  return gamename_;
}
inline ::std::string* GLSystemNoticeMessage::release_gamename() {
  clear_has_gamename();
  if (gamename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gamename_;
    gamename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string mapName = 5;
inline bool GLSystemNoticeMessage::has_mapname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GLSystemNoticeMessage::set_has_mapname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GLSystemNoticeMessage::clear_has_mapname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GLSystemNoticeMessage::clear_mapname() {
  if (mapname_ != &::google::protobuf::internal::kEmptyString) {
    mapname_->clear();
  }
  clear_has_mapname();
}
inline const ::std::string& GLSystemNoticeMessage::mapname() const {
  return *mapname_;
}
inline void GLSystemNoticeMessage::set_mapname(const ::std::string& value) {
  set_has_mapname();
  if (mapname_ == &::google::protobuf::internal::kEmptyString) {
    mapname_ = new ::std::string;
  }
  mapname_->assign(value);
}
inline void GLSystemNoticeMessage::set_mapname(const char* value) {
  set_has_mapname();
  if (mapname_ == &::google::protobuf::internal::kEmptyString) {
    mapname_ = new ::std::string;
  }
  mapname_->assign(value);
}
inline void GLSystemNoticeMessage::set_mapname(const char* value, size_t size) {
  set_has_mapname();
  if (mapname_ == &::google::protobuf::internal::kEmptyString) {
    mapname_ = new ::std::string;
  }
  mapname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GLSystemNoticeMessage::mutable_mapname() {
  set_has_mapname();
  if (mapname_ == &::google::protobuf::internal::kEmptyString) {
    mapname_ = new ::std::string;
  }
  return mapname_;
}
inline ::std::string* GLSystemNoticeMessage::release_mapname() {
  clear_has_mapname();
  if (mapname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mapname_;
    mapname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string cardType = 6;
inline bool GLSystemNoticeMessage::has_cardtype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GLSystemNoticeMessage::set_has_cardtype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GLSystemNoticeMessage::clear_has_cardtype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GLSystemNoticeMessage::clear_cardtype() {
  if (cardtype_ != &::google::protobuf::internal::kEmptyString) {
    cardtype_->clear();
  }
  clear_has_cardtype();
}
inline const ::std::string& GLSystemNoticeMessage::cardtype() const {
  return *cardtype_;
}
inline void GLSystemNoticeMessage::set_cardtype(const ::std::string& value) {
  set_has_cardtype();
  if (cardtype_ == &::google::protobuf::internal::kEmptyString) {
    cardtype_ = new ::std::string;
  }
  cardtype_->assign(value);
}
inline void GLSystemNoticeMessage::set_cardtype(const char* value) {
  set_has_cardtype();
  if (cardtype_ == &::google::protobuf::internal::kEmptyString) {
    cardtype_ = new ::std::string;
  }
  cardtype_->assign(value);
}
inline void GLSystemNoticeMessage::set_cardtype(const char* value, size_t size) {
  set_has_cardtype();
  if (cardtype_ == &::google::protobuf::internal::kEmptyString) {
    cardtype_ = new ::std::string;
  }
  cardtype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GLSystemNoticeMessage::mutable_cardtype() {
  set_has_cardtype();
  if (cardtype_ == &::google::protobuf::internal::kEmptyString) {
    cardtype_ = new ::std::string;
  }
  return cardtype_;
}
inline ::std::string* GLSystemNoticeMessage::release_cardtype() {
  clear_has_cardtype();
  if (cardtype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cardtype_;
    cardtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 type = 7;
inline bool GLSystemNoticeMessage::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GLSystemNoticeMessage::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GLSystemNoticeMessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GLSystemNoticeMessage::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 GLSystemNoticeMessage::type() const {
  return type_;
}
inline void GLSystemNoticeMessage::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// LGPlayerBetZJHMessage

// optional .com.game.proto.Protos_Rpc msgID = 1 [default = LGPlayerBetZJH];
inline bool LGPlayerBetZJHMessage::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LGPlayerBetZJHMessage::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LGPlayerBetZJHMessage::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LGPlayerBetZJHMessage::clear_msgid() {
  msgid_ = 6300;
  clear_has_msgid();
}
inline com::game::proto::Protos_Rpc LGPlayerBetZJHMessage::msgid() const {
  return static_cast< com::game::proto::Protos_Rpc >(msgid_);
}
inline void LGPlayerBetZJHMessage::set_msgid(com::game::proto::Protos_Rpc value) {
  GOOGLE_DCHECK(com::game::proto::Protos_Rpc_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// optional int32 rpcId = 2;
inline bool LGPlayerBetZJHMessage::has_rpcid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LGPlayerBetZJHMessage::set_has_rpcid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LGPlayerBetZJHMessage::clear_has_rpcid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LGPlayerBetZJHMessage::clear_rpcid() {
  rpcid_ = 0;
  clear_has_rpcid();
}
inline ::google::protobuf::int32 LGPlayerBetZJHMessage::rpcid() const {
  return rpcid_;
}
inline void LGPlayerBetZJHMessage::set_rpcid(::google::protobuf::int32 value) {
  set_has_rpcid();
  rpcid_ = value;
}

// required string name = 3;
inline bool LGPlayerBetZJHMessage::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LGPlayerBetZJHMessage::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LGPlayerBetZJHMessage::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LGPlayerBetZJHMessage::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& LGPlayerBetZJHMessage::name() const {
  return *name_;
}
inline void LGPlayerBetZJHMessage::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void LGPlayerBetZJHMessage::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void LGPlayerBetZJHMessage::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LGPlayerBetZJHMessage::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* LGPlayerBetZJHMessage::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string icon = 4;
inline bool LGPlayerBetZJHMessage::has_icon() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LGPlayerBetZJHMessage::set_has_icon() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LGPlayerBetZJHMessage::clear_has_icon() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LGPlayerBetZJHMessage::clear_icon() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    icon_->clear();
  }
  clear_has_icon();
}
inline const ::std::string& LGPlayerBetZJHMessage::icon() const {
  return *icon_;
}
inline void LGPlayerBetZJHMessage::set_icon(const ::std::string& value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void LGPlayerBetZJHMessage::set_icon(const char* value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void LGPlayerBetZJHMessage::set_icon(const char* value, size_t size) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LGPlayerBetZJHMessage::mutable_icon() {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  return icon_;
}
inline ::std::string* LGPlayerBetZJHMessage::release_icon() {
  clear_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = icon_;
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .com.game.proto.SSC_Bet bets = 5;
inline int LGPlayerBetZJHMessage::bets_size() const {
  return bets_.size();
}
inline void LGPlayerBetZJHMessage::clear_bets() {
  bets_.Clear();
}
inline const ::com::game::proto::SSC_Bet& LGPlayerBetZJHMessage::bets(int index) const {
  return bets_.Get(index);
}
inline ::com::game::proto::SSC_Bet* LGPlayerBetZJHMessage::mutable_bets(int index) {
  return bets_.Mutable(index);
}
inline ::com::game::proto::SSC_Bet* LGPlayerBetZJHMessage::add_bets() {
  return bets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::game::proto::SSC_Bet >&
LGPlayerBetZJHMessage::bets() const {
  return bets_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::game::proto::SSC_Bet >*
LGPlayerBetZJHMessage::mutable_bets() {
  return &bets_;
}

// required bool isRobot = 6;
inline bool LGPlayerBetZJHMessage::has_isrobot() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LGPlayerBetZJHMessage::set_has_isrobot() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LGPlayerBetZJHMessage::clear_has_isrobot() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LGPlayerBetZJHMessage::clear_isrobot() {
  isrobot_ = false;
  clear_has_isrobot();
}
inline bool LGPlayerBetZJHMessage::isrobot() const {
  return isrobot_;
}
inline void LGPlayerBetZJHMessage::set_isrobot(bool value) {
  set_has_isrobot();
  isrobot_ = value;
}

// -------------------------------------------------------------------

// GLPlayerBetZJHMessage

// optional .com.game.proto.Protos_Rpc msgID = 1 [default = GLPlayerBetZJH];
inline bool GLPlayerBetZJHMessage::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GLPlayerBetZJHMessage::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GLPlayerBetZJHMessage::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GLPlayerBetZJHMessage::clear_msgid() {
  msgid_ = 6301;
  clear_has_msgid();
}
inline com::game::proto::Protos_Rpc GLPlayerBetZJHMessage::msgid() const {
  return static_cast< com::game::proto::Protos_Rpc >(msgid_);
}
inline void GLPlayerBetZJHMessage::set_msgid(com::game::proto::Protos_Rpc value) {
  GOOGLE_DCHECK(com::game::proto::Protos_Rpc_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// optional int32 rpcId = 2;
inline bool GLPlayerBetZJHMessage::has_rpcid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GLPlayerBetZJHMessage::set_has_rpcid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GLPlayerBetZJHMessage::clear_has_rpcid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GLPlayerBetZJHMessage::clear_rpcid() {
  rpcid_ = 0;
  clear_has_rpcid();
}
inline ::google::protobuf::int32 GLPlayerBetZJHMessage::rpcid() const {
  return rpcid_;
}
inline void GLPlayerBetZJHMessage::set_rpcid(::google::protobuf::int32 value) {
  set_has_rpcid();
  rpcid_ = value;
}

// repeated .com.game.proto.SSC_Bet bets = 3;
inline int GLPlayerBetZJHMessage::bets_size() const {
  return bets_.size();
}
inline void GLPlayerBetZJHMessage::clear_bets() {
  bets_.Clear();
}
inline const ::com::game::proto::SSC_Bet& GLPlayerBetZJHMessage::bets(int index) const {
  return bets_.Get(index);
}
inline ::com::game::proto::SSC_Bet* GLPlayerBetZJHMessage::mutable_bets(int index) {
  return bets_.Mutable(index);
}
inline ::com::game::proto::SSC_Bet* GLPlayerBetZJHMessage::add_bets() {
  return bets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::game::proto::SSC_Bet >&
GLPlayerBetZJHMessage::bets() const {
  return bets_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::game::proto::SSC_Bet >*
GLPlayerBetZJHMessage::mutable_bets() {
  return &bets_;
}

// optional bool isSucceed = 4;
inline bool GLPlayerBetZJHMessage::has_issucceed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GLPlayerBetZJHMessage::set_has_issucceed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GLPlayerBetZJHMessage::clear_has_issucceed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GLPlayerBetZJHMessage::clear_issucceed() {
  issucceed_ = false;
  clear_has_issucceed();
}
inline bool GLPlayerBetZJHMessage::issucceed() const {
  return issucceed_;
}
inline void GLPlayerBetZJHMessage::set_issucceed(bool value) {
  set_has_issucceed();
  issucceed_ = value;
}

// -------------------------------------------------------------------

// GLSyncSSCZJHMessage

// optional .com.game.proto.Protos_Rpc msgID = 1 [default = GLSyncSSCZJH];
inline bool GLSyncSSCZJHMessage::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GLSyncSSCZJHMessage::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GLSyncSSCZJHMessage::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GLSyncSSCZJHMessage::clear_msgid() {
  msgid_ = 6302;
  clear_has_msgid();
}
inline com::game::proto::Protos_Rpc GLSyncSSCZJHMessage::msgid() const {
  return static_cast< com::game::proto::Protos_Rpc >(msgid_);
}
inline void GLSyncSSCZJHMessage::set_msgid(com::game::proto::Protos_Rpc value) {
  GOOGLE_DCHECK(com::game::proto::Protos_Rpc_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required int32 nextOpenTime = 2;
inline bool GLSyncSSCZJHMessage::has_nextopentime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GLSyncSSCZJHMessage::set_has_nextopentime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GLSyncSSCZJHMessage::clear_has_nextopentime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GLSyncSSCZJHMessage::clear_nextopentime() {
  nextopentime_ = 0;
  clear_has_nextopentime();
}
inline ::google::protobuf::int32 GLSyncSSCZJHMessage::nextopentime() const {
  return nextopentime_;
}
inline void GLSyncSSCZJHMessage::set_nextopentime(::google::protobuf::int32 value) {
  set_has_nextopentime();
  nextopentime_ = value;
}

// repeated int32 curResult = 3;
inline int GLSyncSSCZJHMessage::curresult_size() const {
  return curresult_.size();
}
inline void GLSyncSSCZJHMessage::clear_curresult() {
  curresult_.Clear();
}
inline ::google::protobuf::int32 GLSyncSSCZJHMessage::curresult(int index) const {
  return curresult_.Get(index);
}
inline void GLSyncSSCZJHMessage::set_curresult(int index, ::google::protobuf::int32 value) {
  curresult_.Set(index, value);
}
inline void GLSyncSSCZJHMessage::add_curresult(::google::protobuf::int32 value) {
  curresult_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GLSyncSSCZJHMessage::curresult() const {
  return curresult_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GLSyncSSCZJHMessage::mutable_curresult() {
  return &curresult_;
}

// optional int32 curResultType = 4;
inline bool GLSyncSSCZJHMessage::has_curresulttype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GLSyncSSCZJHMessage::set_has_curresulttype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GLSyncSSCZJHMessage::clear_has_curresulttype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GLSyncSSCZJHMessage::clear_curresulttype() {
  curresulttype_ = 0;
  clear_has_curresulttype();
}
inline ::google::protobuf::int32 GLSyncSSCZJHMessage::curresulttype() const {
  return curresulttype_;
}
inline void GLSyncSSCZJHMessage::set_curresulttype(::google::protobuf::int32 value) {
  set_has_curresulttype();
  curresulttype_ = value;
}

// optional .com.game.proto.SSC_Winer preSantiaoWiner = 5;
inline bool GLSyncSSCZJHMessage::has_presantiaowiner() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GLSyncSSCZJHMessage::set_has_presantiaowiner() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GLSyncSSCZJHMessage::clear_has_presantiaowiner() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GLSyncSSCZJHMessage::clear_presantiaowiner() {
  if (presantiaowiner_ != NULL) presantiaowiner_->::com::game::proto::SSC_Winer::Clear();
  clear_has_presantiaowiner();
}
inline const ::com::game::proto::SSC_Winer& GLSyncSSCZJHMessage::presantiaowiner() const {
  return presantiaowiner_ != NULL ? *presantiaowiner_ : *default_instance_->presantiaowiner_;
}
inline ::com::game::proto::SSC_Winer* GLSyncSSCZJHMessage::mutable_presantiaowiner() {
  set_has_presantiaowiner();
  if (presantiaowiner_ == NULL) presantiaowiner_ = new ::com::game::proto::SSC_Winer;
  return presantiaowiner_;
}
inline ::com::game::proto::SSC_Winer* GLSyncSSCZJHMessage::release_presantiaowiner() {
  clear_has_presantiaowiner();
  ::com::game::proto::SSC_Winer* temp = presantiaowiner_;
  presantiaowiner_ = NULL;
  return temp;
}

// optional int32 preSantiaoTime = 6;
inline bool GLSyncSSCZJHMessage::has_presantiaotime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GLSyncSSCZJHMessage::set_has_presantiaotime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GLSyncSSCZJHMessage::clear_has_presantiaotime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GLSyncSSCZJHMessage::clear_presantiaotime() {
  presantiaotime_ = 0;
  clear_has_presantiaotime();
}
inline ::google::protobuf::int32 GLSyncSSCZJHMessage::presantiaotime() const {
  return presantiaotime_;
}
inline void GLSyncSSCZJHMessage::set_presantiaotime(::google::protobuf::int32 value) {
  set_has_presantiaotime();
  presantiaotime_ = value;
}

// repeated .com.game.proto.SSC_Winer preWiners = 7;
inline int GLSyncSSCZJHMessage::prewiners_size() const {
  return prewiners_.size();
}
inline void GLSyncSSCZJHMessage::clear_prewiners() {
  prewiners_.Clear();
}
inline const ::com::game::proto::SSC_Winer& GLSyncSSCZJHMessage::prewiners(int index) const {
  return prewiners_.Get(index);
}
inline ::com::game::proto::SSC_Winer* GLSyncSSCZJHMessage::mutable_prewiners(int index) {
  return prewiners_.Mutable(index);
}
inline ::com::game::proto::SSC_Winer* GLSyncSSCZJHMessage::add_prewiners() {
  return prewiners_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::game::proto::SSC_Winer >&
GLSyncSSCZJHMessage::prewiners() const {
  return prewiners_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::game::proto::SSC_Winer >*
GLSyncSSCZJHMessage::mutable_prewiners() {
  return &prewiners_;
}

// repeated .com.game.proto.SSC_Winer bigWiners = 8;
inline int GLSyncSSCZJHMessage::bigwiners_size() const {
  return bigwiners_.size();
}
inline void GLSyncSSCZJHMessage::clear_bigwiners() {
  bigwiners_.Clear();
}
inline const ::com::game::proto::SSC_Winer& GLSyncSSCZJHMessage::bigwiners(int index) const {
  return bigwiners_.Get(index);
}
inline ::com::game::proto::SSC_Winer* GLSyncSSCZJHMessage::mutable_bigwiners(int index) {
  return bigwiners_.Mutable(index);
}
inline ::com::game::proto::SSC_Winer* GLSyncSSCZJHMessage::add_bigwiners() {
  return bigwiners_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::game::proto::SSC_Winer >&
GLSyncSSCZJHMessage::bigwiners() const {
  return bigwiners_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::game::proto::SSC_Winer >*
GLSyncSSCZJHMessage::mutable_bigwiners() {
  return &bigwiners_;
}

// repeated int32 history = 9;
inline int GLSyncSSCZJHMessage::history_size() const {
  return history_.size();
}
inline void GLSyncSSCZJHMessage::clear_history() {
  history_.Clear();
}
inline ::google::protobuf::int32 GLSyncSSCZJHMessage::history(int index) const {
  return history_.Get(index);
}
inline void GLSyncSSCZJHMessage::set_history(int index, ::google::protobuf::int32 value) {
  history_.Set(index, value);
}
inline void GLSyncSSCZJHMessage::add_history(::google::protobuf::int32 value) {
  history_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GLSyncSSCZJHMessage::history() const {
  return history_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GLSyncSSCZJHMessage::mutable_history() {
  return &history_;
}

// repeated .com.game.proto.SSC_Bet curBetALL = 10;
inline int GLSyncSSCZJHMessage::curbetall_size() const {
  return curbetall_.size();
}
inline void GLSyncSSCZJHMessage::clear_curbetall() {
  curbetall_.Clear();
}
inline const ::com::game::proto::SSC_Bet& GLSyncSSCZJHMessage::curbetall(int index) const {
  return curbetall_.Get(index);
}
inline ::com::game::proto::SSC_Bet* GLSyncSSCZJHMessage::mutable_curbetall(int index) {
  return curbetall_.Mutable(index);
}
inline ::com::game::proto::SSC_Bet* GLSyncSSCZJHMessage::add_curbetall() {
  return curbetall_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::game::proto::SSC_Bet >&
GLSyncSSCZJHMessage::curbetall() const {
  return curbetall_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::game::proto::SSC_Bet >*
GLSyncSSCZJHMessage::mutable_curbetall() {
  return &curbetall_;
}

// optional int32 sscServer = 11;
inline bool GLSyncSSCZJHMessage::has_sscserver() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GLSyncSSCZJHMessage::set_has_sscserver() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GLSyncSSCZJHMessage::clear_has_sscserver() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GLSyncSSCZJHMessage::clear_sscserver() {
  sscserver_ = 0;
  clear_has_sscserver();
}
inline ::google::protobuf::int32 GLSyncSSCZJHMessage::sscserver() const {
  return sscserver_;
}
inline void GLSyncSSCZJHMessage::set_sscserver(::google::protobuf::int32 value) {
  set_has_sscserver();
  sscserver_ = value;
}

// optional int32 ratio = 12;
inline bool GLSyncSSCZJHMessage::has_ratio() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GLSyncSSCZJHMessage::set_has_ratio() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GLSyncSSCZJHMessage::clear_has_ratio() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GLSyncSSCZJHMessage::clear_ratio() {
  ratio_ = 0;
  clear_has_ratio();
}
inline ::google::protobuf::int32 GLSyncSSCZJHMessage::ratio() const {
  return ratio_;
}
inline void GLSyncSSCZJHMessage::set_ratio(::google::protobuf::int32 value) {
  set_has_ratio();
  ratio_ = value;
}

// repeated .com.game.proto.SSC_Winer preBeforeBigWiner = 13;
inline int GLSyncSSCZJHMessage::prebeforebigwiner_size() const {
  return prebeforebigwiner_.size();
}
inline void GLSyncSSCZJHMessage::clear_prebeforebigwiner() {
  prebeforebigwiner_.Clear();
}
inline const ::com::game::proto::SSC_Winer& GLSyncSSCZJHMessage::prebeforebigwiner(int index) const {
  return prebeforebigwiner_.Get(index);
}
inline ::com::game::proto::SSC_Winer* GLSyncSSCZJHMessage::mutable_prebeforebigwiner(int index) {
  return prebeforebigwiner_.Mutable(index);
}
inline ::com::game::proto::SSC_Winer* GLSyncSSCZJHMessage::add_prebeforebigwiner() {
  return prebeforebigwiner_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::game::proto::SSC_Winer >&
GLSyncSSCZJHMessage::prebeforebigwiner() const {
  return prebeforebigwiner_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::game::proto::SSC_Winer >*
GLSyncSSCZJHMessage::mutable_prebeforebigwiner() {
  return &prebeforebigwiner_;
}

// -------------------------------------------------------------------

// SSC_Winer

// required string name = 1;
inline bool SSC_Winer::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SSC_Winer::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SSC_Winer::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SSC_Winer::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SSC_Winer::name() const {
  return *name_;
}
inline void SSC_Winer::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SSC_Winer::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SSC_Winer::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SSC_Winer::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* SSC_Winer::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string icon = 2;
inline bool SSC_Winer::has_icon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SSC_Winer::set_has_icon() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SSC_Winer::clear_has_icon() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SSC_Winer::clear_icon() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    icon_->clear();
  }
  clear_has_icon();
}
inline const ::std::string& SSC_Winer::icon() const {
  return *icon_;
}
inline void SSC_Winer::set_icon(const ::std::string& value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void SSC_Winer::set_icon(const char* value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void SSC_Winer::set_icon(const char* value, size_t size) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SSC_Winer::mutable_icon() {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  return icon_;
}
inline ::std::string* SSC_Winer::release_icon() {
  clear_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = icon_;
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 winMoney = 3;
inline bool SSC_Winer::has_winmoney() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SSC_Winer::set_has_winmoney() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SSC_Winer::clear_has_winmoney() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SSC_Winer::clear_winmoney() {
  winmoney_ = 0;
  clear_has_winmoney();
}
inline ::google::protobuf::int32 SSC_Winer::winmoney() const {
  return winmoney_;
}
inline void SSC_Winer::set_winmoney(::google::protobuf::int32 value) {
  set_has_winmoney();
  winmoney_ = value;
}

// optional string winTime = 4;
inline bool SSC_Winer::has_wintime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SSC_Winer::set_has_wintime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SSC_Winer::clear_has_wintime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SSC_Winer::clear_wintime() {
  if (wintime_ != &::google::protobuf::internal::kEmptyString) {
    wintime_->clear();
  }
  clear_has_wintime();
}
inline const ::std::string& SSC_Winer::wintime() const {
  return *wintime_;
}
inline void SSC_Winer::set_wintime(const ::std::string& value) {
  set_has_wintime();
  if (wintime_ == &::google::protobuf::internal::kEmptyString) {
    wintime_ = new ::std::string;
  }
  wintime_->assign(value);
}
inline void SSC_Winer::set_wintime(const char* value) {
  set_has_wintime();
  if (wintime_ == &::google::protobuf::internal::kEmptyString) {
    wintime_ = new ::std::string;
  }
  wintime_->assign(value);
}
inline void SSC_Winer::set_wintime(const char* value, size_t size) {
  set_has_wintime();
  if (wintime_ == &::google::protobuf::internal::kEmptyString) {
    wintime_ = new ::std::string;
  }
  wintime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SSC_Winer::mutable_wintime() {
  set_has_wintime();
  if (wintime_ == &::google::protobuf::internal::kEmptyString) {
    wintime_ = new ::std::string;
  }
  return wintime_;
}
inline ::std::string* SSC_Winer::release_wintime() {
  clear_has_wintime();
  if (wintime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = wintime_;
    wintime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string spcialType = 5;
inline bool SSC_Winer::has_spcialtype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SSC_Winer::set_has_spcialtype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SSC_Winer::clear_has_spcialtype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SSC_Winer::clear_spcialtype() {
  if (spcialtype_ != &::google::protobuf::internal::kEmptyString) {
    spcialtype_->clear();
  }
  clear_has_spcialtype();
}
inline const ::std::string& SSC_Winer::spcialtype() const {
  return *spcialtype_;
}
inline void SSC_Winer::set_spcialtype(const ::std::string& value) {
  set_has_spcialtype();
  if (spcialtype_ == &::google::protobuf::internal::kEmptyString) {
    spcialtype_ = new ::std::string;
  }
  spcialtype_->assign(value);
}
inline void SSC_Winer::set_spcialtype(const char* value) {
  set_has_spcialtype();
  if (spcialtype_ == &::google::protobuf::internal::kEmptyString) {
    spcialtype_ = new ::std::string;
  }
  spcialtype_->assign(value);
}
inline void SSC_Winer::set_spcialtype(const char* value, size_t size) {
  set_has_spcialtype();
  if (spcialtype_ == &::google::protobuf::internal::kEmptyString) {
    spcialtype_ = new ::std::string;
  }
  spcialtype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SSC_Winer::mutable_spcialtype() {
  set_has_spcialtype();
  if (spcialtype_ == &::google::protobuf::internal::kEmptyString) {
    spcialtype_ = new ::std::string;
  }
  return spcialtype_;
}
inline ::std::string* SSC_Winer::release_spcialtype() {
  clear_has_spcialtype();
  if (spcialtype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = spcialtype_;
    spcialtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// SSC_Bet

// required int32 betIndex = 1;
inline bool SSC_Bet::has_betindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SSC_Bet::set_has_betindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SSC_Bet::clear_has_betindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SSC_Bet::clear_betindex() {
  betindex_ = 0;
  clear_has_betindex();
}
inline ::google::protobuf::int32 SSC_Bet::betindex() const {
  return betindex_;
}
inline void SSC_Bet::set_betindex(::google::protobuf::int32 value) {
  set_has_betindex();
  betindex_ = value;
}

// required int32 betMoney = 2;
inline bool SSC_Bet::has_betmoney() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SSC_Bet::set_has_betmoney() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SSC_Bet::clear_has_betmoney() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SSC_Bet::clear_betmoney() {
  betmoney_ = 0;
  clear_has_betmoney();
}
inline ::google::protobuf::int32 SSC_Bet::betmoney() const {
  return betmoney_;
}
inline void SSC_Bet::set_betmoney(::google::protobuf::int32 value) {
  set_has_betmoney();
  betmoney_ = value;
}

// -------------------------------------------------------------------

// LGSyncTableDataMessage

// optional .com.game.proto.Protos_Rpc msgID = 1 [default = LGSyncTableData];
inline bool LGSyncTableDataMessage::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LGSyncTableDataMessage::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LGSyncTableDataMessage::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LGSyncTableDataMessage::clear_msgid() {
  msgid_ = 6303;
  clear_has_msgid();
}
inline com::game::proto::Protos_Rpc LGSyncTableDataMessage::msgid() const {
  return static_cast< com::game::proto::Protos_Rpc >(msgid_);
}
inline void LGSyncTableDataMessage::set_msgid(com::game::proto::Protos_Rpc value) {
  GOOGLE_DCHECK(com::game::proto::Protos_Rpc_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// optional int32 rpcId = 2;
inline bool LGSyncTableDataMessage::has_rpcid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LGSyncTableDataMessage::set_has_rpcid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LGSyncTableDataMessage::clear_has_rpcid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LGSyncTableDataMessage::clear_rpcid() {
  rpcid_ = 0;
  clear_has_rpcid();
}
inline ::google::protobuf::int32 LGSyncTableDataMessage::rpcid() const {
  return rpcid_;
}
inline void LGSyncTableDataMessage::set_rpcid(::google::protobuf::int32 value) {
  set_has_rpcid();
  rpcid_ = value;
}

// required int32 loginId = 3;
inline bool LGSyncTableDataMessage::has_loginid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LGSyncTableDataMessage::set_has_loginid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LGSyncTableDataMessage::clear_has_loginid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LGSyncTableDataMessage::clear_loginid() {
  loginid_ = 0;
  clear_has_loginid();
}
inline ::google::protobuf::int32 LGSyncTableDataMessage::loginid() const {
  return loginid_;
}
inline void LGSyncTableDataMessage::set_loginid(::google::protobuf::int32 value) {
  set_has_loginid();
  loginid_ = value;
}

// optional string tableJson = 4;
inline bool LGSyncTableDataMessage::has_tablejson() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LGSyncTableDataMessage::set_has_tablejson() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LGSyncTableDataMessage::clear_has_tablejson() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LGSyncTableDataMessage::clear_tablejson() {
  if (tablejson_ != &::google::protobuf::internal::kEmptyString) {
    tablejson_->clear();
  }
  clear_has_tablejson();
}
inline const ::std::string& LGSyncTableDataMessage::tablejson() const {
  return *tablejson_;
}
inline void LGSyncTableDataMessage::set_tablejson(const ::std::string& value) {
  set_has_tablejson();
  if (tablejson_ == &::google::protobuf::internal::kEmptyString) {
    tablejson_ = new ::std::string;
  }
  tablejson_->assign(value);
}
inline void LGSyncTableDataMessage::set_tablejson(const char* value) {
  set_has_tablejson();
  if (tablejson_ == &::google::protobuf::internal::kEmptyString) {
    tablejson_ = new ::std::string;
  }
  tablejson_->assign(value);
}
inline void LGSyncTableDataMessage::set_tablejson(const char* value, size_t size) {
  set_has_tablejson();
  if (tablejson_ == &::google::protobuf::internal::kEmptyString) {
    tablejson_ = new ::std::string;
  }
  tablejson_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LGSyncTableDataMessage::mutable_tablejson() {
  set_has_tablejson();
  if (tablejson_ == &::google::protobuf::internal::kEmptyString) {
    tablejson_ = new ::std::string;
  }
  return tablejson_;
}
inline ::std::string* LGSyncTableDataMessage::release_tablejson() {
  clear_has_tablejson();
  if (tablejson_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tablejson_;
    tablejson_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// LGStopFishServerMessage

// optional .com.game.proto.Protos_Rpc msgID = 1 [default = LGStopFishServer];
inline bool LGStopFishServerMessage::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LGStopFishServerMessage::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LGStopFishServerMessage::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LGStopFishServerMessage::clear_msgid() {
  msgid_ = 6215;
  clear_has_msgid();
}
inline com::game::proto::Protos_Rpc LGStopFishServerMessage::msgid() const {
  return static_cast< com::game::proto::Protos_Rpc >(msgid_);
}
inline void LGStopFishServerMessage::set_msgid(com::game::proto::Protos_Rpc value) {
  GOOGLE_DCHECK(com::game::proto::Protos_Rpc_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// optional int32 rpcId = 2;
inline bool LGStopFishServerMessage::has_rpcid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LGStopFishServerMessage::set_has_rpcid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LGStopFishServerMessage::clear_has_rpcid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LGStopFishServerMessage::clear_rpcid() {
  rpcid_ = 0;
  clear_has_rpcid();
}
inline ::google::protobuf::int32 LGStopFishServerMessage::rpcid() const {
  return rpcid_;
}
inline void LGStopFishServerMessage::set_rpcid(::google::protobuf::int32 value) {
  set_has_rpcid();
  rpcid_ = value;
}

// required int64 closeTime = 3;
inline bool LGStopFishServerMessage::has_closetime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LGStopFishServerMessage::set_has_closetime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LGStopFishServerMessage::clear_has_closetime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LGStopFishServerMessage::clear_closetime() {
  closetime_ = GOOGLE_LONGLONG(0);
  clear_has_closetime();
}
inline ::google::protobuf::int64 LGStopFishServerMessage::closetime() const {
  return closetime_;
}
inline void LGStopFishServerMessage::set_closetime(::google::protobuf::int64 value) {
  set_has_closetime();
  closetime_ = value;
}

// -------------------------------------------------------------------

// LGReloadFishTableMessage

// optional .com.game.proto.Protos_Rpc msgID = 1 [default = LGReloadFishTable];
inline bool LGReloadFishTableMessage::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LGReloadFishTableMessage::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LGReloadFishTableMessage::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LGReloadFishTableMessage::clear_msgid() {
  msgid_ = 6216;
  clear_has_msgid();
}
inline com::game::proto::Protos_Rpc LGReloadFishTableMessage::msgid() const {
  return static_cast< com::game::proto::Protos_Rpc >(msgid_);
}
inline void LGReloadFishTableMessage::set_msgid(com::game::proto::Protos_Rpc value) {
  GOOGLE_DCHECK(com::game::proto::Protos_Rpc_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// optional int32 rpcId = 2;
inline bool LGReloadFishTableMessage::has_rpcid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LGReloadFishTableMessage::set_has_rpcid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LGReloadFishTableMessage::clear_has_rpcid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LGReloadFishTableMessage::clear_rpcid() {
  rpcid_ = 0;
  clear_has_rpcid();
}
inline ::google::protobuf::int32 LGReloadFishTableMessage::rpcid() const {
  return rpcid_;
}
inline void LGReloadFishTableMessage::set_rpcid(::google::protobuf::int32 value) {
  set_has_rpcid();
  rpcid_ = value;
}

// optional string configString = 3;
inline bool LGReloadFishTableMessage::has_configstring() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LGReloadFishTableMessage::set_has_configstring() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LGReloadFishTableMessage::clear_has_configstring() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LGReloadFishTableMessage::clear_configstring() {
  if (configstring_ != &::google::protobuf::internal::kEmptyString) {
    configstring_->clear();
  }
  clear_has_configstring();
}
inline const ::std::string& LGReloadFishTableMessage::configstring() const {
  return *configstring_;
}
inline void LGReloadFishTableMessage::set_configstring(const ::std::string& value) {
  set_has_configstring();
  if (configstring_ == &::google::protobuf::internal::kEmptyString) {
    configstring_ = new ::std::string;
  }
  configstring_->assign(value);
}
inline void LGReloadFishTableMessage::set_configstring(const char* value) {
  set_has_configstring();
  if (configstring_ == &::google::protobuf::internal::kEmptyString) {
    configstring_ = new ::std::string;
  }
  configstring_->assign(value);
}
inline void LGReloadFishTableMessage::set_configstring(const char* value, size_t size) {
  set_has_configstring();
  if (configstring_ == &::google::protobuf::internal::kEmptyString) {
    configstring_ = new ::std::string;
  }
  configstring_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LGReloadFishTableMessage::mutable_configstring() {
  set_has_configstring();
  if (configstring_ == &::google::protobuf::internal::kEmptyString) {
    configstring_ = new ::std::string;
  }
  return configstring_;
}
inline ::std::string* LGReloadFishTableMessage::release_configstring() {
  clear_has_configstring();
  if (configstring_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = configstring_;
    configstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// LGStartFishServerMessage

// optional .com.game.proto.Protos_Rpc msgID = 1 [default = LGStartFishServer];
inline bool LGStartFishServerMessage::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LGStartFishServerMessage::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LGStartFishServerMessage::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LGStartFishServerMessage::clear_msgid() {
  msgid_ = 6217;
  clear_has_msgid();
}
inline com::game::proto::Protos_Rpc LGStartFishServerMessage::msgid() const {
  return static_cast< com::game::proto::Protos_Rpc >(msgid_);
}
inline void LGStartFishServerMessage::set_msgid(com::game::proto::Protos_Rpc value) {
  GOOGLE_DCHECK(com::game::proto::Protos_Rpc_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// optional int32 rpcId = 2;
inline bool LGStartFishServerMessage::has_rpcid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LGStartFishServerMessage::set_has_rpcid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LGStartFishServerMessage::clear_has_rpcid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LGStartFishServerMessage::clear_rpcid() {
  rpcid_ = 0;
  clear_has_rpcid();
}
inline ::google::protobuf::int32 LGStartFishServerMessage::rpcid() const {
  return rpcid_;
}
inline void LGStartFishServerMessage::set_rpcid(::google::protobuf::int32 value) {
  set_has_rpcid();
  rpcid_ = value;
}

// required int64 startTime = 3;
inline bool LGStartFishServerMessage::has_starttime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LGStartFishServerMessage::set_has_starttime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LGStartFishServerMessage::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LGStartFishServerMessage::clear_starttime() {
  starttime_ = GOOGLE_LONGLONG(0);
  clear_has_starttime();
}
inline ::google::protobuf::int64 LGStartFishServerMessage::starttime() const {
  return starttime_;
}
inline void LGStartFishServerMessage::set_starttime(::google::protobuf::int64 value) {
  set_has_starttime();
  starttime_ = value;
}

// -------------------------------------------------------------------

// LGMiniGameProcessMessage

// optional .com.game.proto.Protos_Rpc msgID = 1 [default = LGMiniGameProcess];
inline bool LGMiniGameProcessMessage::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LGMiniGameProcessMessage::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LGMiniGameProcessMessage::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LGMiniGameProcessMessage::clear_msgid() {
  msgid_ = 6309;
  clear_has_msgid();
}
inline com::game::proto::Protos_Rpc LGMiniGameProcessMessage::msgid() const {
  return static_cast< com::game::proto::Protos_Rpc >(msgid_);
}
inline void LGMiniGameProcessMessage::set_msgid(com::game::proto::Protos_Rpc value) {
  GOOGLE_DCHECK(com::game::proto::Protos_Rpc_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required int32 miniGameId = 2;
inline bool LGMiniGameProcessMessage::has_minigameid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LGMiniGameProcessMessage::set_has_minigameid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LGMiniGameProcessMessage::clear_has_minigameid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LGMiniGameProcessMessage::clear_minigameid() {
  minigameid_ = 0;
  clear_has_minigameid();
}
inline ::google::protobuf::int32 LGMiniGameProcessMessage::minigameid() const {
  return minigameid_;
}
inline void LGMiniGameProcessMessage::set_minigameid(::google::protobuf::int32 value) {
  set_has_minigameid();
  minigameid_ = value;
}

// optional string miniGameInfos = 3;
inline bool LGMiniGameProcessMessage::has_minigameinfos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LGMiniGameProcessMessage::set_has_minigameinfos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LGMiniGameProcessMessage::clear_has_minigameinfos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LGMiniGameProcessMessage::clear_minigameinfos() {
  if (minigameinfos_ != &::google::protobuf::internal::kEmptyString) {
    minigameinfos_->clear();
  }
  clear_has_minigameinfos();
}
inline const ::std::string& LGMiniGameProcessMessage::minigameinfos() const {
  return *minigameinfos_;
}
inline void LGMiniGameProcessMessage::set_minigameinfos(const ::std::string& value) {
  set_has_minigameinfos();
  if (minigameinfos_ == &::google::protobuf::internal::kEmptyString) {
    minigameinfos_ = new ::std::string;
  }
  minigameinfos_->assign(value);
}
inline void LGMiniGameProcessMessage::set_minigameinfos(const char* value) {
  set_has_minigameinfos();
  if (minigameinfos_ == &::google::protobuf::internal::kEmptyString) {
    minigameinfos_ = new ::std::string;
  }
  minigameinfos_->assign(value);
}
inline void LGMiniGameProcessMessage::set_minigameinfos(const char* value, size_t size) {
  set_has_minigameinfos();
  if (minigameinfos_ == &::google::protobuf::internal::kEmptyString) {
    minigameinfos_ = new ::std::string;
  }
  minigameinfos_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LGMiniGameProcessMessage::mutable_minigameinfos() {
  set_has_minigameinfos();
  if (minigameinfos_ == &::google::protobuf::internal::kEmptyString) {
    minigameinfos_ = new ::std::string;
  }
  return minigameinfos_;
}
inline ::std::string* LGMiniGameProcessMessage::release_minigameinfos() {
  clear_has_minigameinfos();
  if (minigameinfos_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = minigameinfos_;
    minigameinfos_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string otherInfos = 4;
inline bool LGMiniGameProcessMessage::has_otherinfos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LGMiniGameProcessMessage::set_has_otherinfos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LGMiniGameProcessMessage::clear_has_otherinfos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LGMiniGameProcessMessage::clear_otherinfos() {
  if (otherinfos_ != &::google::protobuf::internal::kEmptyString) {
    otherinfos_->clear();
  }
  clear_has_otherinfos();
}
inline const ::std::string& LGMiniGameProcessMessage::otherinfos() const {
  return *otherinfos_;
}
inline void LGMiniGameProcessMessage::set_otherinfos(const ::std::string& value) {
  set_has_otherinfos();
  if (otherinfos_ == &::google::protobuf::internal::kEmptyString) {
    otherinfos_ = new ::std::string;
  }
  otherinfos_->assign(value);
}
inline void LGMiniGameProcessMessage::set_otherinfos(const char* value) {
  set_has_otherinfos();
  if (otherinfos_ == &::google::protobuf::internal::kEmptyString) {
    otherinfos_ = new ::std::string;
  }
  otherinfos_->assign(value);
}
inline void LGMiniGameProcessMessage::set_otherinfos(const char* value, size_t size) {
  set_has_otherinfos();
  if (otherinfos_ == &::google::protobuf::internal::kEmptyString) {
    otherinfos_ = new ::std::string;
  }
  otherinfos_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LGMiniGameProcessMessage::mutable_otherinfos() {
  set_has_otherinfos();
  if (otherinfos_ == &::google::protobuf::internal::kEmptyString) {
    otherinfos_ = new ::std::string;
  }
  return otherinfos_;
}
inline ::std::string* LGMiniGameProcessMessage::release_otherinfos() {
  clear_has_otherinfos();
  if (otherinfos_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = otherinfos_;
    otherinfos_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// GLMiniGameProcessMessage

// optional .com.game.proto.Protos_Rpc msgID = 1 [default = GLMiniGameProcess];
inline bool GLMiniGameProcessMessage::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GLMiniGameProcessMessage::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GLMiniGameProcessMessage::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GLMiniGameProcessMessage::clear_msgid() {
  msgid_ = 6310;
  clear_has_msgid();
}
inline com::game::proto::Protos_Rpc GLMiniGameProcessMessage::msgid() const {
  return static_cast< com::game::proto::Protos_Rpc >(msgid_);
}
inline void GLMiniGameProcessMessage::set_msgid(com::game::proto::Protos_Rpc value) {
  GOOGLE_DCHECK(com::game::proto::Protos_Rpc_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required int32 miniGameId = 2;
inline bool GLMiniGameProcessMessage::has_minigameid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GLMiniGameProcessMessage::set_has_minigameid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GLMiniGameProcessMessage::clear_has_minigameid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GLMiniGameProcessMessage::clear_minigameid() {
  minigameid_ = 0;
  clear_has_minigameid();
}
inline ::google::protobuf::int32 GLMiniGameProcessMessage::minigameid() const {
  return minigameid_;
}
inline void GLMiniGameProcessMessage::set_minigameid(::google::protobuf::int32 value) {
  set_has_minigameid();
  minigameid_ = value;
}

// optional string miniGameInfos = 3;
inline bool GLMiniGameProcessMessage::has_minigameinfos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GLMiniGameProcessMessage::set_has_minigameinfos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GLMiniGameProcessMessage::clear_has_minigameinfos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GLMiniGameProcessMessage::clear_minigameinfos() {
  if (minigameinfos_ != &::google::protobuf::internal::kEmptyString) {
    minigameinfos_->clear();
  }
  clear_has_minigameinfos();
}
inline const ::std::string& GLMiniGameProcessMessage::minigameinfos() const {
  return *minigameinfos_;
}
inline void GLMiniGameProcessMessage::set_minigameinfos(const ::std::string& value) {
  set_has_minigameinfos();
  if (minigameinfos_ == &::google::protobuf::internal::kEmptyString) {
    minigameinfos_ = new ::std::string;
  }
  minigameinfos_->assign(value);
}
inline void GLMiniGameProcessMessage::set_minigameinfos(const char* value) {
  set_has_minigameinfos();
  if (minigameinfos_ == &::google::protobuf::internal::kEmptyString) {
    minigameinfos_ = new ::std::string;
  }
  minigameinfos_->assign(value);
}
inline void GLMiniGameProcessMessage::set_minigameinfos(const char* value, size_t size) {
  set_has_minigameinfos();
  if (minigameinfos_ == &::google::protobuf::internal::kEmptyString) {
    minigameinfos_ = new ::std::string;
  }
  minigameinfos_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GLMiniGameProcessMessage::mutable_minigameinfos() {
  set_has_minigameinfos();
  if (minigameinfos_ == &::google::protobuf::internal::kEmptyString) {
    minigameinfos_ = new ::std::string;
  }
  return minigameinfos_;
}
inline ::std::string* GLMiniGameProcessMessage::release_minigameinfos() {
  clear_has_minigameinfos();
  if (minigameinfos_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = minigameinfos_;
    minigameinfos_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string otherInfos = 4;
inline bool GLMiniGameProcessMessage::has_otherinfos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GLMiniGameProcessMessage::set_has_otherinfos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GLMiniGameProcessMessage::clear_has_otherinfos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GLMiniGameProcessMessage::clear_otherinfos() {
  if (otherinfos_ != &::google::protobuf::internal::kEmptyString) {
    otherinfos_->clear();
  }
  clear_has_otherinfos();
}
inline const ::std::string& GLMiniGameProcessMessage::otherinfos() const {
  return *otherinfos_;
}
inline void GLMiniGameProcessMessage::set_otherinfos(const ::std::string& value) {
  set_has_otherinfos();
  if (otherinfos_ == &::google::protobuf::internal::kEmptyString) {
    otherinfos_ = new ::std::string;
  }
  otherinfos_->assign(value);
}
inline void GLMiniGameProcessMessage::set_otherinfos(const char* value) {
  set_has_otherinfos();
  if (otherinfos_ == &::google::protobuf::internal::kEmptyString) {
    otherinfos_ = new ::std::string;
  }
  otherinfos_->assign(value);
}
inline void GLMiniGameProcessMessage::set_otherinfos(const char* value, size_t size) {
  set_has_otherinfos();
  if (otherinfos_ == &::google::protobuf::internal::kEmptyString) {
    otherinfos_ = new ::std::string;
  }
  otherinfos_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GLMiniGameProcessMessage::mutable_otherinfos() {
  set_has_otherinfos();
  if (otherinfos_ == &::google::protobuf::internal::kEmptyString) {
    otherinfos_ = new ::std::string;
  }
  return otherinfos_;
}
inline ::std::string* GLMiniGameProcessMessage::release_otherinfos() {
  clear_has_otherinfos();
  if (otherinfos_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = otherinfos_;
    otherinfos_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// GLSyncPlayerMoneyMessage

// optional .com.game.proto.Protos_Rpc msgID = 1 [default = GLSyncPlayerMoney];
inline bool GLSyncPlayerMoneyMessage::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GLSyncPlayerMoneyMessage::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GLSyncPlayerMoneyMessage::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GLSyncPlayerMoneyMessage::clear_msgid() {
  msgid_ = 6311;
  clear_has_msgid();
}
inline com::game::proto::Protos_Rpc GLSyncPlayerMoneyMessage::msgid() const {
  return static_cast< com::game::proto::Protos_Rpc >(msgid_);
}
inline void GLSyncPlayerMoneyMessage::set_msgid(com::game::proto::Protos_Rpc value) {
  GOOGLE_DCHECK(com::game::proto::Protos_Rpc_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// optional int32 subGameId = 2;
inline bool GLSyncPlayerMoneyMessage::has_subgameid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GLSyncPlayerMoneyMessage::set_has_subgameid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GLSyncPlayerMoneyMessage::clear_has_subgameid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GLSyncPlayerMoneyMessage::clear_subgameid() {
  subgameid_ = 0;
  clear_has_subgameid();
}
inline ::google::protobuf::int32 GLSyncPlayerMoneyMessage::subgameid() const {
  return subgameid_;
}
inline void GLSyncPlayerMoneyMessage::set_subgameid(::google::protobuf::int32 value) {
  set_has_subgameid();
  subgameid_ = value;
}

// optional int32 subType = 3;
inline bool GLSyncPlayerMoneyMessage::has_subtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GLSyncPlayerMoneyMessage::set_has_subtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GLSyncPlayerMoneyMessage::clear_has_subtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GLSyncPlayerMoneyMessage::clear_subtype() {
  subtype_ = 0;
  clear_has_subtype();
}
inline ::google::protobuf::int32 GLSyncPlayerMoneyMessage::subtype() const {
  return subtype_;
}
inline void GLSyncPlayerMoneyMessage::set_subtype(::google::protobuf::int32 value) {
  set_has_subtype();
  subtype_ = value;
}

// optional string mapName = 4;
inline bool GLSyncPlayerMoneyMessage::has_mapname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GLSyncPlayerMoneyMessage::set_has_mapname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GLSyncPlayerMoneyMessage::clear_has_mapname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GLSyncPlayerMoneyMessage::clear_mapname() {
  if (mapname_ != &::google::protobuf::internal::kEmptyString) {
    mapname_->clear();
  }
  clear_has_mapname();
}
inline const ::std::string& GLSyncPlayerMoneyMessage::mapname() const {
  return *mapname_;
}
inline void GLSyncPlayerMoneyMessage::set_mapname(const ::std::string& value) {
  set_has_mapname();
  if (mapname_ == &::google::protobuf::internal::kEmptyString) {
    mapname_ = new ::std::string;
  }
  mapname_->assign(value);
}
inline void GLSyncPlayerMoneyMessage::set_mapname(const char* value) {
  set_has_mapname();
  if (mapname_ == &::google::protobuf::internal::kEmptyString) {
    mapname_ = new ::std::string;
  }
  mapname_->assign(value);
}
inline void GLSyncPlayerMoneyMessage::set_mapname(const char* value, size_t size) {
  set_has_mapname();
  if (mapname_ == &::google::protobuf::internal::kEmptyString) {
    mapname_ = new ::std::string;
  }
  mapname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GLSyncPlayerMoneyMessage::mutable_mapname() {
  set_has_mapname();
  if (mapname_ == &::google::protobuf::internal::kEmptyString) {
    mapname_ = new ::std::string;
  }
  return mapname_;
}
inline ::std::string* GLSyncPlayerMoneyMessage::release_mapname() {
  clear_has_mapname();
  if (mapname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mapname_;
    mapname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string mapLine = 5;
inline bool GLSyncPlayerMoneyMessage::has_mapline() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GLSyncPlayerMoneyMessage::set_has_mapline() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GLSyncPlayerMoneyMessage::clear_has_mapline() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GLSyncPlayerMoneyMessage::clear_mapline() {
  if (mapline_ != &::google::protobuf::internal::kEmptyString) {
    mapline_->clear();
  }
  clear_has_mapline();
}
inline const ::std::string& GLSyncPlayerMoneyMessage::mapline() const {
  return *mapline_;
}
inline void GLSyncPlayerMoneyMessage::set_mapline(const ::std::string& value) {
  set_has_mapline();
  if (mapline_ == &::google::protobuf::internal::kEmptyString) {
    mapline_ = new ::std::string;
  }
  mapline_->assign(value);
}
inline void GLSyncPlayerMoneyMessage::set_mapline(const char* value) {
  set_has_mapline();
  if (mapline_ == &::google::protobuf::internal::kEmptyString) {
    mapline_ = new ::std::string;
  }
  mapline_->assign(value);
}
inline void GLSyncPlayerMoneyMessage::set_mapline(const char* value, size_t size) {
  set_has_mapline();
  if (mapline_ == &::google::protobuf::internal::kEmptyString) {
    mapline_ = new ::std::string;
  }
  mapline_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GLSyncPlayerMoneyMessage::mutable_mapline() {
  set_has_mapline();
  if (mapline_ == &::google::protobuf::internal::kEmptyString) {
    mapline_ = new ::std::string;
  }
  return mapline_;
}
inline ::std::string* GLSyncPlayerMoneyMessage::release_mapline() {
  clear_has_mapline();
  if (mapline_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mapline_;
    mapline_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional double money1 = 6;
inline bool GLSyncPlayerMoneyMessage::has_money1() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GLSyncPlayerMoneyMessage::set_has_money1() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GLSyncPlayerMoneyMessage::clear_has_money1() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GLSyncPlayerMoneyMessage::clear_money1() {
  money1_ = 0;
  clear_has_money1();
}
inline double GLSyncPlayerMoneyMessage::money1() const {
  return money1_;
}
inline void GLSyncPlayerMoneyMessage::set_money1(double value) {
  set_has_money1();
  money1_ = value;
}

// optional double money2 = 7;
inline bool GLSyncPlayerMoneyMessage::has_money2() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GLSyncPlayerMoneyMessage::set_has_money2() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GLSyncPlayerMoneyMessage::clear_has_money2() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GLSyncPlayerMoneyMessage::clear_money2() {
  money2_ = 0;
  clear_has_money2();
}
inline double GLSyncPlayerMoneyMessage::money2() const {
  return money2_;
}
inline void GLSyncPlayerMoneyMessage::set_money2(double value) {
  set_has_money2();
  money2_ = value;
}

// optional double bankmoney1 = 8;
inline bool GLSyncPlayerMoneyMessage::has_bankmoney1() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GLSyncPlayerMoneyMessage::set_has_bankmoney1() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GLSyncPlayerMoneyMessage::clear_has_bankmoney1() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GLSyncPlayerMoneyMessage::clear_bankmoney1() {
  bankmoney1_ = 0;
  clear_has_bankmoney1();
}
inline double GLSyncPlayerMoneyMessage::bankmoney1() const {
  return bankmoney1_;
}
inline void GLSyncPlayerMoneyMessage::set_bankmoney1(double value) {
  set_has_bankmoney1();
  bankmoney1_ = value;
}

// optional double bankmoney2 = 9;
inline bool GLSyncPlayerMoneyMessage::has_bankmoney2() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GLSyncPlayerMoneyMessage::set_has_bankmoney2() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GLSyncPlayerMoneyMessage::clear_has_bankmoney2() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GLSyncPlayerMoneyMessage::clear_bankmoney2() {
  bankmoney2_ = 0;
  clear_has_bankmoney2();
}
inline double GLSyncPlayerMoneyMessage::bankmoney2() const {
  return bankmoney2_;
}
inline void GLSyncPlayerMoneyMessage::set_bankmoney2(double value) {
  set_has_bankmoney2();
  bankmoney2_ = value;
}

// optional string others = 10;
inline bool GLSyncPlayerMoneyMessage::has_others() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GLSyncPlayerMoneyMessage::set_has_others() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GLSyncPlayerMoneyMessage::clear_has_others() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GLSyncPlayerMoneyMessage::clear_others() {
  if (others_ != &::google::protobuf::internal::kEmptyString) {
    others_->clear();
  }
  clear_has_others();
}
inline const ::std::string& GLSyncPlayerMoneyMessage::others() const {
  return *others_;
}
inline void GLSyncPlayerMoneyMessage::set_others(const ::std::string& value) {
  set_has_others();
  if (others_ == &::google::protobuf::internal::kEmptyString) {
    others_ = new ::std::string;
  }
  others_->assign(value);
}
inline void GLSyncPlayerMoneyMessage::set_others(const char* value) {
  set_has_others();
  if (others_ == &::google::protobuf::internal::kEmptyString) {
    others_ = new ::std::string;
  }
  others_->assign(value);
}
inline void GLSyncPlayerMoneyMessage::set_others(const char* value, size_t size) {
  set_has_others();
  if (others_ == &::google::protobuf::internal::kEmptyString) {
    others_ = new ::std::string;
  }
  others_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GLSyncPlayerMoneyMessage::mutable_others() {
  set_has_others();
  if (others_ == &::google::protobuf::internal::kEmptyString) {
    others_ = new ::std::string;
  }
  return others_;
}
inline ::std::string* GLSyncPlayerMoneyMessage::release_others() {
  clear_has_others();
  if (others_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = others_;
    others_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace game
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< com::game::proto::Protos_Rpc>() {
  return com::game::proto::Protos_Rpc_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RpcMessage_2eproto__INCLUDED
