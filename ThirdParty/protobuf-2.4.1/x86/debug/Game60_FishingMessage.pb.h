// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Game60_FishingMessage.proto

#ifndef PROTOBUF_Game60_5fFishingMessage_2eproto__INCLUDED
#define PROTOBUF_Game60_5fFishingMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace game {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Game60_5fFishingMessage_2eproto();
void protobuf_AssignDesc_Game60_5fFishingMessage_2eproto();
void protobuf_ShutdownFile_Game60_5fFishingMessage_2eproto();

class ReqEnterFishServerMessage;
class ResEnterFishServerMessage;
class ReqJoinRoomMessage;
class ResJoinRoomMessage;
class ResCmdFishMessage;
class ResCmdSyncFishMessage;
class ReqBulletMessage;
class ResBulletMessage;
class ResCatchedFreezeMessage;
class ResCatchedMessage;
class FishCatchedInfo;
class ResClearSceneMessage;
class ResPlayerJoinMessage;
class PlayerData;
class ReqChangeLauncherMessage;
class ResChangeLauncherMessage;
class ReqChangeRateMessage;
class ResChangeRateMessage;
class SyncBulletData;
class ResSyncBulletDataMessage;
class ReqLeaveGameMessage;
class ResLeaveGameMessage;
class ReqLookUpPlayerInfoMessage;
class ResLookUpPlayerInfoMessage;
class ResConnectFinishMessage;
class ReqStartSyncFishMessage;
class ResPlayerTickOutMessage;
class ResSyncAddMoneyMessage;
class ResUseGoodsKBMessage;
class ResUseGoodsBDMessage;

enum Protos_Game60Fishing {
  ReqEnterFishServer = 6001,
  ResEnterFishServer = 6002,
  ReqJoinRoom = 6003,
  ResJoinRoom = 6004,
  ResCmdFish = 6006,
  ResCmdSyncFish = 6008,
  ReqBullet = 6009,
  ResBullet = 6010,
  ResCatched = 6012,
  ResClearScene = 6014,
  ResPlayerJoin = 6016,
  ReqChangeLauncher = 6017,
  ResChangeLauncher = 6018,
  ReqChangeRate = 6019,
  ResChangeRate = 6020,
  ResCatchedFreeze = 6022,
  ResSyncBulletData = 6024,
  ReqLeaveGame = 6025,
  ResLeaveGame = 6026,
  ReqLookUpPlayerInfo = 6027,
  ResLookUpPlayerInfo = 6028,
  ResConnectFinish = 6030,
  ReqStartSyncFish = 6031,
  ResPlayerTickOut = 6032,
  ResSyncAddMoney = 6034,
  ResUseGoodsKB = 6036,
  ResUseGoodsBD = 6038
};
bool Protos_Game60Fishing_IsValid(int value);
const Protos_Game60Fishing Protos_Game60Fishing_MIN = ReqEnterFishServer;
const Protos_Game60Fishing Protos_Game60Fishing_MAX = ResUseGoodsBD;
const int Protos_Game60Fishing_ARRAYSIZE = Protos_Game60Fishing_MAX + 1;

const ::google::protobuf::EnumDescriptor* Protos_Game60Fishing_descriptor();
inline const ::std::string& Protos_Game60Fishing_Name(Protos_Game60Fishing value) {
  return ::google::protobuf::internal::NameOfEnum(
    Protos_Game60Fishing_descriptor(), value);
}
inline bool Protos_Game60Fishing_Parse(
    const ::std::string& name, Protos_Game60Fishing* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Protos_Game60Fishing>(
    Protos_Game60Fishing_descriptor(), name, value);
}
// ===================================================================

class ReqEnterFishServerMessage : public ::google::protobuf::Message {
 public:
  ReqEnterFishServerMessage();
  virtual ~ReqEnterFishServerMessage();
  
  ReqEnterFishServerMessage(const ReqEnterFishServerMessage& from);
  
  inline ReqEnterFishServerMessage& operator=(const ReqEnterFishServerMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqEnterFishServerMessage& default_instance();
  
  void Swap(ReqEnterFishServerMessage* other);
  
  // implements Message ----------------------------------------------
  
  ReqEnterFishServerMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqEnterFishServerMessage& from);
  void MergeFrom(const ReqEnterFishServerMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ReqEnterFishServer];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline com::game::proto::Protos_Game60Fishing msgid() const;
  inline void set_msgid(com::game::proto::Protos_Game60Fishing value);
  
  // required int64 playerOnlyID = 2;
  inline bool has_playeronlyid() const;
  inline void clear_playeronlyid();
  static const int kPlayerOnlyIDFieldNumber = 2;
  inline ::google::protobuf::int64 playeronlyid() const;
  inline void set_playeronlyid(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:com.game.proto.ReqEnterFishServerMessage)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_playeronlyid();
  inline void clear_has_playeronlyid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 playeronlyid_;
  int msgid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game60_5fFishingMessage_2eproto();
  friend void protobuf_AssignDesc_Game60_5fFishingMessage_2eproto();
  friend void protobuf_ShutdownFile_Game60_5fFishingMessage_2eproto();
  
  void InitAsDefaultInstance();
  static ReqEnterFishServerMessage* default_instance_;
};
// -------------------------------------------------------------------

class ResEnterFishServerMessage : public ::google::protobuf::Message {
 public:
  ResEnterFishServerMessage();
  virtual ~ResEnterFishServerMessage();
  
  ResEnterFishServerMessage(const ResEnterFishServerMessage& from);
  
  inline ResEnterFishServerMessage& operator=(const ResEnterFishServerMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResEnterFishServerMessage& default_instance();
  
  void Swap(ResEnterFishServerMessage* other);
  
  // implements Message ----------------------------------------------
  
  ResEnterFishServerMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResEnterFishServerMessage& from);
  void MergeFrom(const ResEnterFishServerMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResEnterFishServer];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline com::game::proto::Protos_Game60Fishing msgid() const;
  inline void set_msgid(com::game::proto::Protos_Game60Fishing value);
  
  // required int32 serverState = 2;
  inline bool has_serverstate() const;
  inline void clear_serverstate();
  static const int kServerStateFieldNumber = 2;
  inline ::google::protobuf::int32 serverstate() const;
  inline void set_serverstate(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.game.proto.ResEnterFishServerMessage)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_serverstate();
  inline void clear_has_serverstate();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int msgid_;
  ::google::protobuf::int32 serverstate_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game60_5fFishingMessage_2eproto();
  friend void protobuf_AssignDesc_Game60_5fFishingMessage_2eproto();
  friend void protobuf_ShutdownFile_Game60_5fFishingMessage_2eproto();
  
  void InitAsDefaultInstance();
  static ResEnterFishServerMessage* default_instance_;
};
// -------------------------------------------------------------------

class ReqJoinRoomMessage : public ::google::protobuf::Message {
 public:
  ReqJoinRoomMessage();
  virtual ~ReqJoinRoomMessage();
  
  ReqJoinRoomMessage(const ReqJoinRoomMessage& from);
  
  inline ReqJoinRoomMessage& operator=(const ReqJoinRoomMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqJoinRoomMessage& default_instance();
  
  void Swap(ReqJoinRoomMessage* other);
  
  // implements Message ----------------------------------------------
  
  ReqJoinRoomMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqJoinRoomMessage& from);
  void MergeFrom(const ReqJoinRoomMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ReqJoinRoom];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline com::game::proto::Protos_Game60Fishing msgid() const;
  inline void set_msgid(com::game::proto::Protos_Game60Fishing value);
  
  // required int32 roomID = 2;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomIDFieldNumber = 2;
  inline ::google::protobuf::int32 roomid() const;
  inline void set_roomid(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.game.proto.ReqJoinRoomMessage)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int msgid_;
  ::google::protobuf::int32 roomid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game60_5fFishingMessage_2eproto();
  friend void protobuf_AssignDesc_Game60_5fFishingMessage_2eproto();
  friend void protobuf_ShutdownFile_Game60_5fFishingMessage_2eproto();
  
  void InitAsDefaultInstance();
  static ReqJoinRoomMessage* default_instance_;
};
// -------------------------------------------------------------------

class ResJoinRoomMessage : public ::google::protobuf::Message {
 public:
  ResJoinRoomMessage();
  virtual ~ResJoinRoomMessage();
  
  ResJoinRoomMessage(const ResJoinRoomMessage& from);
  
  inline ResJoinRoomMessage& operator=(const ResJoinRoomMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResJoinRoomMessage& default_instance();
  
  void Swap(ResJoinRoomMessage* other);
  
  // implements Message ----------------------------------------------
  
  ResJoinRoomMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResJoinRoomMessage& from);
  void MergeFrom(const ResJoinRoomMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResJoinRoom];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline com::game::proto::Protos_Game60Fishing msgid() const;
  inline void set_msgid(com::game::proto::Protos_Game60Fishing value);
  
  // required bool result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline bool result() const;
  inline void set_result(bool value);
  
  // required int32 roomID = 3;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomIDFieldNumber = 3;
  inline ::google::protobuf::int32 roomid() const;
  inline void set_roomid(::google::protobuf::int32 value);
  
  // optional int32 backgroundImage = 4;
  inline bool has_backgroundimage() const;
  inline void clear_backgroundimage();
  static const int kBackgroundImageFieldNumber = 4;
  inline ::google::protobuf::int32 backgroundimage() const;
  inline void set_backgroundimage(::google::protobuf::int32 value);
  
  // optional .com.game.proto.PlayerData playerData = 5;
  inline bool has_playerdata() const;
  inline void clear_playerdata();
  static const int kPlayerDataFieldNumber = 5;
  inline const ::com::game::proto::PlayerData& playerdata() const;
  inline ::com::game::proto::PlayerData* mutable_playerdata();
  inline ::com::game::proto::PlayerData* release_playerdata();
  
  // @@protoc_insertion_point(class_scope:com.game.proto.ResJoinRoomMessage)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_backgroundimage();
  inline void clear_has_backgroundimage();
  inline void set_has_playerdata();
  inline void clear_has_playerdata();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int msgid_;
  bool result_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int32 backgroundimage_;
  ::com::game::proto::PlayerData* playerdata_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game60_5fFishingMessage_2eproto();
  friend void protobuf_AssignDesc_Game60_5fFishingMessage_2eproto();
  friend void protobuf_ShutdownFile_Game60_5fFishingMessage_2eproto();
  
  void InitAsDefaultInstance();
  static ResJoinRoomMessage* default_instance_;
};
// -------------------------------------------------------------------

class ResCmdFishMessage : public ::google::protobuf::Message {
 public:
  ResCmdFishMessage();
  virtual ~ResCmdFishMessage();
  
  ResCmdFishMessage(const ResCmdFishMessage& from);
  
  inline ResCmdFishMessage& operator=(const ResCmdFishMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResCmdFishMessage& default_instance();
  
  void Swap(ResCmdFishMessage* other);
  
  // implements Message ----------------------------------------------
  
  ResCmdFishMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResCmdFishMessage& from);
  void MergeFrom(const ResCmdFishMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResCmdFish];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline com::game::proto::Protos_Game60Fishing msgid() const;
  inline void set_msgid(com::game::proto::Protos_Game60Fishing value);
  
  // required int32 groupID = 2;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIDFieldNumber = 2;
  inline ::google::protobuf::int32 groupid() const;
  inline void set_groupid(::google::protobuf::int32 value);
  
  // required int32 startID = 3;
  inline bool has_startid() const;
  inline void clear_startid();
  static const int kStartIDFieldNumber = 3;
  inline ::google::protobuf::int32 startid() const;
  inline void set_startid(::google::protobuf::int32 value);
  
  // required int32 pathID = 4;
  inline bool has_pathid() const;
  inline void clear_pathid();
  static const int kPathIDFieldNumber = 4;
  inline ::google::protobuf::int32 pathid() const;
  inline void set_pathid(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.game.proto.ResCmdFishMessage)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_startid();
  inline void clear_has_startid();
  inline void set_has_pathid();
  inline void clear_has_pathid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int msgid_;
  ::google::protobuf::int32 groupid_;
  ::google::protobuf::int32 startid_;
  ::google::protobuf::int32 pathid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game60_5fFishingMessage_2eproto();
  friend void protobuf_AssignDesc_Game60_5fFishingMessage_2eproto();
  friend void protobuf_ShutdownFile_Game60_5fFishingMessage_2eproto();
  
  void InitAsDefaultInstance();
  static ResCmdFishMessage* default_instance_;
};
// -------------------------------------------------------------------

class ResCmdSyncFishMessage : public ::google::protobuf::Message {
 public:
  ResCmdSyncFishMessage();
  virtual ~ResCmdSyncFishMessage();
  
  ResCmdSyncFishMessage(const ResCmdSyncFishMessage& from);
  
  inline ResCmdSyncFishMessage& operator=(const ResCmdSyncFishMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResCmdSyncFishMessage& default_instance();
  
  void Swap(ResCmdSyncFishMessage* other);
  
  // implements Message ----------------------------------------------
  
  ResCmdSyncFishMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResCmdSyncFishMessage& from);
  void MergeFrom(const ResCmdSyncFishMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResCmdSyncFish];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline com::game::proto::Protos_Game60Fishing msgid() const;
  inline void set_msgid(com::game::proto::Protos_Game60Fishing value);
  
  // required int32 fishID = 2;
  inline bool has_fishid() const;
  inline void clear_fishid();
  static const int kFishIDFieldNumber = 2;
  inline ::google::protobuf::int32 fishid() const;
  inline void set_fishid(::google::protobuf::int32 value);
  
  // required int32 groupID = 3;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIDFieldNumber = 3;
  inline ::google::protobuf::int32 groupid() const;
  inline void set_groupid(::google::protobuf::int32 value);
  
  // required double fishTime = 4;
  inline bool has_fishtime() const;
  inline void clear_fishtime();
  static const int kFishTimeFieldNumber = 4;
  inline double fishtime() const;
  inline void set_fishtime(double value);
  
  // required int32 pathGroup = 5;
  inline bool has_pathgroup() const;
  inline void clear_pathgroup();
  static const int kPathGroupFieldNumber = 5;
  inline ::google::protobuf::int32 pathgroup() const;
  inline void set_pathgroup(::google::protobuf::int32 value);
  
  // required int32 pathIdx = 6;
  inline bool has_pathidx() const;
  inline void clear_pathidx();
  static const int kPathIdxFieldNumber = 6;
  inline ::google::protobuf::int32 pathidx() const;
  inline void set_pathidx(::google::protobuf::int32 value);
  
  // optional bool isActiveEvent = 7;
  inline bool has_isactiveevent() const;
  inline void clear_isactiveevent();
  static const int kIsActiveEventFieldNumber = 7;
  inline bool isactiveevent() const;
  inline void set_isactiveevent(bool value);
  
  // optional int32 elapsedTime = 8;
  inline bool has_elapsedtime() const;
  inline void clear_elapsedtime();
  static const int kElapsedTimeFieldNumber = 8;
  inline ::google::protobuf::int32 elapsedtime() const;
  inline void set_elapsedtime(::google::protobuf::int32 value);
  
  // optional int32 delayType = 9;
  inline bool has_delaytype() const;
  inline void clear_delaytype();
  static const int kDelayTypeFieldNumber = 9;
  inline ::google::protobuf::int32 delaytype() const;
  inline void set_delaytype(::google::protobuf::int32 value);
  
  // optional int32 delayScaling = 10;
  inline bool has_delayscaling() const;
  inline void clear_delayscaling();
  static const int kDelayScalingFieldNumber = 10;
  inline ::google::protobuf::int32 delayscaling() const;
  inline void set_delayscaling(::google::protobuf::int32 value);
  
  // optional int32 delayDuration1 = 11;
  inline bool has_delayduration1() const;
  inline void clear_delayduration1();
  static const int kDelayDuration1FieldNumber = 11;
  inline ::google::protobuf::int32 delayduration1() const;
  inline void set_delayduration1(::google::protobuf::int32 value);
  
  // optional int32 delayDuration2 = 12;
  inline bool has_delayduration2() const;
  inline void clear_delayduration2();
  static const int kDelayDuration2FieldNumber = 12;
  inline ::google::protobuf::int32 delayduration2() const;
  inline void set_delayduration2(::google::protobuf::int32 value);
  
  // optional int32 delayDuration3 = 13;
  inline bool has_delayduration3() const;
  inline void clear_delayduration3();
  static const int kDelayDuration3FieldNumber = 13;
  inline ::google::protobuf::int32 delayduration3() const;
  inline void set_delayduration3(::google::protobuf::int32 value);
  
  // optional int32 delayCurrentTime = 14;
  inline bool has_delaycurrenttime() const;
  inline void clear_delaycurrenttime();
  static const int kDelayCurrentTimeFieldNumber = 14;
  inline ::google::protobuf::int32 delaycurrenttime() const;
  inline void set_delaycurrenttime(::google::protobuf::int32 value);
  
  // optional int32 package = 15;
  inline bool has_package() const;
  inline void clear_package();
  static const int kPackageFieldNumber = 15;
  inline ::google::protobuf::int32 package() const;
  inline void set_package(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.game.proto.ResCmdSyncFishMessage)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_fishid();
  inline void clear_has_fishid();
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_fishtime();
  inline void clear_has_fishtime();
  inline void set_has_pathgroup();
  inline void clear_has_pathgroup();
  inline void set_has_pathidx();
  inline void clear_has_pathidx();
  inline void set_has_isactiveevent();
  inline void clear_has_isactiveevent();
  inline void set_has_elapsedtime();
  inline void clear_has_elapsedtime();
  inline void set_has_delaytype();
  inline void clear_has_delaytype();
  inline void set_has_delayscaling();
  inline void clear_has_delayscaling();
  inline void set_has_delayduration1();
  inline void clear_has_delayduration1();
  inline void set_has_delayduration2();
  inline void clear_has_delayduration2();
  inline void set_has_delayduration3();
  inline void clear_has_delayduration3();
  inline void set_has_delaycurrenttime();
  inline void clear_has_delaycurrenttime();
  inline void set_has_package();
  inline void clear_has_package();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int msgid_;
  ::google::protobuf::int32 fishid_;
  double fishtime_;
  ::google::protobuf::int32 groupid_;
  ::google::protobuf::int32 pathgroup_;
  ::google::protobuf::int32 pathidx_;
  bool isactiveevent_;
  ::google::protobuf::int32 elapsedtime_;
  ::google::protobuf::int32 delaytype_;
  ::google::protobuf::int32 delayscaling_;
  ::google::protobuf::int32 delayduration1_;
  ::google::protobuf::int32 delayduration2_;
  ::google::protobuf::int32 delayduration3_;
  ::google::protobuf::int32 delaycurrenttime_;
  ::google::protobuf::int32 package_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game60_5fFishingMessage_2eproto();
  friend void protobuf_AssignDesc_Game60_5fFishingMessage_2eproto();
  friend void protobuf_ShutdownFile_Game60_5fFishingMessage_2eproto();
  
  void InitAsDefaultInstance();
  static ResCmdSyncFishMessage* default_instance_;
};
// -------------------------------------------------------------------

class ReqBulletMessage : public ::google::protobuf::Message {
 public:
  ReqBulletMessage();
  virtual ~ReqBulletMessage();
  
  ReqBulletMessage(const ReqBulletMessage& from);
  
  inline ReqBulletMessage& operator=(const ReqBulletMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqBulletMessage& default_instance();
  
  void Swap(ReqBulletMessage* other);
  
  // implements Message ----------------------------------------------
  
  ReqBulletMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqBulletMessage& from);
  void MergeFrom(const ReqBulletMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ReqBullet];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline com::game::proto::Protos_Game60Fishing msgid() const;
  inline void set_msgid(com::game::proto::Protos_Game60Fishing value);
  
  // required int32 angle = 2;
  inline bool has_angle() const;
  inline void clear_angle();
  static const int kAngleFieldNumber = 2;
  inline ::google::protobuf::int32 angle() const;
  inline void set_angle(::google::protobuf::int32 value);
  
  // optional int32 lockFishID = 3;
  inline bool has_lockfishid() const;
  inline void clear_lockfishid();
  static const int kLockFishIDFieldNumber = 3;
  inline ::google::protobuf::int32 lockfishid() const;
  inline void set_lockfishid(::google::protobuf::int32 value);
  
  // required int32 launcherType = 4;
  inline bool has_launchertype() const;
  inline void clear_launchertype();
  static const int kLauncherTypeFieldNumber = 4;
  inline ::google::protobuf::int32 launchertype() const;
  inline void set_launchertype(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.game.proto.ReqBulletMessage)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_angle();
  inline void clear_has_angle();
  inline void set_has_lockfishid();
  inline void clear_has_lockfishid();
  inline void set_has_launchertype();
  inline void clear_has_launchertype();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int msgid_;
  ::google::protobuf::int32 angle_;
  ::google::protobuf::int32 lockfishid_;
  ::google::protobuf::int32 launchertype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game60_5fFishingMessage_2eproto();
  friend void protobuf_AssignDesc_Game60_5fFishingMessage_2eproto();
  friend void protobuf_ShutdownFile_Game60_5fFishingMessage_2eproto();
  
  void InitAsDefaultInstance();
  static ReqBulletMessage* default_instance_;
};
// -------------------------------------------------------------------

class ResBulletMessage : public ::google::protobuf::Message {
 public:
  ResBulletMessage();
  virtual ~ResBulletMessage();
  
  ResBulletMessage(const ResBulletMessage& from);
  
  inline ResBulletMessage& operator=(const ResBulletMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResBulletMessage& default_instance();
  
  void Swap(ResBulletMessage* other);
  
  // implements Message ----------------------------------------------
  
  ResBulletMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResBulletMessage& from);
  void MergeFrom(const ResBulletMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResBullet];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline com::game::proto::Protos_Game60Fishing msgid() const;
  inline void set_msgid(com::game::proto::Protos_Game60Fishing value);
  
  // required int32 bulletID = 2;
  inline bool has_bulletid() const;
  inline void clear_bulletid();
  static const int kBulletIDFieldNumber = 2;
  inline ::google::protobuf::int32 bulletid() const;
  inline void set_bulletid(::google::protobuf::int32 value);
  
  // required int32 launcherType = 3;
  inline bool has_launchertype() const;
  inline void clear_launchertype();
  static const int kLauncherTypeFieldNumber = 3;
  inline ::google::protobuf::int32 launchertype() const;
  inline void set_launchertype(::google::protobuf::int32 value);
  
  // required int32 angle = 4;
  inline bool has_angle() const;
  inline void clear_angle();
  static const int kAngleFieldNumber = 4;
  inline ::google::protobuf::int32 angle() const;
  inline void set_angle(::google::protobuf::int32 value);
  
  // optional int32 energy = 5;
  inline bool has_energy() const;
  inline void clear_energy();
  static const int kEnergyFieldNumber = 5;
  inline ::google::protobuf::int32 energy() const;
  inline void set_energy(::google::protobuf::int32 value);
  
  // optional int32 reboundCount = 6;
  inline bool has_reboundcount() const;
  inline void clear_reboundcount();
  static const int kReboundCountFieldNumber = 6;
  inline ::google::protobuf::int32 reboundcount() const;
  inline void set_reboundcount(::google::protobuf::int32 value);
  
  // optional int32 lockFishID = 7;
  inline bool has_lockfishid() const;
  inline void clear_lockfishid();
  static const int kLockFishIDFieldNumber = 7;
  inline ::google::protobuf::int32 lockfishid() const;
  inline void set_lockfishid(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.game.proto.ResBulletMessage)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_bulletid();
  inline void clear_has_bulletid();
  inline void set_has_launchertype();
  inline void clear_has_launchertype();
  inline void set_has_angle();
  inline void clear_has_angle();
  inline void set_has_energy();
  inline void clear_has_energy();
  inline void set_has_reboundcount();
  inline void clear_has_reboundcount();
  inline void set_has_lockfishid();
  inline void clear_has_lockfishid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int msgid_;
  ::google::protobuf::int32 bulletid_;
  ::google::protobuf::int32 launchertype_;
  ::google::protobuf::int32 angle_;
  ::google::protobuf::int32 energy_;
  ::google::protobuf::int32 reboundcount_;
  ::google::protobuf::int32 lockfishid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game60_5fFishingMessage_2eproto();
  friend void protobuf_AssignDesc_Game60_5fFishingMessage_2eproto();
  friend void protobuf_ShutdownFile_Game60_5fFishingMessage_2eproto();
  
  void InitAsDefaultInstance();
  static ResBulletMessage* default_instance_;
};
// -------------------------------------------------------------------

class ResCatchedFreezeMessage : public ::google::protobuf::Message {
 public:
  ResCatchedFreezeMessage();
  virtual ~ResCatchedFreezeMessage();
  
  ResCatchedFreezeMessage(const ResCatchedFreezeMessage& from);
  
  inline ResCatchedFreezeMessage& operator=(const ResCatchedFreezeMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResCatchedFreezeMessage& default_instance();
  
  void Swap(ResCatchedFreezeMessage* other);
  
  // implements Message ----------------------------------------------
  
  ResCatchedFreezeMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResCatchedFreezeMessage& from);
  void MergeFrom(const ResCatchedFreezeMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResCatchedFreeze];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline com::game::proto::Protos_Game60Fishing msgid() const;
  inline void set_msgid(com::game::proto::Protos_Game60Fishing value);
  
  // required int32 bulletID = 2;
  inline bool has_bulletid() const;
  inline void clear_bulletid();
  static const int kBulletIDFieldNumber = 2;
  inline ::google::protobuf::int32 bulletid() const;
  inline void set_bulletid(::google::protobuf::int32 value);
  
  // required int32 combo = 3;
  inline bool has_combo() const;
  inline void clear_combo();
  static const int kComboFieldNumber = 3;
  inline ::google::protobuf::int32 combo() const;
  inline void set_combo(::google::protobuf::int32 value);
  
  // required int32 goldNum = 4;
  inline bool has_goldnum() const;
  inline void clear_goldnum();
  static const int kGoldNumFieldNumber = 4;
  inline ::google::protobuf::int32 goldnum() const;
  inline void set_goldnum(::google::protobuf::int32 value);
  
  // optional int32 TotalNum = 5;
  inline bool has_totalnum() const;
  inline void clear_totalnum();
  static const int kTotalNumFieldNumber = 5;
  inline ::google::protobuf::int32 totalnum() const;
  inline void set_totalnum(::google::protobuf::int32 value);
  
  // repeated .com.game.proto.FishCatchedInfo fishCatchedList = 6;
  inline int fishcatchedlist_size() const;
  inline void clear_fishcatchedlist();
  static const int kFishCatchedListFieldNumber = 6;
  inline const ::com::game::proto::FishCatchedInfo& fishcatchedlist(int index) const;
  inline ::com::game::proto::FishCatchedInfo* mutable_fishcatchedlist(int index);
  inline ::com::game::proto::FishCatchedInfo* add_fishcatchedlist();
  inline const ::google::protobuf::RepeatedPtrField< ::com::game::proto::FishCatchedInfo >&
      fishcatchedlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::game::proto::FishCatchedInfo >*
      mutable_fishcatchedlist();
  
  // @@protoc_insertion_point(class_scope:com.game.proto.ResCatchedFreezeMessage)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_bulletid();
  inline void clear_has_bulletid();
  inline void set_has_combo();
  inline void clear_has_combo();
  inline void set_has_goldnum();
  inline void clear_has_goldnum();
  inline void set_has_totalnum();
  inline void clear_has_totalnum();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int msgid_;
  ::google::protobuf::int32 bulletid_;
  ::google::protobuf::int32 combo_;
  ::google::protobuf::int32 goldnum_;
  ::google::protobuf::RepeatedPtrField< ::com::game::proto::FishCatchedInfo > fishcatchedlist_;
  ::google::protobuf::int32 totalnum_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game60_5fFishingMessage_2eproto();
  friend void protobuf_AssignDesc_Game60_5fFishingMessage_2eproto();
  friend void protobuf_ShutdownFile_Game60_5fFishingMessage_2eproto();
  
  void InitAsDefaultInstance();
  static ResCatchedFreezeMessage* default_instance_;
};
// -------------------------------------------------------------------

class ResCatchedMessage : public ::google::protobuf::Message {
 public:
  ResCatchedMessage();
  virtual ~ResCatchedMessage();
  
  ResCatchedMessage(const ResCatchedMessage& from);
  
  inline ResCatchedMessage& operator=(const ResCatchedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResCatchedMessage& default_instance();
  
  void Swap(ResCatchedMessage* other);
  
  // implements Message ----------------------------------------------
  
  ResCatchedMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResCatchedMessage& from);
  void MergeFrom(const ResCatchedMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResCatched];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline com::game::proto::Protos_Game60Fishing msgid() const;
  inline void set_msgid(com::game::proto::Protos_Game60Fishing value);
  
  // required int32 bulletID = 2;
  inline bool has_bulletid() const;
  inline void clear_bulletid();
  static const int kBulletIDFieldNumber = 2;
  inline ::google::protobuf::int32 bulletid() const;
  inline void set_bulletid(::google::protobuf::int32 value);
  
  // required int32 combo = 3;
  inline bool has_combo() const;
  inline void clear_combo();
  static const int kComboFieldNumber = 3;
  inline ::google::protobuf::int32 combo() const;
  inline void set_combo(::google::protobuf::int32 value);
  
  // required int32 goldNum = 4;
  inline bool has_goldnum() const;
  inline void clear_goldnum();
  static const int kGoldNumFieldNumber = 4;
  inline ::google::protobuf::int32 goldnum() const;
  inline void set_goldnum(::google::protobuf::int32 value);
  
  // optional int32 TotalNum = 5;
  inline bool has_totalnum() const;
  inline void clear_totalnum();
  static const int kTotalNumFieldNumber = 5;
  inline ::google::protobuf::int32 totalnum() const;
  inline void set_totalnum(::google::protobuf::int32 value);
  
  // repeated .com.game.proto.FishCatchedInfo fishCatchedList = 6;
  inline int fishcatchedlist_size() const;
  inline void clear_fishcatchedlist();
  static const int kFishCatchedListFieldNumber = 6;
  inline const ::com::game::proto::FishCatchedInfo& fishcatchedlist(int index) const;
  inline ::com::game::proto::FishCatchedInfo* mutable_fishcatchedlist(int index);
  inline ::com::game::proto::FishCatchedInfo* add_fishcatchedlist();
  inline const ::google::protobuf::RepeatedPtrField< ::com::game::proto::FishCatchedInfo >&
      fishcatchedlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::game::proto::FishCatchedInfo >*
      mutable_fishcatchedlist();
  
  // @@protoc_insertion_point(class_scope:com.game.proto.ResCatchedMessage)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_bulletid();
  inline void clear_has_bulletid();
  inline void set_has_combo();
  inline void clear_has_combo();
  inline void set_has_goldnum();
  inline void clear_has_goldnum();
  inline void set_has_totalnum();
  inline void clear_has_totalnum();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int msgid_;
  ::google::protobuf::int32 bulletid_;
  ::google::protobuf::int32 combo_;
  ::google::protobuf::int32 goldnum_;
  ::google::protobuf::RepeatedPtrField< ::com::game::proto::FishCatchedInfo > fishcatchedlist_;
  ::google::protobuf::int32 totalnum_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game60_5fFishingMessage_2eproto();
  friend void protobuf_AssignDesc_Game60_5fFishingMessage_2eproto();
  friend void protobuf_ShutdownFile_Game60_5fFishingMessage_2eproto();
  
  void InitAsDefaultInstance();
  static ResCatchedMessage* default_instance_;
};
// -------------------------------------------------------------------

class FishCatchedInfo : public ::google::protobuf::Message {
 public:
  FishCatchedInfo();
  virtual ~FishCatchedInfo();
  
  FishCatchedInfo(const FishCatchedInfo& from);
  
  inline FishCatchedInfo& operator=(const FishCatchedInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FishCatchedInfo& default_instance();
  
  void Swap(FishCatchedInfo* other);
  
  // implements Message ----------------------------------------------
  
  FishCatchedInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FishCatchedInfo& from);
  void MergeFrom(const FishCatchedInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 catchEvent = 1;
  inline bool has_catchevent() const;
  inline void clear_catchevent();
  static const int kCatchEventFieldNumber = 1;
  inline ::google::protobuf::int32 catchevent() const;
  inline void set_catchevent(::google::protobuf::int32 value);
  
  // required int32 fishID = 2;
  inline bool has_fishid() const;
  inline void clear_fishid();
  static const int kFishIDFieldNumber = 2;
  inline ::google::protobuf::int32 fishid() const;
  inline void set_fishid(::google::protobuf::int32 value);
  
  // optional int32 nReward = 3;
  inline bool has_nreward() const;
  inline void clear_nreward();
  static const int kNRewardFieldNumber = 3;
  inline ::google::protobuf::int32 nreward() const;
  inline void set_nreward(::google::protobuf::int32 value);
  
  // optional int32 lightingFishID = 4;
  inline bool has_lightingfishid() const;
  inline void clear_lightingfishid();
  static const int kLightingFishIDFieldNumber = 4;
  inline ::google::protobuf::int32 lightingfishid() const;
  inline void set_lightingfishid(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.game.proto.FishCatchedInfo)
 private:
  inline void set_has_catchevent();
  inline void clear_has_catchevent();
  inline void set_has_fishid();
  inline void clear_has_fishid();
  inline void set_has_nreward();
  inline void clear_has_nreward();
  inline void set_has_lightingfishid();
  inline void clear_has_lightingfishid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 catchevent_;
  ::google::protobuf::int32 fishid_;
  ::google::protobuf::int32 nreward_;
  ::google::protobuf::int32 lightingfishid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game60_5fFishingMessage_2eproto();
  friend void protobuf_AssignDesc_Game60_5fFishingMessage_2eproto();
  friend void protobuf_ShutdownFile_Game60_5fFishingMessage_2eproto();
  
  void InitAsDefaultInstance();
  static FishCatchedInfo* default_instance_;
};
// -------------------------------------------------------------------

class ResClearSceneMessage : public ::google::protobuf::Message {
 public:
  ResClearSceneMessage();
  virtual ~ResClearSceneMessage();
  
  ResClearSceneMessage(const ResClearSceneMessage& from);
  
  inline ResClearSceneMessage& operator=(const ResClearSceneMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResClearSceneMessage& default_instance();
  
  void Swap(ResClearSceneMessage* other);
  
  // implements Message ----------------------------------------------
  
  ResClearSceneMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResClearSceneMessage& from);
  void MergeFrom(const ResClearSceneMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResClearScene];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline com::game::proto::Protos_Game60Fishing msgid() const;
  inline void set_msgid(com::game::proto::Protos_Game60Fishing value);
  
  // required int32 clearType = 2;
  inline bool has_cleartype() const;
  inline void clear_cleartype();
  static const int kClearTypeFieldNumber = 2;
  inline ::google::protobuf::int32 cleartype() const;
  inline void set_cleartype(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.game.proto.ResClearSceneMessage)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_cleartype();
  inline void clear_has_cleartype();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int msgid_;
  ::google::protobuf::int32 cleartype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game60_5fFishingMessage_2eproto();
  friend void protobuf_AssignDesc_Game60_5fFishingMessage_2eproto();
  friend void protobuf_ShutdownFile_Game60_5fFishingMessage_2eproto();
  
  void InitAsDefaultInstance();
  static ResClearSceneMessage* default_instance_;
};
// -------------------------------------------------------------------

class ResPlayerJoinMessage : public ::google::protobuf::Message {
 public:
  ResPlayerJoinMessage();
  virtual ~ResPlayerJoinMessage();
  
  ResPlayerJoinMessage(const ResPlayerJoinMessage& from);
  
  inline ResPlayerJoinMessage& operator=(const ResPlayerJoinMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResPlayerJoinMessage& default_instance();
  
  void Swap(ResPlayerJoinMessage* other);
  
  // implements Message ----------------------------------------------
  
  ResPlayerJoinMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResPlayerJoinMessage& from);
  void MergeFrom(const ResPlayerJoinMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResPlayerJoin];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline com::game::proto::Protos_Game60Fishing msgid() const;
  inline void set_msgid(com::game::proto::Protos_Game60Fishing value);
  
  // required .com.game.proto.PlayerData playerData = 2;
  inline bool has_playerdata() const;
  inline void clear_playerdata();
  static const int kPlayerDataFieldNumber = 2;
  inline const ::com::game::proto::PlayerData& playerdata() const;
  inline ::com::game::proto::PlayerData* mutable_playerdata();
  inline ::com::game::proto::PlayerData* release_playerdata();
  
  // @@protoc_insertion_point(class_scope:com.game.proto.ResPlayerJoinMessage)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_playerdata();
  inline void clear_has_playerdata();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::com::game::proto::PlayerData* playerdata_;
  int msgid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game60_5fFishingMessage_2eproto();
  friend void protobuf_AssignDesc_Game60_5fFishingMessage_2eproto();
  friend void protobuf_ShutdownFile_Game60_5fFishingMessage_2eproto();
  
  void InitAsDefaultInstance();
  static ResPlayerJoinMessage* default_instance_;
};
// -------------------------------------------------------------------

class PlayerData : public ::google::protobuf::Message {
 public:
  PlayerData();
  virtual ~PlayerData();
  
  PlayerData(const PlayerData& from);
  
  inline PlayerData& operator=(const PlayerData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerData& default_instance();
  
  void Swap(PlayerData* other);
  
  // implements Message ----------------------------------------------
  
  PlayerData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerData& from);
  void MergeFrom(const PlayerData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 playerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);
  
  // optional string playerName = 2;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayerNameFieldNumber = 2;
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const char* value, size_t size);
  inline ::std::string* mutable_playername();
  inline ::std::string* release_playername();
  
  // optional int32 sex = 3;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 3;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);
  
  // optional int32 headicon = 4;
  inline bool has_headicon() const;
  inline void clear_headicon();
  static const int kHeadiconFieldNumber = 4;
  inline ::google::protobuf::int32 headicon() const;
  inline void set_headicon(::google::protobuf::int32 value);
  
  // optional string icon = 5;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 5;
  inline const ::std::string& icon() const;
  inline void set_icon(const ::std::string& value);
  inline void set_icon(const char* value);
  inline void set_icon(const char* value, size_t size);
  inline ::std::string* mutable_icon();
  inline ::std::string* release_icon();
  
  // optional int32 vipLevel = 6;
  inline bool has_viplevel() const;
  inline void clear_viplevel();
  static const int kVipLevelFieldNumber = 6;
  inline ::google::protobuf::int32 viplevel() const;
  inline void set_viplevel(::google::protobuf::int32 value);
  
  // optional int64 goldNum = 7;
  inline bool has_goldnum() const;
  inline void clear_goldnum();
  static const int kGoldNumFieldNumber = 7;
  inline ::google::protobuf::int64 goldnum() const;
  inline void set_goldnum(::google::protobuf::int64 value);
  
  // optional int32 seat = 8;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 8;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);
  
  // optional int32 launcherType = 9;
  inline bool has_launchertype() const;
  inline void clear_launchertype();
  static const int kLauncherTypeFieldNumber = 9;
  inline ::google::protobuf::int32 launchertype() const;
  inline void set_launchertype(::google::protobuf::int32 value);
  
  // optional int32 rateIndex = 10;
  inline bool has_rateindex() const;
  inline void clear_rateindex();
  static const int kRateIndexFieldNumber = 10;
  inline ::google::protobuf::int32 rateindex() const;
  inline void set_rateindex(::google::protobuf::int32 value);
  
  // optional int32 energy = 11;
  inline bool has_energy() const;
  inline void clear_energy();
  static const int kEnergyFieldNumber = 11;
  inline ::google::protobuf::int32 energy() const;
  inline void set_energy(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.game.proto.PlayerData)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_playername();
  inline void clear_has_playername();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_headicon();
  inline void clear_has_headicon();
  inline void set_has_icon();
  inline void clear_has_icon();
  inline void set_has_viplevel();
  inline void clear_has_viplevel();
  inline void set_has_goldnum();
  inline void clear_has_goldnum();
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_launchertype();
  inline void clear_has_launchertype();
  inline void set_has_rateindex();
  inline void clear_has_rateindex();
  inline void set_has_energy();
  inline void clear_has_energy();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 playerid_;
  ::std::string* playername_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 headicon_;
  ::std::string* icon_;
  ::google::protobuf::int64 goldnum_;
  ::google::protobuf::int32 viplevel_;
  ::google::protobuf::int32 seat_;
  ::google::protobuf::int32 launchertype_;
  ::google::protobuf::int32 rateindex_;
  ::google::protobuf::int32 energy_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game60_5fFishingMessage_2eproto();
  friend void protobuf_AssignDesc_Game60_5fFishingMessage_2eproto();
  friend void protobuf_ShutdownFile_Game60_5fFishingMessage_2eproto();
  
  void InitAsDefaultInstance();
  static PlayerData* default_instance_;
};
// -------------------------------------------------------------------

class ReqChangeLauncherMessage : public ::google::protobuf::Message {
 public:
  ReqChangeLauncherMessage();
  virtual ~ReqChangeLauncherMessage();
  
  ReqChangeLauncherMessage(const ReqChangeLauncherMessage& from);
  
  inline ReqChangeLauncherMessage& operator=(const ReqChangeLauncherMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqChangeLauncherMessage& default_instance();
  
  void Swap(ReqChangeLauncherMessage* other);
  
  // implements Message ----------------------------------------------
  
  ReqChangeLauncherMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqChangeLauncherMessage& from);
  void MergeFrom(const ReqChangeLauncherMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ReqChangeLauncher];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline com::game::proto::Protos_Game60Fishing msgid() const;
  inline void set_msgid(com::game::proto::Protos_Game60Fishing value);
  
  // required int32 seat = 2;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 2;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);
  
  // required int32 launcherType = 3;
  inline bool has_launchertype() const;
  inline void clear_launchertype();
  static const int kLauncherTypeFieldNumber = 3;
  inline ::google::protobuf::int32 launchertype() const;
  inline void set_launchertype(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.game.proto.ReqChangeLauncherMessage)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_launchertype();
  inline void clear_has_launchertype();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int msgid_;
  ::google::protobuf::int32 seat_;
  ::google::protobuf::int32 launchertype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game60_5fFishingMessage_2eproto();
  friend void protobuf_AssignDesc_Game60_5fFishingMessage_2eproto();
  friend void protobuf_ShutdownFile_Game60_5fFishingMessage_2eproto();
  
  void InitAsDefaultInstance();
  static ReqChangeLauncherMessage* default_instance_;
};
// -------------------------------------------------------------------

class ResChangeLauncherMessage : public ::google::protobuf::Message {
 public:
  ResChangeLauncherMessage();
  virtual ~ResChangeLauncherMessage();
  
  ResChangeLauncherMessage(const ResChangeLauncherMessage& from);
  
  inline ResChangeLauncherMessage& operator=(const ResChangeLauncherMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResChangeLauncherMessage& default_instance();
  
  void Swap(ResChangeLauncherMessage* other);
  
  // implements Message ----------------------------------------------
  
  ResChangeLauncherMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResChangeLauncherMessage& from);
  void MergeFrom(const ResChangeLauncherMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResChangeLauncher];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline com::game::proto::Protos_Game60Fishing msgid() const;
  inline void set_msgid(com::game::proto::Protos_Game60Fishing value);
  
  // required int32 seat = 2;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 2;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);
  
  // required int32 launcherType = 3;
  inline bool has_launchertype() const;
  inline void clear_launchertype();
  static const int kLauncherTypeFieldNumber = 3;
  inline ::google::protobuf::int32 launchertype() const;
  inline void set_launchertype(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.game.proto.ResChangeLauncherMessage)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_launchertype();
  inline void clear_has_launchertype();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int msgid_;
  ::google::protobuf::int32 seat_;
  ::google::protobuf::int32 launchertype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game60_5fFishingMessage_2eproto();
  friend void protobuf_AssignDesc_Game60_5fFishingMessage_2eproto();
  friend void protobuf_ShutdownFile_Game60_5fFishingMessage_2eproto();
  
  void InitAsDefaultInstance();
  static ResChangeLauncherMessage* default_instance_;
};
// -------------------------------------------------------------------

class ReqChangeRateMessage : public ::google::protobuf::Message {
 public:
  ReqChangeRateMessage();
  virtual ~ReqChangeRateMessage();
  
  ReqChangeRateMessage(const ReqChangeRateMessage& from);
  
  inline ReqChangeRateMessage& operator=(const ReqChangeRateMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqChangeRateMessage& default_instance();
  
  void Swap(ReqChangeRateMessage* other);
  
  // implements Message ----------------------------------------------
  
  ReqChangeRateMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqChangeRateMessage& from);
  void MergeFrom(const ReqChangeRateMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ReqChangeRate];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline com::game::proto::Protos_Game60Fishing msgid() const;
  inline void set_msgid(com::game::proto::Protos_Game60Fishing value);
  
  // required bool UpRoDownRate = 2;
  inline bool has_uprodownrate() const;
  inline void clear_uprodownrate();
  static const int kUpRoDownRateFieldNumber = 2;
  inline bool uprodownrate() const;
  inline void set_uprodownrate(bool value);
  
  // @@protoc_insertion_point(class_scope:com.game.proto.ReqChangeRateMessage)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_uprodownrate();
  inline void clear_has_uprodownrate();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int msgid_;
  bool uprodownrate_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game60_5fFishingMessage_2eproto();
  friend void protobuf_AssignDesc_Game60_5fFishingMessage_2eproto();
  friend void protobuf_ShutdownFile_Game60_5fFishingMessage_2eproto();
  
  void InitAsDefaultInstance();
  static ReqChangeRateMessage* default_instance_;
};
// -------------------------------------------------------------------

class ResChangeRateMessage : public ::google::protobuf::Message {
 public:
  ResChangeRateMessage();
  virtual ~ResChangeRateMessage();
  
  ResChangeRateMessage(const ResChangeRateMessage& from);
  
  inline ResChangeRateMessage& operator=(const ResChangeRateMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResChangeRateMessage& default_instance();
  
  void Swap(ResChangeRateMessage* other);
  
  // implements Message ----------------------------------------------
  
  ResChangeRateMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResChangeRateMessage& from);
  void MergeFrom(const ResChangeRateMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResChangeRate];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline com::game::proto::Protos_Game60Fishing msgid() const;
  inline void set_msgid(com::game::proto::Protos_Game60Fishing value);
  
  // required int32 Seat = 2;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 2;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);
  
  // required int32 RateIndex = 3;
  inline bool has_rateindex() const;
  inline void clear_rateindex();
  static const int kRateIndexFieldNumber = 3;
  inline ::google::protobuf::int32 rateindex() const;
  inline void set_rateindex(::google::protobuf::int32 value);
  
  // required bool IsCanUseRate = 4;
  inline bool has_iscanuserate() const;
  inline void clear_iscanuserate();
  static const int kIsCanUseRateFieldNumber = 4;
  inline bool iscanuserate() const;
  inline void set_iscanuserate(bool value);
  
  // @@protoc_insertion_point(class_scope:com.game.proto.ResChangeRateMessage)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_rateindex();
  inline void clear_has_rateindex();
  inline void set_has_iscanuserate();
  inline void clear_has_iscanuserate();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int msgid_;
  ::google::protobuf::int32 seat_;
  ::google::protobuf::int32 rateindex_;
  bool iscanuserate_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game60_5fFishingMessage_2eproto();
  friend void protobuf_AssignDesc_Game60_5fFishingMessage_2eproto();
  friend void protobuf_ShutdownFile_Game60_5fFishingMessage_2eproto();
  
  void InitAsDefaultInstance();
  static ResChangeRateMessage* default_instance_;
};
// -------------------------------------------------------------------

class SyncBulletData : public ::google::protobuf::Message {
 public:
  SyncBulletData();
  virtual ~SyncBulletData();
  
  SyncBulletData(const SyncBulletData& from);
  
  inline SyncBulletData& operator=(const SyncBulletData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncBulletData& default_instance();
  
  void Swap(SyncBulletData* other);
  
  // implements Message ----------------------------------------------
  
  SyncBulletData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SyncBulletData& from);
  void MergeFrom(const SyncBulletData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 BulletID = 1;
  inline bool has_bulletid() const;
  inline void clear_bulletid();
  static const int kBulletIDFieldNumber = 1;
  inline ::google::protobuf::uint32 bulletid() const;
  inline void set_bulletid(::google::protobuf::uint32 value);
  
  // optional int32 Degree = 2;
  inline bool has_degree() const;
  inline void clear_degree();
  static const int kDegreeFieldNumber = 2;
  inline ::google::protobuf::int32 degree() const;
  inline void set_degree(::google::protobuf::int32 value);
  
  // optional uint32 Time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);
  
  // optional int32 BulletType = 4;
  inline bool has_bullettype() const;
  inline void clear_bullettype();
  static const int kBulletTypeFieldNumber = 4;
  inline ::google::protobuf::int32 bullettype() const;
  inline void set_bullettype(::google::protobuf::int32 value);
  
  // optional int32 RateIdx = 5;
  inline bool has_rateidx() const;
  inline void clear_rateidx();
  static const int kRateIdxFieldNumber = 5;
  inline ::google::protobuf::int32 rateidx() const;
  inline void set_rateidx(::google::protobuf::int32 value);
  
  // optional int32 ReboundCount = 6;
  inline bool has_reboundcount() const;
  inline void clear_reboundcount();
  static const int kReboundCountFieldNumber = 6;
  inline ::google::protobuf::int32 reboundcount() const;
  inline void set_reboundcount(::google::protobuf::int32 value);
  
  // optional uint32 LockFishID = 7;
  inline bool has_lockfishid() const;
  inline void clear_lockfishid();
  static const int kLockFishIDFieldNumber = 7;
  inline ::google::protobuf::uint32 lockfishid() const;
  inline void set_lockfishid(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:com.game.proto.SyncBulletData)
 private:
  inline void set_has_bulletid();
  inline void clear_has_bulletid();
  inline void set_has_degree();
  inline void clear_has_degree();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_bullettype();
  inline void clear_has_bullettype();
  inline void set_has_rateidx();
  inline void clear_has_rateidx();
  inline void set_has_reboundcount();
  inline void clear_has_reboundcount();
  inline void set_has_lockfishid();
  inline void clear_has_lockfishid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 bulletid_;
  ::google::protobuf::int32 degree_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::int32 bullettype_;
  ::google::protobuf::int32 rateidx_;
  ::google::protobuf::int32 reboundcount_;
  ::google::protobuf::uint32 lockfishid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game60_5fFishingMessage_2eproto();
  friend void protobuf_AssignDesc_Game60_5fFishingMessage_2eproto();
  friend void protobuf_ShutdownFile_Game60_5fFishingMessage_2eproto();
  
  void InitAsDefaultInstance();
  static SyncBulletData* default_instance_;
};
// -------------------------------------------------------------------

class ResSyncBulletDataMessage : public ::google::protobuf::Message {
 public:
  ResSyncBulletDataMessage();
  virtual ~ResSyncBulletDataMessage();
  
  ResSyncBulletDataMessage(const ResSyncBulletDataMessage& from);
  
  inline ResSyncBulletDataMessage& operator=(const ResSyncBulletDataMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResSyncBulletDataMessage& default_instance();
  
  void Swap(ResSyncBulletDataMessage* other);
  
  // implements Message ----------------------------------------------
  
  ResSyncBulletDataMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResSyncBulletDataMessage& from);
  void MergeFrom(const ResSyncBulletDataMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResSyncBulletData];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline com::game::proto::Protos_Game60Fishing msgid() const;
  inline void set_msgid(com::game::proto::Protos_Game60Fishing value);
  
  // repeated .com.game.proto.SyncBulletData syncBulletData = 2;
  inline int syncbulletdata_size() const;
  inline void clear_syncbulletdata();
  static const int kSyncBulletDataFieldNumber = 2;
  inline const ::com::game::proto::SyncBulletData& syncbulletdata(int index) const;
  inline ::com::game::proto::SyncBulletData* mutable_syncbulletdata(int index);
  inline ::com::game::proto::SyncBulletData* add_syncbulletdata();
  inline const ::google::protobuf::RepeatedPtrField< ::com::game::proto::SyncBulletData >&
      syncbulletdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::game::proto::SyncBulletData >*
      mutable_syncbulletdata();
  
  // @@protoc_insertion_point(class_scope:com.game.proto.ResSyncBulletDataMessage)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::com::game::proto::SyncBulletData > syncbulletdata_;
  int msgid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game60_5fFishingMessage_2eproto();
  friend void protobuf_AssignDesc_Game60_5fFishingMessage_2eproto();
  friend void protobuf_ShutdownFile_Game60_5fFishingMessage_2eproto();
  
  void InitAsDefaultInstance();
  static ResSyncBulletDataMessage* default_instance_;
};
// -------------------------------------------------------------------

class ReqLeaveGameMessage : public ::google::protobuf::Message {
 public:
  ReqLeaveGameMessage();
  virtual ~ReqLeaveGameMessage();
  
  ReqLeaveGameMessage(const ReqLeaveGameMessage& from);
  
  inline ReqLeaveGameMessage& operator=(const ReqLeaveGameMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqLeaveGameMessage& default_instance();
  
  void Swap(ReqLeaveGameMessage* other);
  
  // implements Message ----------------------------------------------
  
  ReqLeaveGameMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqLeaveGameMessage& from);
  void MergeFrom(const ReqLeaveGameMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ReqLeaveGame];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline com::game::proto::Protos_Game60Fishing msgid() const;
  inline void set_msgid(com::game::proto::Protos_Game60Fishing value);
  
  // required int32 seat = 2;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 2;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.game.proto.ReqLeaveGameMessage)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_seat();
  inline void clear_has_seat();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int msgid_;
  ::google::protobuf::int32 seat_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game60_5fFishingMessage_2eproto();
  friend void protobuf_AssignDesc_Game60_5fFishingMessage_2eproto();
  friend void protobuf_ShutdownFile_Game60_5fFishingMessage_2eproto();
  
  void InitAsDefaultInstance();
  static ReqLeaveGameMessage* default_instance_;
};
// -------------------------------------------------------------------

class ResLeaveGameMessage : public ::google::protobuf::Message {
 public:
  ResLeaveGameMessage();
  virtual ~ResLeaveGameMessage();
  
  ResLeaveGameMessage(const ResLeaveGameMessage& from);
  
  inline ResLeaveGameMessage& operator=(const ResLeaveGameMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResLeaveGameMessage& default_instance();
  
  void Swap(ResLeaveGameMessage* other);
  
  // implements Message ----------------------------------------------
  
  ResLeaveGameMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResLeaveGameMessage& from);
  void MergeFrom(const ResLeaveGameMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResLeaveGame];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline com::game::proto::Protos_Game60Fishing msgid() const;
  inline void set_msgid(com::game::proto::Protos_Game60Fishing value);
  
  // required int32 seat = 2;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 2;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.game.proto.ResLeaveGameMessage)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_seat();
  inline void clear_has_seat();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int msgid_;
  ::google::protobuf::int32 seat_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game60_5fFishingMessage_2eproto();
  friend void protobuf_AssignDesc_Game60_5fFishingMessage_2eproto();
  friend void protobuf_ShutdownFile_Game60_5fFishingMessage_2eproto();
  
  void InitAsDefaultInstance();
  static ResLeaveGameMessage* default_instance_;
};
// -------------------------------------------------------------------

class ReqLookUpPlayerInfoMessage : public ::google::protobuf::Message {
 public:
  ReqLookUpPlayerInfoMessage();
  virtual ~ReqLookUpPlayerInfoMessage();
  
  ReqLookUpPlayerInfoMessage(const ReqLookUpPlayerInfoMessage& from);
  
  inline ReqLookUpPlayerInfoMessage& operator=(const ReqLookUpPlayerInfoMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqLookUpPlayerInfoMessage& default_instance();
  
  void Swap(ReqLookUpPlayerInfoMessage* other);
  
  // implements Message ----------------------------------------------
  
  ReqLookUpPlayerInfoMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqLookUpPlayerInfoMessage& from);
  void MergeFrom(const ReqLookUpPlayerInfoMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ReqLookUpPlayerInfo];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline com::game::proto::Protos_Game60Fishing msgid() const;
  inline void set_msgid(com::game::proto::Protos_Game60Fishing value);
  
  // optional int64 playerId = 2;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:com.game.proto.ReqLookUpPlayerInfoMessage)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 playerid_;
  int msgid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game60_5fFishingMessage_2eproto();
  friend void protobuf_AssignDesc_Game60_5fFishingMessage_2eproto();
  friend void protobuf_ShutdownFile_Game60_5fFishingMessage_2eproto();
  
  void InitAsDefaultInstance();
  static ReqLookUpPlayerInfoMessage* default_instance_;
};
// -------------------------------------------------------------------

class ResLookUpPlayerInfoMessage : public ::google::protobuf::Message {
 public:
  ResLookUpPlayerInfoMessage();
  virtual ~ResLookUpPlayerInfoMessage();
  
  ResLookUpPlayerInfoMessage(const ResLookUpPlayerInfoMessage& from);
  
  inline ResLookUpPlayerInfoMessage& operator=(const ResLookUpPlayerInfoMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResLookUpPlayerInfoMessage& default_instance();
  
  void Swap(ResLookUpPlayerInfoMessage* other);
  
  // implements Message ----------------------------------------------
  
  ResLookUpPlayerInfoMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResLookUpPlayerInfoMessage& from);
  void MergeFrom(const ResLookUpPlayerInfoMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResLookUpPlayerInfo];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline com::game::proto::Protos_Game60Fishing msgid() const;
  inline void set_msgid(com::game::proto::Protos_Game60Fishing value);
  
  // optional int64 playerId = 2;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);
  
  // optional int32 vipLevel = 3;
  inline bool has_viplevel() const;
  inline void clear_viplevel();
  static const int kVipLevelFieldNumber = 3;
  inline ::google::protobuf::int32 viplevel() const;
  inline void set_viplevel(::google::protobuf::int32 value);
  
  // optional string icon = 4;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 4;
  inline const ::std::string& icon() const;
  inline void set_icon(const ::std::string& value);
  inline void set_icon(const char* value);
  inline void set_icon(const char* value, size_t size);
  inline ::std::string* mutable_icon();
  inline ::std::string* release_icon();
  
  // optional string name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional int32 sex = 6;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 6;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);
  
  // optional int32 titleId = 7;
  inline bool has_titleid() const;
  inline void clear_titleid();
  static const int kTitleIdFieldNumber = 7;
  inline ::google::protobuf::int32 titleid() const;
  inline void set_titleid(::google::protobuf::int32 value);
  
  // optional double gameWinMaxMoney = 8;
  inline bool has_gamewinmaxmoney() const;
  inline void clear_gamewinmaxmoney();
  static const int kGameWinMaxMoneyFieldNumber = 8;
  inline double gamewinmaxmoney() const;
  inline void set_gamewinmaxmoney(double value);
  
  // optional double money = 9;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 9;
  inline double money() const;
  inline void set_money(double value);
  
  // optional int32 charmValue = 10;
  inline bool has_charmvalue() const;
  inline void clear_charmvalue();
  static const int kCharmValueFieldNumber = 10;
  inline ::google::protobuf::int32 charmvalue() const;
  inline void set_charmvalue(::google::protobuf::int32 value);
  
  // optional string signature = 11;
  inline bool has_signature() const;
  inline void clear_signature();
  static const int kSignatureFieldNumber = 11;
  inline const ::std::string& signature() const;
  inline void set_signature(const ::std::string& value);
  inline void set_signature(const char* value);
  inline void set_signature(const char* value, size_t size);
  inline ::std::string* mutable_signature();
  inline ::std::string* release_signature();
  
  // optional int32 headIcon = 12;
  inline bool has_headicon() const;
  inline void clear_headicon();
  static const int kHeadIconFieldNumber = 12;
  inline ::google::protobuf::int32 headicon() const;
  inline void set_headicon(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.game.proto.ResLookUpPlayerInfoMessage)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_viplevel();
  inline void clear_has_viplevel();
  inline void set_has_icon();
  inline void clear_has_icon();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_titleid();
  inline void clear_has_titleid();
  inline void set_has_gamewinmaxmoney();
  inline void clear_has_gamewinmaxmoney();
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_charmvalue();
  inline void clear_has_charmvalue();
  inline void set_has_signature();
  inline void clear_has_signature();
  inline void set_has_headicon();
  inline void clear_has_headicon();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 playerid_;
  int msgid_;
  ::google::protobuf::int32 viplevel_;
  ::std::string* icon_;
  ::std::string* name_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 titleid_;
  double gamewinmaxmoney_;
  double money_;
  ::std::string* signature_;
  ::google::protobuf::int32 charmvalue_;
  ::google::protobuf::int32 headicon_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game60_5fFishingMessage_2eproto();
  friend void protobuf_AssignDesc_Game60_5fFishingMessage_2eproto();
  friend void protobuf_ShutdownFile_Game60_5fFishingMessage_2eproto();
  
  void InitAsDefaultInstance();
  static ResLookUpPlayerInfoMessage* default_instance_;
};
// -------------------------------------------------------------------

class ResConnectFinishMessage : public ::google::protobuf::Message {
 public:
  ResConnectFinishMessage();
  virtual ~ResConnectFinishMessage();
  
  ResConnectFinishMessage(const ResConnectFinishMessage& from);
  
  inline ResConnectFinishMessage& operator=(const ResConnectFinishMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResConnectFinishMessage& default_instance();
  
  void Swap(ResConnectFinishMessage* other);
  
  // implements Message ----------------------------------------------
  
  ResConnectFinishMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResConnectFinishMessage& from);
  void MergeFrom(const ResConnectFinishMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResConnectFinish];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline com::game::proto::Protos_Game60Fishing msgid() const;
  inline void set_msgid(com::game::proto::Protos_Game60Fishing value);
  
  // @@protoc_insertion_point(class_scope:com.game.proto.ResConnectFinishMessage)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int msgid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game60_5fFishingMessage_2eproto();
  friend void protobuf_AssignDesc_Game60_5fFishingMessage_2eproto();
  friend void protobuf_ShutdownFile_Game60_5fFishingMessage_2eproto();
  
  void InitAsDefaultInstance();
  static ResConnectFinishMessage* default_instance_;
};
// -------------------------------------------------------------------

class ReqStartSyncFishMessage : public ::google::protobuf::Message {
 public:
  ReqStartSyncFishMessage();
  virtual ~ReqStartSyncFishMessage();
  
  ReqStartSyncFishMessage(const ReqStartSyncFishMessage& from);
  
  inline ReqStartSyncFishMessage& operator=(const ReqStartSyncFishMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqStartSyncFishMessage& default_instance();
  
  void Swap(ReqStartSyncFishMessage* other);
  
  // implements Message ----------------------------------------------
  
  ReqStartSyncFishMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqStartSyncFishMessage& from);
  void MergeFrom(const ReqStartSyncFishMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ReqStartSyncFish];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline com::game::proto::Protos_Game60Fishing msgid() const;
  inline void set_msgid(com::game::proto::Protos_Game60Fishing value);
  
  // @@protoc_insertion_point(class_scope:com.game.proto.ReqStartSyncFishMessage)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int msgid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game60_5fFishingMessage_2eproto();
  friend void protobuf_AssignDesc_Game60_5fFishingMessage_2eproto();
  friend void protobuf_ShutdownFile_Game60_5fFishingMessage_2eproto();
  
  void InitAsDefaultInstance();
  static ReqStartSyncFishMessage* default_instance_;
};
// -------------------------------------------------------------------

class ResPlayerTickOutMessage : public ::google::protobuf::Message {
 public:
  ResPlayerTickOutMessage();
  virtual ~ResPlayerTickOutMessage();
  
  ResPlayerTickOutMessage(const ResPlayerTickOutMessage& from);
  
  inline ResPlayerTickOutMessage& operator=(const ResPlayerTickOutMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResPlayerTickOutMessage& default_instance();
  
  void Swap(ResPlayerTickOutMessage* other);
  
  // implements Message ----------------------------------------------
  
  ResPlayerTickOutMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResPlayerTickOutMessage& from);
  void MergeFrom(const ResPlayerTickOutMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResPlayerTickOut];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline com::game::proto::Protos_Game60Fishing msgid() const;
  inline void set_msgid(com::game::proto::Protos_Game60Fishing value);
  
  // @@protoc_insertion_point(class_scope:com.game.proto.ResPlayerTickOutMessage)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int msgid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game60_5fFishingMessage_2eproto();
  friend void protobuf_AssignDesc_Game60_5fFishingMessage_2eproto();
  friend void protobuf_ShutdownFile_Game60_5fFishingMessage_2eproto();
  
  void InitAsDefaultInstance();
  static ResPlayerTickOutMessage* default_instance_;
};
// -------------------------------------------------------------------

class ResSyncAddMoneyMessage : public ::google::protobuf::Message {
 public:
  ResSyncAddMoneyMessage();
  virtual ~ResSyncAddMoneyMessage();
  
  ResSyncAddMoneyMessage(const ResSyncAddMoneyMessage& from);
  
  inline ResSyncAddMoneyMessage& operator=(const ResSyncAddMoneyMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResSyncAddMoneyMessage& default_instance();
  
  void Swap(ResSyncAddMoneyMessage* other);
  
  // implements Message ----------------------------------------------
  
  ResSyncAddMoneyMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResSyncAddMoneyMessage& from);
  void MergeFrom(const ResSyncAddMoneyMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResSyncAddMoney];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline com::game::proto::Protos_Game60Fishing msgid() const;
  inline void set_msgid(com::game::proto::Protos_Game60Fishing value);
  
  // required int64 add_goldNum = 2;
  inline bool has_add_goldnum() const;
  inline void clear_add_goldnum();
  static const int kAddGoldNumFieldNumber = 2;
  inline ::google::protobuf::int64 add_goldnum() const;
  inline void set_add_goldnum(::google::protobuf::int64 value);
  
  // optional int32 reason = 4;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 4;
  inline ::google::protobuf::int32 reason() const;
  inline void set_reason(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.game.proto.ResSyncAddMoneyMessage)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_add_goldnum();
  inline void clear_has_add_goldnum();
  inline void set_has_reason();
  inline void clear_has_reason();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 add_goldnum_;
  int msgid_;
  ::google::protobuf::int32 reason_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game60_5fFishingMessage_2eproto();
  friend void protobuf_AssignDesc_Game60_5fFishingMessage_2eproto();
  friend void protobuf_ShutdownFile_Game60_5fFishingMessage_2eproto();
  
  void InitAsDefaultInstance();
  static ResSyncAddMoneyMessage* default_instance_;
};
// -------------------------------------------------------------------

class ResUseGoodsKBMessage : public ::google::protobuf::Message {
 public:
  ResUseGoodsKBMessage();
  virtual ~ResUseGoodsKBMessage();
  
  ResUseGoodsKBMessage(const ResUseGoodsKBMessage& from);
  
  inline ResUseGoodsKBMessage& operator=(const ResUseGoodsKBMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResUseGoodsKBMessage& default_instance();
  
  void Swap(ResUseGoodsKBMessage* other);
  
  // implements Message ----------------------------------------------
  
  ResUseGoodsKBMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResUseGoodsKBMessage& from);
  void MergeFrom(const ResUseGoodsKBMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResUseGoodsKB];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline com::game::proto::Protos_Game60Fishing msgid() const;
  inline void set_msgid(com::game::proto::Protos_Game60Fishing value);
  
  // required int32 seatID = 2;
  inline bool has_seatid() const;
  inline void clear_seatid();
  static const int kSeatIDFieldNumber = 2;
  inline ::google::protobuf::int32 seatid() const;
  inline void set_seatid(::google::protobuf::int32 value);
  
  // required uint32 keepTime = 3;
  inline bool has_keeptime() const;
  inline void clear_keeptime();
  static const int kKeepTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 keeptime() const;
  inline void set_keeptime(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:com.game.proto.ResUseGoodsKBMessage)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_seatid();
  inline void clear_has_seatid();
  inline void set_has_keeptime();
  inline void clear_has_keeptime();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int msgid_;
  ::google::protobuf::int32 seatid_;
  ::google::protobuf::uint32 keeptime_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game60_5fFishingMessage_2eproto();
  friend void protobuf_AssignDesc_Game60_5fFishingMessage_2eproto();
  friend void protobuf_ShutdownFile_Game60_5fFishingMessage_2eproto();
  
  void InitAsDefaultInstance();
  static ResUseGoodsKBMessage* default_instance_;
};
// -------------------------------------------------------------------

class ResUseGoodsBDMessage : public ::google::protobuf::Message {
 public:
  ResUseGoodsBDMessage();
  virtual ~ResUseGoodsBDMessage();
  
  ResUseGoodsBDMessage(const ResUseGoodsBDMessage& from);
  
  inline ResUseGoodsBDMessage& operator=(const ResUseGoodsBDMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResUseGoodsBDMessage& default_instance();
  
  void Swap(ResUseGoodsBDMessage* other);
  
  // implements Message ----------------------------------------------
  
  ResUseGoodsBDMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResUseGoodsBDMessage& from);
  void MergeFrom(const ResUseGoodsBDMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResUseGoodsBD];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline com::game::proto::Protos_Game60Fishing msgid() const;
  inline void set_msgid(com::game::proto::Protos_Game60Fishing value);
  
  // required int32 seatID = 2;
  inline bool has_seatid() const;
  inline void clear_seatid();
  static const int kSeatIDFieldNumber = 2;
  inline ::google::protobuf::int32 seatid() const;
  inline void set_seatid(::google::protobuf::int32 value);
  
  // required uint32 keepTime = 3;
  inline bool has_keeptime() const;
  inline void clear_keeptime();
  static const int kKeepTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 keeptime() const;
  inline void set_keeptime(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:com.game.proto.ResUseGoodsBDMessage)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_seatid();
  inline void clear_has_seatid();
  inline void set_has_keeptime();
  inline void clear_has_keeptime();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int msgid_;
  ::google::protobuf::int32 seatid_;
  ::google::protobuf::uint32 keeptime_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game60_5fFishingMessage_2eproto();
  friend void protobuf_AssignDesc_Game60_5fFishingMessage_2eproto();
  friend void protobuf_ShutdownFile_Game60_5fFishingMessage_2eproto();
  
  void InitAsDefaultInstance();
  static ResUseGoodsBDMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// ReqEnterFishServerMessage

// optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ReqEnterFishServer];
inline bool ReqEnterFishServerMessage::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqEnterFishServerMessage::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqEnterFishServerMessage::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqEnterFishServerMessage::clear_msgid() {
  msgid_ = 6001;
  clear_has_msgid();
}
inline com::game::proto::Protos_Game60Fishing ReqEnterFishServerMessage::msgid() const {
  return static_cast< com::game::proto::Protos_Game60Fishing >(msgid_);
}
inline void ReqEnterFishServerMessage::set_msgid(com::game::proto::Protos_Game60Fishing value) {
  GOOGLE_DCHECK(com::game::proto::Protos_Game60Fishing_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required int64 playerOnlyID = 2;
inline bool ReqEnterFishServerMessage::has_playeronlyid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqEnterFishServerMessage::set_has_playeronlyid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqEnterFishServerMessage::clear_has_playeronlyid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqEnterFishServerMessage::clear_playeronlyid() {
  playeronlyid_ = GOOGLE_LONGLONG(0);
  clear_has_playeronlyid();
}
inline ::google::protobuf::int64 ReqEnterFishServerMessage::playeronlyid() const {
  return playeronlyid_;
}
inline void ReqEnterFishServerMessage::set_playeronlyid(::google::protobuf::int64 value) {
  set_has_playeronlyid();
  playeronlyid_ = value;
}

// -------------------------------------------------------------------

// ResEnterFishServerMessage

// optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResEnterFishServer];
inline bool ResEnterFishServerMessage::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResEnterFishServerMessage::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResEnterFishServerMessage::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResEnterFishServerMessage::clear_msgid() {
  msgid_ = 6002;
  clear_has_msgid();
}
inline com::game::proto::Protos_Game60Fishing ResEnterFishServerMessage::msgid() const {
  return static_cast< com::game::proto::Protos_Game60Fishing >(msgid_);
}
inline void ResEnterFishServerMessage::set_msgid(com::game::proto::Protos_Game60Fishing value) {
  GOOGLE_DCHECK(com::game::proto::Protos_Game60Fishing_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required int32 serverState = 2;
inline bool ResEnterFishServerMessage::has_serverstate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResEnterFishServerMessage::set_has_serverstate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResEnterFishServerMessage::clear_has_serverstate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResEnterFishServerMessage::clear_serverstate() {
  serverstate_ = 0;
  clear_has_serverstate();
}
inline ::google::protobuf::int32 ResEnterFishServerMessage::serverstate() const {
  return serverstate_;
}
inline void ResEnterFishServerMessage::set_serverstate(::google::protobuf::int32 value) {
  set_has_serverstate();
  serverstate_ = value;
}

// -------------------------------------------------------------------

// ReqJoinRoomMessage

// optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ReqJoinRoom];
inline bool ReqJoinRoomMessage::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqJoinRoomMessage::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqJoinRoomMessage::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqJoinRoomMessage::clear_msgid() {
  msgid_ = 6003;
  clear_has_msgid();
}
inline com::game::proto::Protos_Game60Fishing ReqJoinRoomMessage::msgid() const {
  return static_cast< com::game::proto::Protos_Game60Fishing >(msgid_);
}
inline void ReqJoinRoomMessage::set_msgid(com::game::proto::Protos_Game60Fishing value) {
  GOOGLE_DCHECK(com::game::proto::Protos_Game60Fishing_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required int32 roomID = 2;
inline bool ReqJoinRoomMessage::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqJoinRoomMessage::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqJoinRoomMessage::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqJoinRoomMessage::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 ReqJoinRoomMessage::roomid() const {
  return roomid_;
}
inline void ReqJoinRoomMessage::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
}

// -------------------------------------------------------------------

// ResJoinRoomMessage

// optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResJoinRoom];
inline bool ResJoinRoomMessage::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResJoinRoomMessage::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResJoinRoomMessage::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResJoinRoomMessage::clear_msgid() {
  msgid_ = 6004;
  clear_has_msgid();
}
inline com::game::proto::Protos_Game60Fishing ResJoinRoomMessage::msgid() const {
  return static_cast< com::game::proto::Protos_Game60Fishing >(msgid_);
}
inline void ResJoinRoomMessage::set_msgid(com::game::proto::Protos_Game60Fishing value) {
  GOOGLE_DCHECK(com::game::proto::Protos_Game60Fishing_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required bool result = 2;
inline bool ResJoinRoomMessage::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResJoinRoomMessage::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResJoinRoomMessage::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResJoinRoomMessage::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool ResJoinRoomMessage::result() const {
  return result_;
}
inline void ResJoinRoomMessage::set_result(bool value) {
  set_has_result();
  result_ = value;
}

// required int32 roomID = 3;
inline bool ResJoinRoomMessage::has_roomid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResJoinRoomMessage::set_has_roomid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResJoinRoomMessage::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResJoinRoomMessage::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 ResJoinRoomMessage::roomid() const {
  return roomid_;
}
inline void ResJoinRoomMessage::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
}

// optional int32 backgroundImage = 4;
inline bool ResJoinRoomMessage::has_backgroundimage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResJoinRoomMessage::set_has_backgroundimage() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResJoinRoomMessage::clear_has_backgroundimage() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResJoinRoomMessage::clear_backgroundimage() {
  backgroundimage_ = 0;
  clear_has_backgroundimage();
}
inline ::google::protobuf::int32 ResJoinRoomMessage::backgroundimage() const {
  return backgroundimage_;
}
inline void ResJoinRoomMessage::set_backgroundimage(::google::protobuf::int32 value) {
  set_has_backgroundimage();
  backgroundimage_ = value;
}

// optional .com.game.proto.PlayerData playerData = 5;
inline bool ResJoinRoomMessage::has_playerdata() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResJoinRoomMessage::set_has_playerdata() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ResJoinRoomMessage::clear_has_playerdata() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ResJoinRoomMessage::clear_playerdata() {
  if (playerdata_ != NULL) playerdata_->::com::game::proto::PlayerData::Clear();
  clear_has_playerdata();
}
inline const ::com::game::proto::PlayerData& ResJoinRoomMessage::playerdata() const {
  return playerdata_ != NULL ? *playerdata_ : *default_instance_->playerdata_;
}
inline ::com::game::proto::PlayerData* ResJoinRoomMessage::mutable_playerdata() {
  set_has_playerdata();
  if (playerdata_ == NULL) playerdata_ = new ::com::game::proto::PlayerData;
  return playerdata_;
}
inline ::com::game::proto::PlayerData* ResJoinRoomMessage::release_playerdata() {
  clear_has_playerdata();
  ::com::game::proto::PlayerData* temp = playerdata_;
  playerdata_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// ResCmdFishMessage

// optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResCmdFish];
inline bool ResCmdFishMessage::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResCmdFishMessage::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResCmdFishMessage::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResCmdFishMessage::clear_msgid() {
  msgid_ = 6006;
  clear_has_msgid();
}
inline com::game::proto::Protos_Game60Fishing ResCmdFishMessage::msgid() const {
  return static_cast< com::game::proto::Protos_Game60Fishing >(msgid_);
}
inline void ResCmdFishMessage::set_msgid(com::game::proto::Protos_Game60Fishing value) {
  GOOGLE_DCHECK(com::game::proto::Protos_Game60Fishing_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required int32 groupID = 2;
inline bool ResCmdFishMessage::has_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResCmdFishMessage::set_has_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResCmdFishMessage::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResCmdFishMessage::clear_groupid() {
  groupid_ = 0;
  clear_has_groupid();
}
inline ::google::protobuf::int32 ResCmdFishMessage::groupid() const {
  return groupid_;
}
inline void ResCmdFishMessage::set_groupid(::google::protobuf::int32 value) {
  set_has_groupid();
  groupid_ = value;
}

// required int32 startID = 3;
inline bool ResCmdFishMessage::has_startid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResCmdFishMessage::set_has_startid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResCmdFishMessage::clear_has_startid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResCmdFishMessage::clear_startid() {
  startid_ = 0;
  clear_has_startid();
}
inline ::google::protobuf::int32 ResCmdFishMessage::startid() const {
  return startid_;
}
inline void ResCmdFishMessage::set_startid(::google::protobuf::int32 value) {
  set_has_startid();
  startid_ = value;
}

// required int32 pathID = 4;
inline bool ResCmdFishMessage::has_pathid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResCmdFishMessage::set_has_pathid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResCmdFishMessage::clear_has_pathid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResCmdFishMessage::clear_pathid() {
  pathid_ = 0;
  clear_has_pathid();
}
inline ::google::protobuf::int32 ResCmdFishMessage::pathid() const {
  return pathid_;
}
inline void ResCmdFishMessage::set_pathid(::google::protobuf::int32 value) {
  set_has_pathid();
  pathid_ = value;
}

// -------------------------------------------------------------------

// ResCmdSyncFishMessage

// optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResCmdSyncFish];
inline bool ResCmdSyncFishMessage::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResCmdSyncFishMessage::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResCmdSyncFishMessage::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResCmdSyncFishMessage::clear_msgid() {
  msgid_ = 6008;
  clear_has_msgid();
}
inline com::game::proto::Protos_Game60Fishing ResCmdSyncFishMessage::msgid() const {
  return static_cast< com::game::proto::Protos_Game60Fishing >(msgid_);
}
inline void ResCmdSyncFishMessage::set_msgid(com::game::proto::Protos_Game60Fishing value) {
  GOOGLE_DCHECK(com::game::proto::Protos_Game60Fishing_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required int32 fishID = 2;
inline bool ResCmdSyncFishMessage::has_fishid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResCmdSyncFishMessage::set_has_fishid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResCmdSyncFishMessage::clear_has_fishid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResCmdSyncFishMessage::clear_fishid() {
  fishid_ = 0;
  clear_has_fishid();
}
inline ::google::protobuf::int32 ResCmdSyncFishMessage::fishid() const {
  return fishid_;
}
inline void ResCmdSyncFishMessage::set_fishid(::google::protobuf::int32 value) {
  set_has_fishid();
  fishid_ = value;
}

// required int32 groupID = 3;
inline bool ResCmdSyncFishMessage::has_groupid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResCmdSyncFishMessage::set_has_groupid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResCmdSyncFishMessage::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResCmdSyncFishMessage::clear_groupid() {
  groupid_ = 0;
  clear_has_groupid();
}
inline ::google::protobuf::int32 ResCmdSyncFishMessage::groupid() const {
  return groupid_;
}
inline void ResCmdSyncFishMessage::set_groupid(::google::protobuf::int32 value) {
  set_has_groupid();
  groupid_ = value;
}

// required double fishTime = 4;
inline bool ResCmdSyncFishMessage::has_fishtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResCmdSyncFishMessage::set_has_fishtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResCmdSyncFishMessage::clear_has_fishtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResCmdSyncFishMessage::clear_fishtime() {
  fishtime_ = 0;
  clear_has_fishtime();
}
inline double ResCmdSyncFishMessage::fishtime() const {
  return fishtime_;
}
inline void ResCmdSyncFishMessage::set_fishtime(double value) {
  set_has_fishtime();
  fishtime_ = value;
}

// required int32 pathGroup = 5;
inline bool ResCmdSyncFishMessage::has_pathgroup() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResCmdSyncFishMessage::set_has_pathgroup() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ResCmdSyncFishMessage::clear_has_pathgroup() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ResCmdSyncFishMessage::clear_pathgroup() {
  pathgroup_ = 0;
  clear_has_pathgroup();
}
inline ::google::protobuf::int32 ResCmdSyncFishMessage::pathgroup() const {
  return pathgroup_;
}
inline void ResCmdSyncFishMessage::set_pathgroup(::google::protobuf::int32 value) {
  set_has_pathgroup();
  pathgroup_ = value;
}

// required int32 pathIdx = 6;
inline bool ResCmdSyncFishMessage::has_pathidx() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ResCmdSyncFishMessage::set_has_pathidx() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ResCmdSyncFishMessage::clear_has_pathidx() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ResCmdSyncFishMessage::clear_pathidx() {
  pathidx_ = 0;
  clear_has_pathidx();
}
inline ::google::protobuf::int32 ResCmdSyncFishMessage::pathidx() const {
  return pathidx_;
}
inline void ResCmdSyncFishMessage::set_pathidx(::google::protobuf::int32 value) {
  set_has_pathidx();
  pathidx_ = value;
}

// optional bool isActiveEvent = 7;
inline bool ResCmdSyncFishMessage::has_isactiveevent() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ResCmdSyncFishMessage::set_has_isactiveevent() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ResCmdSyncFishMessage::clear_has_isactiveevent() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ResCmdSyncFishMessage::clear_isactiveevent() {
  isactiveevent_ = false;
  clear_has_isactiveevent();
}
inline bool ResCmdSyncFishMessage::isactiveevent() const {
  return isactiveevent_;
}
inline void ResCmdSyncFishMessage::set_isactiveevent(bool value) {
  set_has_isactiveevent();
  isactiveevent_ = value;
}

// optional int32 elapsedTime = 8;
inline bool ResCmdSyncFishMessage::has_elapsedtime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ResCmdSyncFishMessage::set_has_elapsedtime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ResCmdSyncFishMessage::clear_has_elapsedtime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ResCmdSyncFishMessage::clear_elapsedtime() {
  elapsedtime_ = 0;
  clear_has_elapsedtime();
}
inline ::google::protobuf::int32 ResCmdSyncFishMessage::elapsedtime() const {
  return elapsedtime_;
}
inline void ResCmdSyncFishMessage::set_elapsedtime(::google::protobuf::int32 value) {
  set_has_elapsedtime();
  elapsedtime_ = value;
}

// optional int32 delayType = 9;
inline bool ResCmdSyncFishMessage::has_delaytype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ResCmdSyncFishMessage::set_has_delaytype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ResCmdSyncFishMessage::clear_has_delaytype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ResCmdSyncFishMessage::clear_delaytype() {
  delaytype_ = 0;
  clear_has_delaytype();
}
inline ::google::protobuf::int32 ResCmdSyncFishMessage::delaytype() const {
  return delaytype_;
}
inline void ResCmdSyncFishMessage::set_delaytype(::google::protobuf::int32 value) {
  set_has_delaytype();
  delaytype_ = value;
}

// optional int32 delayScaling = 10;
inline bool ResCmdSyncFishMessage::has_delayscaling() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ResCmdSyncFishMessage::set_has_delayscaling() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ResCmdSyncFishMessage::clear_has_delayscaling() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ResCmdSyncFishMessage::clear_delayscaling() {
  delayscaling_ = 0;
  clear_has_delayscaling();
}
inline ::google::protobuf::int32 ResCmdSyncFishMessage::delayscaling() const {
  return delayscaling_;
}
inline void ResCmdSyncFishMessage::set_delayscaling(::google::protobuf::int32 value) {
  set_has_delayscaling();
  delayscaling_ = value;
}

// optional int32 delayDuration1 = 11;
inline bool ResCmdSyncFishMessage::has_delayduration1() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ResCmdSyncFishMessage::set_has_delayduration1() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ResCmdSyncFishMessage::clear_has_delayduration1() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ResCmdSyncFishMessage::clear_delayduration1() {
  delayduration1_ = 0;
  clear_has_delayduration1();
}
inline ::google::protobuf::int32 ResCmdSyncFishMessage::delayduration1() const {
  return delayduration1_;
}
inline void ResCmdSyncFishMessage::set_delayduration1(::google::protobuf::int32 value) {
  set_has_delayduration1();
  delayduration1_ = value;
}

// optional int32 delayDuration2 = 12;
inline bool ResCmdSyncFishMessage::has_delayduration2() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ResCmdSyncFishMessage::set_has_delayduration2() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ResCmdSyncFishMessage::clear_has_delayduration2() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ResCmdSyncFishMessage::clear_delayduration2() {
  delayduration2_ = 0;
  clear_has_delayduration2();
}
inline ::google::protobuf::int32 ResCmdSyncFishMessage::delayduration2() const {
  return delayduration2_;
}
inline void ResCmdSyncFishMessage::set_delayduration2(::google::protobuf::int32 value) {
  set_has_delayduration2();
  delayduration2_ = value;
}

// optional int32 delayDuration3 = 13;
inline bool ResCmdSyncFishMessage::has_delayduration3() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ResCmdSyncFishMessage::set_has_delayduration3() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ResCmdSyncFishMessage::clear_has_delayduration3() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ResCmdSyncFishMessage::clear_delayduration3() {
  delayduration3_ = 0;
  clear_has_delayduration3();
}
inline ::google::protobuf::int32 ResCmdSyncFishMessage::delayduration3() const {
  return delayduration3_;
}
inline void ResCmdSyncFishMessage::set_delayduration3(::google::protobuf::int32 value) {
  set_has_delayduration3();
  delayduration3_ = value;
}

// optional int32 delayCurrentTime = 14;
inline bool ResCmdSyncFishMessage::has_delaycurrenttime() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ResCmdSyncFishMessage::set_has_delaycurrenttime() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ResCmdSyncFishMessage::clear_has_delaycurrenttime() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ResCmdSyncFishMessage::clear_delaycurrenttime() {
  delaycurrenttime_ = 0;
  clear_has_delaycurrenttime();
}
inline ::google::protobuf::int32 ResCmdSyncFishMessage::delaycurrenttime() const {
  return delaycurrenttime_;
}
inline void ResCmdSyncFishMessage::set_delaycurrenttime(::google::protobuf::int32 value) {
  set_has_delaycurrenttime();
  delaycurrenttime_ = value;
}

// optional int32 package = 15;
inline bool ResCmdSyncFishMessage::has_package() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ResCmdSyncFishMessage::set_has_package() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ResCmdSyncFishMessage::clear_has_package() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ResCmdSyncFishMessage::clear_package() {
  package_ = 0;
  clear_has_package();
}
inline ::google::protobuf::int32 ResCmdSyncFishMessage::package() const {
  return package_;
}
inline void ResCmdSyncFishMessage::set_package(::google::protobuf::int32 value) {
  set_has_package();
  package_ = value;
}

// -------------------------------------------------------------------

// ReqBulletMessage

// optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ReqBullet];
inline bool ReqBulletMessage::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqBulletMessage::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqBulletMessage::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqBulletMessage::clear_msgid() {
  msgid_ = 6009;
  clear_has_msgid();
}
inline com::game::proto::Protos_Game60Fishing ReqBulletMessage::msgid() const {
  return static_cast< com::game::proto::Protos_Game60Fishing >(msgid_);
}
inline void ReqBulletMessage::set_msgid(com::game::proto::Protos_Game60Fishing value) {
  GOOGLE_DCHECK(com::game::proto::Protos_Game60Fishing_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required int32 angle = 2;
inline bool ReqBulletMessage::has_angle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqBulletMessage::set_has_angle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqBulletMessage::clear_has_angle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqBulletMessage::clear_angle() {
  angle_ = 0;
  clear_has_angle();
}
inline ::google::protobuf::int32 ReqBulletMessage::angle() const {
  return angle_;
}
inline void ReqBulletMessage::set_angle(::google::protobuf::int32 value) {
  set_has_angle();
  angle_ = value;
}

// optional int32 lockFishID = 3;
inline bool ReqBulletMessage::has_lockfishid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqBulletMessage::set_has_lockfishid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqBulletMessage::clear_has_lockfishid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqBulletMessage::clear_lockfishid() {
  lockfishid_ = 0;
  clear_has_lockfishid();
}
inline ::google::protobuf::int32 ReqBulletMessage::lockfishid() const {
  return lockfishid_;
}
inline void ReqBulletMessage::set_lockfishid(::google::protobuf::int32 value) {
  set_has_lockfishid();
  lockfishid_ = value;
}

// required int32 launcherType = 4;
inline bool ReqBulletMessage::has_launchertype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqBulletMessage::set_has_launchertype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReqBulletMessage::clear_has_launchertype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReqBulletMessage::clear_launchertype() {
  launchertype_ = 0;
  clear_has_launchertype();
}
inline ::google::protobuf::int32 ReqBulletMessage::launchertype() const {
  return launchertype_;
}
inline void ReqBulletMessage::set_launchertype(::google::protobuf::int32 value) {
  set_has_launchertype();
  launchertype_ = value;
}

// -------------------------------------------------------------------

// ResBulletMessage

// optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResBullet];
inline bool ResBulletMessage::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResBulletMessage::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResBulletMessage::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResBulletMessage::clear_msgid() {
  msgid_ = 6010;
  clear_has_msgid();
}
inline com::game::proto::Protos_Game60Fishing ResBulletMessage::msgid() const {
  return static_cast< com::game::proto::Protos_Game60Fishing >(msgid_);
}
inline void ResBulletMessage::set_msgid(com::game::proto::Protos_Game60Fishing value) {
  GOOGLE_DCHECK(com::game::proto::Protos_Game60Fishing_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required int32 bulletID = 2;
inline bool ResBulletMessage::has_bulletid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResBulletMessage::set_has_bulletid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResBulletMessage::clear_has_bulletid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResBulletMessage::clear_bulletid() {
  bulletid_ = 0;
  clear_has_bulletid();
}
inline ::google::protobuf::int32 ResBulletMessage::bulletid() const {
  return bulletid_;
}
inline void ResBulletMessage::set_bulletid(::google::protobuf::int32 value) {
  set_has_bulletid();
  bulletid_ = value;
}

// required int32 launcherType = 3;
inline bool ResBulletMessage::has_launchertype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResBulletMessage::set_has_launchertype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResBulletMessage::clear_has_launchertype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResBulletMessage::clear_launchertype() {
  launchertype_ = 0;
  clear_has_launchertype();
}
inline ::google::protobuf::int32 ResBulletMessage::launchertype() const {
  return launchertype_;
}
inline void ResBulletMessage::set_launchertype(::google::protobuf::int32 value) {
  set_has_launchertype();
  launchertype_ = value;
}

// required int32 angle = 4;
inline bool ResBulletMessage::has_angle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResBulletMessage::set_has_angle() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResBulletMessage::clear_has_angle() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResBulletMessage::clear_angle() {
  angle_ = 0;
  clear_has_angle();
}
inline ::google::protobuf::int32 ResBulletMessage::angle() const {
  return angle_;
}
inline void ResBulletMessage::set_angle(::google::protobuf::int32 value) {
  set_has_angle();
  angle_ = value;
}

// optional int32 energy = 5;
inline bool ResBulletMessage::has_energy() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResBulletMessage::set_has_energy() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ResBulletMessage::clear_has_energy() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ResBulletMessage::clear_energy() {
  energy_ = 0;
  clear_has_energy();
}
inline ::google::protobuf::int32 ResBulletMessage::energy() const {
  return energy_;
}
inline void ResBulletMessage::set_energy(::google::protobuf::int32 value) {
  set_has_energy();
  energy_ = value;
}

// optional int32 reboundCount = 6;
inline bool ResBulletMessage::has_reboundcount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ResBulletMessage::set_has_reboundcount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ResBulletMessage::clear_has_reboundcount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ResBulletMessage::clear_reboundcount() {
  reboundcount_ = 0;
  clear_has_reboundcount();
}
inline ::google::protobuf::int32 ResBulletMessage::reboundcount() const {
  return reboundcount_;
}
inline void ResBulletMessage::set_reboundcount(::google::protobuf::int32 value) {
  set_has_reboundcount();
  reboundcount_ = value;
}

// optional int32 lockFishID = 7;
inline bool ResBulletMessage::has_lockfishid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ResBulletMessage::set_has_lockfishid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ResBulletMessage::clear_has_lockfishid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ResBulletMessage::clear_lockfishid() {
  lockfishid_ = 0;
  clear_has_lockfishid();
}
inline ::google::protobuf::int32 ResBulletMessage::lockfishid() const {
  return lockfishid_;
}
inline void ResBulletMessage::set_lockfishid(::google::protobuf::int32 value) {
  set_has_lockfishid();
  lockfishid_ = value;
}

// -------------------------------------------------------------------

// ResCatchedFreezeMessage

// optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResCatchedFreeze];
inline bool ResCatchedFreezeMessage::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResCatchedFreezeMessage::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResCatchedFreezeMessage::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResCatchedFreezeMessage::clear_msgid() {
  msgid_ = 6022;
  clear_has_msgid();
}
inline com::game::proto::Protos_Game60Fishing ResCatchedFreezeMessage::msgid() const {
  return static_cast< com::game::proto::Protos_Game60Fishing >(msgid_);
}
inline void ResCatchedFreezeMessage::set_msgid(com::game::proto::Protos_Game60Fishing value) {
  GOOGLE_DCHECK(com::game::proto::Protos_Game60Fishing_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required int32 bulletID = 2;
inline bool ResCatchedFreezeMessage::has_bulletid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResCatchedFreezeMessage::set_has_bulletid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResCatchedFreezeMessage::clear_has_bulletid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResCatchedFreezeMessage::clear_bulletid() {
  bulletid_ = 0;
  clear_has_bulletid();
}
inline ::google::protobuf::int32 ResCatchedFreezeMessage::bulletid() const {
  return bulletid_;
}
inline void ResCatchedFreezeMessage::set_bulletid(::google::protobuf::int32 value) {
  set_has_bulletid();
  bulletid_ = value;
}

// required int32 combo = 3;
inline bool ResCatchedFreezeMessage::has_combo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResCatchedFreezeMessage::set_has_combo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResCatchedFreezeMessage::clear_has_combo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResCatchedFreezeMessage::clear_combo() {
  combo_ = 0;
  clear_has_combo();
}
inline ::google::protobuf::int32 ResCatchedFreezeMessage::combo() const {
  return combo_;
}
inline void ResCatchedFreezeMessage::set_combo(::google::protobuf::int32 value) {
  set_has_combo();
  combo_ = value;
}

// required int32 goldNum = 4;
inline bool ResCatchedFreezeMessage::has_goldnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResCatchedFreezeMessage::set_has_goldnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResCatchedFreezeMessage::clear_has_goldnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResCatchedFreezeMessage::clear_goldnum() {
  goldnum_ = 0;
  clear_has_goldnum();
}
inline ::google::protobuf::int32 ResCatchedFreezeMessage::goldnum() const {
  return goldnum_;
}
inline void ResCatchedFreezeMessage::set_goldnum(::google::protobuf::int32 value) {
  set_has_goldnum();
  goldnum_ = value;
}

// optional int32 TotalNum = 5;
inline bool ResCatchedFreezeMessage::has_totalnum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResCatchedFreezeMessage::set_has_totalnum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ResCatchedFreezeMessage::clear_has_totalnum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ResCatchedFreezeMessage::clear_totalnum() {
  totalnum_ = 0;
  clear_has_totalnum();
}
inline ::google::protobuf::int32 ResCatchedFreezeMessage::totalnum() const {
  return totalnum_;
}
inline void ResCatchedFreezeMessage::set_totalnum(::google::protobuf::int32 value) {
  set_has_totalnum();
  totalnum_ = value;
}

// repeated .com.game.proto.FishCatchedInfo fishCatchedList = 6;
inline int ResCatchedFreezeMessage::fishcatchedlist_size() const {
  return fishcatchedlist_.size();
}
inline void ResCatchedFreezeMessage::clear_fishcatchedlist() {
  fishcatchedlist_.Clear();
}
inline const ::com::game::proto::FishCatchedInfo& ResCatchedFreezeMessage::fishcatchedlist(int index) const {
  return fishcatchedlist_.Get(index);
}
inline ::com::game::proto::FishCatchedInfo* ResCatchedFreezeMessage::mutable_fishcatchedlist(int index) {
  return fishcatchedlist_.Mutable(index);
}
inline ::com::game::proto::FishCatchedInfo* ResCatchedFreezeMessage::add_fishcatchedlist() {
  return fishcatchedlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::game::proto::FishCatchedInfo >&
ResCatchedFreezeMessage::fishcatchedlist() const {
  return fishcatchedlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::game::proto::FishCatchedInfo >*
ResCatchedFreezeMessage::mutable_fishcatchedlist() {
  return &fishcatchedlist_;
}

// -------------------------------------------------------------------

// ResCatchedMessage

// optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResCatched];
inline bool ResCatchedMessage::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResCatchedMessage::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResCatchedMessage::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResCatchedMessage::clear_msgid() {
  msgid_ = 6012;
  clear_has_msgid();
}
inline com::game::proto::Protos_Game60Fishing ResCatchedMessage::msgid() const {
  return static_cast< com::game::proto::Protos_Game60Fishing >(msgid_);
}
inline void ResCatchedMessage::set_msgid(com::game::proto::Protos_Game60Fishing value) {
  GOOGLE_DCHECK(com::game::proto::Protos_Game60Fishing_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required int32 bulletID = 2;
inline bool ResCatchedMessage::has_bulletid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResCatchedMessage::set_has_bulletid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResCatchedMessage::clear_has_bulletid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResCatchedMessage::clear_bulletid() {
  bulletid_ = 0;
  clear_has_bulletid();
}
inline ::google::protobuf::int32 ResCatchedMessage::bulletid() const {
  return bulletid_;
}
inline void ResCatchedMessage::set_bulletid(::google::protobuf::int32 value) {
  set_has_bulletid();
  bulletid_ = value;
}

// required int32 combo = 3;
inline bool ResCatchedMessage::has_combo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResCatchedMessage::set_has_combo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResCatchedMessage::clear_has_combo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResCatchedMessage::clear_combo() {
  combo_ = 0;
  clear_has_combo();
}
inline ::google::protobuf::int32 ResCatchedMessage::combo() const {
  return combo_;
}
inline void ResCatchedMessage::set_combo(::google::protobuf::int32 value) {
  set_has_combo();
  combo_ = value;
}

// required int32 goldNum = 4;
inline bool ResCatchedMessage::has_goldnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResCatchedMessage::set_has_goldnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResCatchedMessage::clear_has_goldnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResCatchedMessage::clear_goldnum() {
  goldnum_ = 0;
  clear_has_goldnum();
}
inline ::google::protobuf::int32 ResCatchedMessage::goldnum() const {
  return goldnum_;
}
inline void ResCatchedMessage::set_goldnum(::google::protobuf::int32 value) {
  set_has_goldnum();
  goldnum_ = value;
}

// optional int32 TotalNum = 5;
inline bool ResCatchedMessage::has_totalnum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResCatchedMessage::set_has_totalnum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ResCatchedMessage::clear_has_totalnum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ResCatchedMessage::clear_totalnum() {
  totalnum_ = 0;
  clear_has_totalnum();
}
inline ::google::protobuf::int32 ResCatchedMessage::totalnum() const {
  return totalnum_;
}
inline void ResCatchedMessage::set_totalnum(::google::protobuf::int32 value) {
  set_has_totalnum();
  totalnum_ = value;
}

// repeated .com.game.proto.FishCatchedInfo fishCatchedList = 6;
inline int ResCatchedMessage::fishcatchedlist_size() const {
  return fishcatchedlist_.size();
}
inline void ResCatchedMessage::clear_fishcatchedlist() {
  fishcatchedlist_.Clear();
}
inline const ::com::game::proto::FishCatchedInfo& ResCatchedMessage::fishcatchedlist(int index) const {
  return fishcatchedlist_.Get(index);
}
inline ::com::game::proto::FishCatchedInfo* ResCatchedMessage::mutable_fishcatchedlist(int index) {
  return fishcatchedlist_.Mutable(index);
}
inline ::com::game::proto::FishCatchedInfo* ResCatchedMessage::add_fishcatchedlist() {
  return fishcatchedlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::game::proto::FishCatchedInfo >&
ResCatchedMessage::fishcatchedlist() const {
  return fishcatchedlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::game::proto::FishCatchedInfo >*
ResCatchedMessage::mutable_fishcatchedlist() {
  return &fishcatchedlist_;
}

// -------------------------------------------------------------------

// FishCatchedInfo

// optional int32 catchEvent = 1;
inline bool FishCatchedInfo::has_catchevent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FishCatchedInfo::set_has_catchevent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FishCatchedInfo::clear_has_catchevent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FishCatchedInfo::clear_catchevent() {
  catchevent_ = 0;
  clear_has_catchevent();
}
inline ::google::protobuf::int32 FishCatchedInfo::catchevent() const {
  return catchevent_;
}
inline void FishCatchedInfo::set_catchevent(::google::protobuf::int32 value) {
  set_has_catchevent();
  catchevent_ = value;
}

// required int32 fishID = 2;
inline bool FishCatchedInfo::has_fishid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FishCatchedInfo::set_has_fishid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FishCatchedInfo::clear_has_fishid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FishCatchedInfo::clear_fishid() {
  fishid_ = 0;
  clear_has_fishid();
}
inline ::google::protobuf::int32 FishCatchedInfo::fishid() const {
  return fishid_;
}
inline void FishCatchedInfo::set_fishid(::google::protobuf::int32 value) {
  set_has_fishid();
  fishid_ = value;
}

// optional int32 nReward = 3;
inline bool FishCatchedInfo::has_nreward() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FishCatchedInfo::set_has_nreward() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FishCatchedInfo::clear_has_nreward() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FishCatchedInfo::clear_nreward() {
  nreward_ = 0;
  clear_has_nreward();
}
inline ::google::protobuf::int32 FishCatchedInfo::nreward() const {
  return nreward_;
}
inline void FishCatchedInfo::set_nreward(::google::protobuf::int32 value) {
  set_has_nreward();
  nreward_ = value;
}

// optional int32 lightingFishID = 4;
inline bool FishCatchedInfo::has_lightingfishid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FishCatchedInfo::set_has_lightingfishid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FishCatchedInfo::clear_has_lightingfishid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FishCatchedInfo::clear_lightingfishid() {
  lightingfishid_ = 0;
  clear_has_lightingfishid();
}
inline ::google::protobuf::int32 FishCatchedInfo::lightingfishid() const {
  return lightingfishid_;
}
inline void FishCatchedInfo::set_lightingfishid(::google::protobuf::int32 value) {
  set_has_lightingfishid();
  lightingfishid_ = value;
}

// -------------------------------------------------------------------

// ResClearSceneMessage

// optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResClearScene];
inline bool ResClearSceneMessage::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResClearSceneMessage::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResClearSceneMessage::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResClearSceneMessage::clear_msgid() {
  msgid_ = 6014;
  clear_has_msgid();
}
inline com::game::proto::Protos_Game60Fishing ResClearSceneMessage::msgid() const {
  return static_cast< com::game::proto::Protos_Game60Fishing >(msgid_);
}
inline void ResClearSceneMessage::set_msgid(com::game::proto::Protos_Game60Fishing value) {
  GOOGLE_DCHECK(com::game::proto::Protos_Game60Fishing_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required int32 clearType = 2;
inline bool ResClearSceneMessage::has_cleartype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResClearSceneMessage::set_has_cleartype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResClearSceneMessage::clear_has_cleartype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResClearSceneMessage::clear_cleartype() {
  cleartype_ = 0;
  clear_has_cleartype();
}
inline ::google::protobuf::int32 ResClearSceneMessage::cleartype() const {
  return cleartype_;
}
inline void ResClearSceneMessage::set_cleartype(::google::protobuf::int32 value) {
  set_has_cleartype();
  cleartype_ = value;
}

// -------------------------------------------------------------------

// ResPlayerJoinMessage

// optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResPlayerJoin];
inline bool ResPlayerJoinMessage::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResPlayerJoinMessage::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResPlayerJoinMessage::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResPlayerJoinMessage::clear_msgid() {
  msgid_ = 6016;
  clear_has_msgid();
}
inline com::game::proto::Protos_Game60Fishing ResPlayerJoinMessage::msgid() const {
  return static_cast< com::game::proto::Protos_Game60Fishing >(msgid_);
}
inline void ResPlayerJoinMessage::set_msgid(com::game::proto::Protos_Game60Fishing value) {
  GOOGLE_DCHECK(com::game::proto::Protos_Game60Fishing_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required .com.game.proto.PlayerData playerData = 2;
inline bool ResPlayerJoinMessage::has_playerdata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResPlayerJoinMessage::set_has_playerdata() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResPlayerJoinMessage::clear_has_playerdata() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResPlayerJoinMessage::clear_playerdata() {
  if (playerdata_ != NULL) playerdata_->::com::game::proto::PlayerData::Clear();
  clear_has_playerdata();
}
inline const ::com::game::proto::PlayerData& ResPlayerJoinMessage::playerdata() const {
  return playerdata_ != NULL ? *playerdata_ : *default_instance_->playerdata_;
}
inline ::com::game::proto::PlayerData* ResPlayerJoinMessage::mutable_playerdata() {
  set_has_playerdata();
  if (playerdata_ == NULL) playerdata_ = new ::com::game::proto::PlayerData;
  return playerdata_;
}
inline ::com::game::proto::PlayerData* ResPlayerJoinMessage::release_playerdata() {
  clear_has_playerdata();
  ::com::game::proto::PlayerData* temp = playerdata_;
  playerdata_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// PlayerData

// optional int64 playerId = 1;
inline bool PlayerData::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerData::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerData::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerData::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 PlayerData::playerid() const {
  return playerid_;
}
inline void PlayerData::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
}

// optional string playerName = 2;
inline bool PlayerData::has_playername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerData::set_has_playername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerData::clear_has_playername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerData::clear_playername() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    playername_->clear();
  }
  clear_has_playername();
}
inline const ::std::string& PlayerData::playername() const {
  return *playername_;
}
inline void PlayerData::set_playername(const ::std::string& value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void PlayerData::set_playername(const char* value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void PlayerData::set_playername(const char* value, size_t size) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerData::mutable_playername() {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  return playername_;
}
inline ::std::string* PlayerData::release_playername() {
  clear_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playername_;
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 sex = 3;
inline bool PlayerData::has_sex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerData::set_has_sex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerData::clear_has_sex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerData::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 PlayerData::sex() const {
  return sex_;
}
inline void PlayerData::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// optional int32 headicon = 4;
inline bool PlayerData::has_headicon() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerData::set_has_headicon() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerData::clear_has_headicon() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerData::clear_headicon() {
  headicon_ = 0;
  clear_has_headicon();
}
inline ::google::protobuf::int32 PlayerData::headicon() const {
  return headicon_;
}
inline void PlayerData::set_headicon(::google::protobuf::int32 value) {
  set_has_headicon();
  headicon_ = value;
}

// optional string icon = 5;
inline bool PlayerData::has_icon() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerData::set_has_icon() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerData::clear_has_icon() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerData::clear_icon() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    icon_->clear();
  }
  clear_has_icon();
}
inline const ::std::string& PlayerData::icon() const {
  return *icon_;
}
inline void PlayerData::set_icon(const ::std::string& value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void PlayerData::set_icon(const char* value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void PlayerData::set_icon(const char* value, size_t size) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerData::mutable_icon() {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  return icon_;
}
inline ::std::string* PlayerData::release_icon() {
  clear_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = icon_;
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 vipLevel = 6;
inline bool PlayerData::has_viplevel() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlayerData::set_has_viplevel() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlayerData::clear_has_viplevel() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlayerData::clear_viplevel() {
  viplevel_ = 0;
  clear_has_viplevel();
}
inline ::google::protobuf::int32 PlayerData::viplevel() const {
  return viplevel_;
}
inline void PlayerData::set_viplevel(::google::protobuf::int32 value) {
  set_has_viplevel();
  viplevel_ = value;
}

// optional int64 goldNum = 7;
inline bool PlayerData::has_goldnum() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlayerData::set_has_goldnum() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlayerData::clear_has_goldnum() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlayerData::clear_goldnum() {
  goldnum_ = GOOGLE_LONGLONG(0);
  clear_has_goldnum();
}
inline ::google::protobuf::int64 PlayerData::goldnum() const {
  return goldnum_;
}
inline void PlayerData::set_goldnum(::google::protobuf::int64 value) {
  set_has_goldnum();
  goldnum_ = value;
}

// optional int32 seat = 8;
inline bool PlayerData::has_seat() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PlayerData::set_has_seat() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PlayerData::clear_has_seat() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PlayerData::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 PlayerData::seat() const {
  return seat_;
}
inline void PlayerData::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// optional int32 launcherType = 9;
inline bool PlayerData::has_launchertype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PlayerData::set_has_launchertype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PlayerData::clear_has_launchertype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PlayerData::clear_launchertype() {
  launchertype_ = 0;
  clear_has_launchertype();
}
inline ::google::protobuf::int32 PlayerData::launchertype() const {
  return launchertype_;
}
inline void PlayerData::set_launchertype(::google::protobuf::int32 value) {
  set_has_launchertype();
  launchertype_ = value;
}

// optional int32 rateIndex = 10;
inline bool PlayerData::has_rateindex() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PlayerData::set_has_rateindex() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PlayerData::clear_has_rateindex() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PlayerData::clear_rateindex() {
  rateindex_ = 0;
  clear_has_rateindex();
}
inline ::google::protobuf::int32 PlayerData::rateindex() const {
  return rateindex_;
}
inline void PlayerData::set_rateindex(::google::protobuf::int32 value) {
  set_has_rateindex();
  rateindex_ = value;
}

// optional int32 energy = 11;
inline bool PlayerData::has_energy() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PlayerData::set_has_energy() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PlayerData::clear_has_energy() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PlayerData::clear_energy() {
  energy_ = 0;
  clear_has_energy();
}
inline ::google::protobuf::int32 PlayerData::energy() const {
  return energy_;
}
inline void PlayerData::set_energy(::google::protobuf::int32 value) {
  set_has_energy();
  energy_ = value;
}

// -------------------------------------------------------------------

// ReqChangeLauncherMessage

// optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ReqChangeLauncher];
inline bool ReqChangeLauncherMessage::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqChangeLauncherMessage::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqChangeLauncherMessage::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqChangeLauncherMessage::clear_msgid() {
  msgid_ = 6017;
  clear_has_msgid();
}
inline com::game::proto::Protos_Game60Fishing ReqChangeLauncherMessage::msgid() const {
  return static_cast< com::game::proto::Protos_Game60Fishing >(msgid_);
}
inline void ReqChangeLauncherMessage::set_msgid(com::game::proto::Protos_Game60Fishing value) {
  GOOGLE_DCHECK(com::game::proto::Protos_Game60Fishing_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required int32 seat = 2;
inline bool ReqChangeLauncherMessage::has_seat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqChangeLauncherMessage::set_has_seat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqChangeLauncherMessage::clear_has_seat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqChangeLauncherMessage::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 ReqChangeLauncherMessage::seat() const {
  return seat_;
}
inline void ReqChangeLauncherMessage::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// required int32 launcherType = 3;
inline bool ReqChangeLauncherMessage::has_launchertype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqChangeLauncherMessage::set_has_launchertype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqChangeLauncherMessage::clear_has_launchertype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqChangeLauncherMessage::clear_launchertype() {
  launchertype_ = 0;
  clear_has_launchertype();
}
inline ::google::protobuf::int32 ReqChangeLauncherMessage::launchertype() const {
  return launchertype_;
}
inline void ReqChangeLauncherMessage::set_launchertype(::google::protobuf::int32 value) {
  set_has_launchertype();
  launchertype_ = value;
}

// -------------------------------------------------------------------

// ResChangeLauncherMessage

// optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResChangeLauncher];
inline bool ResChangeLauncherMessage::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResChangeLauncherMessage::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResChangeLauncherMessage::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResChangeLauncherMessage::clear_msgid() {
  msgid_ = 6018;
  clear_has_msgid();
}
inline com::game::proto::Protos_Game60Fishing ResChangeLauncherMessage::msgid() const {
  return static_cast< com::game::proto::Protos_Game60Fishing >(msgid_);
}
inline void ResChangeLauncherMessage::set_msgid(com::game::proto::Protos_Game60Fishing value) {
  GOOGLE_DCHECK(com::game::proto::Protos_Game60Fishing_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required int32 seat = 2;
inline bool ResChangeLauncherMessage::has_seat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResChangeLauncherMessage::set_has_seat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResChangeLauncherMessage::clear_has_seat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResChangeLauncherMessage::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 ResChangeLauncherMessage::seat() const {
  return seat_;
}
inline void ResChangeLauncherMessage::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// required int32 launcherType = 3;
inline bool ResChangeLauncherMessage::has_launchertype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResChangeLauncherMessage::set_has_launchertype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResChangeLauncherMessage::clear_has_launchertype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResChangeLauncherMessage::clear_launchertype() {
  launchertype_ = 0;
  clear_has_launchertype();
}
inline ::google::protobuf::int32 ResChangeLauncherMessage::launchertype() const {
  return launchertype_;
}
inline void ResChangeLauncherMessage::set_launchertype(::google::protobuf::int32 value) {
  set_has_launchertype();
  launchertype_ = value;
}

// -------------------------------------------------------------------

// ReqChangeRateMessage

// optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ReqChangeRate];
inline bool ReqChangeRateMessage::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqChangeRateMessage::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqChangeRateMessage::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqChangeRateMessage::clear_msgid() {
  msgid_ = 6019;
  clear_has_msgid();
}
inline com::game::proto::Protos_Game60Fishing ReqChangeRateMessage::msgid() const {
  return static_cast< com::game::proto::Protos_Game60Fishing >(msgid_);
}
inline void ReqChangeRateMessage::set_msgid(com::game::proto::Protos_Game60Fishing value) {
  GOOGLE_DCHECK(com::game::proto::Protos_Game60Fishing_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required bool UpRoDownRate = 2;
inline bool ReqChangeRateMessage::has_uprodownrate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqChangeRateMessage::set_has_uprodownrate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqChangeRateMessage::clear_has_uprodownrate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqChangeRateMessage::clear_uprodownrate() {
  uprodownrate_ = false;
  clear_has_uprodownrate();
}
inline bool ReqChangeRateMessage::uprodownrate() const {
  return uprodownrate_;
}
inline void ReqChangeRateMessage::set_uprodownrate(bool value) {
  set_has_uprodownrate();
  uprodownrate_ = value;
}

// -------------------------------------------------------------------

// ResChangeRateMessage

// optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResChangeRate];
inline bool ResChangeRateMessage::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResChangeRateMessage::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResChangeRateMessage::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResChangeRateMessage::clear_msgid() {
  msgid_ = 6020;
  clear_has_msgid();
}
inline com::game::proto::Protos_Game60Fishing ResChangeRateMessage::msgid() const {
  return static_cast< com::game::proto::Protos_Game60Fishing >(msgid_);
}
inline void ResChangeRateMessage::set_msgid(com::game::proto::Protos_Game60Fishing value) {
  GOOGLE_DCHECK(com::game::proto::Protos_Game60Fishing_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required int32 Seat = 2;
inline bool ResChangeRateMessage::has_seat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResChangeRateMessage::set_has_seat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResChangeRateMessage::clear_has_seat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResChangeRateMessage::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 ResChangeRateMessage::seat() const {
  return seat_;
}
inline void ResChangeRateMessage::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// required int32 RateIndex = 3;
inline bool ResChangeRateMessage::has_rateindex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResChangeRateMessage::set_has_rateindex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResChangeRateMessage::clear_has_rateindex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResChangeRateMessage::clear_rateindex() {
  rateindex_ = 0;
  clear_has_rateindex();
}
inline ::google::protobuf::int32 ResChangeRateMessage::rateindex() const {
  return rateindex_;
}
inline void ResChangeRateMessage::set_rateindex(::google::protobuf::int32 value) {
  set_has_rateindex();
  rateindex_ = value;
}

// required bool IsCanUseRate = 4;
inline bool ResChangeRateMessage::has_iscanuserate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResChangeRateMessage::set_has_iscanuserate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResChangeRateMessage::clear_has_iscanuserate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResChangeRateMessage::clear_iscanuserate() {
  iscanuserate_ = false;
  clear_has_iscanuserate();
}
inline bool ResChangeRateMessage::iscanuserate() const {
  return iscanuserate_;
}
inline void ResChangeRateMessage::set_iscanuserate(bool value) {
  set_has_iscanuserate();
  iscanuserate_ = value;
}

// -------------------------------------------------------------------

// SyncBulletData

// optional uint32 BulletID = 1;
inline bool SyncBulletData::has_bulletid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SyncBulletData::set_has_bulletid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SyncBulletData::clear_has_bulletid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SyncBulletData::clear_bulletid() {
  bulletid_ = 0u;
  clear_has_bulletid();
}
inline ::google::protobuf::uint32 SyncBulletData::bulletid() const {
  return bulletid_;
}
inline void SyncBulletData::set_bulletid(::google::protobuf::uint32 value) {
  set_has_bulletid();
  bulletid_ = value;
}

// optional int32 Degree = 2;
inline bool SyncBulletData::has_degree() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SyncBulletData::set_has_degree() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SyncBulletData::clear_has_degree() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SyncBulletData::clear_degree() {
  degree_ = 0;
  clear_has_degree();
}
inline ::google::protobuf::int32 SyncBulletData::degree() const {
  return degree_;
}
inline void SyncBulletData::set_degree(::google::protobuf::int32 value) {
  set_has_degree();
  degree_ = value;
}

// optional uint32 Time = 3;
inline bool SyncBulletData::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SyncBulletData::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SyncBulletData::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SyncBulletData::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 SyncBulletData::time() const {
  return time_;
}
inline void SyncBulletData::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// optional int32 BulletType = 4;
inline bool SyncBulletData::has_bullettype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SyncBulletData::set_has_bullettype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SyncBulletData::clear_has_bullettype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SyncBulletData::clear_bullettype() {
  bullettype_ = 0;
  clear_has_bullettype();
}
inline ::google::protobuf::int32 SyncBulletData::bullettype() const {
  return bullettype_;
}
inline void SyncBulletData::set_bullettype(::google::protobuf::int32 value) {
  set_has_bullettype();
  bullettype_ = value;
}

// optional int32 RateIdx = 5;
inline bool SyncBulletData::has_rateidx() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SyncBulletData::set_has_rateidx() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SyncBulletData::clear_has_rateidx() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SyncBulletData::clear_rateidx() {
  rateidx_ = 0;
  clear_has_rateidx();
}
inline ::google::protobuf::int32 SyncBulletData::rateidx() const {
  return rateidx_;
}
inline void SyncBulletData::set_rateidx(::google::protobuf::int32 value) {
  set_has_rateidx();
  rateidx_ = value;
}

// optional int32 ReboundCount = 6;
inline bool SyncBulletData::has_reboundcount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SyncBulletData::set_has_reboundcount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SyncBulletData::clear_has_reboundcount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SyncBulletData::clear_reboundcount() {
  reboundcount_ = 0;
  clear_has_reboundcount();
}
inline ::google::protobuf::int32 SyncBulletData::reboundcount() const {
  return reboundcount_;
}
inline void SyncBulletData::set_reboundcount(::google::protobuf::int32 value) {
  set_has_reboundcount();
  reboundcount_ = value;
}

// optional uint32 LockFishID = 7;
inline bool SyncBulletData::has_lockfishid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SyncBulletData::set_has_lockfishid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SyncBulletData::clear_has_lockfishid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SyncBulletData::clear_lockfishid() {
  lockfishid_ = 0u;
  clear_has_lockfishid();
}
inline ::google::protobuf::uint32 SyncBulletData::lockfishid() const {
  return lockfishid_;
}
inline void SyncBulletData::set_lockfishid(::google::protobuf::uint32 value) {
  set_has_lockfishid();
  lockfishid_ = value;
}

// -------------------------------------------------------------------

// ResSyncBulletDataMessage

// optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResSyncBulletData];
inline bool ResSyncBulletDataMessage::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResSyncBulletDataMessage::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResSyncBulletDataMessage::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResSyncBulletDataMessage::clear_msgid() {
  msgid_ = 6024;
  clear_has_msgid();
}
inline com::game::proto::Protos_Game60Fishing ResSyncBulletDataMessage::msgid() const {
  return static_cast< com::game::proto::Protos_Game60Fishing >(msgid_);
}
inline void ResSyncBulletDataMessage::set_msgid(com::game::proto::Protos_Game60Fishing value) {
  GOOGLE_DCHECK(com::game::proto::Protos_Game60Fishing_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// repeated .com.game.proto.SyncBulletData syncBulletData = 2;
inline int ResSyncBulletDataMessage::syncbulletdata_size() const {
  return syncbulletdata_.size();
}
inline void ResSyncBulletDataMessage::clear_syncbulletdata() {
  syncbulletdata_.Clear();
}
inline const ::com::game::proto::SyncBulletData& ResSyncBulletDataMessage::syncbulletdata(int index) const {
  return syncbulletdata_.Get(index);
}
inline ::com::game::proto::SyncBulletData* ResSyncBulletDataMessage::mutable_syncbulletdata(int index) {
  return syncbulletdata_.Mutable(index);
}
inline ::com::game::proto::SyncBulletData* ResSyncBulletDataMessage::add_syncbulletdata() {
  return syncbulletdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::game::proto::SyncBulletData >&
ResSyncBulletDataMessage::syncbulletdata() const {
  return syncbulletdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::game::proto::SyncBulletData >*
ResSyncBulletDataMessage::mutable_syncbulletdata() {
  return &syncbulletdata_;
}

// -------------------------------------------------------------------

// ReqLeaveGameMessage

// optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ReqLeaveGame];
inline bool ReqLeaveGameMessage::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqLeaveGameMessage::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqLeaveGameMessage::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqLeaveGameMessage::clear_msgid() {
  msgid_ = 6025;
  clear_has_msgid();
}
inline com::game::proto::Protos_Game60Fishing ReqLeaveGameMessage::msgid() const {
  return static_cast< com::game::proto::Protos_Game60Fishing >(msgid_);
}
inline void ReqLeaveGameMessage::set_msgid(com::game::proto::Protos_Game60Fishing value) {
  GOOGLE_DCHECK(com::game::proto::Protos_Game60Fishing_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required int32 seat = 2;
inline bool ReqLeaveGameMessage::has_seat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqLeaveGameMessage::set_has_seat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqLeaveGameMessage::clear_has_seat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqLeaveGameMessage::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 ReqLeaveGameMessage::seat() const {
  return seat_;
}
inline void ReqLeaveGameMessage::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// -------------------------------------------------------------------

// ResLeaveGameMessage

// optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResLeaveGame];
inline bool ResLeaveGameMessage::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResLeaveGameMessage::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResLeaveGameMessage::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResLeaveGameMessage::clear_msgid() {
  msgid_ = 6026;
  clear_has_msgid();
}
inline com::game::proto::Protos_Game60Fishing ResLeaveGameMessage::msgid() const {
  return static_cast< com::game::proto::Protos_Game60Fishing >(msgid_);
}
inline void ResLeaveGameMessage::set_msgid(com::game::proto::Protos_Game60Fishing value) {
  GOOGLE_DCHECK(com::game::proto::Protos_Game60Fishing_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required int32 seat = 2;
inline bool ResLeaveGameMessage::has_seat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResLeaveGameMessage::set_has_seat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResLeaveGameMessage::clear_has_seat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResLeaveGameMessage::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 ResLeaveGameMessage::seat() const {
  return seat_;
}
inline void ResLeaveGameMessage::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// -------------------------------------------------------------------

// ReqLookUpPlayerInfoMessage

// optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ReqLookUpPlayerInfo];
inline bool ReqLookUpPlayerInfoMessage::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqLookUpPlayerInfoMessage::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqLookUpPlayerInfoMessage::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqLookUpPlayerInfoMessage::clear_msgid() {
  msgid_ = 6027;
  clear_has_msgid();
}
inline com::game::proto::Protos_Game60Fishing ReqLookUpPlayerInfoMessage::msgid() const {
  return static_cast< com::game::proto::Protos_Game60Fishing >(msgid_);
}
inline void ReqLookUpPlayerInfoMessage::set_msgid(com::game::proto::Protos_Game60Fishing value) {
  GOOGLE_DCHECK(com::game::proto::Protos_Game60Fishing_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// optional int64 playerId = 2;
inline bool ReqLookUpPlayerInfoMessage::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqLookUpPlayerInfoMessage::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqLookUpPlayerInfoMessage::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqLookUpPlayerInfoMessage::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 ReqLookUpPlayerInfoMessage::playerid() const {
  return playerid_;
}
inline void ReqLookUpPlayerInfoMessage::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
}

// -------------------------------------------------------------------

// ResLookUpPlayerInfoMessage

// optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResLookUpPlayerInfo];
inline bool ResLookUpPlayerInfoMessage::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResLookUpPlayerInfoMessage::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResLookUpPlayerInfoMessage::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResLookUpPlayerInfoMessage::clear_msgid() {
  msgid_ = 6028;
  clear_has_msgid();
}
inline com::game::proto::Protos_Game60Fishing ResLookUpPlayerInfoMessage::msgid() const {
  return static_cast< com::game::proto::Protos_Game60Fishing >(msgid_);
}
inline void ResLookUpPlayerInfoMessage::set_msgid(com::game::proto::Protos_Game60Fishing value) {
  GOOGLE_DCHECK(com::game::proto::Protos_Game60Fishing_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// optional int64 playerId = 2;
inline bool ResLookUpPlayerInfoMessage::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResLookUpPlayerInfoMessage::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResLookUpPlayerInfoMessage::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResLookUpPlayerInfoMessage::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 ResLookUpPlayerInfoMessage::playerid() const {
  return playerid_;
}
inline void ResLookUpPlayerInfoMessage::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
}

// optional int32 vipLevel = 3;
inline bool ResLookUpPlayerInfoMessage::has_viplevel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResLookUpPlayerInfoMessage::set_has_viplevel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResLookUpPlayerInfoMessage::clear_has_viplevel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResLookUpPlayerInfoMessage::clear_viplevel() {
  viplevel_ = 0;
  clear_has_viplevel();
}
inline ::google::protobuf::int32 ResLookUpPlayerInfoMessage::viplevel() const {
  return viplevel_;
}
inline void ResLookUpPlayerInfoMessage::set_viplevel(::google::protobuf::int32 value) {
  set_has_viplevel();
  viplevel_ = value;
}

// optional string icon = 4;
inline bool ResLookUpPlayerInfoMessage::has_icon() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResLookUpPlayerInfoMessage::set_has_icon() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResLookUpPlayerInfoMessage::clear_has_icon() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResLookUpPlayerInfoMessage::clear_icon() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    icon_->clear();
  }
  clear_has_icon();
}
inline const ::std::string& ResLookUpPlayerInfoMessage::icon() const {
  return *icon_;
}
inline void ResLookUpPlayerInfoMessage::set_icon(const ::std::string& value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void ResLookUpPlayerInfoMessage::set_icon(const char* value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void ResLookUpPlayerInfoMessage::set_icon(const char* value, size_t size) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ResLookUpPlayerInfoMessage::mutable_icon() {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  return icon_;
}
inline ::std::string* ResLookUpPlayerInfoMessage::release_icon() {
  clear_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = icon_;
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string name = 5;
inline bool ResLookUpPlayerInfoMessage::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResLookUpPlayerInfoMessage::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ResLookUpPlayerInfoMessage::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ResLookUpPlayerInfoMessage::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ResLookUpPlayerInfoMessage::name() const {
  return *name_;
}
inline void ResLookUpPlayerInfoMessage::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ResLookUpPlayerInfoMessage::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ResLookUpPlayerInfoMessage::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ResLookUpPlayerInfoMessage::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ResLookUpPlayerInfoMessage::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 sex = 6;
inline bool ResLookUpPlayerInfoMessage::has_sex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ResLookUpPlayerInfoMessage::set_has_sex() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ResLookUpPlayerInfoMessage::clear_has_sex() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ResLookUpPlayerInfoMessage::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 ResLookUpPlayerInfoMessage::sex() const {
  return sex_;
}
inline void ResLookUpPlayerInfoMessage::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// optional int32 titleId = 7;
inline bool ResLookUpPlayerInfoMessage::has_titleid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ResLookUpPlayerInfoMessage::set_has_titleid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ResLookUpPlayerInfoMessage::clear_has_titleid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ResLookUpPlayerInfoMessage::clear_titleid() {
  titleid_ = 0;
  clear_has_titleid();
}
inline ::google::protobuf::int32 ResLookUpPlayerInfoMessage::titleid() const {
  return titleid_;
}
inline void ResLookUpPlayerInfoMessage::set_titleid(::google::protobuf::int32 value) {
  set_has_titleid();
  titleid_ = value;
}

// optional double gameWinMaxMoney = 8;
inline bool ResLookUpPlayerInfoMessage::has_gamewinmaxmoney() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ResLookUpPlayerInfoMessage::set_has_gamewinmaxmoney() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ResLookUpPlayerInfoMessage::clear_has_gamewinmaxmoney() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ResLookUpPlayerInfoMessage::clear_gamewinmaxmoney() {
  gamewinmaxmoney_ = 0;
  clear_has_gamewinmaxmoney();
}
inline double ResLookUpPlayerInfoMessage::gamewinmaxmoney() const {
  return gamewinmaxmoney_;
}
inline void ResLookUpPlayerInfoMessage::set_gamewinmaxmoney(double value) {
  set_has_gamewinmaxmoney();
  gamewinmaxmoney_ = value;
}

// optional double money = 9;
inline bool ResLookUpPlayerInfoMessage::has_money() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ResLookUpPlayerInfoMessage::set_has_money() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ResLookUpPlayerInfoMessage::clear_has_money() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ResLookUpPlayerInfoMessage::clear_money() {
  money_ = 0;
  clear_has_money();
}
inline double ResLookUpPlayerInfoMessage::money() const {
  return money_;
}
inline void ResLookUpPlayerInfoMessage::set_money(double value) {
  set_has_money();
  money_ = value;
}

// optional int32 charmValue = 10;
inline bool ResLookUpPlayerInfoMessage::has_charmvalue() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ResLookUpPlayerInfoMessage::set_has_charmvalue() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ResLookUpPlayerInfoMessage::clear_has_charmvalue() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ResLookUpPlayerInfoMessage::clear_charmvalue() {
  charmvalue_ = 0;
  clear_has_charmvalue();
}
inline ::google::protobuf::int32 ResLookUpPlayerInfoMessage::charmvalue() const {
  return charmvalue_;
}
inline void ResLookUpPlayerInfoMessage::set_charmvalue(::google::protobuf::int32 value) {
  set_has_charmvalue();
  charmvalue_ = value;
}

// optional string signature = 11;
inline bool ResLookUpPlayerInfoMessage::has_signature() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ResLookUpPlayerInfoMessage::set_has_signature() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ResLookUpPlayerInfoMessage::clear_has_signature() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ResLookUpPlayerInfoMessage::clear_signature() {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    signature_->clear();
  }
  clear_has_signature();
}
inline const ::std::string& ResLookUpPlayerInfoMessage::signature() const {
  return *signature_;
}
inline void ResLookUpPlayerInfoMessage::set_signature(const ::std::string& value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void ResLookUpPlayerInfoMessage::set_signature(const char* value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void ResLookUpPlayerInfoMessage::set_signature(const char* value, size_t size) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ResLookUpPlayerInfoMessage::mutable_signature() {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  return signature_;
}
inline ::std::string* ResLookUpPlayerInfoMessage::release_signature() {
  clear_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = signature_;
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 headIcon = 12;
inline bool ResLookUpPlayerInfoMessage::has_headicon() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ResLookUpPlayerInfoMessage::set_has_headicon() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ResLookUpPlayerInfoMessage::clear_has_headicon() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ResLookUpPlayerInfoMessage::clear_headicon() {
  headicon_ = 0;
  clear_has_headicon();
}
inline ::google::protobuf::int32 ResLookUpPlayerInfoMessage::headicon() const {
  return headicon_;
}
inline void ResLookUpPlayerInfoMessage::set_headicon(::google::protobuf::int32 value) {
  set_has_headicon();
  headicon_ = value;
}

// -------------------------------------------------------------------

// ResConnectFinishMessage

// optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResConnectFinish];
inline bool ResConnectFinishMessage::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResConnectFinishMessage::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResConnectFinishMessage::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResConnectFinishMessage::clear_msgid() {
  msgid_ = 6030;
  clear_has_msgid();
}
inline com::game::proto::Protos_Game60Fishing ResConnectFinishMessage::msgid() const {
  return static_cast< com::game::proto::Protos_Game60Fishing >(msgid_);
}
inline void ResConnectFinishMessage::set_msgid(com::game::proto::Protos_Game60Fishing value) {
  GOOGLE_DCHECK(com::game::proto::Protos_Game60Fishing_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// -------------------------------------------------------------------

// ReqStartSyncFishMessage

// optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ReqStartSyncFish];
inline bool ReqStartSyncFishMessage::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqStartSyncFishMessage::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqStartSyncFishMessage::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqStartSyncFishMessage::clear_msgid() {
  msgid_ = 6031;
  clear_has_msgid();
}
inline com::game::proto::Protos_Game60Fishing ReqStartSyncFishMessage::msgid() const {
  return static_cast< com::game::proto::Protos_Game60Fishing >(msgid_);
}
inline void ReqStartSyncFishMessage::set_msgid(com::game::proto::Protos_Game60Fishing value) {
  GOOGLE_DCHECK(com::game::proto::Protos_Game60Fishing_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// -------------------------------------------------------------------

// ResPlayerTickOutMessage

// optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResPlayerTickOut];
inline bool ResPlayerTickOutMessage::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResPlayerTickOutMessage::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResPlayerTickOutMessage::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResPlayerTickOutMessage::clear_msgid() {
  msgid_ = 6032;
  clear_has_msgid();
}
inline com::game::proto::Protos_Game60Fishing ResPlayerTickOutMessage::msgid() const {
  return static_cast< com::game::proto::Protos_Game60Fishing >(msgid_);
}
inline void ResPlayerTickOutMessage::set_msgid(com::game::proto::Protos_Game60Fishing value) {
  GOOGLE_DCHECK(com::game::proto::Protos_Game60Fishing_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// -------------------------------------------------------------------

// ResSyncAddMoneyMessage

// optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResSyncAddMoney];
inline bool ResSyncAddMoneyMessage::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResSyncAddMoneyMessage::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResSyncAddMoneyMessage::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResSyncAddMoneyMessage::clear_msgid() {
  msgid_ = 6034;
  clear_has_msgid();
}
inline com::game::proto::Protos_Game60Fishing ResSyncAddMoneyMessage::msgid() const {
  return static_cast< com::game::proto::Protos_Game60Fishing >(msgid_);
}
inline void ResSyncAddMoneyMessage::set_msgid(com::game::proto::Protos_Game60Fishing value) {
  GOOGLE_DCHECK(com::game::proto::Protos_Game60Fishing_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required int64 add_goldNum = 2;
inline bool ResSyncAddMoneyMessage::has_add_goldnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResSyncAddMoneyMessage::set_has_add_goldnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResSyncAddMoneyMessage::clear_has_add_goldnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResSyncAddMoneyMessage::clear_add_goldnum() {
  add_goldnum_ = GOOGLE_LONGLONG(0);
  clear_has_add_goldnum();
}
inline ::google::protobuf::int64 ResSyncAddMoneyMessage::add_goldnum() const {
  return add_goldnum_;
}
inline void ResSyncAddMoneyMessage::set_add_goldnum(::google::protobuf::int64 value) {
  set_has_add_goldnum();
  add_goldnum_ = value;
}

// optional int32 reason = 4;
inline bool ResSyncAddMoneyMessage::has_reason() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResSyncAddMoneyMessage::set_has_reason() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResSyncAddMoneyMessage::clear_has_reason() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResSyncAddMoneyMessage::clear_reason() {
  reason_ = 0;
  clear_has_reason();
}
inline ::google::protobuf::int32 ResSyncAddMoneyMessage::reason() const {
  return reason_;
}
inline void ResSyncAddMoneyMessage::set_reason(::google::protobuf::int32 value) {
  set_has_reason();
  reason_ = value;
}

// -------------------------------------------------------------------

// ResUseGoodsKBMessage

// optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResUseGoodsKB];
inline bool ResUseGoodsKBMessage::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResUseGoodsKBMessage::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResUseGoodsKBMessage::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResUseGoodsKBMessage::clear_msgid() {
  msgid_ = 6036;
  clear_has_msgid();
}
inline com::game::proto::Protos_Game60Fishing ResUseGoodsKBMessage::msgid() const {
  return static_cast< com::game::proto::Protos_Game60Fishing >(msgid_);
}
inline void ResUseGoodsKBMessage::set_msgid(com::game::proto::Protos_Game60Fishing value) {
  GOOGLE_DCHECK(com::game::proto::Protos_Game60Fishing_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required int32 seatID = 2;
inline bool ResUseGoodsKBMessage::has_seatid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResUseGoodsKBMessage::set_has_seatid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResUseGoodsKBMessage::clear_has_seatid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResUseGoodsKBMessage::clear_seatid() {
  seatid_ = 0;
  clear_has_seatid();
}
inline ::google::protobuf::int32 ResUseGoodsKBMessage::seatid() const {
  return seatid_;
}
inline void ResUseGoodsKBMessage::set_seatid(::google::protobuf::int32 value) {
  set_has_seatid();
  seatid_ = value;
}

// required uint32 keepTime = 3;
inline bool ResUseGoodsKBMessage::has_keeptime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResUseGoodsKBMessage::set_has_keeptime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResUseGoodsKBMessage::clear_has_keeptime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResUseGoodsKBMessage::clear_keeptime() {
  keeptime_ = 0u;
  clear_has_keeptime();
}
inline ::google::protobuf::uint32 ResUseGoodsKBMessage::keeptime() const {
  return keeptime_;
}
inline void ResUseGoodsKBMessage::set_keeptime(::google::protobuf::uint32 value) {
  set_has_keeptime();
  keeptime_ = value;
}

// -------------------------------------------------------------------

// ResUseGoodsBDMessage

// optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResUseGoodsBD];
inline bool ResUseGoodsBDMessage::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResUseGoodsBDMessage::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResUseGoodsBDMessage::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResUseGoodsBDMessage::clear_msgid() {
  msgid_ = 6038;
  clear_has_msgid();
}
inline com::game::proto::Protos_Game60Fishing ResUseGoodsBDMessage::msgid() const {
  return static_cast< com::game::proto::Protos_Game60Fishing >(msgid_);
}
inline void ResUseGoodsBDMessage::set_msgid(com::game::proto::Protos_Game60Fishing value) {
  GOOGLE_DCHECK(com::game::proto::Protos_Game60Fishing_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required int32 seatID = 2;
inline bool ResUseGoodsBDMessage::has_seatid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResUseGoodsBDMessage::set_has_seatid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResUseGoodsBDMessage::clear_has_seatid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResUseGoodsBDMessage::clear_seatid() {
  seatid_ = 0;
  clear_has_seatid();
}
inline ::google::protobuf::int32 ResUseGoodsBDMessage::seatid() const {
  return seatid_;
}
inline void ResUseGoodsBDMessage::set_seatid(::google::protobuf::int32 value) {
  set_has_seatid();
  seatid_ = value;
}

// required uint32 keepTime = 3;
inline bool ResUseGoodsBDMessage::has_keeptime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResUseGoodsBDMessage::set_has_keeptime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResUseGoodsBDMessage::clear_has_keeptime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResUseGoodsBDMessage::clear_keeptime() {
  keeptime_ = 0u;
  clear_has_keeptime();
}
inline ::google::protobuf::uint32 ResUseGoodsBDMessage::keeptime() const {
  return keeptime_;
}
inline void ResUseGoodsBDMessage::set_keeptime(::google::protobuf::uint32 value) {
  set_has_keeptime();
  keeptime_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace game
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< com::game::proto::Protos_Game60Fishing>() {
  return com::game::proto::Protos_Game60Fishing_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Game60_5fFishingMessage_2eproto__INCLUDED
