// Generated by the protocol buffer compiler.  DO NOT EDIT!
#include "stdafx.h"
#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "LoginMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace game {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* PlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GLRegisterLoginMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GLRegisterLoginMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* LGRegisterLoginMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LGRegisterLoginMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqLoginMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqLoginMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResLoginMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResLoginMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResUpdateServerInfoMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResUpdateServerInfoMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqHeartBeatMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqHeartBeatMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResHeartBeatMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResHeartBeatMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqBindUserMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqBindUserMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResBindUserMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResBindUserMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqBindPhoneMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqBindPhoneMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResBindPhoneMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResBindPhoneMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqBindZFBMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqBindZFBMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResBindZFBMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResBindZFBMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqCanEnterSubGameMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqCanEnterSubGameMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResCanEnterSubGameMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResCanEnterSubGameMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqLogin4SubGameMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqLogin4SubGameMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqPhoneVerifyMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqPhoneVerifyMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResLogin4SubGameMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResLogin4SubGameMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqQuit4SubGameMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqQuit4SubGameMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResQuit4SubGameMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResQuit4SubGameMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResUpdateMoney1Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResUpdateMoney1Message_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResUpdateMoney2Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResUpdateMoney2Message_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqClientLoadstringMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqClientLoadstringMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResClientLoadstringMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResClientLoadstringMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqChatMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqChatMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResChatMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResChatMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqTopListDataMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqTopListDataMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResTopListDataMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResTopListDataMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoneyTopData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoneyTopData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharmTopData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharmTopData_reflection_ = NULL;
const ::google::protobuf::Descriptor* OnlineTopData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OnlineTopData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TotalMoneyTopData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TotalMoneyTopData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqGameRecordPanelMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqGameRecordPanelMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResGameRecordPanelMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResGameRecordPanelMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameRecordPanelData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameRecordPanelData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqGameRecordDataMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqGameRecordDataMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResGameRecordMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResGameRecordMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameRecordData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameRecordData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CardData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CardData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BetData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BetData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqSaveMoneyMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqSaveMoneyMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqDrawMoneyMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqDrawMoneyMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResNoticeMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResNoticeMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqModifyPlayerInfoMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqModifyPlayerInfoMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResModifyPlayerInfoMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResModifyPlayerInfoMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqModifyBankPassWordMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqModifyBankPassWordMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResModifyBankPassWordMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResModifyBankPassWordMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqModifyLoginPassWordMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqModifyLoginPassWordMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResModifyLoginPassWordMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResModifyLoginPassWordMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqBindBankCardMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqBindBankCardMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResBindBankCardMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResBindBankCardMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqRechargeMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqRechargeMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResRechargeMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResRechargeMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqRechargeIOSMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqRechargeIOSMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResRechargeIOSMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResRechargeIOSMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqWithDrawCashMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqWithDrawCashMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResWithDrawCashMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResWithDrawCashMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqChangeCardBgMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqChangeCardBgMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResChangeCardBgMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResChangeCardBgMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqApplyAgencyMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqApplyAgencyMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResApplyAgencyMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResApplyAgencyMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqChatWithServiceMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqChatWithServiceMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResChatWithServiceMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResChatWithServiceMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqReportAgencyMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqReportAgencyMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResReportAgencyMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResReportAgencyMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqWithDrawCashInfoMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqWithDrawCashInfoMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResWithDrawCashInfoMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResWithDrawCashInfoMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* WithDrawCashInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WithDrawCashInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateWithDrawCashInfoMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateWithDrawCashInfoMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAgencyInfoMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAgencyInfoMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResAgencyInfoMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResAgencyInfoMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* AgencyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AgencyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateBankWithdrawStateMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateBankWithdrawStateMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateReferrerInfoMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateReferrerInfoMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqTransferReferMoneyMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqTransferReferMoneyMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResSystemNoticeMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResSystemNoticeMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqReadMailMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqReadMailMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqDeleteMailMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqDeleteMailMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqGetMailMoneyMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqGetMailMoneyMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateMailMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateMailMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* MailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MailGoods_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailGoods_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdatePlayerRechargeInfoMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdatePlayerRechargeInfoMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateControllerRechargeMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateControllerRechargeMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqChatWithAgentMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqChatWithAgentMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResChatWithAgentMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResChatWithAgentMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* AgentChatInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AgentChatInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAgentChatWithServiceMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAgentChatWithServiceMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResAgentChatWithServiceMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResAgentChatWithServiceMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqCommonMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqCommonMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResCommonMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResCommonMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* RefreshOnlineAwardMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RefreshOnlineAwardMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqGetOnlineAwardMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqGetOnlineAwardMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResGetOnlineAwardMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResGetOnlineAwardMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqGetBankruptcyAwardMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqGetBankruptcyAwardMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResGetBankruptcyAwardMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResGetBankruptcyAwardMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqPresentCharmValueMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqPresentCharmValueMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResPresentCharmValueMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResPresentCharmValueMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqGetStartUpMoneyMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqGetStartUpMoneyMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqSignInMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqSignInMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResSignInMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResSignInMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResSignInDataMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResSignInDataMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResBarrageChangeMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResBarrageChangeMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResVIPInfoMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResVIPInfoMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResCharmInfoMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResCharmInfoMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqTurntableDataMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqTurntableDataMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqTurntableMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqTurntableMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqLftfreshMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqLftfreshMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqLftScratchMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqLftScratchMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqHftReceiveMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqHftReceiveMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqHftScratchMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqHftScratchMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResHftScratchMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResHftScratchMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqLftRwScratchMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqLftRwScratchMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqLftRwReceiveMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqLftRwReceiveMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResLftRwScratchMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResLftRwScratchMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* LftrwInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LftrwInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqhuodongMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqhuodongMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReshuodongMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReshuodongMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* huodonginfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  huodonginfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqExpandPlayerInfoMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqExpandPlayerInfoMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqGetShopGoodsMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqGetShopGoodsMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqBuyItemMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqBuyItemMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqRemainderTaskMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqRemainderTaskMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResRemainderTaskMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResRemainderTaskMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemBaseAttribute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemBaseAttribute_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResBackpackListMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResBackpackListMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqReceiveMailItemMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqReceiveMailItemMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqOpenUpMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqOpenUpMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResOpenUpMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResOpenUpMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* openupinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  openupinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqShareInfoMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqShareInfoMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResShareInfoMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResShareInfoMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* DownShareDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DownShareDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqPubAuctionMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqPubAuctionMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqBuyAuctionMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqBuyAuctionMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAuctionsMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAuctionsMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResAuctionsMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResAuctionsMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqMyAuctionHistorysMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqMyAuctionHistorysMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResMyAuctionHistorysMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResMyAuctionHistorysMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuctionEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuctionEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuctionLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuctionLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqCancelAuctionMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqCancelAuctionMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Protos_Login_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_LoginMessage_2eproto() {
  protobuf_AddDesc_LoginMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "LoginMessage.proto");
  GOOGLE_CHECK(file != NULL);
  PlayerInfo_descriptor_ = file->message_type(0);
  static const int PlayerInfo_offsets_[29] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, bindalipayname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, bindalipayacc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, loginid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, mapmodelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, maplineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, money1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, money2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, cardbg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, bankcardacc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, bankcardname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, bankcardbelong_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, applyagent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, titleindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, gamemaxwinmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, charmvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, rechargemoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, headicon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, usertype_),
  };
  PlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerInfo_descriptor_,
      PlayerInfo::default_instance_,
      PlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerInfo));
  GLRegisterLoginMessage_descriptor_ = file->message_type(1);
  static const int GLRegisterLoginMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLRegisterLoginMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLRegisterLoginMessage, serverinfo_),
  };
  GLRegisterLoginMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GLRegisterLoginMessage_descriptor_,
      GLRegisterLoginMessage::default_instance_,
      GLRegisterLoginMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLRegisterLoginMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLRegisterLoginMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GLRegisterLoginMessage));
  LGRegisterLoginMessage_descriptor_ = file->message_type(2);
  static const int LGRegisterLoginMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGRegisterLoginMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGRegisterLoginMessage, serverinfo_),
  };
  LGRegisterLoginMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LGRegisterLoginMessage_descriptor_,
      LGRegisterLoginMessage::default_instance_,
      LGRegisterLoginMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGRegisterLoginMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGRegisterLoginMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LGRegisterLoginMessage));
  ReqLoginMessage_descriptor_ = file->message_type(3);
  static const int ReqLoginMessage_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLoginMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLoginMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLoginMessage, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLoginMessage, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLoginMessage, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLoginMessage, verify_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLoginMessage, mac64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLoginMessage, os_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLoginMessage, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLoginMessage, fr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLoginMessage, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLoginMessage, uutoken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLoginMessage, uuchannel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLoginMessage, gameid_),
  };
  ReqLoginMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqLoginMessage_descriptor_,
      ReqLoginMessage::default_instance_,
      ReqLoginMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLoginMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLoginMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqLoginMessage));
  ResLoginMessage_descriptor_ = file->message_type(4);
  static const int ResLoginMessage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResLoginMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResLoginMessage, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResLoginMessage, playerinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResLoginMessage, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResLoginMessage, serverlist_),
  };
  ResLoginMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResLoginMessage_descriptor_,
      ResLoginMessage::default_instance_,
      ResLoginMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResLoginMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResLoginMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResLoginMessage));
  ResUpdateServerInfoMessage_descriptor_ = file->message_type(5);
  static const int ResUpdateServerInfoMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResUpdateServerInfoMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResUpdateServerInfoMessage, serverinfo_),
  };
  ResUpdateServerInfoMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResUpdateServerInfoMessage_descriptor_,
      ResUpdateServerInfoMessage::default_instance_,
      ResUpdateServerInfoMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResUpdateServerInfoMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResUpdateServerInfoMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResUpdateServerInfoMessage));
  ReqHeartBeatMessage_descriptor_ = file->message_type(6);
  static const int ReqHeartBeatMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHeartBeatMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHeartBeatMessage, dwtime_),
  };
  ReqHeartBeatMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqHeartBeatMessage_descriptor_,
      ReqHeartBeatMessage::default_instance_,
      ReqHeartBeatMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHeartBeatMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHeartBeatMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqHeartBeatMessage));
  ResHeartBeatMessage_descriptor_ = file->message_type(7);
  static const int ResHeartBeatMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResHeartBeatMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResHeartBeatMessage, dwtime_),
  };
  ResHeartBeatMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResHeartBeatMessage_descriptor_,
      ResHeartBeatMessage::default_instance_,
      ResHeartBeatMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResHeartBeatMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResHeartBeatMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResHeartBeatMessage));
  ReqBindUserMessage_descriptor_ = file->message_type(8);
  static const int ReqBindUserMessage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBindUserMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBindUserMessage, deviceuniqueidentifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBindUserMessage, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBindUserMessage, password1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBindUserMessage, password2_),
  };
  ReqBindUserMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqBindUserMessage_descriptor_,
      ReqBindUserMessage::default_instance_,
      ReqBindUserMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBindUserMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBindUserMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqBindUserMessage));
  ResBindUserMessage_descriptor_ = file->message_type(9);
  static const int ResBindUserMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResBindUserMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResBindUserMessage, code_),
  };
  ResBindUserMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResBindUserMessage_descriptor_,
      ResBindUserMessage::default_instance_,
      ResBindUserMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResBindUserMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResBindUserMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResBindUserMessage));
  ReqBindPhoneMessage_descriptor_ = file->message_type(10);
  static const int ReqBindPhoneMessage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBindPhoneMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBindPhoneMessage, verify_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBindPhoneMessage, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBindPhoneMessage, phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBindPhoneMessage, referrerid_),
  };
  ReqBindPhoneMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqBindPhoneMessage_descriptor_,
      ReqBindPhoneMessage::default_instance_,
      ReqBindPhoneMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBindPhoneMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBindPhoneMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqBindPhoneMessage));
  ResBindPhoneMessage_descriptor_ = file->message_type(11);
  static const int ResBindPhoneMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResBindPhoneMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResBindPhoneMessage, code_),
  };
  ResBindPhoneMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResBindPhoneMessage_descriptor_,
      ResBindPhoneMessage::default_instance_,
      ResBindPhoneMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResBindPhoneMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResBindPhoneMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResBindPhoneMessage));
  ReqBindZFBMessage_descriptor_ = file->message_type(12);
  static const int ReqBindZFBMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBindZFBMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBindZFBMessage, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBindZFBMessage, account_),
  };
  ReqBindZFBMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqBindZFBMessage_descriptor_,
      ReqBindZFBMessage::default_instance_,
      ReqBindZFBMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBindZFBMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBindZFBMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqBindZFBMessage));
  ResBindZFBMessage_descriptor_ = file->message_type(13);
  static const int ResBindZFBMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResBindZFBMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResBindZFBMessage, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResBindZFBMessage, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResBindZFBMessage, account_),
  };
  ResBindZFBMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResBindZFBMessage_descriptor_,
      ResBindZFBMessage::default_instance_,
      ResBindZFBMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResBindZFBMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResBindZFBMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResBindZFBMessage));
  ReqCanEnterSubGameMessage_descriptor_ = file->message_type(14);
  static const int ReqCanEnterSubGameMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCanEnterSubGameMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCanEnterSubGameMessage, gameid_),
  };
  ReqCanEnterSubGameMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqCanEnterSubGameMessage_descriptor_,
      ReqCanEnterSubGameMessage::default_instance_,
      ReqCanEnterSubGameMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCanEnterSubGameMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCanEnterSubGameMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqCanEnterSubGameMessage));
  ResCanEnterSubGameMessage_descriptor_ = file->message_type(15);
  static const int ResCanEnterSubGameMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCanEnterSubGameMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCanEnterSubGameMessage, gameid_),
  };
  ResCanEnterSubGameMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResCanEnterSubGameMessage_descriptor_,
      ResCanEnterSubGameMessage::default_instance_,
      ResCanEnterSubGameMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCanEnterSubGameMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCanEnterSubGameMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResCanEnterSubGameMessage));
  ReqLogin4SubGameMessage_descriptor_ = file->message_type(16);
  static const int ReqLogin4SubGameMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogin4SubGameMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogin4SubGameMessage, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogin4SubGameMessage, isreconnect_),
  };
  ReqLogin4SubGameMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqLogin4SubGameMessage_descriptor_,
      ReqLogin4SubGameMessage::default_instance_,
      ReqLogin4SubGameMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogin4SubGameMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogin4SubGameMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqLogin4SubGameMessage));
  ReqPhoneVerifyMessage_descriptor_ = file->message_type(17);
  static const int ReqPhoneVerifyMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPhoneVerifyMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPhoneVerifyMessage, phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPhoneVerifyMessage, islogin_),
  };
  ReqPhoneVerifyMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqPhoneVerifyMessage_descriptor_,
      ReqPhoneVerifyMessage::default_instance_,
      ReqPhoneVerifyMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPhoneVerifyMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPhoneVerifyMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqPhoneVerifyMessage));
  ResLogin4SubGameMessage_descriptor_ = file->message_type(18);
  static const int ResLogin4SubGameMessage_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResLogin4SubGameMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResLogin4SubGameMessage, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResLogin4SubGameMessage, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResLogin4SubGameMessage, isreconnect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResLogin4SubGameMessage, mapmodelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResLogin4SubGameMessage, fiship_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResLogin4SubGameMessage, fishport_),
  };
  ResLogin4SubGameMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResLogin4SubGameMessage_descriptor_,
      ResLogin4SubGameMessage::default_instance_,
      ResLogin4SubGameMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResLogin4SubGameMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResLogin4SubGameMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResLogin4SubGameMessage));
  ReqQuit4SubGameMessage_descriptor_ = file->message_type(19);
  static const int ReqQuit4SubGameMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqQuit4SubGameMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqQuit4SubGameMessage, gameid_),
  };
  ReqQuit4SubGameMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqQuit4SubGameMessage_descriptor_,
      ReqQuit4SubGameMessage::default_instance_,
      ReqQuit4SubGameMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqQuit4SubGameMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqQuit4SubGameMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqQuit4SubGameMessage));
  ResQuit4SubGameMessage_descriptor_ = file->message_type(20);
  static const int ResQuit4SubGameMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResQuit4SubGameMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResQuit4SubGameMessage, gameid_),
  };
  ResQuit4SubGameMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResQuit4SubGameMessage_descriptor_,
      ResQuit4SubGameMessage::default_instance_,
      ResQuit4SubGameMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResQuit4SubGameMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResQuit4SubGameMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResQuit4SubGameMessage));
  ResUpdateMoney1Message_descriptor_ = file->message_type(21);
  static const int ResUpdateMoney1Message_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResUpdateMoney1Message, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResUpdateMoney1Message, money1_),
  };
  ResUpdateMoney1Message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResUpdateMoney1Message_descriptor_,
      ResUpdateMoney1Message::default_instance_,
      ResUpdateMoney1Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResUpdateMoney1Message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResUpdateMoney1Message, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResUpdateMoney1Message));
  ResUpdateMoney2Message_descriptor_ = file->message_type(22);
  static const int ResUpdateMoney2Message_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResUpdateMoney2Message, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResUpdateMoney2Message, money2_),
  };
  ResUpdateMoney2Message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResUpdateMoney2Message_descriptor_,
      ResUpdateMoney2Message::default_instance_,
      ResUpdateMoney2Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResUpdateMoney2Message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResUpdateMoney2Message, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResUpdateMoney2Message));
  ReqClientLoadstringMessage_descriptor_ = file->message_type(23);
  static const int ReqClientLoadstringMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqClientLoadstringMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqClientLoadstringMessage, luals_),
  };
  ReqClientLoadstringMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqClientLoadstringMessage_descriptor_,
      ReqClientLoadstringMessage::default_instance_,
      ReqClientLoadstringMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqClientLoadstringMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqClientLoadstringMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqClientLoadstringMessage));
  ResClientLoadstringMessage_descriptor_ = file->message_type(24);
  static const int ResClientLoadstringMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResClientLoadstringMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResClientLoadstringMessage, luals_),
  };
  ResClientLoadstringMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResClientLoadstringMessage_descriptor_,
      ResClientLoadstringMessage::default_instance_,
      ResClientLoadstringMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResClientLoadstringMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResClientLoadstringMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResClientLoadstringMessage));
  ReqChatMessage_descriptor_ = file->message_type(25);
  static const int ReqChatMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChatMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChatMessage, chattype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChatMessage, toplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChatMessage, content_),
  };
  ReqChatMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqChatMessage_descriptor_,
      ReqChatMessage::default_instance_,
      ReqChatMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChatMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChatMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqChatMessage));
  ResChatMessage_descriptor_ = file->message_type(26);
  static const int ResChatMessage_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResChatMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResChatMessage, chattype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResChatMessage, toplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResChatMessage, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResChatMessage, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResChatMessage, vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResChatMessage, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResChatMessage, playerid_),
  };
  ResChatMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResChatMessage_descriptor_,
      ResChatMessage::default_instance_,
      ResChatMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResChatMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResChatMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResChatMessage));
  ReqTopListDataMessage_descriptor_ = file->message_type(27);
  static const int ReqTopListDataMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTopListDataMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTopListDataMessage, type_),
  };
  ReqTopListDataMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqTopListDataMessage_descriptor_,
      ReqTopListDataMessage::default_instance_,
      ReqTopListDataMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTopListDataMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTopListDataMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqTopListDataMessage));
  ResTopListDataMessage_descriptor_ = file->message_type(28);
  static const int ResTopListDataMessage_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResTopListDataMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResTopListDataMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResTopListDataMessage, moneytopdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResTopListDataMessage, charmtopdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResTopListDataMessage, onlinetopdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResTopListDataMessage, totalmoneytopdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResTopListDataMessage, selfwin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResTopListDataMessage, selfcharm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResTopListDataMessage, selfonlinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResTopListDataMessage, selftotalmoney_),
  };
  ResTopListDataMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResTopListDataMessage_descriptor_,
      ResTopListDataMessage::default_instance_,
      ResTopListDataMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResTopListDataMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResTopListDataMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResTopListDataMessage));
  MoneyTopData_descriptor_ = file->message_type(29);
  static const int MoneyTopData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyTopData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyTopData, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyTopData, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyTopData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyTopData, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyTopData, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyTopData, vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyTopData, headicon_),
  };
  MoneyTopData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoneyTopData_descriptor_,
      MoneyTopData::default_instance_,
      MoneyTopData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyTopData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyTopData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoneyTopData));
  CharmTopData_descriptor_ = file->message_type(30);
  static const int CharmTopData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharmTopData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharmTopData, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharmTopData, charm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharmTopData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharmTopData, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharmTopData, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharmTopData, vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharmTopData, headicon_),
  };
  CharmTopData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharmTopData_descriptor_,
      CharmTopData::default_instance_,
      CharmTopData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharmTopData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharmTopData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharmTopData));
  OnlineTopData_descriptor_ = file->message_type(31);
  static const int OnlineTopData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineTopData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineTopData, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineTopData, onlinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineTopData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineTopData, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineTopData, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineTopData, vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineTopData, totalmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineTopData, headicon_),
  };
  OnlineTopData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OnlineTopData_descriptor_,
      OnlineTopData::default_instance_,
      OnlineTopData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineTopData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineTopData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OnlineTopData));
  TotalMoneyTopData_descriptor_ = file->message_type(32);
  static const int TotalMoneyTopData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TotalMoneyTopData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TotalMoneyTopData, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TotalMoneyTopData, totalmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TotalMoneyTopData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TotalMoneyTopData, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TotalMoneyTopData, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TotalMoneyTopData, vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TotalMoneyTopData, charm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TotalMoneyTopData, headicon_),
  };
  TotalMoneyTopData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TotalMoneyTopData_descriptor_,
      TotalMoneyTopData::default_instance_,
      TotalMoneyTopData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TotalMoneyTopData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TotalMoneyTopData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TotalMoneyTopData));
  ReqGameRecordPanelMessage_descriptor_ = file->message_type(33);
  static const int ReqGameRecordPanelMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGameRecordPanelMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGameRecordPanelMessage, gameids_),
  };
  ReqGameRecordPanelMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqGameRecordPanelMessage_descriptor_,
      ReqGameRecordPanelMessage::default_instance_,
      ReqGameRecordPanelMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGameRecordPanelMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGameRecordPanelMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqGameRecordPanelMessage));
  ResGameRecordPanelMessage_descriptor_ = file->message_type(34);
  static const int ResGameRecordPanelMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResGameRecordPanelMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResGameRecordPanelMessage, maxwinmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResGameRecordPanelMessage, gamerecordpaneldatas_),
  };
  ResGameRecordPanelMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResGameRecordPanelMessage_descriptor_,
      ResGameRecordPanelMessage::default_instance_,
      ResGameRecordPanelMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResGameRecordPanelMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResGameRecordPanelMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResGameRecordPanelMessage));
  GameRecordPanelData_descriptor_ = file->message_type(35);
  static const int GameRecordPanelData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRecordPanelData, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRecordPanelData, maxwinmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRecordPanelData, wincount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRecordPanelData, failcount_),
  };
  GameRecordPanelData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameRecordPanelData_descriptor_,
      GameRecordPanelData::default_instance_,
      GameRecordPanelData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRecordPanelData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRecordPanelData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameRecordPanelData));
  ReqGameRecordDataMessage_descriptor_ = file->message_type(36);
  static const int ReqGameRecordDataMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGameRecordDataMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGameRecordDataMessage, gameid_),
  };
  ReqGameRecordDataMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqGameRecordDataMessage_descriptor_,
      ReqGameRecordDataMessage::default_instance_,
      ReqGameRecordDataMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGameRecordDataMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGameRecordDataMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqGameRecordDataMessage));
  ResGameRecordMessage_descriptor_ = file->message_type(37);
  static const int ResGameRecordMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResGameRecordMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResGameRecordMessage, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResGameRecordMessage, gamerecorddatas_),
  };
  ResGameRecordMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResGameRecordMessage_descriptor_,
      ResGameRecordMessage::default_instance_,
      ResGameRecordMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResGameRecordMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResGameRecordMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResGameRecordMessage));
  GameRecordData_descriptor_ = file->message_type(38);
  static const int GameRecordData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRecordData, round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRecordData, chagemoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRecordData, positionids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRecordData, carddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRecordData, betdata_),
  };
  GameRecordData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameRecordData_descriptor_,
      GameRecordData::default_instance_,
      GameRecordData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRecordData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRecordData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameRecordData));
  CardData_descriptor_ = file->message_type(39);
  static const int CardData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardData, positionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardData, cardrecord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardData, commoncardrecord_),
  };
  CardData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CardData_descriptor_,
      CardData::default_instance_,
      CardData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CardData));
  BetData_descriptor_ = file->message_type(40);
  static const int BetData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BetData, positionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BetData, bettingmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BetData, cardtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BetData, bettingmultiple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BetData, betting_),
  };
  BetData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BetData_descriptor_,
      BetData::default_instance_,
      BetData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BetData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BetData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BetData));
  ReqSaveMoneyMessage_descriptor_ = file->message_type(41);
  static const int ReqSaveMoneyMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSaveMoneyMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSaveMoneyMessage, savemoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSaveMoneyMessage, password_),
  };
  ReqSaveMoneyMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqSaveMoneyMessage_descriptor_,
      ReqSaveMoneyMessage::default_instance_,
      ReqSaveMoneyMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSaveMoneyMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSaveMoneyMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqSaveMoneyMessage));
  ReqDrawMoneyMessage_descriptor_ = file->message_type(42);
  static const int ReqDrawMoneyMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDrawMoneyMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDrawMoneyMessage, drawmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDrawMoneyMessage, password_),
  };
  ReqDrawMoneyMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqDrawMoneyMessage_descriptor_,
      ReqDrawMoneyMessage::default_instance_,
      ReqDrawMoneyMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDrawMoneyMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDrawMoneyMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqDrawMoneyMessage));
  ResNoticeMessage_descriptor_ = file->message_type(43);
  static const int ResNoticeMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNoticeMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNoticeMessage, notice_),
  };
  ResNoticeMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResNoticeMessage_descriptor_,
      ResNoticeMessage::default_instance_,
      ResNoticeMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNoticeMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNoticeMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResNoticeMessage));
  ReqModifyPlayerInfoMessage_descriptor_ = file->message_type(44);
  static const int ReqModifyPlayerInfoMessage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqModifyPlayerInfoMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqModifyPlayerInfoMessage, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqModifyPlayerInfoMessage, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqModifyPlayerInfoMessage, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqModifyPlayerInfoMessage, signature_),
  };
  ReqModifyPlayerInfoMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqModifyPlayerInfoMessage_descriptor_,
      ReqModifyPlayerInfoMessage::default_instance_,
      ReqModifyPlayerInfoMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqModifyPlayerInfoMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqModifyPlayerInfoMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqModifyPlayerInfoMessage));
  ResModifyPlayerInfoMessage_descriptor_ = file->message_type(45);
  static const int ResModifyPlayerInfoMessage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResModifyPlayerInfoMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResModifyPlayerInfoMessage, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResModifyPlayerInfoMessage, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResModifyPlayerInfoMessage, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResModifyPlayerInfoMessage, signature_),
  };
  ResModifyPlayerInfoMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResModifyPlayerInfoMessage_descriptor_,
      ResModifyPlayerInfoMessage::default_instance_,
      ResModifyPlayerInfoMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResModifyPlayerInfoMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResModifyPlayerInfoMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResModifyPlayerInfoMessage));
  ReqModifyBankPassWordMessage_descriptor_ = file->message_type(46);
  static const int ReqModifyBankPassWordMessage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqModifyBankPassWordMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqModifyBankPassWordMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqModifyBankPassWordMessage, bankoldpassword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqModifyBankPassWordMessage, banknewpassword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqModifyBankPassWordMessage, phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqModifyBankPassWordMessage, verify_),
  };
  ReqModifyBankPassWordMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqModifyBankPassWordMessage_descriptor_,
      ReqModifyBankPassWordMessage::default_instance_,
      ReqModifyBankPassWordMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqModifyBankPassWordMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqModifyBankPassWordMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqModifyBankPassWordMessage));
  ResModifyBankPassWordMessage_descriptor_ = file->message_type(47);
  static const int ResModifyBankPassWordMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResModifyBankPassWordMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResModifyBankPassWordMessage, code_),
  };
  ResModifyBankPassWordMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResModifyBankPassWordMessage_descriptor_,
      ResModifyBankPassWordMessage::default_instance_,
      ResModifyBankPassWordMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResModifyBankPassWordMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResModifyBankPassWordMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResModifyBankPassWordMessage));
  ReqModifyLoginPassWordMessage_descriptor_ = file->message_type(48);
  static const int ReqModifyLoginPassWordMessage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqModifyLoginPassWordMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqModifyLoginPassWordMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqModifyLoginPassWordMessage, bankoldpassword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqModifyLoginPassWordMessage, banknewpassword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqModifyLoginPassWordMessage, phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqModifyLoginPassWordMessage, verify_),
  };
  ReqModifyLoginPassWordMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqModifyLoginPassWordMessage_descriptor_,
      ReqModifyLoginPassWordMessage::default_instance_,
      ReqModifyLoginPassWordMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqModifyLoginPassWordMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqModifyLoginPassWordMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqModifyLoginPassWordMessage));
  ResModifyLoginPassWordMessage_descriptor_ = file->message_type(49);
  static const int ResModifyLoginPassWordMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResModifyLoginPassWordMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResModifyLoginPassWordMessage, code_),
  };
  ResModifyLoginPassWordMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResModifyLoginPassWordMessage_descriptor_,
      ResModifyLoginPassWordMessage::default_instance_,
      ResModifyLoginPassWordMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResModifyLoginPassWordMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResModifyLoginPassWordMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResModifyLoginPassWordMessage));
  ReqBindBankCardMessage_descriptor_ = file->message_type(50);
  static const int ReqBindBankCardMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBindBankCardMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBindBankCardMessage, bankcardaccount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBindBankCardMessage, bankcardname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBindBankCardMessage, bankbelong_),
  };
  ReqBindBankCardMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqBindBankCardMessage_descriptor_,
      ReqBindBankCardMessage::default_instance_,
      ReqBindBankCardMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBindBankCardMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBindBankCardMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqBindBankCardMessage));
  ResBindBankCardMessage_descriptor_ = file->message_type(51);
  static const int ResBindBankCardMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResBindBankCardMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResBindBankCardMessage, bankcardacc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResBindBankCardMessage, bankcardname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResBindBankCardMessage, bankcardbelong_),
  };
  ResBindBankCardMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResBindBankCardMessage_descriptor_,
      ResBindBankCardMessage::default_instance_,
      ResBindBankCardMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResBindBankCardMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResBindBankCardMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResBindBankCardMessage));
  ReqRechargeMessage_descriptor_ = file->message_type(52);
  static const int ReqRechargeMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRechargeMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRechargeMessage, rechargeinfo_),
  };
  ReqRechargeMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqRechargeMessage_descriptor_,
      ReqRechargeMessage::default_instance_,
      ReqRechargeMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRechargeMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRechargeMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqRechargeMessage));
  ResRechargeMessage_descriptor_ = file->message_type(53);
  static const int ResRechargeMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResRechargeMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResRechargeMessage, rechargeinfo_),
  };
  ResRechargeMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResRechargeMessage_descriptor_,
      ResRechargeMessage::default_instance_,
      ResRechargeMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResRechargeMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResRechargeMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResRechargeMessage));
  ReqRechargeIOSMessage_descriptor_ = file->message_type(54);
  static const int ReqRechargeIOSMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRechargeIOSMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRechargeIOSMessage, iospayjsonresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRechargeIOSMessage, serverorderid_),
  };
  ReqRechargeIOSMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqRechargeIOSMessage_descriptor_,
      ReqRechargeIOSMessage::default_instance_,
      ReqRechargeIOSMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRechargeIOSMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRechargeIOSMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqRechargeIOSMessage));
  ResRechargeIOSMessage_descriptor_ = file->message_type(55);
  static const int ResRechargeIOSMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResRechargeIOSMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResRechargeIOSMessage, iospayresults_),
  };
  ResRechargeIOSMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResRechargeIOSMessage_descriptor_,
      ResRechargeIOSMessage::default_instance_,
      ResRechargeIOSMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResRechargeIOSMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResRechargeIOSMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResRechargeIOSMessage));
  ReqWithDrawCashMessage_descriptor_ = file->message_type(56);
  static const int ReqWithDrawCashMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWithDrawCashMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWithDrawCashMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWithDrawCashMessage, rmb_),
  };
  ReqWithDrawCashMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqWithDrawCashMessage_descriptor_,
      ReqWithDrawCashMessage::default_instance_,
      ReqWithDrawCashMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWithDrawCashMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWithDrawCashMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqWithDrawCashMessage));
  ResWithDrawCashMessage_descriptor_ = file->message_type(57);
  static const int ResWithDrawCashMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResWithDrawCashMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResWithDrawCashMessage, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResWithDrawCashMessage, rmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResWithDrawCashMessage, type_),
  };
  ResWithDrawCashMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResWithDrawCashMessage_descriptor_,
      ResWithDrawCashMessage::default_instance_,
      ResWithDrawCashMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResWithDrawCashMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResWithDrawCashMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResWithDrawCashMessage));
  ReqChangeCardBgMessage_descriptor_ = file->message_type(58);
  static const int ReqChangeCardBgMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChangeCardBgMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChangeCardBgMessage, reqtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChangeCardBgMessage, reqindex_),
  };
  ReqChangeCardBgMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqChangeCardBgMessage_descriptor_,
      ReqChangeCardBgMessage::default_instance_,
      ReqChangeCardBgMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChangeCardBgMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChangeCardBgMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqChangeCardBgMessage));
  ResChangeCardBgMessage_descriptor_ = file->message_type(59);
  static const int ResChangeCardBgMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResChangeCardBgMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResChangeCardBgMessage, restype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResChangeCardBgMessage, resindex_),
  };
  ResChangeCardBgMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResChangeCardBgMessage_descriptor_,
      ResChangeCardBgMessage::default_instance_,
      ResChangeCardBgMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResChangeCardBgMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResChangeCardBgMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResChangeCardBgMessage));
  ReqApplyAgencyMessage_descriptor_ = file->message_type(60);
  static const int ReqApplyAgencyMessage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqApplyAgencyMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqApplyAgencyMessage, agentacc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqApplyAgencyMessage, qq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqApplyAgencyMessage, wechat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqApplyAgencyMessage, agentname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqApplyAgencyMessage, reason_),
  };
  ReqApplyAgencyMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqApplyAgencyMessage_descriptor_,
      ReqApplyAgencyMessage::default_instance_,
      ReqApplyAgencyMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqApplyAgencyMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqApplyAgencyMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqApplyAgencyMessage));
  ResApplyAgencyMessage_descriptor_ = file->message_type(61);
  static const int ResApplyAgencyMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResApplyAgencyMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResApplyAgencyMessage, result_),
  };
  ResApplyAgencyMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResApplyAgencyMessage_descriptor_,
      ResApplyAgencyMessage::default_instance_,
      ResApplyAgencyMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResApplyAgencyMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResApplyAgencyMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResApplyAgencyMessage));
  ReqChatWithServiceMessage_descriptor_ = file->message_type(62);
  static const int ReqChatWithServiceMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChatWithServiceMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChatWithServiceMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChatWithServiceMessage, content_),
  };
  ReqChatWithServiceMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqChatWithServiceMessage_descriptor_,
      ReqChatWithServiceMessage::default_instance_,
      ReqChatWithServiceMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChatWithServiceMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChatWithServiceMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqChatWithServiceMessage));
  ResChatWithServiceMessage_descriptor_ = file->message_type(63);
  static const int ResChatWithServiceMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResChatWithServiceMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResChatWithServiceMessage, contents_),
  };
  ResChatWithServiceMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResChatWithServiceMessage_descriptor_,
      ResChatWithServiceMessage::default_instance_,
      ResChatWithServiceMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResChatWithServiceMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResChatWithServiceMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResChatWithServiceMessage));
  ReqReportAgencyMessage_descriptor_ = file->message_type(64);
  static const int ReqReportAgencyMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqReportAgencyMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqReportAgencyMessage, wechat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqReportAgencyMessage, reason_),
  };
  ReqReportAgencyMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqReportAgencyMessage_descriptor_,
      ReqReportAgencyMessage::default_instance_,
      ReqReportAgencyMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqReportAgencyMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqReportAgencyMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqReportAgencyMessage));
  ResReportAgencyMessage_descriptor_ = file->message_type(65);
  static const int ResReportAgencyMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResReportAgencyMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResReportAgencyMessage, result_),
  };
  ResReportAgencyMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResReportAgencyMessage_descriptor_,
      ResReportAgencyMessage::default_instance_,
      ResReportAgencyMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResReportAgencyMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResReportAgencyMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResReportAgencyMessage));
  ReqWithDrawCashInfoMessage_descriptor_ = file->message_type(66);
  static const int ReqWithDrawCashInfoMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWithDrawCashInfoMessage, msgid_),
  };
  ReqWithDrawCashInfoMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqWithDrawCashInfoMessage_descriptor_,
      ReqWithDrawCashInfoMessage::default_instance_,
      ReqWithDrawCashInfoMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWithDrawCashInfoMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWithDrawCashInfoMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqWithDrawCashInfoMessage));
  ResWithDrawCashInfoMessage_descriptor_ = file->message_type(67);
  static const int ResWithDrawCashInfoMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResWithDrawCashInfoMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResWithDrawCashInfoMessage, withdrawcashinfo_),
  };
  ResWithDrawCashInfoMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResWithDrawCashInfoMessage_descriptor_,
      ResWithDrawCashInfoMessage::default_instance_,
      ResWithDrawCashInfoMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResWithDrawCashInfoMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResWithDrawCashInfoMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResWithDrawCashInfoMessage));
  WithDrawCashInfo_descriptor_ = file->message_type(68);
  static const int WithDrawCashInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WithDrawCashInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WithDrawCashInfo, alipyacc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WithDrawCashInfo, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WithDrawCashInfo, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WithDrawCashInfo, result_),
  };
  WithDrawCashInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WithDrawCashInfo_descriptor_,
      WithDrawCashInfo::default_instance_,
      WithDrawCashInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WithDrawCashInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WithDrawCashInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WithDrawCashInfo));
  UpdateWithDrawCashInfoMessage_descriptor_ = file->message_type(69);
  static const int UpdateWithDrawCashInfoMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateWithDrawCashInfoMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateWithDrawCashInfoMessage, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateWithDrawCashInfoMessage, state_),
  };
  UpdateWithDrawCashInfoMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateWithDrawCashInfoMessage_descriptor_,
      UpdateWithDrawCashInfoMessage::default_instance_,
      UpdateWithDrawCashInfoMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateWithDrawCashInfoMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateWithDrawCashInfoMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateWithDrawCashInfoMessage));
  ReqAgencyInfoMessage_descriptor_ = file->message_type(70);
  static const int ReqAgencyInfoMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAgencyInfoMessage, msgid_),
  };
  ReqAgencyInfoMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqAgencyInfoMessage_descriptor_,
      ReqAgencyInfoMessage::default_instance_,
      ReqAgencyInfoMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAgencyInfoMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAgencyInfoMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqAgencyInfoMessage));
  ResAgencyInfoMessage_descriptor_ = file->message_type(71);
  static const int ResAgencyInfoMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResAgencyInfoMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResAgencyInfoMessage, agencyinfo_),
  };
  ResAgencyInfoMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResAgencyInfoMessage_descriptor_,
      ResAgencyInfoMessage::default_instance_,
      ResAgencyInfoMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResAgencyInfoMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResAgencyInfoMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResAgencyInfoMessage));
  AgencyInfo_descriptor_ = file->message_type(72);
  static const int AgencyInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgencyInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgencyInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgencyInfo, qq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgencyInfo, wechat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgencyInfo, describe_),
  };
  AgencyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AgencyInfo_descriptor_,
      AgencyInfo::default_instance_,
      AgencyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgencyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgencyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AgencyInfo));
  UpdateBankWithdrawStateMessage_descriptor_ = file->message_type(73);
  static const int UpdateBankWithdrawStateMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBankWithdrawStateMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBankWithdrawStateMessage, isopen_),
  };
  UpdateBankWithdrawStateMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateBankWithdrawStateMessage_descriptor_,
      UpdateBankWithdrawStateMessage::default_instance_,
      UpdateBankWithdrawStateMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBankWithdrawStateMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBankWithdrawStateMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateBankWithdrawStateMessage));
  UpdateReferrerInfoMessage_descriptor_ = file->message_type(74);
  static const int UpdateReferrerInfoMessage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateReferrerInfoMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateReferrerInfoMessage, num1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateReferrerInfoMessage, num2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateReferrerInfoMessage, num3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateReferrerInfoMessage, num4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateReferrerInfoMessage, getmoney_),
  };
  UpdateReferrerInfoMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateReferrerInfoMessage_descriptor_,
      UpdateReferrerInfoMessage::default_instance_,
      UpdateReferrerInfoMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateReferrerInfoMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateReferrerInfoMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateReferrerInfoMessage));
  ReqTransferReferMoneyMessage_descriptor_ = file->message_type(75);
  static const int ReqTransferReferMoneyMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTransferReferMoneyMessage, msgid_),
  };
  ReqTransferReferMoneyMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqTransferReferMoneyMessage_descriptor_,
      ReqTransferReferMoneyMessage::default_instance_,
      ReqTransferReferMoneyMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTransferReferMoneyMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTransferReferMoneyMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqTransferReferMoneyMessage));
  ResSystemNoticeMessage_descriptor_ = file->message_type(76);
  static const int ResSystemNoticeMessage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResSystemNoticeMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResSystemNoticeMessage, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResSystemNoticeMessage, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResSystemNoticeMessage, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResSystemNoticeMessage, vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResSystemNoticeMessage, gameid_),
  };
  ResSystemNoticeMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResSystemNoticeMessage_descriptor_,
      ResSystemNoticeMessage::default_instance_,
      ResSystemNoticeMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResSystemNoticeMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResSystemNoticeMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResSystemNoticeMessage));
  ReqReadMailMessage_descriptor_ = file->message_type(77);
  static const int ReqReadMailMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqReadMailMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqReadMailMessage, mailid_),
  };
  ReqReadMailMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqReadMailMessage_descriptor_,
      ReqReadMailMessage::default_instance_,
      ReqReadMailMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqReadMailMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqReadMailMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqReadMailMessage));
  ReqDeleteMailMessage_descriptor_ = file->message_type(78);
  static const int ReqDeleteMailMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDeleteMailMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDeleteMailMessage, mailids_),
  };
  ReqDeleteMailMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqDeleteMailMessage_descriptor_,
      ReqDeleteMailMessage::default_instance_,
      ReqDeleteMailMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDeleteMailMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDeleteMailMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqDeleteMailMessage));
  ReqGetMailMoneyMessage_descriptor_ = file->message_type(79);
  static const int ReqGetMailMoneyMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetMailMoneyMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetMailMoneyMessage, mailid_),
  };
  ReqGetMailMoneyMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqGetMailMoneyMessage_descriptor_,
      ReqGetMailMoneyMessage::default_instance_,
      ReqGetMailMoneyMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetMailMoneyMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetMailMoneyMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqGetMailMoneyMessage));
  UpdateMailMessage_descriptor_ = file->message_type(80);
  static const int UpdateMailMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateMailMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateMailMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateMailMessage, mails_),
  };
  UpdateMailMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateMailMessage_descriptor_,
      UpdateMailMessage::default_instance_,
      UpdateMailMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateMailMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateMailMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateMailMessage));
  MailInfo_descriptor_ = file->message_type(81);
  static const int MailInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, sendname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, notice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, creattime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, isread_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, getmoneytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, goodslist_),
  };
  MailInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MailInfo_descriptor_,
      MailInfo::default_instance_,
      MailInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MailInfo));
  MailGoods_descriptor_ = file->message_type(82);
  static const int MailGoods_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailGoods, goodsmodelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailGoods, goodsnum_),
  };
  MailGoods_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MailGoods_descriptor_,
      MailGoods::default_instance_,
      MailGoods_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailGoods, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailGoods, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MailGoods));
  UpdatePlayerRechargeInfoMessage_descriptor_ = file->message_type(83);
  static const int UpdatePlayerRechargeInfoMessage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePlayerRechargeInfoMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePlayerRechargeInfoMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePlayerRechargeInfoMessage, agencyrechargecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePlayerRechargeInfoMessage, agencyrechargemoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePlayerRechargeInfoMessage, officialrechargecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePlayerRechargeInfoMessage, officialrechargemoney_),
  };
  UpdatePlayerRechargeInfoMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdatePlayerRechargeInfoMessage_descriptor_,
      UpdatePlayerRechargeInfoMessage::default_instance_,
      UpdatePlayerRechargeInfoMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePlayerRechargeInfoMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePlayerRechargeInfoMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdatePlayerRechargeInfoMessage));
  UpdateControllerRechargeMessage_descriptor_ = file->message_type(84);
  static const int UpdateControllerRechargeMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateControllerRechargeMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateControllerRechargeMessage, isopen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateControllerRechargeMessage, rechargechannel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateControllerRechargeMessage, initratio_),
  };
  UpdateControllerRechargeMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateControllerRechargeMessage_descriptor_,
      UpdateControllerRechargeMessage::default_instance_,
      UpdateControllerRechargeMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateControllerRechargeMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateControllerRechargeMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateControllerRechargeMessage));
  ReqChatWithAgentMessage_descriptor_ = file->message_type(85);
  static const int ReqChatWithAgentMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChatWithAgentMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChatWithAgentMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChatWithAgentMessage, agentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChatWithAgentMessage, content_),
  };
  ReqChatWithAgentMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqChatWithAgentMessage_descriptor_,
      ReqChatWithAgentMessage::default_instance_,
      ReqChatWithAgentMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChatWithAgentMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChatWithAgentMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqChatWithAgentMessage));
  ResChatWithAgentMessage_descriptor_ = file->message_type(86);
  static const int ResChatWithAgentMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResChatWithAgentMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResChatWithAgentMessage, chatinfo_),
  };
  ResChatWithAgentMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResChatWithAgentMessage_descriptor_,
      ResChatWithAgentMessage::default_instance_,
      ResChatWithAgentMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResChatWithAgentMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResChatWithAgentMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResChatWithAgentMessage));
  AgentChatInfo_descriptor_ = file->message_type(87);
  static const int AgentChatInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentChatInfo, agentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentChatInfo, content_),
  };
  AgentChatInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AgentChatInfo_descriptor_,
      AgentChatInfo::default_instance_,
      AgentChatInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentChatInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentChatInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AgentChatInfo));
  ReqAgentChatWithServiceMessage_descriptor_ = file->message_type(88);
  static const int ReqAgentChatWithServiceMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAgentChatWithServiceMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAgentChatWithServiceMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAgentChatWithServiceMessage, content_),
  };
  ReqAgentChatWithServiceMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqAgentChatWithServiceMessage_descriptor_,
      ReqAgentChatWithServiceMessage::default_instance_,
      ReqAgentChatWithServiceMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAgentChatWithServiceMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAgentChatWithServiceMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqAgentChatWithServiceMessage));
  ResAgentChatWithServiceMessage_descriptor_ = file->message_type(89);
  static const int ResAgentChatWithServiceMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResAgentChatWithServiceMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResAgentChatWithServiceMessage, content_),
  };
  ResAgentChatWithServiceMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResAgentChatWithServiceMessage_descriptor_,
      ResAgentChatWithServiceMessage::default_instance_,
      ResAgentChatWithServiceMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResAgentChatWithServiceMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResAgentChatWithServiceMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResAgentChatWithServiceMessage));
  ReqCommonMessage_descriptor_ = file->message_type(90);
  static const int ReqCommonMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCommonMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCommonMessage, submsgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCommonMessage, strs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCommonMessage, buffs_),
  };
  ReqCommonMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqCommonMessage_descriptor_,
      ReqCommonMessage::default_instance_,
      ReqCommonMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCommonMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCommonMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqCommonMessage));
  ResCommonMessage_descriptor_ = file->message_type(91);
  static const int ResCommonMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCommonMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCommonMessage, submsgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCommonMessage, strs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCommonMessage, buffs_),
  };
  ResCommonMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResCommonMessage_descriptor_,
      ResCommonMessage::default_instance_,
      ResCommonMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCommonMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCommonMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResCommonMessage));
  RefreshOnlineAwardMessage_descriptor_ = file->message_type(92);
  static const int RefreshOnlineAwardMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshOnlineAwardMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshOnlineAwardMessage, nextgetawardtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshOnlineAwardMessage, remainnum_),
  };
  RefreshOnlineAwardMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RefreshOnlineAwardMessage_descriptor_,
      RefreshOnlineAwardMessage::default_instance_,
      RefreshOnlineAwardMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshOnlineAwardMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshOnlineAwardMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RefreshOnlineAwardMessage));
  ReqGetOnlineAwardMessage_descriptor_ = file->message_type(93);
  static const int ReqGetOnlineAwardMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetOnlineAwardMessage, msgid_),
  };
  ReqGetOnlineAwardMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqGetOnlineAwardMessage_descriptor_,
      ReqGetOnlineAwardMessage::default_instance_,
      ReqGetOnlineAwardMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetOnlineAwardMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetOnlineAwardMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqGetOnlineAwardMessage));
  ResGetOnlineAwardMessage_descriptor_ = file->message_type(94);
  static const int ResGetOnlineAwardMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResGetOnlineAwardMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResGetOnlineAwardMessage, normalmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResGetOnlineAwardMessage, vipmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResGetOnlineAwardMessage, remaindaynum_),
  };
  ResGetOnlineAwardMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResGetOnlineAwardMessage_descriptor_,
      ResGetOnlineAwardMessage::default_instance_,
      ResGetOnlineAwardMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResGetOnlineAwardMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResGetOnlineAwardMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResGetOnlineAwardMessage));
  ReqGetBankruptcyAwardMessage_descriptor_ = file->message_type(95);
  static const int ReqGetBankruptcyAwardMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetBankruptcyAwardMessage, msgid_),
  };
  ReqGetBankruptcyAwardMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqGetBankruptcyAwardMessage_descriptor_,
      ReqGetBankruptcyAwardMessage::default_instance_,
      ReqGetBankruptcyAwardMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetBankruptcyAwardMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetBankruptcyAwardMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqGetBankruptcyAwardMessage));
  ResGetBankruptcyAwardMessage_descriptor_ = file->message_type(96);
  static const int ResGetBankruptcyAwardMessage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResGetBankruptcyAwardMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResGetBankruptcyAwardMessage, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResGetBankruptcyAwardMessage, minmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResGetBankruptcyAwardMessage, remaindaynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResGetBankruptcyAwardMessage, daynormalnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResGetBankruptcyAwardMessage, dayvipnum_),
  };
  ResGetBankruptcyAwardMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResGetBankruptcyAwardMessage_descriptor_,
      ResGetBankruptcyAwardMessage::default_instance_,
      ResGetBankruptcyAwardMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResGetBankruptcyAwardMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResGetBankruptcyAwardMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResGetBankruptcyAwardMessage));
  ReqPresentCharmValueMessage_descriptor_ = file->message_type(97);
  static const int ReqPresentCharmValueMessage_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPresentCharmValueMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPresentCharmValueMessage, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPresentCharmValueMessage, presentposfrom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPresentCharmValueMessage, presentposto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPresentCharmValueMessage, subgameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPresentCharmValueMessage, presenttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPresentCharmValueMessage, presentvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPresentCharmValueMessage, costmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPresentCharmValueMessage, changecharmvalue_),
  };
  ReqPresentCharmValueMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqPresentCharmValueMessage_descriptor_,
      ReqPresentCharmValueMessage::default_instance_,
      ReqPresentCharmValueMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPresentCharmValueMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPresentCharmValueMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqPresentCharmValueMessage));
  ResPresentCharmValueMessage_descriptor_ = file->message_type(98);
  static const int ResPresentCharmValueMessage_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResPresentCharmValueMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResPresentCharmValueMessage, fromplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResPresentCharmValueMessage, toplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResPresentCharmValueMessage, presentposfrom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResPresentCharmValueMessage, presentposto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResPresentCharmValueMessage, presentvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResPresentCharmValueMessage, changecharmvalue_),
  };
  ResPresentCharmValueMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResPresentCharmValueMessage_descriptor_,
      ResPresentCharmValueMessage::default_instance_,
      ResPresentCharmValueMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResPresentCharmValueMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResPresentCharmValueMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResPresentCharmValueMessage));
  ReqGetStartUpMoneyMessage_descriptor_ = file->message_type(99);
  static const int ReqGetStartUpMoneyMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetStartUpMoneyMessage, msgid_),
  };
  ReqGetStartUpMoneyMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqGetStartUpMoneyMessage_descriptor_,
      ReqGetStartUpMoneyMessage::default_instance_,
      ReqGetStartUpMoneyMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetStartUpMoneyMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetStartUpMoneyMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqGetStartUpMoneyMessage));
  ReqSignInMessage_descriptor_ = file->message_type(100);
  static const int ReqSignInMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSignInMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSignInMessage, signintype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSignInMessage, signinday_),
  };
  ReqSignInMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqSignInMessage_descriptor_,
      ReqSignInMessage::default_instance_,
      ReqSignInMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSignInMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSignInMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqSignInMessage));
  ResSignInMessage_descriptor_ = file->message_type(101);
  static const int ResSignInMessage_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResSignInMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResSignInMessage, cursigninnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResSignInMessage, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResSignInMessage, nextsignin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResSignInMessage, cansignin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResSignInMessage, normalmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResSignInMessage, vipmoney_),
  };
  ResSignInMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResSignInMessage_descriptor_,
      ResSignInMessage::default_instance_,
      ResSignInMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResSignInMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResSignInMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResSignInMessage));
  ResSignInDataMessage_descriptor_ = file->message_type(102);
  static const int ResSignInDataMessage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResSignInDataMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResSignInDataMessage, addupday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResSignInDataMessage, addupdaymoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResSignInDataMessage, continueday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResSignInDataMessage, continuedaymoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResSignInDataMessage, vipadd_),
  };
  ResSignInDataMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResSignInDataMessage_descriptor_,
      ResSignInDataMessage::default_instance_,
      ResSignInDataMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResSignInDataMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResSignInDataMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResSignInDataMessage));
  ResBarrageChangeMessage_descriptor_ = file->message_type(103);
  static const int ResBarrageChangeMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResBarrageChangeMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResBarrageChangeMessage, remainnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResBarrageChangeMessage, maxnum_),
  };
  ResBarrageChangeMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResBarrageChangeMessage_descriptor_,
      ResBarrageChangeMessage::default_instance_,
      ResBarrageChangeMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResBarrageChangeMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResBarrageChangeMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResBarrageChangeMessage));
  ResVIPInfoMessage_descriptor_ = file->message_type(104);
  static const int ResVIPInfoMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResVIPInfoMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResVIPInfoMessage, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResVIPInfoMessage, rechargemoney_),
  };
  ResVIPInfoMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResVIPInfoMessage_descriptor_,
      ResVIPInfoMessage::default_instance_,
      ResVIPInfoMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResVIPInfoMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResVIPInfoMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResVIPInfoMessage));
  ResCharmInfoMessage_descriptor_ = file->message_type(105);
  static const int ResCharmInfoMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCharmInfoMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCharmInfoMessage, titleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCharmInfoMessage, gamemaxwinmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCharmInfoMessage, charmvalue_),
  };
  ResCharmInfoMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResCharmInfoMessage_descriptor_,
      ResCharmInfoMessage::default_instance_,
      ResCharmInfoMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCharmInfoMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCharmInfoMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResCharmInfoMessage));
  ReqTurntableDataMessage_descriptor_ = file->message_type(106);
  static const int ReqTurntableDataMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTurntableDataMessage, msgid_),
  };
  ReqTurntableDataMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqTurntableDataMessage_descriptor_,
      ReqTurntableDataMessage::default_instance_,
      ReqTurntableDataMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTurntableDataMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTurntableDataMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqTurntableDataMessage));
  ReqTurntableMessage_descriptor_ = file->message_type(107);
  static const int ReqTurntableMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTurntableMessage, msgid_),
  };
  ReqTurntableMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqTurntableMessage_descriptor_,
      ReqTurntableMessage::default_instance_,
      ReqTurntableMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTurntableMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTurntableMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqTurntableMessage));
  ReqLftfreshMessage_descriptor_ = file->message_type(108);
  static const int ReqLftfreshMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLftfreshMessage, msgid_),
  };
  ReqLftfreshMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqLftfreshMessage_descriptor_,
      ReqLftfreshMessage::default_instance_,
      ReqLftfreshMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLftfreshMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLftfreshMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqLftfreshMessage));
  ReqLftScratchMessage_descriptor_ = file->message_type(109);
  static const int ReqLftScratchMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLftScratchMessage, msgid_),
  };
  ReqLftScratchMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqLftScratchMessage_descriptor_,
      ReqLftScratchMessage::default_instance_,
      ReqLftScratchMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLftScratchMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLftScratchMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqLftScratchMessage));
  ReqHftReceiveMessage_descriptor_ = file->message_type(110);
  static const int ReqHftReceiveMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHftReceiveMessage, msgid_),
  };
  ReqHftReceiveMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqHftReceiveMessage_descriptor_,
      ReqHftReceiveMessage::default_instance_,
      ReqHftReceiveMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHftReceiveMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHftReceiveMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqHftReceiveMessage));
  ReqHftScratchMessage_descriptor_ = file->message_type(111);
  static const int ReqHftScratchMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHftScratchMessage, msgid_),
  };
  ReqHftScratchMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqHftScratchMessage_descriptor_,
      ReqHftScratchMessage::default_instance_,
      ReqHftScratchMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHftScratchMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHftScratchMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqHftScratchMessage));
  ResHftScratchMessage_descriptor_ = file->message_type(112);
  static const int ResHftScratchMessage_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResHftScratchMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResHftScratchMessage, profitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResHftScratchMessage, profitmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResHftScratchMessage, amountmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResHftScratchMessage, receiveid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResHftScratchMessage, opendate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResHftScratchMessage, receivedate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResHftScratchMessage, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResHftScratchMessage, zt_),
  };
  ResHftScratchMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResHftScratchMessage_descriptor_,
      ResHftScratchMessage::default_instance_,
      ResHftScratchMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResHftScratchMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResHftScratchMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResHftScratchMessage));
  ReqLftRwScratchMessage_descriptor_ = file->message_type(113);
  static const int ReqLftRwScratchMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLftRwScratchMessage, msgid_),
  };
  ReqLftRwScratchMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqLftRwScratchMessage_descriptor_,
      ReqLftRwScratchMessage::default_instance_,
      ReqLftRwScratchMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLftRwScratchMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLftRwScratchMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqLftRwScratchMessage));
  ReqLftRwReceiveMessage_descriptor_ = file->message_type(114);
  static const int ReqLftRwReceiveMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLftRwReceiveMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLftRwReceiveMessage, id_),
  };
  ReqLftRwReceiveMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqLftRwReceiveMessage_descriptor_,
      ReqLftRwReceiveMessage::default_instance_,
      ReqLftRwReceiveMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLftRwReceiveMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLftRwReceiveMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqLftRwReceiveMessage));
  ResLftRwScratchMessage_descriptor_ = file->message_type(115);
  static const int ResLftRwScratchMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResLftRwScratchMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResLftRwScratchMessage, lftews_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResLftRwScratchMessage, opendate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResLftRwScratchMessage, zt_),
  };
  ResLftRwScratchMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResLftRwScratchMessage_descriptor_,
      ResLftRwScratchMessage::default_instance_,
      ResLftRwScratchMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResLftRwScratchMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResLftRwScratchMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResLftRwScratchMessage));
  LftrwInfo_descriptor_ = file->message_type(116);
  static const int LftrwInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LftrwInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LftrwInfo, needmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LftrwInfo, receivemoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LftrwInfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LftrwInfo, profitmoney_),
  };
  LftrwInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LftrwInfo_descriptor_,
      LftrwInfo::default_instance_,
      LftrwInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LftrwInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LftrwInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LftrwInfo));
  ReqhuodongMessage_descriptor_ = file->message_type(117);
  static const int ReqhuodongMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqhuodongMessage, msgid_),
  };
  ReqhuodongMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqhuodongMessage_descriptor_,
      ReqhuodongMessage::default_instance_,
      ReqhuodongMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqhuodongMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqhuodongMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqhuodongMessage));
  ReshuodongMessage_descriptor_ = file->message_type(118);
  static const int ReshuodongMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReshuodongMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReshuodongMessage, huodongs_),
  };
  ReshuodongMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReshuodongMessage_descriptor_,
      ReshuodongMessage::default_instance_,
      ReshuodongMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReshuodongMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReshuodongMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReshuodongMessage));
  huodonginfo_descriptor_ = file->message_type(119);
  static const int huodonginfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(huodonginfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(huodonginfo, zt_),
  };
  huodonginfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      huodonginfo_descriptor_,
      huodonginfo::default_instance_,
      huodonginfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(huodonginfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(huodonginfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(huodonginfo));
  ReqExpandPlayerInfoMessage_descriptor_ = file->message_type(120);
  static const int ReqExpandPlayerInfoMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqExpandPlayerInfoMessage, msgid_),
  };
  ReqExpandPlayerInfoMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqExpandPlayerInfoMessage_descriptor_,
      ReqExpandPlayerInfoMessage::default_instance_,
      ReqExpandPlayerInfoMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqExpandPlayerInfoMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqExpandPlayerInfoMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqExpandPlayerInfoMessage));
  ReqGetShopGoodsMessage_descriptor_ = file->message_type(121);
  static const int ReqGetShopGoodsMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetShopGoodsMessage, msgid_),
  };
  ReqGetShopGoodsMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqGetShopGoodsMessage_descriptor_,
      ReqGetShopGoodsMessage::default_instance_,
      ReqGetShopGoodsMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetShopGoodsMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetShopGoodsMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqGetShopGoodsMessage));
  ReqBuyItemMessage_descriptor_ = file->message_type(122);
  static const int ReqBuyItemMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBuyItemMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBuyItemMessage, goodsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBuyItemMessage, num_),
  };
  ReqBuyItemMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqBuyItemMessage_descriptor_,
      ReqBuyItemMessage::default_instance_,
      ReqBuyItemMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBuyItemMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBuyItemMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqBuyItemMessage));
  ReqRemainderTaskMessage_descriptor_ = file->message_type(123);
  static const int ReqRemainderTaskMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRemainderTaskMessage, msgid_),
  };
  ReqRemainderTaskMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqRemainderTaskMessage_descriptor_,
      ReqRemainderTaskMessage::default_instance_,
      ReqRemainderTaskMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRemainderTaskMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRemainderTaskMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqRemainderTaskMessage));
  ResRemainderTaskMessage_descriptor_ = file->message_type(124);
  static const int ResRemainderTaskMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResRemainderTaskMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResRemainderTaskMessage, gold_),
  };
  ResRemainderTaskMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResRemainderTaskMessage_descriptor_,
      ResRemainderTaskMessage::default_instance_,
      ResRemainderTaskMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResRemainderTaskMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResRemainderTaskMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResRemainderTaskMessage));
  ItemBaseAttribute_descriptor_ = file->message_type(125);
  static const int ItemBaseAttribute_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemBaseAttribute, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemBaseAttribute, modelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemBaseAttribute, count_),
  };
  ItemBaseAttribute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemBaseAttribute_descriptor_,
      ItemBaseAttribute::default_instance_,
      ItemBaseAttribute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemBaseAttribute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemBaseAttribute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemBaseAttribute));
  ResBackpackListMessage_descriptor_ = file->message_type(126);
  static const int ResBackpackListMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResBackpackListMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResBackpackListMessage, goodlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResBackpackListMessage, type_),
  };
  ResBackpackListMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResBackpackListMessage_descriptor_,
      ResBackpackListMessage::default_instance_,
      ResBackpackListMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResBackpackListMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResBackpackListMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResBackpackListMessage));
  ReqReceiveMailItemMessage_descriptor_ = file->message_type(127);
  static const int ReqReceiveMailItemMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqReceiveMailItemMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqReceiveMailItemMessage, mailids_),
  };
  ReqReceiveMailItemMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqReceiveMailItemMessage_descriptor_,
      ReqReceiveMailItemMessage::default_instance_,
      ReqReceiveMailItemMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqReceiveMailItemMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqReceiveMailItemMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqReceiveMailItemMessage));
  ReqOpenUpMessage_descriptor_ = file->message_type(128);
  static const int ReqOpenUpMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOpenUpMessage, msgid_),
  };
  ReqOpenUpMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqOpenUpMessage_descriptor_,
      ReqOpenUpMessage::default_instance_,
      ReqOpenUpMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOpenUpMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOpenUpMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqOpenUpMessage));
  ResOpenUpMessage_descriptor_ = file->message_type(129);
  static const int ResOpenUpMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResOpenUpMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResOpenUpMessage, openupinfos_),
  };
  ResOpenUpMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResOpenUpMessage_descriptor_,
      ResOpenUpMessage::default_instance_,
      ResOpenUpMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResOpenUpMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResOpenUpMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResOpenUpMessage));
  openupinfo_descriptor_ = file->message_type(130);
  static const int openupinfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(openupinfo, names_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(openupinfo, times_),
  };
  openupinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      openupinfo_descriptor_,
      openupinfo::default_instance_,
      openupinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(openupinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(openupinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(openupinfo));
  ReqShareInfoMessage_descriptor_ = file->message_type(131);
  static const int ReqShareInfoMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqShareInfoMessage, msgid_),
  };
  ReqShareInfoMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqShareInfoMessage_descriptor_,
      ReqShareInfoMessage::default_instance_,
      ReqShareInfoMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqShareInfoMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqShareInfoMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqShareInfoMessage));
  ResShareInfoMessage_descriptor_ = file->message_type(132);
  static const int ResShareInfoMessage_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResShareInfoMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResShareInfoMessage, downsharemoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResShareInfoMessage, downsharenum1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResShareInfoMessage, downsharenum2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResShareInfoMessage, downsharenum3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResShareInfoMessage, downsharenum4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResShareInfoMessage, downsharedesc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResShareInfoMessage, downsharemoneytotal1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResShareInfoMessage, downsharemoneytotal2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResShareInfoMessage, downsharemoneytotal3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResShareInfoMessage, downsharemoneytotal4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResShareInfoMessage, downsharemonthmoney1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResShareInfoMessage, downsharemonthmoney2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResShareInfoMessage, downsharemonthmoney3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResShareInfoMessage, downsharemonthmoney4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResShareInfoMessage, downsharedaymoney1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResShareInfoMessage, downsharedaymoney2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResShareInfoMessage, downsharedaymoney3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResShareInfoMessage, downsharedaymoney4_),
  };
  ResShareInfoMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResShareInfoMessage_descriptor_,
      ResShareInfoMessage::default_instance_,
      ResShareInfoMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResShareInfoMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResShareInfoMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResShareInfoMessage));
  DownShareDesc_descriptor_ = file->message_type(133);
  static const int DownShareDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownShareDesc, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownShareDesc, sharemoney_),
  };
  DownShareDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DownShareDesc_descriptor_,
      DownShareDesc::default_instance_,
      DownShareDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownShareDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownShareDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DownShareDesc));
  ReqPubAuctionMessage_descriptor_ = file->message_type(134);
  static const int ReqPubAuctionMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPubAuctionMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPubAuctionMessage, pubcount_),
  };
  ReqPubAuctionMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqPubAuctionMessage_descriptor_,
      ReqPubAuctionMessage::default_instance_,
      ReqPubAuctionMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPubAuctionMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPubAuctionMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqPubAuctionMessage));
  ReqBuyAuctionMessage_descriptor_ = file->message_type(135);
  static const int ReqBuyAuctionMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBuyAuctionMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBuyAuctionMessage, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBuyAuctionMessage, buycount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBuyAuctionMessage, page_),
  };
  ReqBuyAuctionMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqBuyAuctionMessage_descriptor_,
      ReqBuyAuctionMessage::default_instance_,
      ReqBuyAuctionMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBuyAuctionMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBuyAuctionMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqBuyAuctionMessage));
  ReqAuctionsMessage_descriptor_ = file->message_type(136);
  static const int ReqAuctionsMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAuctionsMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAuctionsMessage, page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAuctionsMessage, pageshow_),
  };
  ReqAuctionsMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqAuctionsMessage_descriptor_,
      ReqAuctionsMessage::default_instance_,
      ReqAuctionsMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAuctionsMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAuctionsMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqAuctionsMessage));
  ResAuctionsMessage_descriptor_ = file->message_type(137);
  static const int ResAuctionsMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResAuctionsMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResAuctionsMessage, page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResAuctionsMessage, pagetotal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResAuctionsMessage, entrys_),
  };
  ResAuctionsMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResAuctionsMessage_descriptor_,
      ResAuctionsMessage::default_instance_,
      ResAuctionsMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResAuctionsMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResAuctionsMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResAuctionsMessage));
  ReqMyAuctionHistorysMessage_descriptor_ = file->message_type(138);
  static const int ReqMyAuctionHistorysMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMyAuctionHistorysMessage, msgid_),
  };
  ReqMyAuctionHistorysMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqMyAuctionHistorysMessage_descriptor_,
      ReqMyAuctionHistorysMessage::default_instance_,
      ReqMyAuctionHistorysMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMyAuctionHistorysMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMyAuctionHistorysMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqMyAuctionHistorysMessage));
  ResMyAuctionHistorysMessage_descriptor_ = file->message_type(139);
  static const int ResMyAuctionHistorysMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResMyAuctionHistorysMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResMyAuctionHistorysMessage, logs_),
  };
  ResMyAuctionHistorysMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResMyAuctionHistorysMessage_descriptor_,
      ResMyAuctionHistorysMessage::default_instance_,
      ResMyAuctionHistorysMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResMyAuctionHistorysMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResMyAuctionHistorysMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResMyAuctionHistorysMessage));
  AuctionEntry_descriptor_ = file->message_type(140);
  static const int AuctionEntry_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionEntry, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionEntry, itemmodelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionEntry, itemcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionEntry, itemprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionEntry, owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionEntry, ownerphone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionEntry, ownerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionEntry, totalprice_),
  };
  AuctionEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuctionEntry_descriptor_,
      AuctionEntry::default_instance_,
      AuctionEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuctionEntry));
  AuctionLog_descriptor_ = file->message_type(141);
  static const int AuctionLog_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionLog, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionLog, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionLog, itemcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionLog, owner_),
  };
  AuctionLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuctionLog_descriptor_,
      AuctionLog::default_instance_,
      AuctionLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuctionLog));
  ReqCancelAuctionMessage_descriptor_ = file->message_type(142);
  static const int ReqCancelAuctionMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCancelAuctionMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCancelAuctionMessage, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCancelAuctionMessage, page_),
  };
  ReqCancelAuctionMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqCancelAuctionMessage_descriptor_,
      ReqCancelAuctionMessage::default_instance_,
      ReqCancelAuctionMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCancelAuctionMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCancelAuctionMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqCancelAuctionMessage));
  Protos_Login_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_LoginMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerInfo_descriptor_, &PlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GLRegisterLoginMessage_descriptor_, &GLRegisterLoginMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LGRegisterLoginMessage_descriptor_, &LGRegisterLoginMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqLoginMessage_descriptor_, &ReqLoginMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResLoginMessage_descriptor_, &ResLoginMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResUpdateServerInfoMessage_descriptor_, &ResUpdateServerInfoMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqHeartBeatMessage_descriptor_, &ReqHeartBeatMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResHeartBeatMessage_descriptor_, &ResHeartBeatMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqBindUserMessage_descriptor_, &ReqBindUserMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResBindUserMessage_descriptor_, &ResBindUserMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqBindPhoneMessage_descriptor_, &ReqBindPhoneMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResBindPhoneMessage_descriptor_, &ResBindPhoneMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqBindZFBMessage_descriptor_, &ReqBindZFBMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResBindZFBMessage_descriptor_, &ResBindZFBMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqCanEnterSubGameMessage_descriptor_, &ReqCanEnterSubGameMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResCanEnterSubGameMessage_descriptor_, &ResCanEnterSubGameMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqLogin4SubGameMessage_descriptor_, &ReqLogin4SubGameMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqPhoneVerifyMessage_descriptor_, &ReqPhoneVerifyMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResLogin4SubGameMessage_descriptor_, &ResLogin4SubGameMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqQuit4SubGameMessage_descriptor_, &ReqQuit4SubGameMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResQuit4SubGameMessage_descriptor_, &ResQuit4SubGameMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResUpdateMoney1Message_descriptor_, &ResUpdateMoney1Message::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResUpdateMoney2Message_descriptor_, &ResUpdateMoney2Message::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqClientLoadstringMessage_descriptor_, &ReqClientLoadstringMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResClientLoadstringMessage_descriptor_, &ResClientLoadstringMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqChatMessage_descriptor_, &ReqChatMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResChatMessage_descriptor_, &ResChatMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqTopListDataMessage_descriptor_, &ReqTopListDataMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResTopListDataMessage_descriptor_, &ResTopListDataMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoneyTopData_descriptor_, &MoneyTopData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharmTopData_descriptor_, &CharmTopData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OnlineTopData_descriptor_, &OnlineTopData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TotalMoneyTopData_descriptor_, &TotalMoneyTopData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqGameRecordPanelMessage_descriptor_, &ReqGameRecordPanelMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResGameRecordPanelMessage_descriptor_, &ResGameRecordPanelMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameRecordPanelData_descriptor_, &GameRecordPanelData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqGameRecordDataMessage_descriptor_, &ReqGameRecordDataMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResGameRecordMessage_descriptor_, &ResGameRecordMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameRecordData_descriptor_, &GameRecordData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CardData_descriptor_, &CardData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BetData_descriptor_, &BetData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqSaveMoneyMessage_descriptor_, &ReqSaveMoneyMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqDrawMoneyMessage_descriptor_, &ReqDrawMoneyMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResNoticeMessage_descriptor_, &ResNoticeMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqModifyPlayerInfoMessage_descriptor_, &ReqModifyPlayerInfoMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResModifyPlayerInfoMessage_descriptor_, &ResModifyPlayerInfoMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqModifyBankPassWordMessage_descriptor_, &ReqModifyBankPassWordMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResModifyBankPassWordMessage_descriptor_, &ResModifyBankPassWordMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqModifyLoginPassWordMessage_descriptor_, &ReqModifyLoginPassWordMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResModifyLoginPassWordMessage_descriptor_, &ResModifyLoginPassWordMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqBindBankCardMessage_descriptor_, &ReqBindBankCardMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResBindBankCardMessage_descriptor_, &ResBindBankCardMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqRechargeMessage_descriptor_, &ReqRechargeMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResRechargeMessage_descriptor_, &ResRechargeMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqRechargeIOSMessage_descriptor_, &ReqRechargeIOSMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResRechargeIOSMessage_descriptor_, &ResRechargeIOSMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqWithDrawCashMessage_descriptor_, &ReqWithDrawCashMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResWithDrawCashMessage_descriptor_, &ResWithDrawCashMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqChangeCardBgMessage_descriptor_, &ReqChangeCardBgMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResChangeCardBgMessage_descriptor_, &ResChangeCardBgMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqApplyAgencyMessage_descriptor_, &ReqApplyAgencyMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResApplyAgencyMessage_descriptor_, &ResApplyAgencyMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqChatWithServiceMessage_descriptor_, &ReqChatWithServiceMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResChatWithServiceMessage_descriptor_, &ResChatWithServiceMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqReportAgencyMessage_descriptor_, &ReqReportAgencyMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResReportAgencyMessage_descriptor_, &ResReportAgencyMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqWithDrawCashInfoMessage_descriptor_, &ReqWithDrawCashInfoMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResWithDrawCashInfoMessage_descriptor_, &ResWithDrawCashInfoMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WithDrawCashInfo_descriptor_, &WithDrawCashInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateWithDrawCashInfoMessage_descriptor_, &UpdateWithDrawCashInfoMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqAgencyInfoMessage_descriptor_, &ReqAgencyInfoMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResAgencyInfoMessage_descriptor_, &ResAgencyInfoMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AgencyInfo_descriptor_, &AgencyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateBankWithdrawStateMessage_descriptor_, &UpdateBankWithdrawStateMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateReferrerInfoMessage_descriptor_, &UpdateReferrerInfoMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqTransferReferMoneyMessage_descriptor_, &ReqTransferReferMoneyMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResSystemNoticeMessage_descriptor_, &ResSystemNoticeMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqReadMailMessage_descriptor_, &ReqReadMailMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqDeleteMailMessage_descriptor_, &ReqDeleteMailMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqGetMailMoneyMessage_descriptor_, &ReqGetMailMoneyMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateMailMessage_descriptor_, &UpdateMailMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MailInfo_descriptor_, &MailInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MailGoods_descriptor_, &MailGoods::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdatePlayerRechargeInfoMessage_descriptor_, &UpdatePlayerRechargeInfoMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateControllerRechargeMessage_descriptor_, &UpdateControllerRechargeMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqChatWithAgentMessage_descriptor_, &ReqChatWithAgentMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResChatWithAgentMessage_descriptor_, &ResChatWithAgentMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AgentChatInfo_descriptor_, &AgentChatInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqAgentChatWithServiceMessage_descriptor_, &ReqAgentChatWithServiceMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResAgentChatWithServiceMessage_descriptor_, &ResAgentChatWithServiceMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqCommonMessage_descriptor_, &ReqCommonMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResCommonMessage_descriptor_, &ResCommonMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RefreshOnlineAwardMessage_descriptor_, &RefreshOnlineAwardMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqGetOnlineAwardMessage_descriptor_, &ReqGetOnlineAwardMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResGetOnlineAwardMessage_descriptor_, &ResGetOnlineAwardMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqGetBankruptcyAwardMessage_descriptor_, &ReqGetBankruptcyAwardMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResGetBankruptcyAwardMessage_descriptor_, &ResGetBankruptcyAwardMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqPresentCharmValueMessage_descriptor_, &ReqPresentCharmValueMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResPresentCharmValueMessage_descriptor_, &ResPresentCharmValueMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqGetStartUpMoneyMessage_descriptor_, &ReqGetStartUpMoneyMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqSignInMessage_descriptor_, &ReqSignInMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResSignInMessage_descriptor_, &ResSignInMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResSignInDataMessage_descriptor_, &ResSignInDataMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResBarrageChangeMessage_descriptor_, &ResBarrageChangeMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResVIPInfoMessage_descriptor_, &ResVIPInfoMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResCharmInfoMessage_descriptor_, &ResCharmInfoMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqTurntableDataMessage_descriptor_, &ReqTurntableDataMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqTurntableMessage_descriptor_, &ReqTurntableMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqLftfreshMessage_descriptor_, &ReqLftfreshMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqLftScratchMessage_descriptor_, &ReqLftScratchMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqHftReceiveMessage_descriptor_, &ReqHftReceiveMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqHftScratchMessage_descriptor_, &ReqHftScratchMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResHftScratchMessage_descriptor_, &ResHftScratchMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqLftRwScratchMessage_descriptor_, &ReqLftRwScratchMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqLftRwReceiveMessage_descriptor_, &ReqLftRwReceiveMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResLftRwScratchMessage_descriptor_, &ResLftRwScratchMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LftrwInfo_descriptor_, &LftrwInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqhuodongMessage_descriptor_, &ReqhuodongMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReshuodongMessage_descriptor_, &ReshuodongMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    huodonginfo_descriptor_, &huodonginfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqExpandPlayerInfoMessage_descriptor_, &ReqExpandPlayerInfoMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqGetShopGoodsMessage_descriptor_, &ReqGetShopGoodsMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqBuyItemMessage_descriptor_, &ReqBuyItemMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqRemainderTaskMessage_descriptor_, &ReqRemainderTaskMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResRemainderTaskMessage_descriptor_, &ResRemainderTaskMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemBaseAttribute_descriptor_, &ItemBaseAttribute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResBackpackListMessage_descriptor_, &ResBackpackListMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqReceiveMailItemMessage_descriptor_, &ReqReceiveMailItemMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqOpenUpMessage_descriptor_, &ReqOpenUpMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResOpenUpMessage_descriptor_, &ResOpenUpMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    openupinfo_descriptor_, &openupinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqShareInfoMessage_descriptor_, &ReqShareInfoMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResShareInfoMessage_descriptor_, &ResShareInfoMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DownShareDesc_descriptor_, &DownShareDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqPubAuctionMessage_descriptor_, &ReqPubAuctionMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqBuyAuctionMessage_descriptor_, &ReqBuyAuctionMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqAuctionsMessage_descriptor_, &ReqAuctionsMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResAuctionsMessage_descriptor_, &ResAuctionsMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqMyAuctionHistorysMessage_descriptor_, &ReqMyAuctionHistorysMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResMyAuctionHistorysMessage_descriptor_, &ResMyAuctionHistorysMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuctionEntry_descriptor_, &AuctionEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuctionLog_descriptor_, &AuctionLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqCancelAuctionMessage_descriptor_, &ReqCancelAuctionMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_LoginMessage_2eproto() {
  delete PlayerInfo::default_instance_;
  delete PlayerInfo_reflection_;
  delete GLRegisterLoginMessage::default_instance_;
  delete GLRegisterLoginMessage_reflection_;
  delete LGRegisterLoginMessage::default_instance_;
  delete LGRegisterLoginMessage_reflection_;
  delete ReqLoginMessage::default_instance_;
  delete ReqLoginMessage_reflection_;
  delete ResLoginMessage::default_instance_;
  delete ResLoginMessage_reflection_;
  delete ResUpdateServerInfoMessage::default_instance_;
  delete ResUpdateServerInfoMessage_reflection_;
  delete ReqHeartBeatMessage::default_instance_;
  delete ReqHeartBeatMessage_reflection_;
  delete ResHeartBeatMessage::default_instance_;
  delete ResHeartBeatMessage_reflection_;
  delete ReqBindUserMessage::default_instance_;
  delete ReqBindUserMessage_reflection_;
  delete ResBindUserMessage::default_instance_;
  delete ResBindUserMessage_reflection_;
  delete ReqBindPhoneMessage::default_instance_;
  delete ReqBindPhoneMessage_reflection_;
  delete ResBindPhoneMessage::default_instance_;
  delete ResBindPhoneMessage_reflection_;
  delete ReqBindZFBMessage::default_instance_;
  delete ReqBindZFBMessage_reflection_;
  delete ResBindZFBMessage::default_instance_;
  delete ResBindZFBMessage_reflection_;
  delete ReqCanEnterSubGameMessage::default_instance_;
  delete ReqCanEnterSubGameMessage_reflection_;
  delete ResCanEnterSubGameMessage::default_instance_;
  delete ResCanEnterSubGameMessage_reflection_;
  delete ReqLogin4SubGameMessage::default_instance_;
  delete ReqLogin4SubGameMessage_reflection_;
  delete ReqPhoneVerifyMessage::default_instance_;
  delete ReqPhoneVerifyMessage_reflection_;
  delete ResLogin4SubGameMessage::default_instance_;
  delete ResLogin4SubGameMessage_reflection_;
  delete ReqQuit4SubGameMessage::default_instance_;
  delete ReqQuit4SubGameMessage_reflection_;
  delete ResQuit4SubGameMessage::default_instance_;
  delete ResQuit4SubGameMessage_reflection_;
  delete ResUpdateMoney1Message::default_instance_;
  delete ResUpdateMoney1Message_reflection_;
  delete ResUpdateMoney2Message::default_instance_;
  delete ResUpdateMoney2Message_reflection_;
  delete ReqClientLoadstringMessage::default_instance_;
  delete ReqClientLoadstringMessage_reflection_;
  delete ResClientLoadstringMessage::default_instance_;
  delete ResClientLoadstringMessage_reflection_;
  delete ReqChatMessage::default_instance_;
  delete ReqChatMessage_reflection_;
  delete ResChatMessage::default_instance_;
  delete ResChatMessage_reflection_;
  delete ReqTopListDataMessage::default_instance_;
  delete ReqTopListDataMessage_reflection_;
  delete ResTopListDataMessage::default_instance_;
  delete ResTopListDataMessage_reflection_;
  delete MoneyTopData::default_instance_;
  delete MoneyTopData_reflection_;
  delete CharmTopData::default_instance_;
  delete CharmTopData_reflection_;
  delete OnlineTopData::default_instance_;
  delete OnlineTopData_reflection_;
  delete TotalMoneyTopData::default_instance_;
  delete TotalMoneyTopData_reflection_;
  delete ReqGameRecordPanelMessage::default_instance_;
  delete ReqGameRecordPanelMessage_reflection_;
  delete ResGameRecordPanelMessage::default_instance_;
  delete ResGameRecordPanelMessage_reflection_;
  delete GameRecordPanelData::default_instance_;
  delete GameRecordPanelData_reflection_;
  delete ReqGameRecordDataMessage::default_instance_;
  delete ReqGameRecordDataMessage_reflection_;
  delete ResGameRecordMessage::default_instance_;
  delete ResGameRecordMessage_reflection_;
  delete GameRecordData::default_instance_;
  delete GameRecordData_reflection_;
  delete CardData::default_instance_;
  delete CardData_reflection_;
  delete BetData::default_instance_;
  delete BetData_reflection_;
  delete ReqSaveMoneyMessage::default_instance_;
  delete ReqSaveMoneyMessage_reflection_;
  delete ReqDrawMoneyMessage::default_instance_;
  delete ReqDrawMoneyMessage_reflection_;
  delete ResNoticeMessage::default_instance_;
  delete ResNoticeMessage_reflection_;
  delete ReqModifyPlayerInfoMessage::default_instance_;
  delete ReqModifyPlayerInfoMessage_reflection_;
  delete ResModifyPlayerInfoMessage::default_instance_;
  delete ResModifyPlayerInfoMessage_reflection_;
  delete ReqModifyBankPassWordMessage::default_instance_;
  delete ReqModifyBankPassWordMessage_reflection_;
  delete ResModifyBankPassWordMessage::default_instance_;
  delete ResModifyBankPassWordMessage_reflection_;
  delete ReqModifyLoginPassWordMessage::default_instance_;
  delete ReqModifyLoginPassWordMessage_reflection_;
  delete ResModifyLoginPassWordMessage::default_instance_;
  delete ResModifyLoginPassWordMessage_reflection_;
  delete ReqBindBankCardMessage::default_instance_;
  delete ReqBindBankCardMessage_reflection_;
  delete ResBindBankCardMessage::default_instance_;
  delete ResBindBankCardMessage_reflection_;
  delete ReqRechargeMessage::default_instance_;
  delete ReqRechargeMessage_reflection_;
  delete ResRechargeMessage::default_instance_;
  delete ResRechargeMessage_reflection_;
  delete ReqRechargeIOSMessage::default_instance_;
  delete ReqRechargeIOSMessage_reflection_;
  delete ResRechargeIOSMessage::default_instance_;
  delete ResRechargeIOSMessage_reflection_;
  delete ReqWithDrawCashMessage::default_instance_;
  delete ReqWithDrawCashMessage_reflection_;
  delete ResWithDrawCashMessage::default_instance_;
  delete ResWithDrawCashMessage_reflection_;
  delete ReqChangeCardBgMessage::default_instance_;
  delete ReqChangeCardBgMessage_reflection_;
  delete ResChangeCardBgMessage::default_instance_;
  delete ResChangeCardBgMessage_reflection_;
  delete ReqApplyAgencyMessage::default_instance_;
  delete ReqApplyAgencyMessage_reflection_;
  delete ResApplyAgencyMessage::default_instance_;
  delete ResApplyAgencyMessage_reflection_;
  delete ReqChatWithServiceMessage::default_instance_;
  delete ReqChatWithServiceMessage_reflection_;
  delete ResChatWithServiceMessage::default_instance_;
  delete ResChatWithServiceMessage_reflection_;
  delete ReqReportAgencyMessage::default_instance_;
  delete ReqReportAgencyMessage_reflection_;
  delete ResReportAgencyMessage::default_instance_;
  delete ResReportAgencyMessage_reflection_;
  delete ReqWithDrawCashInfoMessage::default_instance_;
  delete ReqWithDrawCashInfoMessage_reflection_;
  delete ResWithDrawCashInfoMessage::default_instance_;
  delete ResWithDrawCashInfoMessage_reflection_;
  delete WithDrawCashInfo::default_instance_;
  delete WithDrawCashInfo_reflection_;
  delete UpdateWithDrawCashInfoMessage::default_instance_;
  delete UpdateWithDrawCashInfoMessage_reflection_;
  delete ReqAgencyInfoMessage::default_instance_;
  delete ReqAgencyInfoMessage_reflection_;
  delete ResAgencyInfoMessage::default_instance_;
  delete ResAgencyInfoMessage_reflection_;
  delete AgencyInfo::default_instance_;
  delete AgencyInfo_reflection_;
  delete UpdateBankWithdrawStateMessage::default_instance_;
  delete UpdateBankWithdrawStateMessage_reflection_;
  delete UpdateReferrerInfoMessage::default_instance_;
  delete UpdateReferrerInfoMessage_reflection_;
  delete ReqTransferReferMoneyMessage::default_instance_;
  delete ReqTransferReferMoneyMessage_reflection_;
  delete ResSystemNoticeMessage::default_instance_;
  delete ResSystemNoticeMessage_reflection_;
  delete ReqReadMailMessage::default_instance_;
  delete ReqReadMailMessage_reflection_;
  delete ReqDeleteMailMessage::default_instance_;
  delete ReqDeleteMailMessage_reflection_;
  delete ReqGetMailMoneyMessage::default_instance_;
  delete ReqGetMailMoneyMessage_reflection_;
  delete UpdateMailMessage::default_instance_;
  delete UpdateMailMessage_reflection_;
  delete MailInfo::default_instance_;
  delete MailInfo_reflection_;
  delete MailGoods::default_instance_;
  delete MailGoods_reflection_;
  delete UpdatePlayerRechargeInfoMessage::default_instance_;
  delete UpdatePlayerRechargeInfoMessage_reflection_;
  delete UpdateControllerRechargeMessage::default_instance_;
  delete UpdateControllerRechargeMessage_reflection_;
  delete ReqChatWithAgentMessage::default_instance_;
  delete ReqChatWithAgentMessage_reflection_;
  delete ResChatWithAgentMessage::default_instance_;
  delete ResChatWithAgentMessage_reflection_;
  delete AgentChatInfo::default_instance_;
  delete AgentChatInfo_reflection_;
  delete ReqAgentChatWithServiceMessage::default_instance_;
  delete ReqAgentChatWithServiceMessage_reflection_;
  delete ResAgentChatWithServiceMessage::default_instance_;
  delete ResAgentChatWithServiceMessage_reflection_;
  delete ReqCommonMessage::default_instance_;
  delete ReqCommonMessage_reflection_;
  delete ResCommonMessage::default_instance_;
  delete ResCommonMessage_reflection_;
  delete RefreshOnlineAwardMessage::default_instance_;
  delete RefreshOnlineAwardMessage_reflection_;
  delete ReqGetOnlineAwardMessage::default_instance_;
  delete ReqGetOnlineAwardMessage_reflection_;
  delete ResGetOnlineAwardMessage::default_instance_;
  delete ResGetOnlineAwardMessage_reflection_;
  delete ReqGetBankruptcyAwardMessage::default_instance_;
  delete ReqGetBankruptcyAwardMessage_reflection_;
  delete ResGetBankruptcyAwardMessage::default_instance_;
  delete ResGetBankruptcyAwardMessage_reflection_;
  delete ReqPresentCharmValueMessage::default_instance_;
  delete ReqPresentCharmValueMessage_reflection_;
  delete ResPresentCharmValueMessage::default_instance_;
  delete ResPresentCharmValueMessage_reflection_;
  delete ReqGetStartUpMoneyMessage::default_instance_;
  delete ReqGetStartUpMoneyMessage_reflection_;
  delete ReqSignInMessage::default_instance_;
  delete ReqSignInMessage_reflection_;
  delete ResSignInMessage::default_instance_;
  delete ResSignInMessage_reflection_;
  delete ResSignInDataMessage::default_instance_;
  delete ResSignInDataMessage_reflection_;
  delete ResBarrageChangeMessage::default_instance_;
  delete ResBarrageChangeMessage_reflection_;
  delete ResVIPInfoMessage::default_instance_;
  delete ResVIPInfoMessage_reflection_;
  delete ResCharmInfoMessage::default_instance_;
  delete ResCharmInfoMessage_reflection_;
  delete ReqTurntableDataMessage::default_instance_;
  delete ReqTurntableDataMessage_reflection_;
  delete ReqTurntableMessage::default_instance_;
  delete ReqTurntableMessage_reflection_;
  delete ReqLftfreshMessage::default_instance_;
  delete ReqLftfreshMessage_reflection_;
  delete ReqLftScratchMessage::default_instance_;
  delete ReqLftScratchMessage_reflection_;
  delete ReqHftReceiveMessage::default_instance_;
  delete ReqHftReceiveMessage_reflection_;
  delete ReqHftScratchMessage::default_instance_;
  delete ReqHftScratchMessage_reflection_;
  delete ResHftScratchMessage::default_instance_;
  delete ResHftScratchMessage_reflection_;
  delete ReqLftRwScratchMessage::default_instance_;
  delete ReqLftRwScratchMessage_reflection_;
  delete ReqLftRwReceiveMessage::default_instance_;
  delete ReqLftRwReceiveMessage_reflection_;
  delete ResLftRwScratchMessage::default_instance_;
  delete ResLftRwScratchMessage_reflection_;
  delete LftrwInfo::default_instance_;
  delete LftrwInfo_reflection_;
  delete ReqhuodongMessage::default_instance_;
  delete ReqhuodongMessage_reflection_;
  delete ReshuodongMessage::default_instance_;
  delete ReshuodongMessage_reflection_;
  delete huodonginfo::default_instance_;
  delete huodonginfo_reflection_;
  delete ReqExpandPlayerInfoMessage::default_instance_;
  delete ReqExpandPlayerInfoMessage_reflection_;
  delete ReqGetShopGoodsMessage::default_instance_;
  delete ReqGetShopGoodsMessage_reflection_;
  delete ReqBuyItemMessage::default_instance_;
  delete ReqBuyItemMessage_reflection_;
  delete ReqRemainderTaskMessage::default_instance_;
  delete ReqRemainderTaskMessage_reflection_;
  delete ResRemainderTaskMessage::default_instance_;
  delete ResRemainderTaskMessage_reflection_;
  delete ItemBaseAttribute::default_instance_;
  delete ItemBaseAttribute_reflection_;
  delete ResBackpackListMessage::default_instance_;
  delete ResBackpackListMessage_reflection_;
  delete ReqReceiveMailItemMessage::default_instance_;
  delete ReqReceiveMailItemMessage_reflection_;
  delete ReqOpenUpMessage::default_instance_;
  delete ReqOpenUpMessage_reflection_;
  delete ResOpenUpMessage::default_instance_;
  delete ResOpenUpMessage_reflection_;
  delete openupinfo::default_instance_;
  delete openupinfo_reflection_;
  delete ReqShareInfoMessage::default_instance_;
  delete ReqShareInfoMessage_reflection_;
  delete ResShareInfoMessage::default_instance_;
  delete ResShareInfoMessage_reflection_;
  delete DownShareDesc::default_instance_;
  delete DownShareDesc_reflection_;
  delete ReqPubAuctionMessage::default_instance_;
  delete ReqPubAuctionMessage_reflection_;
  delete ReqBuyAuctionMessage::default_instance_;
  delete ReqBuyAuctionMessage_reflection_;
  delete ReqAuctionsMessage::default_instance_;
  delete ReqAuctionsMessage_reflection_;
  delete ResAuctionsMessage::default_instance_;
  delete ResAuctionsMessage_reflection_;
  delete ReqMyAuctionHistorysMessage::default_instance_;
  delete ReqMyAuctionHistorysMessage_reflection_;
  delete ResMyAuctionHistorysMessage::default_instance_;
  delete ResMyAuctionHistorysMessage_reflection_;
  delete AuctionEntry::default_instance_;
  delete AuctionEntry_reflection_;
  delete AuctionLog::default_instance_;
  delete AuctionLog_reflection_;
  delete ReqCancelAuctionMessage::default_instance_;
  delete ReqCancelAuctionMessage_reflection_;
}

void protobuf_AddDesc_LoginMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022LoginMessage.proto\022\016com.game.proto\"\240\004\n"
    "\nPlayerInfo\022\016\n\006userid\030\001 \002(\003\022\020\n\010username\030"
    "\002 \001(\t\022\r\n\005state\030\003 \001(\005\022\026\n\016bindAlipayName\030\004"
    " \001(\t\022\025\n\rbindAlipayAcc\030\005 \001(\t\022\014\n\004name\030\006 \001("
    "\t\022\014\n\004icon\030\007 \001(\t\022\013\n\003sex\030\010 \001(\005\022\017\n\007address\030"
    "\t \001(\t\022\013\n\003vip\030\n \001(\005\022\017\n\007loginId\030\013 \001(\005\022\016\n\006g"
    "ameId\030\014 \001(\005\022\r\n\005mapId\030\r \001(\003\022\022\n\nmapModelId"
    "\030\016 \001(\005\022\021\n\tmapLineId\030\017 \001(\005\022\016\n\006money1\030\020 \001("
    "\001\022\016\n\006money2\030\021 \001(\001\022\016\n\006cardBg\030\022 \001(\005\022\023\n\013ban"
    "kCardAcc\030\023 \001(\t\022\024\n\014bankCardName\030\024 \001(\t\022\026\n\016"
    "bankCardBelong\030\025 \001(\t\022\022\n\napplyAgent\030\026 \001(\010"
    "\022\022\n\ntitleIndex\030\027 \001(\005\022\027\n\017gameMaxWinMoney\030"
    "\030 \001(\001\022\022\n\ncharmValue\030\031 \001(\005\022\025\n\rrechargeMon"
    "ey\030\032 \001(\001\022\020\n\010headIcon\030\033 \001(\005\022\021\n\tsignature\030"
    "\034 \001(\t\022\020\n\010userType\030\035 \001(\005\"j\n\026GLRegisterLog"
    "inMessage\022<\n\005msgID\030\001 \001(\0162\034.com.game.prot"
    "o.Protos_Login:\017GLRegisterLogin\022\022\n\nserve"
    "rInfo\030\002 \002(\t\"j\n\026LGRegisterLoginMessage\022<\n"
    "\005msgID\030\001 \001(\0162\034.com.game.proto.Protos_Log"
    "in:\017LGRegisterLogin\022\022\n\nserverInfo\030\002 \002(\t\""
    "\226\002\n\017ReqLoginMessage\0225\n\005msgID\030\001 \001(\0162\034.com"
    ".game.proto.Protos_Login:\010ReqLogin\022\014\n\004ty"
    "pe\030\002 \002(\005\022\020\n\010platform\030\003 \002(\t\022\020\n\010username\030\004"
    " \001(\t\022\020\n\010password\030\005 \001(\t\022\016\n\006verify\030\006 \001(\t\022\r"
    "\n\005mac64\030\007 \001(\t\022\n\n\002os\030\010 \001(\t\022\017\n\007version\030\t \001"
    "(\t\022\n\n\002fr\030\n \001(\t\022\014\n\004uuid\030\013 \001(\t\022\017\n\007uutoken\030"
    "\014 \001(\t\022\021\n\tuuchannel\030\r \001(\t\022\016\n\006gameId\030\016 \001(\005"
    "\"\255\001\n\017ResLoginMessage\0225\n\005msgID\030\001 \001(\0162\034.co"
    "m.game.proto.Protos_Login:\010ResLogin\022\r\n\005e"
    "rror\030\002 \001(\t\022.\n\nplayerInfo\030\003 \001(\0132\032.com.gam"
    "e.proto.PlayerInfo\022\020\n\010password\030\004 \001(\t\022\022\n\n"
    "serverlist\030\005 \003(\t\"r\n\032ResUpdateServerInfoM"
    "essage\022@\n\005msgID\030\001 \001(\0162\034.com.game.proto.P"
    "rotos_Login:\023ResUpdateServerInfo\022\022\n\nserv"
    "erInfo\030\002 \002(\t\"`\n\023ReqHeartBeatMessage\0229\n\005m"
    "sgID\030\001 \001(\0162\034.com.game.proto.Protos_Login"
    ":\014ReqHeartBeat\022\016\n\006dwTime\030\002 \002(\003\"`\n\023ResHea"
    "rtBeatMessage\0229\n\005msgID\030\001 \001(\0162\034.com.game."
    "proto.Protos_Login:\014ResHeartBeat\022\016\n\006dwTi"
    "me\030\002 \002(\003\"\246\001\n\022ReqBindUserMessage\0228\n\005msgID"
    "\030\001 \001(\0162\034.com.game.proto.Protos_Login:\013Re"
    "qBindUser\022\036\n\026deviceUniqueIdentifier\030\002 \001("
    "\t\022\020\n\010username\030\003 \001(\t\022\021\n\tpassword1\030\004 \001(\t\022\021"
    "\n\tpassword2\030\005 \001(\t\"\\\n\022ResBindUserMessage\022"
    "8\n\005msgID\030\001 \001(\0162\034.com.game.proto.Protos_L"
    "ogin:\013ResBindUser\022\014\n\004code\030\002 \002(\005\"\225\001\n\023ReqB"
    "indPhoneMessage\0229\n\005msgID\030\001 \001(\0162\034.com.gam"
    "e.proto.Protos_Login:\014ReqBindPhone\022\016\n\006ve"
    "rify\030\003 \001(\t\022\020\n\010password\030\004 \001(\t\022\r\n\005phone\030\005 "
    "\001(\t\022\022\n\nreferrerID\030\006 \001(\003\"^\n\023ResBindPhoneM"
    "essage\0229\n\005msgID\030\001 \001(\0162\034.com.game.proto.P"
    "rotos_Login:\014ResBindPhone\022\014\n\004code\030\003 \002(\005\""
    "k\n\021ReqBindZFBMessage\0227\n\005msgID\030\001 \001(\0162\034.co"
    "m.game.proto.Protos_Login:\nReqBindZFB\022\014\n"
    "\004name\030\002 \002(\t\022\017\n\007account\030\003 \001(\t\"y\n\021ResBindZ"
    "FBMessage\0227\n\005msgID\030\001 \001(\0162\034.com.game.prot"
    "o.Protos_Login:\nResBindZFB\022\014\n\004code\030\002 \002(\005"
    "\022\014\n\004name\030\003 \002(\t\022\017\n\007account\030\004 \001(\t\"l\n\031ReqCa"
    "nEnterSubGameMessage\022\?\n\005msgID\030\001 \001(\0162\034.co"
    "m.game.proto.Protos_Login:\022ReqCanEnterSu"
    "bGame\022\016\n\006gameId\030\002 \002(\005\"l\n\031ResCanEnterSubG"
    "ameMessage\022\?\n\005msgID\030\001 \001(\0162\034.com.game.pro"
    "to.Protos_Login:\022ResCanEnterSubGame\022\016\n\006g"
    "ameId\030\002 \002(\005\"}\n\027ReqLogin4SubGameMessage\022="
    "\n\005msgID\030\001 \001(\0162\034.com.game.proto.Protos_Lo"
    "gin:\020ReqLogin4SubGame\022\016\n\006gameId\030\002 \002(\005\022\023\n"
    "\013isReconnect\030\003 \001(\005\"t\n\025ReqPhoneVerifyMess"
    "age\022;\n\005msgID\030\001 \001(\0162\034.com.game.proto.Prot"
    "os_Login:\016ReqPhoneVerify\022\r\n\005phone\030\002 \002(\t\022"
    "\017\n\007isLogin\030\003 \002(\010\"\302\001\n\027ResLogin4SubGameMes"
    "sage\022=\n\005msgID\030\001 \001(\0162\034.com.game.proto.Pro"
    "tos_Login:\020ResLogin4SubGame\022\r\n\005error\030\002 \001"
    "(\t\022\016\n\006gameId\030\003 \001(\005\022\023\n\013isReconnect\030\004 \001(\005\022"
    "\022\n\nmapModelId\030\005 \001(\005\022\016\n\006fishIp\030\006 \001(\t\022\020\n\010f"
    "ishPort\030\007 \001(\005\"f\n\026ReqQuit4SubGameMessage\022"
    "<\n\005msgID\030\001 \001(\0162\034.com.game.proto.Protos_L"
    "ogin:\017ReqQuit4SubGame\022\016\n\006gameId\030\002 \002(\005\"f\n"
    "\026ResQuit4SubGameMessage\022<\n\005msgID\030\001 \001(\0162\034"
    ".com.game.proto.Protos_Login:\017ResQuit4Su"
    "bGame\022\016\n\006gameId\030\002 \001(\005\"f\n\026ResUpdateMoney1"
    "Message\022<\n\005msgID\030\001 \001(\0162\034.com.game.proto."
    "Protos_Login:\017ResUpdateMoney1\022\016\n\006money1\030"
    "\002 \002(\001\"f\n\026ResUpdateMoney2Message\022<\n\005msgID"
    "\030\001 \001(\0162\034.com.game.proto.Protos_Login:\017Re"
    "sUpdateMoney2\022\016\n\006money2\030\002 \002(\001\"m\n\032ReqClie"
    "ntLoadstringMessage\022@\n\005msgID\030\001 \001(\0162\034.com"
    ".game.proto.Protos_Login:\023ReqClientLoads"
    "tring\022\r\n\005luals\030\002 \002(\t\"m\n\032ResClientLoadstr"
    "ingMessage\022@\n\005msgID\030\001 \001(\0162\034.com.game.pro"
    "to.Protos_Login:\023ResClientLoadstring\022\r\n\005"
    "luals\030\002 \002(\t\"}\n\016ReqChatMessage\0224\n\005msgID\030\001"
    " \001(\0162\034.com.game.proto.Protos_Login:\007ReqC"
    "hat\022\020\n\010chatType\030\002 \002(\005\022\022\n\ntoPlayerId\030\003 \001("
    "\003\022\017\n\007content\030\004 \001(\t\"\270\001\n\016ResChatMessage\0224\n"
    "\005msgID\030\001 \001(\0162\034.com.game.proto.Protos_Log"
    "in:\007ResChat\022\020\n\010chatType\030\002 \002(\005\022\022\n\ntoPlaye"
    "rId\030\003 \001(\003\022\017\n\007content\030\004 \001(\t\022\014\n\004icon\030\005 \001(\t"
    "\022\013\n\003vip\030\006 \001(\005\022\014\n\004name\030\007 \001(\t\022\020\n\010playerId\030"
    "\010 \001(\003\"b\n\025ReqTopListDataMessage\022;\n\005msgID\030"
    "\001 \001(\0162\034.com.game.proto.Protos_Login:\016Req"
    "TopListData\022\014\n\004type\030\002 \001(\005\"\222\003\n\025ResTopList"
    "DataMessage\022;\n\005msgID\030\001 \001(\0162\034.com.game.pr"
    "oto.Protos_Login:\016ResTopListData\022\014\n\004type"
    "\030\002 \001(\005\0222\n\014moneyTopData\030\003 \003(\0132\034.com.game."
    "proto.MoneyTopData\0222\n\014charmTopData\030\004 \003(\013"
    "2\034.com.game.proto.CharmTopData\0224\n\ronline"
    "TopData\030\005 \003(\0132\035.com.game.proto.OnlineTop"
    "Data\022<\n\021totalMoneyTopData\030\006 \003(\0132!.com.ga"
    "me.proto.TotalMoneyTopData\022\017\n\007selfWin\030\007 "
    "\001(\001\022\021\n\tselfCharm\030\010 \001(\005\022\026\n\016selfOnlineTime"
    "\030\t \001(\003\022\026\n\016selfTotalMoney\030\n \001(\001\"\177\n\014MoneyT"
    "opData\022\n\n\002id\030\001 \002(\003\022\014\n\004rank\030\002 \002(\005\022\r\n\005mone"
    "y\030\003 \002(\001\022\014\n\004name\030\004 \002(\t\022\014\n\004icon\030\005 \002(\t\022\013\n\003s"
    "ex\030\006 \002(\005\022\013\n\003vip\030\007 \002(\005\022\020\n\010headIcon\030\010 \002(\005\""
    "\177\n\014CharmTopData\022\n\n\002id\030\001 \002(\003\022\014\n\004rank\030\002 \002("
    "\005\022\r\n\005charm\030\003 \002(\005\022\014\n\004name\030\004 \002(\t\022\014\n\004icon\030\005"
    " \002(\t\022\013\n\003sex\030\006 \002(\005\022\013\n\003vip\030\007 \002(\005\022\020\n\010headIc"
    "on\030\010 \002(\005\"\231\001\n\rOnlineTopData\022\n\n\002id\030\001 \002(\003\022\014"
    "\n\004rank\030\002 \002(\005\022\022\n\nonlineTime\030\003 \002(\003\022\014\n\004name"
    "\030\004 \002(\t\022\014\n\004icon\030\005 \002(\t\022\013\n\003sex\030\006 \002(\005\022\013\n\003vip"
    "\030\007 \002(\005\022\022\n\ntotalMoney\030\010 \002(\001\022\020\n\010headIcon\030\t"
    " \002(\005\"\230\001\n\021TotalMoneyTopData\022\n\n\002id\030\001 \002(\003\022\014"
    "\n\004rank\030\002 \002(\005\022\022\n\ntotalMoney\030\003 \002(\001\022\014\n\004name"
    "\030\004 \002(\t\022\014\n\004icon\030\005 \002(\t\022\013\n\003sex\030\006 \002(\005\022\013\n\003vip"
    "\030\007 \002(\005\022\r\n\005charm\030\010 \002(\005\022\020\n\010headIcon\030\t \002(\005\""
    "m\n\031ReqGameRecordPanelMessage\022\?\n\005msgID\030\001 "
    "\001(\0162\034.com.game.proto.Protos_Login:\022ReqGa"
    "meRecordPanel\022\017\n\007gameIds\030\002 \003(\005\"\264\001\n\031ResGa"
    "meRecordPanelMessage\022\?\n\005msgID\030\001 \001(\0162\034.co"
    "m.game.proto.Protos_Login:\022ResGameRecord"
    "Panel\022\023\n\013maxWinMoney\030\002 \001(\001\022A\n\024gameRecord"
    "PanelDatas\030\003 \003(\0132#.com.game.proto.GameRe"
    "cordPanelData\"_\n\023GameRecordPanelData\022\016\n\006"
    "gameId\030\001 \001(\005\022\023\n\013maxWinMoney\030\002 \001(\001\022\020\n\010win"
    "Count\030\003 \001(\005\022\021\n\tfailCount\030\004 \001(\005\"j\n\030ReqGam"
    "eRecordDataMessage\022>\n\005msgID\030\001 \001(\0162\034.com."
    "game.proto.Protos_Login:\021ReqGameRecordDa"
    "ta\022\016\n\006gameId\030\002 \002(\005\"\237\001\n\024ResGameRecordMess"
    "age\022>\n\005msgID\030\001 \001(\0162\034.com.game.proto.Prot"
    "os_Login:\021ResGameRecordData\022\016\n\006gameId\030\002 "
    "\002(\005\0227\n\017gameRecordDatas\030\003 \003(\0132\036.com.game."
    "proto.GameRecordData\"\236\001\n\016GameRecordData\022"
    "\r\n\005round\030\001 \002(\005\022\022\n\nchageMoney\030\002 \002(\001\022\023\n\013po"
    "sitionIds\030\003 \001(\t\022*\n\010cardData\030\004 \003(\0132\030.com."
    "game.proto.CardData\022(\n\007betData\030\005 \003(\0132\027.c"
    "om.game.proto.BetData\"X\n\010CardData\022\n\n\002id\030"
    "\001 \002(\005\022\022\n\npositionId\030\002 \001(\005\022\022\n\ncardRecord\030"
    "\003 \001(\t\022\030\n\020commonCardRecord\030\004 \001(\t\"o\n\007BetDa"
    "ta\022\022\n\npositionId\030\001 \001(\005\022\024\n\014bettingMoney\030\002"
    " \001(\001\022\020\n\010cardType\030\003 \001(\t\022\027\n\017bettingMultipl"
    "e\030\004 \001(\005\022\017\n\007betting\030\005 \001(\t\"u\n\023ReqSaveMoney"
    "Message\0229\n\005msgID\030\001 \001(\0162\034.com.game.proto."
    "Protos_Login:\014ReqSaveMoney\022\021\n\tsaveMoney\030"
    "\002 \002(\001\022\020\n\010password\030\003 \002(\t\"u\n\023ReqDrawMoneyM"
    "essage\0229\n\005msgID\030\001 \001(\0162\034.com.game.proto.P"
    "rotos_Login:\014ReqDrawMoney\022\021\n\tdrawMoney\030\002"
    " \002(\001\022\020\n\010password\030\003 \002(\t\"Z\n\020ResNoticeMessa"
    "ge\0226\n\005msgID\030\001 \001(\0162\034.com.game.proto.Proto"
    "s_Login:\tResNotice\022\016\n\006notice\030\003 \002(\t\"\232\001\n\032R"
    "eqModifyPlayerInfoMessage\022@\n\005msgID\030\001 \001(\016"
    "2\034.com.game.proto.Protos_Login:\023ReqModif"
    "yPlayerInfo\022\014\n\004name\030\002 \001(\t\022\014\n\004icon\030\003 \001(\t\022"
    "\013\n\003sex\030\004 \001(\005\022\021\n\tsignature\030\005 \001(\t\"\232\001\n\032ResM"
    "odifyPlayerInfoMessage\022@\n\005msgID\030\001 \001(\0162\034."
    "com.game.proto.Protos_Login:\023ResModifyPl"
    "ayerInfo\022\014\n\004name\030\002 \001(\t\022\014\n\004icon\030\003 \001(\t\022\013\n\003"
    "sex\030\004 \001(\005\022\021\n\tsignature\030\005 \001(\t\"\301\001\n\034ReqModi"
    "fyBankPassWordMessage\022B\n\005msgID\030\001 \001(\0162\034.c"
    "om.game.proto.Protos_Login:\025ReqModifyBan"
    "kPassWord\022\014\n\004type\030\002 \002(\005\022\027\n\017bankOldPasswo"
    "rd\030\003 \001(\t\022\027\n\017bankNewPassword\030\004 \001(\t\022\r\n\005pho"
    "ne\030\005 \001(\t\022\016\n\006verify\030\006 \001(\t\"p\n\034ResModifyBan"
    "kPassWordMessage\022B\n\005msgID\030\001 \001(\0162\034.com.ga"
    "me.proto.Protos_Login:\025ResModifyBankPass"
    "Word\022\014\n\004code\030\002 \001(\005\"\303\001\n\035ReqModifyLoginPas"
    "sWordMessage\022C\n\005msgID\030\001 \001(\0162\034.com.game.p"
    "roto.Protos_Login:\026ReqModifyLoginPassWor"
    "d\022\014\n\004type\030\002 \002(\005\022\027\n\017bankOldPassword\030\003 \001(\t"
    "\022\027\n\017bankNewPassword\030\004 \001(\t\022\r\n\005phone\030\005 \001(\t"
    "\022\016\n\006verify\030\006 \001(\t\"r\n\035ResModifyLoginPassWo"
    "rdMessage\022C\n\005msgID\030\001 \001(\0162\034.com.game.prot"
    "o.Protos_Login:\026ResModifyLoginPassWord\022\014"
    "\n\004code\030\002 \001(\005\"\231\001\n\026ReqBindBankCardMessage\022"
    "<\n\005msgID\030\001 \001(\0162\034.com.game.proto.Protos_L"
    "ogin:\017ReqBindBankCard\022\027\n\017bankCardAccount"
    "\030\002 \001(\t\022\024\n\014bankCardName\030\003 \001(\t\022\022\n\nbankBelo"
    "ng\030\004 \001(\t\"\231\001\n\026ResBindBankCardMessage\022<\n\005m"
    "sgID\030\001 \001(\0162\034.com.game.proto.Protos_Login"
    ":\017ResBindBankCard\022\023\n\013bankCardAcc\030\002 \001(\t\022\024"
    "\n\014bankCardName\030\003 \001(\t\022\026\n\016bankCardBelong\030\004"
    " \001(\t\"d\n\022ReqRechargeMessage\0228\n\005msgID\030\001 \001("
    "\0162\034.com.game.proto.Protos_Login:\013ReqRech"
    "arge\022\024\n\014rechargeInfo\030\002 \002(\t\"d\n\022ResRecharg"
    "eMessage\0228\n\005msgID\030\001 \001(\0162\034.com.game.proto"
    ".Protos_Login:\013ResRecharge\022\024\n\014rechargeIn"
    "fo\030\002 \002(\t\"\205\001\n\025ReqRechargeIOSMessage\022;\n\005ms"
    "gID\030\001 \001(\0162\034.com.game.proto.Protos_Login:"
    "\016ReqRechargeIOS\022\030\n\020iosPayJsonResult\030\002 \002("
    "\t\022\025\n\rserverOrderId\030\003 \002(\t\"k\n\025ResRechargeI"
    "OSMessage\022;\n\005msgID\030\001 \001(\0162\034.com.game.prot"
    "o.Protos_Login:\016ResRechargeIOS\022\025\n\riosPay"
    "Results\030\002 \002(\t\"q\n\026ReqWithDrawCashMessage\022"
    "<\n\005msgID\030\001 \001(\0162\034.com.game.proto.Protos_L"
    "ogin:\017ReqWithDrawCash\022\014\n\004type\030\002 \002(\005\022\013\n\003r"
    "mb\030\003 \002(\005\"\201\001\n\026ResWithDrawCashMessage\022<\n\005m"
    "sgID\030\001 \001(\0162\034.com.game.proto.Protos_Login"
    ":\017ResWithDrawCash\022\016\n\006result\030\002 \001(\005\022\013\n\003rmb"
    "\030\003 \001(\005\022\014\n\004type\030\004 \001(\005\"y\n\026ReqChangeCardBgM"
    "essage\022<\n\005msgID\030\001 \001(\0162\034.com.game.proto.P"
    "rotos_Login:\017ReqChangeCardBg\022\017\n\007reqType\030"
    "\002 \002(\005\022\020\n\010reqIndex\030\003 \002(\005\"y\n\026ResChangeCard"
    "BgMessage\022<\n\005msgID\030\001 \001(\0162\034.com.game.prot"
    "o.Protos_Login:\017ResChangeCardBg\022\017\n\007resTy"
    "pe\030\002 \002(\005\022\020\n\010resIndex\030\003 \001(\005\"\245\001\n\025ReqApplyA"
    "gencyMessage\022;\n\005msgID\030\001 \001(\0162\034.com.game.p"
    "roto.Protos_Login:\016ReqApplyAgency\022\020\n\010age"
    "ntAcc\030\002 \001(\t\022\n\n\002QQ\030\003 \001(\t\022\016\n\006wechat\030\004 \001(\t\022"
    "\021\n\tagentName\030\005 \001(\t\022\016\n\006reason\030\006 \001(\t\"d\n\025Re"
    "sApplyAgencyMessage\022;\n\005msgID\030\001 \001(\0162\034.com"
    ".game.proto.Protos_Login:\016ResApplyAgency"
    "\022\016\n\006result\030\002 \001(\005\"{\n\031ReqChatWithServiceMe"
    "ssage\022\?\n\005msgID\030\001 \001(\0162\034.com.game.proto.Pr"
    "otos_Login:\022ReqChatWithService\022\014\n\004type\030\002"
    " \001(\005\022\017\n\007content\030\003 \001(\t\"n\n\031ResChatWithServ"
    "iceMessage\022\?\n\005msgID\030\001 \001(\0162\034.com.game.pro"
    "to.Protos_Login:\022ResChatWithService\022\020\n\010c"
    "ontents\030\002 \003(\t\"v\n\026ReqReportAgencyMessage\022"
    "<\n\005msgID\030\001 \001(\0162\034.com.game.proto.Protos_L"
    "ogin:\017ReqReportAgency\022\016\n\006weChat\030\002 \001(\t\022\016\n"
    "\006reason\030\003 \001(\t\"f\n\026ResReportAgencyMessage\022"
    "<\n\005msgID\030\001 \001(\0162\034.com.game.proto.Protos_L"
    "ogin:\017ResReportAgency\022\016\n\006result\030\002 \001(\005\"^\n"
    "\032ReqWithDrawCashInfoMessage\022@\n\005msgID\030\001 \001"
    "(\0162\034.com.game.proto.Protos_Login:\023ReqWit"
    "hDrawCashInfo\"\232\001\n\032ResWithDrawCashInfoMes"
    "sage\022@\n\005msgID\030\001 \001(\0162\034.com.game.proto.Pro"
    "tos_Login:\023ResWithDrawCashInfo\022:\n\020withDr"
    "awCashInfo\030\002 \003(\0132 .com.game.proto.WithDr"
    "awCashInfo\"]\n\020WithDrawCashInfo\022\n\n\002id\030\001 \001"
    "(\t\022\020\n\010alipyacc\030\002 \001(\t\022\014\n\004time\030\003 \001(\003\022\r\n\005mo"
    "ney\030\004 \001(\001\022\016\n\006result\030\005 \001(\005\"\177\n\035UpdateWithD"
    "rawCashInfoMessage\022C\n\005msgID\030\001 \001(\0162\034.com."
    "game.proto.Protos_Login:\026UpdateWithDrawC"
    "ashInfo\022\n\n\002id\030\002 \001(\t\022\r\n\005state\030\003 \001(\005\"R\n\024Re"
    "qAgencyInfoMessage\022:\n\005msgID\030\001 \001(\0162\034.com."
    "game.proto.Protos_Login:\rReqAgencyInfo\"\202"
    "\001\n\024ResAgencyInfoMessage\022:\n\005msgID\030\001 \001(\0162\034"
    ".com.game.proto.Protos_Login:\rResAgencyI"
    "nfo\022.\n\nagencyInfo\030\002 \003(\0132\032.com.game.proto"
    ".AgencyInfo\"T\n\nAgencyInfo\022\n\n\002id\030\001 \001(\005\022\014\n"
    "\004name\030\002 \001(\t\022\n\n\002QQ\030\003 \001(\t\022\016\n\006weChat\030\004 \001(\t\022"
    "\020\n\010describe\030\005 \001(\t\"v\n\036UpdateBankWithdrawS"
    "tateMessage\022D\n\005msgID\030\001 \001(\0162\034.com.game.pr"
    "oto.Protos_Login:\027UpdateBankWithdrawStat"
    "e\022\016\n\006isOpen\030\002 \001(\010\"\246\001\n\031UpdateReferrerInfo"
    "Message\022\?\n\005msgID\030\001 \001(\0162\034.com.game.proto."
    "Protos_Login:\022UpdateReferrerInfo\022\014\n\004num1"
    "\030\002 \001(\005\022\014\n\004num2\030\003 \001(\005\022\014\n\004num3\030\004 \001(\005\022\014\n\004nu"
    "m4\030\005 \001(\005\022\020\n\010getMoney\030\006 \001(\001\"b\n\034ReqTransfe"
    "rReferMoneyMessage\022B\n\005msgID\030\001 \001(\0162\034.com."
    "game.proto.Protos_Login:\025ReqTransferRefe"
    "rMoney\"\242\001\n\026ResSystemNoticeMessage\022<\n\005msg"
    "ID\030\001 \001(\0162\034.com.game.proto.Protos_Login:\017"
    "ResSystemNotice\022\r\n\005state\030\002 \001(\005\022\r\n\005money\030"
    "\003 \001(\001\022\017\n\007content\030\004 \001(\t\022\013\n\003vip\030\005 \001(\005\022\016\n\006g"
    "ameid\030\006 \001(\005\"^\n\022ReqReadMailMessage\0228\n\005msg"
    "ID\030\001 \001(\0162\034.com.game.proto.Protos_Login:\013"
    "ReqReadMail\022\016\n\006mailId\030\002 \001(\003\"c\n\024ReqDelete"
    "MailMessage\022:\n\005msgID\030\001 \001(\0162\034.com.game.pr"
    "oto.Protos_Login:\rReqDeleteMail\022\017\n\007mailI"
    "ds\030\002 \003(\003\"f\n\026ReqGetMailMoneyMessage\022<\n\005ms"
    "gID\030\001 \001(\0162\034.com.game.proto.Protos_Login:"
    "\017ReqGetMailMoney\022\016\n\006mailId\030\002 \001(\003\"\203\001\n\021Upd"
    "ateMailMessage\0227\n\005msgID\030\001 \001(\0162\034.com.game"
    ".proto.Protos_Login:\nUpdateMail\022\014\n\004type\030"
    "\002 \001(\005\022\'\n\005mails\030\003 \003(\0132\030.com.game.proto.Ma"
    "ilInfo\"\301\001\n\010MailInfo\022\016\n\006mailId\030\001 \001(\003\022\020\n\010s"
    "endName\030\002 \001(\t\022\r\n\005title\030\003 \001(\t\022\016\n\006notice\030\004"
    " \001(\t\022\021\n\tcreatTime\030\005 \001(\003\022\016\n\006isRead\030\006 \001(\010\022"
    "\r\n\005money\030\007 \001(\001\022\024\n\014getMoneyTime\030\010 \001(\003\022,\n\t"
    "goodsList\030\t \003(\0132\031.com.game.proto.MailGoo"
    "ds\"3\n\tMailGoods\022\024\n\014goodsModelId\030\001 \001(\005\022\020\n"
    "\010goodsNum\030\002 \001(\005\"\356\001\n\037UpdatePlayerRecharge"
    "InfoMessage\022E\n\005msgID\030\001 \001(\0162\034.com.game.pr"
    "oto.Protos_Login:\030UpdatePlayerRechargeIn"
    "fo\022\014\n\004type\030\002 \001(\005\022\033\n\023agencyRechargeCount\030"
    "\003 \001(\005\022\033\n\023agencyRechargeMoney\030\004 \001(\001\022\035\n\025of"
    "ficialRechargeCount\030\005 \001(\005\022\035\n\025officialRec"
    "hargeMoney\030\006 \001(\001\"\244\001\n\037UpdateControllerRec"
    "hargeMessage\022E\n\005msgID\030\001 \001(\0162\034.com.game.p"
    "roto.Protos_Login:\030UpdateControllerRecha"
    "rge\022\016\n\006isOpen\030\002 \001(\010\022\027\n\017rechargeChannel\030\003"
    " \001(\t\022\021\n\tinitRatio\030\004 \001(\005\"\210\001\n\027ReqChatWithA"
    "gentMessage\022=\n\005msgID\030\001 \001(\0162\034.com.game.pr"
    "oto.Protos_Login:\020ReqChatWithAgent\022\014\n\004ty"
    "pe\030\002 \001(\005\022\017\n\007agentId\030\003 \001(\005\022\017\n\007content\030\004 \001"
    "(\t\"\211\001\n\027ResChatWithAgentMessage\022=\n\005msgID\030"
    "\001 \001(\0162\034.com.game.proto.Protos_Login:\020Res"
    "ChatWithAgent\022/\n\010chatInfo\030\002 \003(\0132\035.com.ga"
    "me.proto.AgentChatInfo\"1\n\rAgentChatInfo\022"
    "\017\n\007agentId\030\001 \001(\005\022\017\n\007content\030\002 \003(\t\"\205\001\n\036Re"
    "qAgentChatWithServiceMessage\022D\n\005msgID\030\001 "
    "\001(\0162\034.com.game.proto.Protos_Login:\027ReqAg"
    "entChatWithService\022\014\n\004type\030\002 \001(\005\022\017\n\007cont"
    "ent\030\003 \001(\t\"w\n\036ResAgentChatWithServiceMess"
    "age\022D\n\005msgID\030\001 \001(\0162\034.com.game.proto.Prot"
    "os_Login:\027ResAgentChatWithService\022\017\n\007con"
    "tent\030\002 \003(\t\"y\n\020ReqCommonMessage\0226\n\005msgID\030"
    "\001 \001(\0162\034.com.game.proto.Protos_Login:\tReq"
    "Common\022\020\n\010subMsgID\030\002 \001(\005\022\014\n\004strs\030\003 \003(\t\022\r"
    "\n\005buffs\030\004 \003(\014\"y\n\020ResCommonMessage\0226\n\005msg"
    "ID\030\001 \001(\0162\034.com.game.proto.Protos_Login:\t"
    "ResCommon\022\020\n\010subMsgID\030\002 \001(\005\022\014\n\004strs\030\003 \003("
    "\t\022\r\n\005buffs\030\004 \003(\014\"\211\001\n\031RefreshOnlineAwardM"
    "essage\022\?\n\005msgID\030\001 \001(\0162\034.com.game.proto.P"
    "rotos_Login:\022RefreshOnlineAward\022\030\n\020nextG"
    "etAwardTime\030\002 \001(\003\022\021\n\tremainNum\030\003 \001(\005\"Z\n\030"
    "ReqGetOnlineAwardMessage\022>\n\005msgID\030\001 \001(\0162"
    "\034.com.game.proto.Protos_Login:\021ReqGetOnl"
    "ineAward\"\227\001\n\030ResGetOnlineAwardMessage\022>\n"
    "\005msgID\030\001 \001(\0162\034.com.game.proto.Protos_Log"
    "in:\021ResGetOnlineAward\022\023\n\013normalMoney\030\002 \001"
    "(\001\022\020\n\010vipMoney\030\003 \001(\001\022\024\n\014remainDayNum\030\004 \001"
    "(\005\"b\n\034ReqGetBankruptcyAwardMessage\022B\n\005ms"
    "gID\030\001 \001(\0162\034.com.game.proto.Protos_Login:"
    "\025ReqGetBankruptcyAward\"\302\001\n\034ResGetBankrup"
    "tcyAwardMessage\022B\n\005msgID\030\001 \001(\0162\034.com.gam"
    "e.proto.Protos_Login:\025ResGetBankruptcyAw"
    "ard\022\r\n\005money\030\002 \001(\001\022\020\n\010minMoney\030\003 \001(\001\022\024\n\014"
    "remainDayNum\030\004 \001(\005\022\024\n\014dayNormalNum\030\005 \001(\005"
    "\022\021\n\tdayVIPNum\030\006 \001(\005\"\213\002\n\033ReqPresentCharmV"
    "alueMessage\022A\n\005msgID\030\001 \001(\0162\034.com.game.pr"
    "oto.Protos_Login:\024ReqPresentCharmValue\022\020"
    "\n\010playerId\030\002 \001(\003\022\026\n\016presentPosFrom\030\003 \001(\005"
    "\022\024\n\014presentPosTo\030\004 \001(\005\022\021\n\tsubGameId\030\005 \001("
    "\005\022\023\n\013presentType\030\006 \001(\005\022\024\n\014presentValue\030\007"
    " \001(\005\022\021\n\tcostMoney\030\010 \001(\001\022\030\n\020changeCharmVa"
    "lue\030\t \001(\005\"\350\001\n\033ResPresentCharmValueMessag"
    "e\022A\n\005msgID\030\001 \001(\0162\034.com.game.proto.Protos"
    "_Login:\024ResPresentCharmValue\022\024\n\014fromPlay"
    "erId\030\002 \001(\003\022\022\n\ntoPlayerId\030\003 \001(\003\022\026\n\016presen"
    "tPosFrom\030\004 \001(\005\022\024\n\014presentPosTo\030\005 \001(\005\022\024\n\014"
    "presentValue\030\006 \001(\005\022\030\n\020changeCharmValue\030\007"
    " \001(\005\"\\\n\031ReqGetStartUpMoneyMessage\022\?\n\005msg"
    "ID\030\001 \001(\0162\034.com.game.proto.Protos_Login:\022"
    "ReqGetStartUpMoney\"q\n\020ReqSignInMessage\0226"
    "\n\005msgID\030\001 \001(\0162\034.com.game.proto.Protos_Lo"
    "gin:\tReqSignIn\022\022\n\nsigninType\030\002 \001(\005\022\021\n\tsi"
    "gninDay\030\003 \001(\005\"\275\001\n\020ResSignInMessage\0226\n\005ms"
    "gID\030\001 \001(\0162\034.com.game.proto.Protos_Login:"
    "\tResSignIn\022\024\n\014curSignInNum\030\002 \001(\005\022\r\n\005stat"
    "e\030\003 \003(\005\022\022\n\nnextSignIn\030\004 \001(\005\022\021\n\tcanSignIn"
    "\030\005 \001(\010\022\023\n\013normalMoney\030\006 \001(\001\022\020\n\010vipMoney\030"
    "\007 \001(\001\"\272\001\n\024ResSignInDataMessage\022:\n\005msgID\030"
    "\001 \001(\0162\034.com.game.proto.Protos_Login:\rRes"
    "SignInData\022\020\n\010addUpDay\030\002 \003(\005\022\025\n\raddUpDay"
    "Money\030\003 \003(\001\022\023\n\013continueDay\030\004 \003(\005\022\030\n\020cont"
    "inueDayMoney\030\005 \003(\001\022\016\n\006vipAdd\030\006 \003(\005\"{\n\027Re"
    "sBarrageChangeMessage\022=\n\005msgID\030\001 \001(\0162\034.c"
    "om.game.proto.Protos_Login:\020ResBarrageCh"
    "ange\022\021\n\tremainNum\030\002 \001(\005\022\016\n\006maxNum\030\003 \001(\005\""
    "u\n\021ResVIPInfoMessage\0227\n\005msgID\030\001 \001(\0162\034.co"
    "m.game.proto.Protos_Login:\nResVIPInfo\022\020\n"
    "\010vipLevel\030\002 \001(\005\022\025\n\rrechargeMoney\030\003 \001(\001\"\216"
    "\001\n\023ResCharmInfoMessage\0229\n\005msgID\030\001 \001(\0162\034."
    "com.game.proto.Protos_Login:\014ResCharmInf"
    "o\022\017\n\007titleId\030\002 \001(\005\022\027\n\017gameMaxWinMoney\030\003 "
    "\001(\001\022\022\n\ncharmValue\030\004 \001(\005\"X\n\027ReqTurntableD"
    "ataMessage\022=\n\005msgID\030\001 \001(\0162\034.com.game.pro"
    "to.Protos_Login:\020ReqTurntableData\"P\n\023Req"
    "TurntableMessage\0229\n\005msgID\030\001 \001(\0162\034.com.ga"
    "me.proto.Protos_Login:\014ReqTurntable\"N\n\022R"
    "eqLftfreshMessage\0228\n\005msgID\030\001 \001(\0162\034.com.g"
    "ame.proto.Protos_Login:\013ReqLftfresh\"R\n\024R"
    "eqLftScratchMessage\022:\n\005msgID\030\001 \001(\0162\034.com"
    ".game.proto.Protos_Login:\rReqLftScratch\""
    "R\n\024ReqHftReceiveMessage\022:\n\005msgID\030\001 \001(\0162\034"
    ".com.game.proto.Protos_Login:\rReqHftRece"
    "ive\"R\n\024ReqHftScratchMessage\022:\n\005msgID\030\001 \001"
    "(\0162\034.com.game.proto.Protos_Login:\rReqHft"
    "Scratch\"\342\001\n\024ResHftScratchMessage\022:\n\005msgI"
    "D\030\001 \001(\0162\034.com.game.proto.Protos_Login:\rR"
    "esHftScratch\022\020\n\010profitId\030\002 \001(\005\022\023\n\013profit"
    "Money\030\003 \001(\001\022\023\n\013AmountMoney\030\004 \001(\001\022\021\n\tRece"
    "iveId\030\005 \001(\005\022\020\n\010opendate\030\006 \001(\t\022\023\n\013receive"
    "date\030\007 \001(\t\022\014\n\004time\030\010 \001(\003\022\n\n\002zt\030\t \001(\005\"V\n\026"
    "ReqLftRwScratchMessage\022<\n\005msgID\030\001 \001(\0162\034."
    "com.game.proto.Protos_Login:\017ReqLftRwScr"
    "atch\"b\n\026ReqLftRwReceiveMessage\022<\n\005msgID\030"
    "\001 \001(\0162\034.com.game.proto.Protos_Login:\017Req"
    "LftRwReceive\022\n\n\002Id\030\002 \001(\005\"\237\001\n\026ResLftRwScr"
    "atchMessage\022<\n\005msgID\030\001 \001(\0162\034.com.game.pr"
    "oto.Protos_Login:\017ResLftRwScratch\022)\n\006lft"
    "ews\030\002 \003(\0132\031.com.game.proto.LftrwInfo\022\020\n\010"
    "opendate\030\003 \001(\t\022\n\n\002zt\030\004 \001(\005\"d\n\tLftrwInfo\022"
    "\n\n\002Id\030\001 \001(\005\022\021\n\tneedMoney\030\002 \001(\001\022\024\n\014receiv"
    "eMoney\030\003 \001(\001\022\r\n\005state\030\004 \001(\005\022\023\n\013profitMon"
    "ey\030\005 \001(\001\"L\n\021ReqhuodongMessage\0227\n\005msgID\030\001"
    " \001(\0162\034.com.game.proto.Protos_Login:\nReqh"
    "uodong\"{\n\021ReshuodongMessage\0227\n\005msgID\030\001 \001"
    "(\0162\034.com.game.proto.Protos_Login:\nReshuo"
    "dong\022-\n\010huodongs\030\002 \003(\0132\033.com.game.proto."
    "huodonginfo\"%\n\013huodonginfo\022\n\n\002Id\030\001 \001(\005\022\n"
    "\n\002zt\030\002 \001(\005\"^\n\032ReqExpandPlayerInfoMessage"
    "\022@\n\005msgID\030\001 \001(\0162\034.com.game.proto.Protos_"
    "Login:\023ReqExpandPlayerInfo\"V\n\026ReqGetShop"
    "GoodsMessage\022<\n\005msgID\030\001 \001(\0162\034.com.game.p"
    "roto.Protos_Login:\017ReqGetShopGoods\"j\n\021Re"
    "qBuyItemMessage\0227\n\005msgID\030\001 \001(\0162\034.com.gam"
    "e.proto.Protos_Login:\nReqBuyItem\022\017\n\007good"
    "sId\030\002 \001(\005\022\013\n\003num\030\003 \001(\005\"X\n\027ReqRemainderTa"
    "skMessage\022=\n\005msgID\030\001 \001(\0162\034.com.game.prot"
    "o.Protos_Login:\020ReqRemainderTask\"f\n\027ResR"
    "emainderTaskMessage\022=\n\005msgID\030\001 \001(\0162\034.com"
    ".game.proto.Protos_Login:\020ResRemainderTa"
    "sk\022\014\n\004gold\030\002 \001(\001\"\?\n\021ItemBaseAttribute\022\n\n"
    "\002id\030\001 \001(\003\022\017\n\007modelId\030\002 \001(\005\022\r\n\005count\030\003 \001("
    "\005\"\231\001\n\026ResBackpackListMessage\022<\n\005msgID\030\001 "
    "\001(\0162\034.com.game.proto.Protos_Login:\017ResBa"
    "ckpackList\0223\n\010goodList\030\002 \003(\0132!.com.game."
    "proto.ItemBaseAttribute\022\014\n\004type\030\003 \001(\005\"m\n"
    "\031ReqReceiveMailItemMessage\022\?\n\005msgID\030\001 \001("
    "\0162\034.com.game.proto.Protos_Login:\022ReqRece"
    "iveMailItem\022\017\n\007mailIds\030\002 \003(\003\"J\n\020ReqOpenU"
    "pMessage\0226\n\005msgID\030\001 \001(\0162\034.com.game.proto"
    ".Protos_Login:\tReqOpenUp\"{\n\020ResOpenUpMes"
    "sage\0226\n\005msgID\030\001 \001(\0162\034.com.game.proto.Pro"
    "tos_Login:\tResOpenUp\022/\n\013openupinfos\030\002 \003("
    "\0132\032.com.game.proto.openupinfo\"*\n\nopenupi"
    "nfo\022\r\n\005names\030\001 \001(\t\022\r\n\005times\030\002 \001(\003\"P\n\023Req"
    "ShareInfoMessage\0229\n\005msgID\030\001 \001(\0162\034.com.ga"
    "me.proto.Protos_Login:\014ReqShareInfo\"\332\004\n\023"
    "ResShareInfoMessage\0229\n\005msgID\030\001 \001(\0162\034.com"
    ".game.proto.Protos_Login:\014ResShareInfo\022\026"
    "\n\016downShareMoney\030\002 \001(\001\022\025\n\rdownShareNum1\030"
    "\003 \001(\005\022\025\n\rdownShareNum2\030\004 \001(\005\022\025\n\rdownShar"
    "eNum3\030\005 \001(\005\022\025\n\rdownShareNum4\030\006 \001(\005\0224\n\rdo"
    "wnShareDesc\030\007 \003(\0132\035.com.game.proto.DownS"
    "hareDesc\022\034\n\024downShareMoneyTotal1\030\010 \001(\001\022\034"
    "\n\024downShareMoneyTotal2\030\t \001(\001\022\034\n\024downShar"
    "eMoneyTotal3\030\n \001(\001\022\034\n\024downShareMoneyTota"
    "l4\030\013 \001(\001\022\034\n\024downShareMonthMoney1\030\014 \001(\001\022\034"
    "\n\024downShareMonthMoney2\030\r \001(\001\022\034\n\024downShar"
    "eMonthMoney3\030\016 \001(\001\022\034\n\024downShareMonthMone"
    "y4\030\017 \001(\001\022\032\n\022downShareDayMoney1\030\020 \001(\001\022\032\n\022"
    "downShareDayMoney2\030\021 \001(\001\022\032\n\022downShareDay"
    "Money3\030\022 \001(\001\022\032\n\022downShareDayMoney4\030\023 \001(\001"
    "\"1\n\rDownShareDesc\022\014\n\004name\030\001 \001(\t\022\022\n\nshare"
    "Money\030\002 \001(\001\"d\n\024ReqPubAuctionMessage\022:\n\005m"
    "sgID\030\001 \001(\0162\034.com.game.proto.Protos_Login"
    ":\rReqPubAuction\022\020\n\010pubCount\030\002 \002(\005\"\202\001\n\024Re"
    "qBuyAuctionMessage\022:\n\005msgID\030\001 \001(\0162\034.com."
    "game.proto.Protos_Login:\rReqBuyAuction\022\016"
    "\n\006itemId\030\002 \002(\003\022\020\n\010buyCount\030\003 \002(\005\022\014\n\004page"
    "\030\004 \002(\005\"n\n\022ReqAuctionsMessage\0228\n\005msgID\030\001 "
    "\001(\0162\034.com.game.proto.Protos_Login:\013ReqAu"
    "ctions\022\014\n\004page\030\002 \002(\005\022\020\n\010pageShow\030\003 \002(\005\"\235"
    "\001\n\022ResAuctionsMessage\0228\n\005msgID\030\001 \001(\0162\034.c"
    "om.game.proto.Protos_Login:\013ResAuctions\022"
    "\014\n\004page\030\002 \002(\005\022\021\n\tpageTotal\030\003 \002(\005\022,\n\006entr"
    "ys\030\004 \003(\0132\034.com.game.proto.AuctionEntry\"`"
    "\n\033ReqMyAuctionHistorysMessage\022A\n\005msgID\030\001"
    " \001(\0162\034.com.game.proto.Protos_Login:\024ReqM"
    "yAuctionHistorys\"\212\001\n\033ResMyAuctionHistory"
    "sMessage\022A\n\005msgID\030\001 \001(\0162\034.com.game.proto"
    ".Protos_Login:\024ResMyAuctionHistorys\022(\n\004l"
    "ogs\030\002 \003(\0132\032.com.game.proto.AuctionLog\"\235\001"
    "\n\014AuctionEntry\022\n\n\002id\030\001 \001(\003\022\023\n\013itemModelI"
    "d\030\002 \001(\005\022\021\n\titemCount\030\003 \001(\005\022\021\n\titemPrice\030"
    "\004 \001(\005\022\r\n\005owner\030\005 \001(\t\022\022\n\nownerPhone\030\006 \001(\t"
    "\022\017\n\007ownerId\030\007 \001(\003\022\022\n\ntotalPrice\030\010 \001(\001\"J\n"
    "\nAuctionLog\022\014\n\004type\030\001 \001(\005\022\014\n\004time\030\002 \001(\003\022"
    "\021\n\titemCount\030\003 \001(\005\022\r\n\005owner\030\004 \001(\t\"v\n\027Req"
    "CancelAuctionMessage\022=\n\005msgID\030\001 \001(\0162\034.co"
    "m.game.proto.Protos_Login:\020ReqCancelAuct"
    "ion\022\016\n\006itemId\030\002 \002(\003\022\014\n\004page\030\003 \002(\005*\243\025\n\014Pr"
    "otos_Login\022\023\n\017LGRegisterLogin\020e\022\023\n\017GLReg"
    "isterLogin\020f\022\014\n\010ReqLogin\020g\022\014\n\010ResLogin\020h"
    "\022\022\n\016ReqPhoneVerify\020i\022\020\n\014ReqHeartBeat\020s\022\020"
    "\n\014ResHeartBeat\020t\022\027\n\023ResUpdateServerInfo\020"
    "x\022\020\n\013ReqBindUser\020\203\001\022\020\n\013ResBindUser\020\204\001\022\021\n"
    "\014ReqBindPhone\020\205\001\022\021\n\014ResBindPhone\020\206\001\022\017\n\nR"
    "eqBindZFB\020\207\001\022\017\n\nResBindZFB\020\210\001\022\027\n\022ReqCanE"
    "nterSubGame\020\211\001\022\027\n\022ResCanEnterSubGame\020\212\001\022"
    "\025\n\020ReqLogin4SubGame\020\215\001\022\025\n\020ResLogin4SubGa"
    "me\020\216\001\022\024\n\017ReqQuit4SubGame\020\217\001\022\024\n\017ResQuit4S"
    "ubGame\020\220\001\022\024\n\017ResUpdateMoney1\020\227\001\022\024\n\017ResUp"
    "dateMoney2\020\230\001\022\030\n\023ReqClientLoadstring\020\241\001\022"
    "\030\n\023ResClientLoadstring\020\242\001\022\014\n\007ReqChat\020\243\001\022"
    "\014\n\007ResChat\020\244\001\022\023\n\016ReqTopListData\020\245\001\022\023\n\016Re"
    "sTopListData\020\246\001\022\021\n\014ReqSaveMoney\020\247\001\022\021\n\014Re"
    "qDrawMoney\020\250\001\022\016\n\tReqNotice\020\251\001\022\016\n\tResNoti"
    "ce\020\252\001\022\030\n\023ReqModifyPlayerInfo\020\253\001\022\030\n\023ResMo"
    "difyPlayerInfo\020\254\001\022\032\n\025ReqModifyBankPassWo"
    "rd\020\255\001\022\032\n\025ResModifyBankPassWord\020\256\001\022\033\n\026Req"
    "ModifyLoginPassWord\020\257\001\022\033\n\026ResModifyLogin"
    "PassWord\020\260\001\022\024\n\017ReqBindBankCard\020\261\001\022\024\n\017Res"
    "BindBankCard\020\262\001\022\027\n\022ReqGameRecordPanel\020\264\001"
    "\022\027\n\022ResGameRecordPanel\020\265\001\022\026\n\021ReqGameReco"
    "rdData\020\266\001\022\026\n\021ResGameRecordData\020\267\001\022\020\n\013Req"
    "Recharge\020\310\001\022\020\n\013ResRecharge\020\311\001\022\023\n\016ReqRech"
    "argeIOS\020\312\001\022\023\n\016ResRechargeIOS\020\313\001\022\024\n\017ReqWi"
    "thDrawCash\020\372\001\022\024\n\017ResWithDrawCash\020\373\001\022\024\n\017R"
    "eqChangeCardBg\020\255\002\022\024\n\017ResChangeCardBg\020\256\002\022"
    "\023\n\016ReqApplyAgency\020\266\002\022\023\n\016ResApplyAgency\020\267"
    "\002\022\027\n\022ReqChatWithService\020\270\002\022\027\n\022ResChatWit"
    "hService\020\271\002\022\024\n\017ReqReportAgency\020\272\002\022\024\n\017Res"
    "ReportAgency\020\273\002\022\030\n\023ReqWithDrawCashInfo\020\274"
    "\002\022\030\n\023ResWithDrawCashInfo\020\275\002\022\033\n\026UpdateWit"
    "hDrawCashInfo\020\276\002\022\022\n\rReqAgencyInfo\020\277\002\022\022\n\r"
    "ResAgencyInfo\020\300\002\022\034\n\027UpdateBankWithdrawSt"
    "ate\020\301\002\022\027\n\022UpdateReferrerInfo\020\302\002\022\032\n\025ReqTr"
    "ansferReferMoney\020\303\002\022\024\n\017ResSystemNotice\020\304"
    "\002\022\025\n\020ReqChatWithAgent\020\305\002\022\025\n\020ResChatWithA"
    "gent\020\306\002\022\034\n\027ReqAgentChatWithService\020\307\002\022\034\n"
    "\027ResAgentChatWithService\020\310\002\022\022\n\rReqDelete"
    "Mail\020\220\003\022\020\n\013ReqReadMail\020\221\003\022\024\n\017ReqGetMailM"
    "oney\020\222\003\022\017\n\nUpdateMail\020\223\003\022\035\n\030UpdatePlayer"
    "RechargeInfo\020\224\003\022\035\n\030UpdateControllerRecha"
    "rge\020\225\003\022\016\n\tReqCommon\020\232\003\022\016\n\tResCommon\020\233\003\022\027"
    "\n\022RefreshOnlineAward\020\331\004\022\026\n\021ReqGetOnlineA"
    "ward\020\332\004\022\026\n\021ResGetOnlineAward\020\333\004\022\032\n\025ReqGe"
    "tBankruptcyAward\020\334\004\022\032\n\025ResGetBankruptcyA"
    "ward\020\335\004\022\031\n\024ReqPresentCharmValue\020\336\004\022\031\n\024Re"
    "sPresentCharmValue\020\337\004\022\027\n\022ReqGetStartUpMo"
    "ney\020\340\004\022\016\n\tReqSignIn\020\341\004\022\016\n\tResSignIn\020\342\004\022\022"
    "\n\rResSignInData\020\343\004\022\025\n\020ResBarrageChange\020\344"
    "\004\022\017\n\nResVIPInfo\020\345\004\022\021\n\014ResCharmInfo\020\346\004\022\025\n"
    "\020ReqTurntableData\020\351\004\022\021\n\014ReqTurntable\020\352\004\022"
    "\020\n\013ReqLftfresh\020\202\005\022\022\n\rReqLftScratch\020\200\005\022\022\n"
    "\rReqHftReceive\020\212\005\022\022\n\rReqHftScratch\020\213\005\022\022\n"
    "\rResHftScratch\020\214\005\022\024\n\017ReqLftRwScratch\020\224\005\022"
    "\024\n\017ReqLftRwReceive\020\225\005\022\024\n\017ResLftRwScratch"
    "\020\226\005\022\017\n\nReqhuodong\020\236\005\022\017\n\nReshuodong\020\237\005\022\030\n"
    "\023ReqExpandPlayerInfo\020\240\005\022\024\n\017ReqGetShopGoo"
    "ds\020\241\005\022\017\n\nReqBuyItem\020\242\005\022\025\n\020ReqRemainderTa"
    "sk\020\243\005\022\025\n\020ResRemainderTask\020\244\005\022\024\n\017ResBackp"
    "ackList\020\245\005\022\023\n\016ResAddBackpack\020\246\005\022\027\n\022ReqRe"
    "ceiveMailItem\020\247\005\022\016\n\tReqOpenUp\020\250\005\022\016\n\tResO"
    "penUp\020\251\005\022\021\n\014ReqShareInfo\020\252\005\022\021\n\014ResShareI"
    "nfo\020\253\005\022\022\n\rReqPubAuction\020\254\005\022\022\n\rReqBuyAuct"
    "ion\020\255\005\022\020\n\013ReqAuctions\020\256\005\022\020\n\013ResAuctions\020"
    "\257\005\022\031\n\024ReqMyAuctionHistorys\020\260\005\022\031\n\024ResMyAu"
    "ctionHistorys\020\261\005\022\025\n\020ReqCancelAuction\020\262\005", 21759);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "LoginMessage.proto", &protobuf_RegisterTypes);
  PlayerInfo::default_instance_ = new PlayerInfo();
  GLRegisterLoginMessage::default_instance_ = new GLRegisterLoginMessage();
  LGRegisterLoginMessage::default_instance_ = new LGRegisterLoginMessage();
  ReqLoginMessage::default_instance_ = new ReqLoginMessage();
  ResLoginMessage::default_instance_ = new ResLoginMessage();
  ResUpdateServerInfoMessage::default_instance_ = new ResUpdateServerInfoMessage();
  ReqHeartBeatMessage::default_instance_ = new ReqHeartBeatMessage();
  ResHeartBeatMessage::default_instance_ = new ResHeartBeatMessage();
  ReqBindUserMessage::default_instance_ = new ReqBindUserMessage();
  ResBindUserMessage::default_instance_ = new ResBindUserMessage();
  ReqBindPhoneMessage::default_instance_ = new ReqBindPhoneMessage();
  ResBindPhoneMessage::default_instance_ = new ResBindPhoneMessage();
  ReqBindZFBMessage::default_instance_ = new ReqBindZFBMessage();
  ResBindZFBMessage::default_instance_ = new ResBindZFBMessage();
  ReqCanEnterSubGameMessage::default_instance_ = new ReqCanEnterSubGameMessage();
  ResCanEnterSubGameMessage::default_instance_ = new ResCanEnterSubGameMessage();
  ReqLogin4SubGameMessage::default_instance_ = new ReqLogin4SubGameMessage();
  ReqPhoneVerifyMessage::default_instance_ = new ReqPhoneVerifyMessage();
  ResLogin4SubGameMessage::default_instance_ = new ResLogin4SubGameMessage();
  ReqQuit4SubGameMessage::default_instance_ = new ReqQuit4SubGameMessage();
  ResQuit4SubGameMessage::default_instance_ = new ResQuit4SubGameMessage();
  ResUpdateMoney1Message::default_instance_ = new ResUpdateMoney1Message();
  ResUpdateMoney2Message::default_instance_ = new ResUpdateMoney2Message();
  ReqClientLoadstringMessage::default_instance_ = new ReqClientLoadstringMessage();
  ResClientLoadstringMessage::default_instance_ = new ResClientLoadstringMessage();
  ReqChatMessage::default_instance_ = new ReqChatMessage();
  ResChatMessage::default_instance_ = new ResChatMessage();
  ReqTopListDataMessage::default_instance_ = new ReqTopListDataMessage();
  ResTopListDataMessage::default_instance_ = new ResTopListDataMessage();
  MoneyTopData::default_instance_ = new MoneyTopData();
  CharmTopData::default_instance_ = new CharmTopData();
  OnlineTopData::default_instance_ = new OnlineTopData();
  TotalMoneyTopData::default_instance_ = new TotalMoneyTopData();
  ReqGameRecordPanelMessage::default_instance_ = new ReqGameRecordPanelMessage();
  ResGameRecordPanelMessage::default_instance_ = new ResGameRecordPanelMessage();
  GameRecordPanelData::default_instance_ = new GameRecordPanelData();
  ReqGameRecordDataMessage::default_instance_ = new ReqGameRecordDataMessage();
  ResGameRecordMessage::default_instance_ = new ResGameRecordMessage();
  GameRecordData::default_instance_ = new GameRecordData();
  CardData::default_instance_ = new CardData();
  BetData::default_instance_ = new BetData();
  ReqSaveMoneyMessage::default_instance_ = new ReqSaveMoneyMessage();
  ReqDrawMoneyMessage::default_instance_ = new ReqDrawMoneyMessage();
  ResNoticeMessage::default_instance_ = new ResNoticeMessage();
  ReqModifyPlayerInfoMessage::default_instance_ = new ReqModifyPlayerInfoMessage();
  ResModifyPlayerInfoMessage::default_instance_ = new ResModifyPlayerInfoMessage();
  ReqModifyBankPassWordMessage::default_instance_ = new ReqModifyBankPassWordMessage();
  ResModifyBankPassWordMessage::default_instance_ = new ResModifyBankPassWordMessage();
  ReqModifyLoginPassWordMessage::default_instance_ = new ReqModifyLoginPassWordMessage();
  ResModifyLoginPassWordMessage::default_instance_ = new ResModifyLoginPassWordMessage();
  ReqBindBankCardMessage::default_instance_ = new ReqBindBankCardMessage();
  ResBindBankCardMessage::default_instance_ = new ResBindBankCardMessage();
  ReqRechargeMessage::default_instance_ = new ReqRechargeMessage();
  ResRechargeMessage::default_instance_ = new ResRechargeMessage();
  ReqRechargeIOSMessage::default_instance_ = new ReqRechargeIOSMessage();
  ResRechargeIOSMessage::default_instance_ = new ResRechargeIOSMessage();
  ReqWithDrawCashMessage::default_instance_ = new ReqWithDrawCashMessage();
  ResWithDrawCashMessage::default_instance_ = new ResWithDrawCashMessage();
  ReqChangeCardBgMessage::default_instance_ = new ReqChangeCardBgMessage();
  ResChangeCardBgMessage::default_instance_ = new ResChangeCardBgMessage();
  ReqApplyAgencyMessage::default_instance_ = new ReqApplyAgencyMessage();
  ResApplyAgencyMessage::default_instance_ = new ResApplyAgencyMessage();
  ReqChatWithServiceMessage::default_instance_ = new ReqChatWithServiceMessage();
  ResChatWithServiceMessage::default_instance_ = new ResChatWithServiceMessage();
  ReqReportAgencyMessage::default_instance_ = new ReqReportAgencyMessage();
  ResReportAgencyMessage::default_instance_ = new ResReportAgencyMessage();
  ReqWithDrawCashInfoMessage::default_instance_ = new ReqWithDrawCashInfoMessage();
  ResWithDrawCashInfoMessage::default_instance_ = new ResWithDrawCashInfoMessage();
  WithDrawCashInfo::default_instance_ = new WithDrawCashInfo();
  UpdateWithDrawCashInfoMessage::default_instance_ = new UpdateWithDrawCashInfoMessage();
  ReqAgencyInfoMessage::default_instance_ = new ReqAgencyInfoMessage();
  ResAgencyInfoMessage::default_instance_ = new ResAgencyInfoMessage();
  AgencyInfo::default_instance_ = new AgencyInfo();
  UpdateBankWithdrawStateMessage::default_instance_ = new UpdateBankWithdrawStateMessage();
  UpdateReferrerInfoMessage::default_instance_ = new UpdateReferrerInfoMessage();
  ReqTransferReferMoneyMessage::default_instance_ = new ReqTransferReferMoneyMessage();
  ResSystemNoticeMessage::default_instance_ = new ResSystemNoticeMessage();
  ReqReadMailMessage::default_instance_ = new ReqReadMailMessage();
  ReqDeleteMailMessage::default_instance_ = new ReqDeleteMailMessage();
  ReqGetMailMoneyMessage::default_instance_ = new ReqGetMailMoneyMessage();
  UpdateMailMessage::default_instance_ = new UpdateMailMessage();
  MailInfo::default_instance_ = new MailInfo();
  MailGoods::default_instance_ = new MailGoods();
  UpdatePlayerRechargeInfoMessage::default_instance_ = new UpdatePlayerRechargeInfoMessage();
  UpdateControllerRechargeMessage::default_instance_ = new UpdateControllerRechargeMessage();
  ReqChatWithAgentMessage::default_instance_ = new ReqChatWithAgentMessage();
  ResChatWithAgentMessage::default_instance_ = new ResChatWithAgentMessage();
  AgentChatInfo::default_instance_ = new AgentChatInfo();
  ReqAgentChatWithServiceMessage::default_instance_ = new ReqAgentChatWithServiceMessage();
  ResAgentChatWithServiceMessage::default_instance_ = new ResAgentChatWithServiceMessage();
  ReqCommonMessage::default_instance_ = new ReqCommonMessage();
  ResCommonMessage::default_instance_ = new ResCommonMessage();
  RefreshOnlineAwardMessage::default_instance_ = new RefreshOnlineAwardMessage();
  ReqGetOnlineAwardMessage::default_instance_ = new ReqGetOnlineAwardMessage();
  ResGetOnlineAwardMessage::default_instance_ = new ResGetOnlineAwardMessage();
  ReqGetBankruptcyAwardMessage::default_instance_ = new ReqGetBankruptcyAwardMessage();
  ResGetBankruptcyAwardMessage::default_instance_ = new ResGetBankruptcyAwardMessage();
  ReqPresentCharmValueMessage::default_instance_ = new ReqPresentCharmValueMessage();
  ResPresentCharmValueMessage::default_instance_ = new ResPresentCharmValueMessage();
  ReqGetStartUpMoneyMessage::default_instance_ = new ReqGetStartUpMoneyMessage();
  ReqSignInMessage::default_instance_ = new ReqSignInMessage();
  ResSignInMessage::default_instance_ = new ResSignInMessage();
  ResSignInDataMessage::default_instance_ = new ResSignInDataMessage();
  ResBarrageChangeMessage::default_instance_ = new ResBarrageChangeMessage();
  ResVIPInfoMessage::default_instance_ = new ResVIPInfoMessage();
  ResCharmInfoMessage::default_instance_ = new ResCharmInfoMessage();
  ReqTurntableDataMessage::default_instance_ = new ReqTurntableDataMessage();
  ReqTurntableMessage::default_instance_ = new ReqTurntableMessage();
  ReqLftfreshMessage::default_instance_ = new ReqLftfreshMessage();
  ReqLftScratchMessage::default_instance_ = new ReqLftScratchMessage();
  ReqHftReceiveMessage::default_instance_ = new ReqHftReceiveMessage();
  ReqHftScratchMessage::default_instance_ = new ReqHftScratchMessage();
  ResHftScratchMessage::default_instance_ = new ResHftScratchMessage();
  ReqLftRwScratchMessage::default_instance_ = new ReqLftRwScratchMessage();
  ReqLftRwReceiveMessage::default_instance_ = new ReqLftRwReceiveMessage();
  ResLftRwScratchMessage::default_instance_ = new ResLftRwScratchMessage();
  LftrwInfo::default_instance_ = new LftrwInfo();
  ReqhuodongMessage::default_instance_ = new ReqhuodongMessage();
  ReshuodongMessage::default_instance_ = new ReshuodongMessage();
  huodonginfo::default_instance_ = new huodonginfo();
  ReqExpandPlayerInfoMessage::default_instance_ = new ReqExpandPlayerInfoMessage();
  ReqGetShopGoodsMessage::default_instance_ = new ReqGetShopGoodsMessage();
  ReqBuyItemMessage::default_instance_ = new ReqBuyItemMessage();
  ReqRemainderTaskMessage::default_instance_ = new ReqRemainderTaskMessage();
  ResRemainderTaskMessage::default_instance_ = new ResRemainderTaskMessage();
  ItemBaseAttribute::default_instance_ = new ItemBaseAttribute();
  ResBackpackListMessage::default_instance_ = new ResBackpackListMessage();
  ReqReceiveMailItemMessage::default_instance_ = new ReqReceiveMailItemMessage();
  ReqOpenUpMessage::default_instance_ = new ReqOpenUpMessage();
  ResOpenUpMessage::default_instance_ = new ResOpenUpMessage();
  openupinfo::default_instance_ = new openupinfo();
  ReqShareInfoMessage::default_instance_ = new ReqShareInfoMessage();
  ResShareInfoMessage::default_instance_ = new ResShareInfoMessage();
  DownShareDesc::default_instance_ = new DownShareDesc();
  ReqPubAuctionMessage::default_instance_ = new ReqPubAuctionMessage();
  ReqBuyAuctionMessage::default_instance_ = new ReqBuyAuctionMessage();
  ReqAuctionsMessage::default_instance_ = new ReqAuctionsMessage();
  ResAuctionsMessage::default_instance_ = new ResAuctionsMessage();
  ReqMyAuctionHistorysMessage::default_instance_ = new ReqMyAuctionHistorysMessage();
  ResMyAuctionHistorysMessage::default_instance_ = new ResMyAuctionHistorysMessage();
  AuctionEntry::default_instance_ = new AuctionEntry();
  AuctionLog::default_instance_ = new AuctionLog();
  ReqCancelAuctionMessage::default_instance_ = new ReqCancelAuctionMessage();
  PlayerInfo::default_instance_->InitAsDefaultInstance();
  GLRegisterLoginMessage::default_instance_->InitAsDefaultInstance();
  LGRegisterLoginMessage::default_instance_->InitAsDefaultInstance();
  ReqLoginMessage::default_instance_->InitAsDefaultInstance();
  ResLoginMessage::default_instance_->InitAsDefaultInstance();
  ResUpdateServerInfoMessage::default_instance_->InitAsDefaultInstance();
  ReqHeartBeatMessage::default_instance_->InitAsDefaultInstance();
  ResHeartBeatMessage::default_instance_->InitAsDefaultInstance();
  ReqBindUserMessage::default_instance_->InitAsDefaultInstance();
  ResBindUserMessage::default_instance_->InitAsDefaultInstance();
  ReqBindPhoneMessage::default_instance_->InitAsDefaultInstance();
  ResBindPhoneMessage::default_instance_->InitAsDefaultInstance();
  ReqBindZFBMessage::default_instance_->InitAsDefaultInstance();
  ResBindZFBMessage::default_instance_->InitAsDefaultInstance();
  ReqCanEnterSubGameMessage::default_instance_->InitAsDefaultInstance();
  ResCanEnterSubGameMessage::default_instance_->InitAsDefaultInstance();
  ReqLogin4SubGameMessage::default_instance_->InitAsDefaultInstance();
  ReqPhoneVerifyMessage::default_instance_->InitAsDefaultInstance();
  ResLogin4SubGameMessage::default_instance_->InitAsDefaultInstance();
  ReqQuit4SubGameMessage::default_instance_->InitAsDefaultInstance();
  ResQuit4SubGameMessage::default_instance_->InitAsDefaultInstance();
  ResUpdateMoney1Message::default_instance_->InitAsDefaultInstance();
  ResUpdateMoney2Message::default_instance_->InitAsDefaultInstance();
  ReqClientLoadstringMessage::default_instance_->InitAsDefaultInstance();
  ResClientLoadstringMessage::default_instance_->InitAsDefaultInstance();
  ReqChatMessage::default_instance_->InitAsDefaultInstance();
  ResChatMessage::default_instance_->InitAsDefaultInstance();
  ReqTopListDataMessage::default_instance_->InitAsDefaultInstance();
  ResTopListDataMessage::default_instance_->InitAsDefaultInstance();
  MoneyTopData::default_instance_->InitAsDefaultInstance();
  CharmTopData::default_instance_->InitAsDefaultInstance();
  OnlineTopData::default_instance_->InitAsDefaultInstance();
  TotalMoneyTopData::default_instance_->InitAsDefaultInstance();
  ReqGameRecordPanelMessage::default_instance_->InitAsDefaultInstance();
  ResGameRecordPanelMessage::default_instance_->InitAsDefaultInstance();
  GameRecordPanelData::default_instance_->InitAsDefaultInstance();
  ReqGameRecordDataMessage::default_instance_->InitAsDefaultInstance();
  ResGameRecordMessage::default_instance_->InitAsDefaultInstance();
  GameRecordData::default_instance_->InitAsDefaultInstance();
  CardData::default_instance_->InitAsDefaultInstance();
  BetData::default_instance_->InitAsDefaultInstance();
  ReqSaveMoneyMessage::default_instance_->InitAsDefaultInstance();
  ReqDrawMoneyMessage::default_instance_->InitAsDefaultInstance();
  ResNoticeMessage::default_instance_->InitAsDefaultInstance();
  ReqModifyPlayerInfoMessage::default_instance_->InitAsDefaultInstance();
  ResModifyPlayerInfoMessage::default_instance_->InitAsDefaultInstance();
  ReqModifyBankPassWordMessage::default_instance_->InitAsDefaultInstance();
  ResModifyBankPassWordMessage::default_instance_->InitAsDefaultInstance();
  ReqModifyLoginPassWordMessage::default_instance_->InitAsDefaultInstance();
  ResModifyLoginPassWordMessage::default_instance_->InitAsDefaultInstance();
  ReqBindBankCardMessage::default_instance_->InitAsDefaultInstance();
  ResBindBankCardMessage::default_instance_->InitAsDefaultInstance();
  ReqRechargeMessage::default_instance_->InitAsDefaultInstance();
  ResRechargeMessage::default_instance_->InitAsDefaultInstance();
  ReqRechargeIOSMessage::default_instance_->InitAsDefaultInstance();
  ResRechargeIOSMessage::default_instance_->InitAsDefaultInstance();
  ReqWithDrawCashMessage::default_instance_->InitAsDefaultInstance();
  ResWithDrawCashMessage::default_instance_->InitAsDefaultInstance();
  ReqChangeCardBgMessage::default_instance_->InitAsDefaultInstance();
  ResChangeCardBgMessage::default_instance_->InitAsDefaultInstance();
  ReqApplyAgencyMessage::default_instance_->InitAsDefaultInstance();
  ResApplyAgencyMessage::default_instance_->InitAsDefaultInstance();
  ReqChatWithServiceMessage::default_instance_->InitAsDefaultInstance();
  ResChatWithServiceMessage::default_instance_->InitAsDefaultInstance();
  ReqReportAgencyMessage::default_instance_->InitAsDefaultInstance();
  ResReportAgencyMessage::default_instance_->InitAsDefaultInstance();
  ReqWithDrawCashInfoMessage::default_instance_->InitAsDefaultInstance();
  ResWithDrawCashInfoMessage::default_instance_->InitAsDefaultInstance();
  WithDrawCashInfo::default_instance_->InitAsDefaultInstance();
  UpdateWithDrawCashInfoMessage::default_instance_->InitAsDefaultInstance();
  ReqAgencyInfoMessage::default_instance_->InitAsDefaultInstance();
  ResAgencyInfoMessage::default_instance_->InitAsDefaultInstance();
  AgencyInfo::default_instance_->InitAsDefaultInstance();
  UpdateBankWithdrawStateMessage::default_instance_->InitAsDefaultInstance();
  UpdateReferrerInfoMessage::default_instance_->InitAsDefaultInstance();
  ReqTransferReferMoneyMessage::default_instance_->InitAsDefaultInstance();
  ResSystemNoticeMessage::default_instance_->InitAsDefaultInstance();
  ReqReadMailMessage::default_instance_->InitAsDefaultInstance();
  ReqDeleteMailMessage::default_instance_->InitAsDefaultInstance();
  ReqGetMailMoneyMessage::default_instance_->InitAsDefaultInstance();
  UpdateMailMessage::default_instance_->InitAsDefaultInstance();
  MailInfo::default_instance_->InitAsDefaultInstance();
  MailGoods::default_instance_->InitAsDefaultInstance();
  UpdatePlayerRechargeInfoMessage::default_instance_->InitAsDefaultInstance();
  UpdateControllerRechargeMessage::default_instance_->InitAsDefaultInstance();
  ReqChatWithAgentMessage::default_instance_->InitAsDefaultInstance();
  ResChatWithAgentMessage::default_instance_->InitAsDefaultInstance();
  AgentChatInfo::default_instance_->InitAsDefaultInstance();
  ReqAgentChatWithServiceMessage::default_instance_->InitAsDefaultInstance();
  ResAgentChatWithServiceMessage::default_instance_->InitAsDefaultInstance();
  ReqCommonMessage::default_instance_->InitAsDefaultInstance();
  ResCommonMessage::default_instance_->InitAsDefaultInstance();
  RefreshOnlineAwardMessage::default_instance_->InitAsDefaultInstance();
  ReqGetOnlineAwardMessage::default_instance_->InitAsDefaultInstance();
  ResGetOnlineAwardMessage::default_instance_->InitAsDefaultInstance();
  ReqGetBankruptcyAwardMessage::default_instance_->InitAsDefaultInstance();
  ResGetBankruptcyAwardMessage::default_instance_->InitAsDefaultInstance();
  ReqPresentCharmValueMessage::default_instance_->InitAsDefaultInstance();
  ResPresentCharmValueMessage::default_instance_->InitAsDefaultInstance();
  ReqGetStartUpMoneyMessage::default_instance_->InitAsDefaultInstance();
  ReqSignInMessage::default_instance_->InitAsDefaultInstance();
  ResSignInMessage::default_instance_->InitAsDefaultInstance();
  ResSignInDataMessage::default_instance_->InitAsDefaultInstance();
  ResBarrageChangeMessage::default_instance_->InitAsDefaultInstance();
  ResVIPInfoMessage::default_instance_->InitAsDefaultInstance();
  ResCharmInfoMessage::default_instance_->InitAsDefaultInstance();
  ReqTurntableDataMessage::default_instance_->InitAsDefaultInstance();
  ReqTurntableMessage::default_instance_->InitAsDefaultInstance();
  ReqLftfreshMessage::default_instance_->InitAsDefaultInstance();
  ReqLftScratchMessage::default_instance_->InitAsDefaultInstance();
  ReqHftReceiveMessage::default_instance_->InitAsDefaultInstance();
  ReqHftScratchMessage::default_instance_->InitAsDefaultInstance();
  ResHftScratchMessage::default_instance_->InitAsDefaultInstance();
  ReqLftRwScratchMessage::default_instance_->InitAsDefaultInstance();
  ReqLftRwReceiveMessage::default_instance_->InitAsDefaultInstance();
  ResLftRwScratchMessage::default_instance_->InitAsDefaultInstance();
  LftrwInfo::default_instance_->InitAsDefaultInstance();
  ReqhuodongMessage::default_instance_->InitAsDefaultInstance();
  ReshuodongMessage::default_instance_->InitAsDefaultInstance();
  huodonginfo::default_instance_->InitAsDefaultInstance();
  ReqExpandPlayerInfoMessage::default_instance_->InitAsDefaultInstance();
  ReqGetShopGoodsMessage::default_instance_->InitAsDefaultInstance();
  ReqBuyItemMessage::default_instance_->InitAsDefaultInstance();
  ReqRemainderTaskMessage::default_instance_->InitAsDefaultInstance();
  ResRemainderTaskMessage::default_instance_->InitAsDefaultInstance();
  ItemBaseAttribute::default_instance_->InitAsDefaultInstance();
  ResBackpackListMessage::default_instance_->InitAsDefaultInstance();
  ReqReceiveMailItemMessage::default_instance_->InitAsDefaultInstance();
  ReqOpenUpMessage::default_instance_->InitAsDefaultInstance();
  ResOpenUpMessage::default_instance_->InitAsDefaultInstance();
  openupinfo::default_instance_->InitAsDefaultInstance();
  ReqShareInfoMessage::default_instance_->InitAsDefaultInstance();
  ResShareInfoMessage::default_instance_->InitAsDefaultInstance();
  DownShareDesc::default_instance_->InitAsDefaultInstance();
  ReqPubAuctionMessage::default_instance_->InitAsDefaultInstance();
  ReqBuyAuctionMessage::default_instance_->InitAsDefaultInstance();
  ReqAuctionsMessage::default_instance_->InitAsDefaultInstance();
  ResAuctionsMessage::default_instance_->InitAsDefaultInstance();
  ReqMyAuctionHistorysMessage::default_instance_->InitAsDefaultInstance();
  ResMyAuctionHistorysMessage::default_instance_->InitAsDefaultInstance();
  AuctionEntry::default_instance_->InitAsDefaultInstance();
  AuctionLog::default_instance_->InitAsDefaultInstance();
  ReqCancelAuctionMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_LoginMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_LoginMessage_2eproto {
  StaticDescriptorInitializer_LoginMessage_2eproto() {
    protobuf_AddDesc_LoginMessage_2eproto();
  }
} static_descriptor_initializer_LoginMessage_2eproto_;

const ::google::protobuf::EnumDescriptor* Protos_Login_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Protos_Login_descriptor_;
}
bool Protos_Login_IsValid(int value) {
  switch(value) {
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 115:
    case 116:
    case 120:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 141:
    case 142:
    case 143:
    case 144:
    case 151:
    case 152:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 180:
    case 181:
    case 182:
    case 183:
    case 200:
    case 201:
    case 202:
    case 203:
    case 250:
    case 251:
    case 301:
    case 302:
    case 310:
    case 311:
    case 312:
    case 313:
    case 314:
    case 315:
    case 316:
    case 317:
    case 318:
    case 319:
    case 320:
    case 321:
    case 322:
    case 323:
    case 324:
    case 325:
    case 326:
    case 327:
    case 328:
    case 400:
    case 401:
    case 402:
    case 403:
    case 404:
    case 405:
    case 410:
    case 411:
    case 601:
    case 602:
    case 603:
    case 604:
    case 605:
    case 606:
    case 607:
    case 608:
    case 609:
    case 610:
    case 611:
    case 612:
    case 613:
    case 614:
    case 617:
    case 618:
    case 640:
    case 642:
    case 650:
    case 651:
    case 652:
    case 660:
    case 661:
    case 662:
    case 670:
    case 671:
    case 672:
    case 673:
    case 674:
    case 675:
    case 676:
    case 677:
    case 678:
    case 679:
    case 680:
    case 681:
    case 682:
    case 683:
    case 684:
    case 685:
    case 686:
    case 687:
    case 688:
    case 689:
    case 690:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerInfo::kUseridFieldNumber;
const int PlayerInfo::kUsernameFieldNumber;
const int PlayerInfo::kStateFieldNumber;
const int PlayerInfo::kBindAlipayNameFieldNumber;
const int PlayerInfo::kBindAlipayAccFieldNumber;
const int PlayerInfo::kNameFieldNumber;
const int PlayerInfo::kIconFieldNumber;
const int PlayerInfo::kSexFieldNumber;
const int PlayerInfo::kAddressFieldNumber;
const int PlayerInfo::kVipFieldNumber;
const int PlayerInfo::kLoginIdFieldNumber;
const int PlayerInfo::kGameIdFieldNumber;
const int PlayerInfo::kMapIdFieldNumber;
const int PlayerInfo::kMapModelIdFieldNumber;
const int PlayerInfo::kMapLineIdFieldNumber;
const int PlayerInfo::kMoney1FieldNumber;
const int PlayerInfo::kMoney2FieldNumber;
const int PlayerInfo::kCardBgFieldNumber;
const int PlayerInfo::kBankCardAccFieldNumber;
const int PlayerInfo::kBankCardNameFieldNumber;
const int PlayerInfo::kBankCardBelongFieldNumber;
const int PlayerInfo::kApplyAgentFieldNumber;
const int PlayerInfo::kTitleIndexFieldNumber;
const int PlayerInfo::kGameMaxWinMoneyFieldNumber;
const int PlayerInfo::kCharmValueFieldNumber;
const int PlayerInfo::kRechargeMoneyFieldNumber;
const int PlayerInfo::kHeadIconFieldNumber;
const int PlayerInfo::kSignatureFieldNumber;
const int PlayerInfo::kUserTypeFieldNumber;
#endif  // !_MSC_VER

PlayerInfo::PlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerInfo::InitAsDefaultInstance() {
}

PlayerInfo::PlayerInfo(const PlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_LONGLONG(0);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  state_ = 0;
  bindalipayname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bindalipayacc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0;
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vip_ = 0;
  loginid_ = 0;
  gameid_ = 0;
  mapid_ = GOOGLE_LONGLONG(0);
  mapmodelid_ = 0;
  maplineid_ = 0;
  money1_ = 0;
  money2_ = 0;
  cardbg_ = 0;
  bankcardacc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bankcardname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bankcardbelong_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  applyagent_ = false;
  titleindex_ = 0;
  gamemaxwinmoney_ = 0;
  charmvalue_ = 0;
  rechargemoney_ = 0;
  headicon_ = 0;
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  usertype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerInfo::~PlayerInfo() {
  SharedDtor();
}

void PlayerInfo::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (bindalipayname_ != &::google::protobuf::internal::kEmptyString) {
    delete bindalipayname_;
  }
  if (bindalipayacc_ != &::google::protobuf::internal::kEmptyString) {
    delete bindalipayacc_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (bankcardacc_ != &::google::protobuf::internal::kEmptyString) {
    delete bankcardacc_;
  }
  if (bankcardname_ != &::google::protobuf::internal::kEmptyString) {
    delete bankcardname_;
  }
  if (bankcardbelong_ != &::google::protobuf::internal::kEmptyString) {
    delete bankcardbelong_;
  }
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (this != default_instance_) {
  }
}

void PlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerInfo_descriptor_;
}

const PlayerInfo& PlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

PlayerInfo* PlayerInfo::default_instance_ = NULL;

PlayerInfo* PlayerInfo::New() const {
  return new PlayerInfo;
}

void PlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_LONGLONG(0);
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    state_ = 0;
    if (has_bindalipayname()) {
      if (bindalipayname_ != &::google::protobuf::internal::kEmptyString) {
        bindalipayname_->clear();
      }
    }
    if (has_bindalipayacc()) {
      if (bindalipayacc_ != &::google::protobuf::internal::kEmptyString) {
        bindalipayacc_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
    sex_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::kEmptyString) {
        address_->clear();
      }
    }
    vip_ = 0;
    loginid_ = 0;
    gameid_ = 0;
    mapid_ = GOOGLE_LONGLONG(0);
    mapmodelid_ = 0;
    maplineid_ = 0;
    money1_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    money2_ = 0;
    cardbg_ = 0;
    if (has_bankcardacc()) {
      if (bankcardacc_ != &::google::protobuf::internal::kEmptyString) {
        bankcardacc_->clear();
      }
    }
    if (has_bankcardname()) {
      if (bankcardname_ != &::google::protobuf::internal::kEmptyString) {
        bankcardname_->clear();
      }
    }
    if (has_bankcardbelong()) {
      if (bankcardbelong_ != &::google::protobuf::internal::kEmptyString) {
        bankcardbelong_->clear();
      }
    }
    applyagent_ = false;
    titleindex_ = 0;
    gamemaxwinmoney_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    charmvalue_ = 0;
    rechargemoney_ = 0;
    headicon_ = 0;
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::kEmptyString) {
        signature_->clear();
      }
    }
    usertype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_username;
        break;
      }
      
      // optional string username = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }
      
      // optional int32 state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_bindAlipayName;
        break;
      }
      
      // optional string bindAlipayName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bindAlipayName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bindalipayname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bindalipayname().data(), this->bindalipayname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_bindAlipayAcc;
        break;
      }
      
      // optional string bindAlipayAcc = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bindAlipayAcc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bindalipayacc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bindalipayacc().data(), this->bindalipayacc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_name;
        break;
      }
      
      // optional string name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_icon;
        break;
      }
      
      // optional string icon = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_sex;
        break;
      }
      
      // optional int32 sex = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_address;
        break;
      }
      
      // optional string address = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_vip;
        break;
      }
      
      // optional int32 vip = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_loginId;
        break;
      }
      
      // optional int32 loginId = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loginId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loginid_)));
          set_has_loginid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_gameId;
        break;
      }
      
      // optional int32 gameId = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_mapId;
        break;
      }
      
      // optional int64 mapId = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_mapModelId;
        break;
      }
      
      // optional int32 mapModelId = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapModelId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapmodelid_)));
          set_has_mapmodelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_mapLineId;
        break;
      }
      
      // optional int32 mapLineId = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapLineId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maplineid_)));
          set_has_maplineid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_money1;
        break;
      }
      
      // optional double money1 = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_money1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &money1_)));
          set_has_money1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(137)) goto parse_money2;
        break;
      }
      
      // optional double money2 = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_money2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &money2_)));
          set_has_money2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_cardBg;
        break;
      }
      
      // optional int32 cardBg = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardBg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardbg_)));
          set_has_cardbg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_bankCardAcc;
        break;
      }
      
      // optional string bankCardAcc = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankCardAcc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bankcardacc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bankcardacc().data(), this->bankcardacc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_bankCardName;
        break;
      }
      
      // optional string bankCardName = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankCardName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bankcardname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bankcardname().data(), this->bankcardname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_bankCardBelong;
        break;
      }
      
      // optional string bankCardBelong = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankCardBelong:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bankcardbelong()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bankcardbelong().data(), this->bankcardbelong().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_applyAgent;
        break;
      }
      
      // optional bool applyAgent = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_applyAgent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &applyagent_)));
          set_has_applyagent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_titleIndex;
        break;
      }
      
      // optional int32 titleIndex = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_titleIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &titleindex_)));
          set_has_titleindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(193)) goto parse_gameMaxWinMoney;
        break;
      }
      
      // optional double gameMaxWinMoney = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_gameMaxWinMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gamemaxwinmoney_)));
          set_has_gamemaxwinmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_charmValue;
        break;
      }
      
      // optional int32 charmValue = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charmValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &charmvalue_)));
          set_has_charmvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(209)) goto parse_rechargeMoney;
        break;
      }
      
      // optional double rechargeMoney = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_rechargeMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rechargemoney_)));
          set_has_rechargemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_headIcon;
        break;
      }
      
      // optional int32 headIcon = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headIcon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headicon_)));
          set_has_headicon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_signature;
        break;
      }
      
      // optional string signature = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_userType;
        break;
      }
      
      // optional int32 userType = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usertype_)));
          set_has_usertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->userid(), output);
  }
  
  // optional string username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->username(), output);
  }
  
  // optional int32 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->state(), output);
  }
  
  // optional string bindAlipayName = 4;
  if (has_bindalipayname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bindalipayname().data(), this->bindalipayname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->bindalipayname(), output);
  }
  
  // optional string bindAlipayAcc = 5;
  if (has_bindalipayacc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bindalipayacc().data(), this->bindalipayacc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->bindalipayacc(), output);
  }
  
  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->name(), output);
  }
  
  // optional string icon = 7;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->icon(), output);
  }
  
  // optional int32 sex = 8;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->sex(), output);
  }
  
  // optional string address = 9;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->address(), output);
  }
  
  // optional int32 vip = 10;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->vip(), output);
  }
  
  // optional int32 loginId = 11;
  if (has_loginid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->loginid(), output);
  }
  
  // optional int32 gameId = 12;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->gameid(), output);
  }
  
  // optional int64 mapId = 13;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->mapid(), output);
  }
  
  // optional int32 mapModelId = 14;
  if (has_mapmodelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->mapmodelid(), output);
  }
  
  // optional int32 mapLineId = 15;
  if (has_maplineid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->maplineid(), output);
  }
  
  // optional double money1 = 16;
  if (has_money1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->money1(), output);
  }
  
  // optional double money2 = 17;
  if (has_money2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->money2(), output);
  }
  
  // optional int32 cardBg = 18;
  if (has_cardbg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->cardbg(), output);
  }
  
  // optional string bankCardAcc = 19;
  if (has_bankcardacc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankcardacc().data(), this->bankcardacc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->bankcardacc(), output);
  }
  
  // optional string bankCardName = 20;
  if (has_bankcardname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankcardname().data(), this->bankcardname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->bankcardname(), output);
  }
  
  // optional string bankCardBelong = 21;
  if (has_bankcardbelong()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankcardbelong().data(), this->bankcardbelong().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->bankcardbelong(), output);
  }
  
  // optional bool applyAgent = 22;
  if (has_applyagent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->applyagent(), output);
  }
  
  // optional int32 titleIndex = 23;
  if (has_titleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->titleindex(), output);
  }
  
  // optional double gameMaxWinMoney = 24;
  if (has_gamemaxwinmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->gamemaxwinmoney(), output);
  }
  
  // optional int32 charmValue = 25;
  if (has_charmvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->charmvalue(), output);
  }
  
  // optional double rechargeMoney = 26;
  if (has_rechargemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->rechargemoney(), output);
  }
  
  // optional int32 headIcon = 27;
  if (has_headicon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->headicon(), output);
  }
  
  // optional string signature = 28;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      28, this->signature(), output);
  }
  
  // optional int32 userType = 29;
  if (has_usertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->usertype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->userid(), target);
  }
  
  // optional string username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }
  
  // optional int32 state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->state(), target);
  }
  
  // optional string bindAlipayName = 4;
  if (has_bindalipayname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bindalipayname().data(), this->bindalipayname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->bindalipayname(), target);
  }
  
  // optional string bindAlipayAcc = 5;
  if (has_bindalipayacc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bindalipayacc().data(), this->bindalipayacc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->bindalipayacc(), target);
  }
  
  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->name(), target);
  }
  
  // optional string icon = 7;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->icon(), target);
  }
  
  // optional int32 sex = 8;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->sex(), target);
  }
  
  // optional string address = 9;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->address(), target);
  }
  
  // optional int32 vip = 10;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->vip(), target);
  }
  
  // optional int32 loginId = 11;
  if (has_loginid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->loginid(), target);
  }
  
  // optional int32 gameId = 12;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->gameid(), target);
  }
  
  // optional int64 mapId = 13;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->mapid(), target);
  }
  
  // optional int32 mapModelId = 14;
  if (has_mapmodelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->mapmodelid(), target);
  }
  
  // optional int32 mapLineId = 15;
  if (has_maplineid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->maplineid(), target);
  }
  
  // optional double money1 = 16;
  if (has_money1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->money1(), target);
  }
  
  // optional double money2 = 17;
  if (has_money2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->money2(), target);
  }
  
  // optional int32 cardBg = 18;
  if (has_cardbg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->cardbg(), target);
  }
  
  // optional string bankCardAcc = 19;
  if (has_bankcardacc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankcardacc().data(), this->bankcardacc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->bankcardacc(), target);
  }
  
  // optional string bankCardName = 20;
  if (has_bankcardname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankcardname().data(), this->bankcardname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->bankcardname(), target);
  }
  
  // optional string bankCardBelong = 21;
  if (has_bankcardbelong()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankcardbelong().data(), this->bankcardbelong().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->bankcardbelong(), target);
  }
  
  // optional bool applyAgent = 22;
  if (has_applyagent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->applyagent(), target);
  }
  
  // optional int32 titleIndex = 23;
  if (has_titleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->titleindex(), target);
  }
  
  // optional double gameMaxWinMoney = 24;
  if (has_gamemaxwinmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->gamemaxwinmoney(), target);
  }
  
  // optional int32 charmValue = 25;
  if (has_charmvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->charmvalue(), target);
  }
  
  // optional double rechargeMoney = 26;
  if (has_rechargemoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->rechargemoney(), target);
  }
  
  // optional int32 headIcon = 27;
  if (has_headicon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->headicon(), target);
  }
  
  // optional string signature = 28;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->signature(), target);
  }
  
  // optional int32 userType = 29;
  if (has_usertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->usertype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->userid());
    }
    
    // optional string username = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
    // optional int32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }
    
    // optional string bindAlipayName = 4;
    if (has_bindalipayname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bindalipayname());
    }
    
    // optional string bindAlipayAcc = 5;
    if (has_bindalipayacc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bindalipayacc());
    }
    
    // optional string name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string icon = 7;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }
    
    // optional int32 sex = 8;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string address = 9;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }
    
    // optional int32 vip = 10;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip());
    }
    
    // optional int32 loginId = 11;
    if (has_loginid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loginid());
    }
    
    // optional int32 gameId = 12;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // optional int64 mapId = 13;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mapid());
    }
    
    // optional int32 mapModelId = 14;
    if (has_mapmodelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapmodelid());
    }
    
    // optional int32 mapLineId = 15;
    if (has_maplineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maplineid());
    }
    
    // optional double money1 = 16;
    if (has_money1()) {
      total_size += 2 + 8;
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional double money2 = 17;
    if (has_money2()) {
      total_size += 2 + 8;
    }
    
    // optional int32 cardBg = 18;
    if (has_cardbg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardbg());
    }
    
    // optional string bankCardAcc = 19;
    if (has_bankcardacc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bankcardacc());
    }
    
    // optional string bankCardName = 20;
    if (has_bankcardname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bankcardname());
    }
    
    // optional string bankCardBelong = 21;
    if (has_bankcardbelong()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bankcardbelong());
    }
    
    // optional bool applyAgent = 22;
    if (has_applyagent()) {
      total_size += 2 + 1;
    }
    
    // optional int32 titleIndex = 23;
    if (has_titleindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->titleindex());
    }
    
    // optional double gameMaxWinMoney = 24;
    if (has_gamemaxwinmoney()) {
      total_size += 2 + 8;
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 charmValue = 25;
    if (has_charmvalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->charmvalue());
    }
    
    // optional double rechargeMoney = 26;
    if (has_rechargemoney()) {
      total_size += 2 + 8;
    }
    
    // optional int32 headIcon = 27;
    if (has_headicon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headicon());
    }
    
    // optional string signature = 28;
    if (has_signature()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signature());
    }
    
    // optional int32 userType = 29;
    if (has_usertype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usertype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerInfo::MergeFrom(const PlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_bindalipayname()) {
      set_bindalipayname(from.bindalipayname());
    }
    if (from.has_bindalipayacc()) {
      set_bindalipayacc(from.bindalipayacc());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_vip()) {
      set_vip(from.vip());
    }
    if (from.has_loginid()) {
      set_loginid(from.loginid());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_mapmodelid()) {
      set_mapmodelid(from.mapmodelid());
    }
    if (from.has_maplineid()) {
      set_maplineid(from.maplineid());
    }
    if (from.has_money1()) {
      set_money1(from.money1());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_money2()) {
      set_money2(from.money2());
    }
    if (from.has_cardbg()) {
      set_cardbg(from.cardbg());
    }
    if (from.has_bankcardacc()) {
      set_bankcardacc(from.bankcardacc());
    }
    if (from.has_bankcardname()) {
      set_bankcardname(from.bankcardname());
    }
    if (from.has_bankcardbelong()) {
      set_bankcardbelong(from.bankcardbelong());
    }
    if (from.has_applyagent()) {
      set_applyagent(from.applyagent());
    }
    if (from.has_titleindex()) {
      set_titleindex(from.titleindex());
    }
    if (from.has_gamemaxwinmoney()) {
      set_gamemaxwinmoney(from.gamemaxwinmoney());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_charmvalue()) {
      set_charmvalue(from.charmvalue());
    }
    if (from.has_rechargemoney()) {
      set_rechargemoney(from.rechargemoney());
    }
    if (from.has_headicon()) {
      set_headicon(from.headicon());
    }
    if (from.has_signature()) {
      set_signature(from.signature());
    }
    if (from.has_usertype()) {
      set_usertype(from.usertype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInfo::CopyFrom(const PlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PlayerInfo::Swap(PlayerInfo* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(username_, other->username_);
    std::swap(state_, other->state_);
    std::swap(bindalipayname_, other->bindalipayname_);
    std::swap(bindalipayacc_, other->bindalipayacc_);
    std::swap(name_, other->name_);
    std::swap(icon_, other->icon_);
    std::swap(sex_, other->sex_);
    std::swap(address_, other->address_);
    std::swap(vip_, other->vip_);
    std::swap(loginid_, other->loginid_);
    std::swap(gameid_, other->gameid_);
    std::swap(mapid_, other->mapid_);
    std::swap(mapmodelid_, other->mapmodelid_);
    std::swap(maplineid_, other->maplineid_);
    std::swap(money1_, other->money1_);
    std::swap(money2_, other->money2_);
    std::swap(cardbg_, other->cardbg_);
    std::swap(bankcardacc_, other->bankcardacc_);
    std::swap(bankcardname_, other->bankcardname_);
    std::swap(bankcardbelong_, other->bankcardbelong_);
    std::swap(applyagent_, other->applyagent_);
    std::swap(titleindex_, other->titleindex_);
    std::swap(gamemaxwinmoney_, other->gamemaxwinmoney_);
    std::swap(charmvalue_, other->charmvalue_);
    std::swap(rechargemoney_, other->rechargemoney_);
    std::swap(headicon_, other->headicon_);
    std::swap(signature_, other->signature_);
    std::swap(usertype_, other->usertype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerInfo_descriptor_;
  metadata.reflection = PlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GLRegisterLoginMessage::kMsgIDFieldNumber;
const int GLRegisterLoginMessage::kServerInfoFieldNumber;
#endif  // !_MSC_VER

GLRegisterLoginMessage::GLRegisterLoginMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GLRegisterLoginMessage::InitAsDefaultInstance() {
}

GLRegisterLoginMessage::GLRegisterLoginMessage(const GLRegisterLoginMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GLRegisterLoginMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 102;
  serverinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLRegisterLoginMessage::~GLRegisterLoginMessage() {
  SharedDtor();
}

void GLRegisterLoginMessage::SharedDtor() {
  if (serverinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete serverinfo_;
  }
  if (this != default_instance_) {
  }
}

void GLRegisterLoginMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GLRegisterLoginMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GLRegisterLoginMessage_descriptor_;
}

const GLRegisterLoginMessage& GLRegisterLoginMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

GLRegisterLoginMessage* GLRegisterLoginMessage::default_instance_ = NULL;

GLRegisterLoginMessage* GLRegisterLoginMessage::New() const {
  return new GLRegisterLoginMessage;
}

void GLRegisterLoginMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 102;
    if (has_serverinfo()) {
      if (serverinfo_ != &::google::protobuf::internal::kEmptyString) {
        serverinfo_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GLRegisterLoginMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = GLRegisterLogin];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_serverInfo;
        break;
      }
      
      // required string serverInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serverInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->serverinfo().data(), this->serverinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLRegisterLoginMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = GLRegisterLogin];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required string serverInfo = 2;
  if (has_serverinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serverinfo().data(), this->serverinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->serverinfo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GLRegisterLoginMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = GLRegisterLogin];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required string serverInfo = 2;
  if (has_serverinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serverinfo().data(), this->serverinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->serverinfo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GLRegisterLoginMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = GLRegisterLogin];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required string serverInfo = 2;
    if (has_serverinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverinfo());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLRegisterLoginMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GLRegisterLoginMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GLRegisterLoginMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GLRegisterLoginMessage::MergeFrom(const GLRegisterLoginMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_serverinfo()) {
      set_serverinfo(from.serverinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GLRegisterLoginMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GLRegisterLoginMessage::CopyFrom(const GLRegisterLoginMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLRegisterLoginMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void GLRegisterLoginMessage::Swap(GLRegisterLoginMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(serverinfo_, other->serverinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GLRegisterLoginMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GLRegisterLoginMessage_descriptor_;
  metadata.reflection = GLRegisterLoginMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LGRegisterLoginMessage::kMsgIDFieldNumber;
const int LGRegisterLoginMessage::kServerInfoFieldNumber;
#endif  // !_MSC_VER

LGRegisterLoginMessage::LGRegisterLoginMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LGRegisterLoginMessage::InitAsDefaultInstance() {
}

LGRegisterLoginMessage::LGRegisterLoginMessage(const LGRegisterLoginMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LGRegisterLoginMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 101;
  serverinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LGRegisterLoginMessage::~LGRegisterLoginMessage() {
  SharedDtor();
}

void LGRegisterLoginMessage::SharedDtor() {
  if (serverinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete serverinfo_;
  }
  if (this != default_instance_) {
  }
}

void LGRegisterLoginMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LGRegisterLoginMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LGRegisterLoginMessage_descriptor_;
}

const LGRegisterLoginMessage& LGRegisterLoginMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

LGRegisterLoginMessage* LGRegisterLoginMessage::default_instance_ = NULL;

LGRegisterLoginMessage* LGRegisterLoginMessage::New() const {
  return new LGRegisterLoginMessage;
}

void LGRegisterLoginMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 101;
    if (has_serverinfo()) {
      if (serverinfo_ != &::google::protobuf::internal::kEmptyString) {
        serverinfo_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LGRegisterLoginMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = LGRegisterLogin];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_serverInfo;
        break;
      }
      
      // required string serverInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serverInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->serverinfo().data(), this->serverinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LGRegisterLoginMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = LGRegisterLogin];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required string serverInfo = 2;
  if (has_serverinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serverinfo().data(), this->serverinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->serverinfo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LGRegisterLoginMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = LGRegisterLogin];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required string serverInfo = 2;
  if (has_serverinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serverinfo().data(), this->serverinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->serverinfo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LGRegisterLoginMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = LGRegisterLogin];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required string serverInfo = 2;
    if (has_serverinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverinfo());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LGRegisterLoginMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LGRegisterLoginMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LGRegisterLoginMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LGRegisterLoginMessage::MergeFrom(const LGRegisterLoginMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_serverinfo()) {
      set_serverinfo(from.serverinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LGRegisterLoginMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LGRegisterLoginMessage::CopyFrom(const LGRegisterLoginMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LGRegisterLoginMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void LGRegisterLoginMessage::Swap(LGRegisterLoginMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(serverinfo_, other->serverinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LGRegisterLoginMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LGRegisterLoginMessage_descriptor_;
  metadata.reflection = LGRegisterLoginMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqLoginMessage::kMsgIDFieldNumber;
const int ReqLoginMessage::kTypeFieldNumber;
const int ReqLoginMessage::kPlatformFieldNumber;
const int ReqLoginMessage::kUsernameFieldNumber;
const int ReqLoginMessage::kPasswordFieldNumber;
const int ReqLoginMessage::kVerifyFieldNumber;
const int ReqLoginMessage::kMac64FieldNumber;
const int ReqLoginMessage::kOsFieldNumber;
const int ReqLoginMessage::kVersionFieldNumber;
const int ReqLoginMessage::kFrFieldNumber;
const int ReqLoginMessage::kUuidFieldNumber;
const int ReqLoginMessage::kUutokenFieldNumber;
const int ReqLoginMessage::kUuchannelFieldNumber;
const int ReqLoginMessage::kGameIdFieldNumber;
#endif  // !_MSC_VER

ReqLoginMessage::ReqLoginMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqLoginMessage::InitAsDefaultInstance() {
}

ReqLoginMessage::ReqLoginMessage(const ReqLoginMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqLoginMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 103;
  type_ = 0;
  platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  verify_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mac64_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  os_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uutoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uuchannel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gameid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqLoginMessage::~ReqLoginMessage() {
  SharedDtor();
}

void ReqLoginMessage::SharedDtor() {
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    delete platform_;
  }
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (verify_ != &::google::protobuf::internal::kEmptyString) {
    delete verify_;
  }
  if (mac64_ != &::google::protobuf::internal::kEmptyString) {
    delete mac64_;
  }
  if (os_ != &::google::protobuf::internal::kEmptyString) {
    delete os_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (fr_ != &::google::protobuf::internal::kEmptyString) {
    delete fr_;
  }
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (uutoken_ != &::google::protobuf::internal::kEmptyString) {
    delete uutoken_;
  }
  if (uuchannel_ != &::google::protobuf::internal::kEmptyString) {
    delete uuchannel_;
  }
  if (this != default_instance_) {
  }
}

void ReqLoginMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqLoginMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqLoginMessage_descriptor_;
}

const ReqLoginMessage& ReqLoginMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ReqLoginMessage* ReqLoginMessage::default_instance_ = NULL;

ReqLoginMessage* ReqLoginMessage::New() const {
  return new ReqLoginMessage;
}

void ReqLoginMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 103;
    type_ = 0;
    if (has_platform()) {
      if (platform_ != &::google::protobuf::internal::kEmptyString) {
        platform_->clear();
      }
    }
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_verify()) {
      if (verify_ != &::google::protobuf::internal::kEmptyString) {
        verify_->clear();
      }
    }
    if (has_mac64()) {
      if (mac64_ != &::google::protobuf::internal::kEmptyString) {
        mac64_->clear();
      }
    }
    if (has_os()) {
      if (os_ != &::google::protobuf::internal::kEmptyString) {
        os_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
    if (has_fr()) {
      if (fr_ != &::google::protobuf::internal::kEmptyString) {
        fr_->clear();
      }
    }
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
    if (has_uutoken()) {
      if (uutoken_ != &::google::protobuf::internal::kEmptyString) {
        uutoken_->clear();
      }
    }
    if (has_uuchannel()) {
      if (uuchannel_ != &::google::protobuf::internal::kEmptyString) {
        uuchannel_->clear();
      }
    }
    gameid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqLoginMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqLogin];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_platform;
        break;
      }
      
      // required string platform = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_platform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_username;
        break;
      }
      
      // optional string username = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_password;
        break;
      }
      
      // optional string password = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_verify;
        break;
      }
      
      // optional string verify = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_verify:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verify()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->verify().data(), this->verify().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_mac64;
        break;
      }
      
      // optional string mac64 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mac64:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mac64()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mac64().data(), this->mac64().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_os;
        break;
      }
      
      // optional string os = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_os:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->os().data(), this->os().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_version;
        break;
      }
      
      // optional string version = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_fr;
        break;
      }
      
      // optional string fr = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fr().data(), this->fr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_uuid;
        break;
      }
      
      // optional string uuid = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_uutoken;
        break;
      }
      
      // optional string uutoken = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uutoken:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uutoken()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uutoken().data(), this->uutoken().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_uuchannel;
        break;
      }
      
      // optional string uuchannel = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uuchannel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuchannel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uuchannel().data(), this->uuchannel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_gameId;
        break;
      }
      
      // optional int32 gameId = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqLoginMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqLogin];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }
  
  // required string platform = 3;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->platform(), output);
  }
  
  // optional string username = 4;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->username(), output);
  }
  
  // optional string password = 5;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->password(), output);
  }
  
  // optional string verify = 6;
  if (has_verify()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->verify().data(), this->verify().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->verify(), output);
  }
  
  // optional string mac64 = 7;
  if (has_mac64()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mac64().data(), this->mac64().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->mac64(), output);
  }
  
  // optional string os = 8;
  if (has_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os().data(), this->os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->os(), output);
  }
  
  // optional string version = 9;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->version(), output);
  }
  
  // optional string fr = 10;
  if (has_fr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fr().data(), this->fr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->fr(), output);
  }
  
  // optional string uuid = 11;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->uuid(), output);
  }
  
  // optional string uutoken = 12;
  if (has_uutoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uutoken().data(), this->uutoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->uutoken(), output);
  }
  
  // optional string uuchannel = 13;
  if (has_uuchannel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuchannel().data(), this->uuchannel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->uuchannel(), output);
  }
  
  // optional int32 gameId = 14;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->gameid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqLoginMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqLogin];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }
  
  // required string platform = 3;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->platform(), target);
  }
  
  // optional string username = 4;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->username(), target);
  }
  
  // optional string password = 5;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->password(), target);
  }
  
  // optional string verify = 6;
  if (has_verify()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->verify().data(), this->verify().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->verify(), target);
  }
  
  // optional string mac64 = 7;
  if (has_mac64()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mac64().data(), this->mac64().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->mac64(), target);
  }
  
  // optional string os = 8;
  if (has_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os().data(), this->os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->os(), target);
  }
  
  // optional string version = 9;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->version(), target);
  }
  
  // optional string fr = 10;
  if (has_fr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fr().data(), this->fr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->fr(), target);
  }
  
  // optional string uuid = 11;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->uuid(), target);
  }
  
  // optional string uutoken = 12;
  if (has_uutoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uutoken().data(), this->uutoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->uutoken(), target);
  }
  
  // optional string uuchannel = 13;
  if (has_uuchannel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuchannel().data(), this->uuchannel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->uuchannel(), target);
  }
  
  // optional int32 gameId = 14;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->gameid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqLoginMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqLogin];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // required string platform = 3;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }
    
    // optional string username = 4;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
    // optional string password = 5;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }
    
    // optional string verify = 6;
    if (has_verify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->verify());
    }
    
    // optional string mac64 = 7;
    if (has_mac64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mac64());
    }
    
    // optional string os = 8;
    if (has_os()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string version = 9;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
    // optional string fr = 10;
    if (has_fr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fr());
    }
    
    // optional string uuid = 11;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }
    
    // optional string uutoken = 12;
    if (has_uutoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uutoken());
    }
    
    // optional string uuchannel = 13;
    if (has_uuchannel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuchannel());
    }
    
    // optional int32 gameId = 14;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqLoginMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqLoginMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqLoginMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqLoginMessage::MergeFrom(const ReqLoginMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_verify()) {
      set_verify(from.verify());
    }
    if (from.has_mac64()) {
      set_mac64(from.mac64());
    }
    if (from.has_os()) {
      set_os(from.os());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_fr()) {
      set_fr(from.fr());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_uutoken()) {
      set_uutoken(from.uutoken());
    }
    if (from.has_uuchannel()) {
      set_uuchannel(from.uuchannel());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqLoginMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLoginMessage::CopyFrom(const ReqLoginMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLoginMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  return true;
}

void ReqLoginMessage::Swap(ReqLoginMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(type_, other->type_);
    std::swap(platform_, other->platform_);
    std::swap(username_, other->username_);
    std::swap(password_, other->password_);
    std::swap(verify_, other->verify_);
    std::swap(mac64_, other->mac64_);
    std::swap(os_, other->os_);
    std::swap(version_, other->version_);
    std::swap(fr_, other->fr_);
    std::swap(uuid_, other->uuid_);
    std::swap(uutoken_, other->uutoken_);
    std::swap(uuchannel_, other->uuchannel_);
    std::swap(gameid_, other->gameid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqLoginMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqLoginMessage_descriptor_;
  metadata.reflection = ReqLoginMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResLoginMessage::kMsgIDFieldNumber;
const int ResLoginMessage::kErrorFieldNumber;
const int ResLoginMessage::kPlayerInfoFieldNumber;
const int ResLoginMessage::kPasswordFieldNumber;
const int ResLoginMessage::kServerlistFieldNumber;
#endif  // !_MSC_VER

ResLoginMessage::ResLoginMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResLoginMessage::InitAsDefaultInstance() {
  playerinfo_ = const_cast< ::com::game::proto::PlayerInfo*>(&::com::game::proto::PlayerInfo::default_instance());
}

ResLoginMessage::ResLoginMessage(const ResLoginMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResLoginMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 104;
  error_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playerinfo_ = NULL;
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResLoginMessage::~ResLoginMessage() {
  SharedDtor();
}

void ResLoginMessage::SharedDtor() {
  if (error_ != &::google::protobuf::internal::kEmptyString) {
    delete error_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
    delete playerinfo_;
  }
}

void ResLoginMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResLoginMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResLoginMessage_descriptor_;
}

const ResLoginMessage& ResLoginMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ResLoginMessage* ResLoginMessage::default_instance_ = NULL;

ResLoginMessage* ResLoginMessage::New() const {
  return new ResLoginMessage;
}

void ResLoginMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 104;
    if (has_error()) {
      if (error_ != &::google::protobuf::internal::kEmptyString) {
        error_->clear();
      }
    }
    if (has_playerinfo()) {
      if (playerinfo_ != NULL) playerinfo_->::com::game::proto::PlayerInfo::Clear();
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  serverlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResLoginMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ResLogin];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }
      
      // optional string error = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_playerInfo;
        break;
      }
      
      // optional .com.game.proto.PlayerInfo playerInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_password;
        break;
      }
      
      // optional string password = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_serverlist;
        break;
      }
      
      // repeated string serverlist = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serverlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_serverlist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->serverlist(0).data(), this->serverlist(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_serverlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResLoginMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResLogin];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // optional string error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->error(), output);
  }
  
  // optional .com.game.proto.PlayerInfo playerInfo = 3;
  if (has_playerinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->playerinfo(), output);
  }
  
  // optional string password = 4;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->password(), output);
  }
  
  // repeated string serverlist = 5;
  for (int i = 0; i < this->serverlist_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->serverlist(i).data(), this->serverlist(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->serverlist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResLoginMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResLogin];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // optional string error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error(), target);
  }
  
  // optional .com.game.proto.PlayerInfo playerInfo = 3;
  if (has_playerinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->playerinfo(), target);
  }
  
  // optional string password = 4;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->password(), target);
  }
  
  // repeated string serverlist = 5;
  for (int i = 0; i < this->serverlist_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serverlist(i).data(), this->serverlist(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->serverlist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResLoginMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ResLogin];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional string error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }
    
    // optional .com.game.proto.PlayerInfo playerInfo = 3;
    if (has_playerinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerinfo());
    }
    
    // optional string password = 4;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }
    
  }
  // repeated string serverlist = 5;
  total_size += 1 * this->serverlist_size();
  for (int i = 0; i < this->serverlist_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->serverlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResLoginMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResLoginMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResLoginMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResLoginMessage::MergeFrom(const ResLoginMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  serverlist_.MergeFrom(from.serverlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_playerinfo()) {
      mutable_playerinfo()->::com::game::proto::PlayerInfo::MergeFrom(from.playerinfo());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResLoginMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResLoginMessage::CopyFrom(const ResLoginMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResLoginMessage::IsInitialized() const {
  
  if (has_playerinfo()) {
    if (!this->playerinfo().IsInitialized()) return false;
  }
  return true;
}

void ResLoginMessage::Swap(ResLoginMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(error_, other->error_);
    std::swap(playerinfo_, other->playerinfo_);
    std::swap(password_, other->password_);
    serverlist_.Swap(&other->serverlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResLoginMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResLoginMessage_descriptor_;
  metadata.reflection = ResLoginMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResUpdateServerInfoMessage::kMsgIDFieldNumber;
const int ResUpdateServerInfoMessage::kServerInfoFieldNumber;
#endif  // !_MSC_VER

ResUpdateServerInfoMessage::ResUpdateServerInfoMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResUpdateServerInfoMessage::InitAsDefaultInstance() {
}

ResUpdateServerInfoMessage::ResUpdateServerInfoMessage(const ResUpdateServerInfoMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResUpdateServerInfoMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 120;
  serverinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResUpdateServerInfoMessage::~ResUpdateServerInfoMessage() {
  SharedDtor();
}

void ResUpdateServerInfoMessage::SharedDtor() {
  if (serverinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete serverinfo_;
  }
  if (this != default_instance_) {
  }
}

void ResUpdateServerInfoMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResUpdateServerInfoMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResUpdateServerInfoMessage_descriptor_;
}

const ResUpdateServerInfoMessage& ResUpdateServerInfoMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ResUpdateServerInfoMessage* ResUpdateServerInfoMessage::default_instance_ = NULL;

ResUpdateServerInfoMessage* ResUpdateServerInfoMessage::New() const {
  return new ResUpdateServerInfoMessage;
}

void ResUpdateServerInfoMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 120;
    if (has_serverinfo()) {
      if (serverinfo_ != &::google::protobuf::internal::kEmptyString) {
        serverinfo_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResUpdateServerInfoMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ResUpdateServerInfo];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_serverInfo;
        break;
      }
      
      // required string serverInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serverInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->serverinfo().data(), this->serverinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResUpdateServerInfoMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResUpdateServerInfo];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required string serverInfo = 2;
  if (has_serverinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serverinfo().data(), this->serverinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->serverinfo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResUpdateServerInfoMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResUpdateServerInfo];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required string serverInfo = 2;
  if (has_serverinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serverinfo().data(), this->serverinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->serverinfo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResUpdateServerInfoMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ResUpdateServerInfo];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required string serverInfo = 2;
    if (has_serverinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverinfo());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResUpdateServerInfoMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResUpdateServerInfoMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResUpdateServerInfoMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResUpdateServerInfoMessage::MergeFrom(const ResUpdateServerInfoMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_serverinfo()) {
      set_serverinfo(from.serverinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResUpdateServerInfoMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResUpdateServerInfoMessage::CopyFrom(const ResUpdateServerInfoMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResUpdateServerInfoMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void ResUpdateServerInfoMessage::Swap(ResUpdateServerInfoMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(serverinfo_, other->serverinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResUpdateServerInfoMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResUpdateServerInfoMessage_descriptor_;
  metadata.reflection = ResUpdateServerInfoMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqHeartBeatMessage::kMsgIDFieldNumber;
const int ReqHeartBeatMessage::kDwTimeFieldNumber;
#endif  // !_MSC_VER

ReqHeartBeatMessage::ReqHeartBeatMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqHeartBeatMessage::InitAsDefaultInstance() {
}

ReqHeartBeatMessage::ReqHeartBeatMessage(const ReqHeartBeatMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqHeartBeatMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 115;
  dwtime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqHeartBeatMessage::~ReqHeartBeatMessage() {
  SharedDtor();
}

void ReqHeartBeatMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqHeartBeatMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqHeartBeatMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqHeartBeatMessage_descriptor_;
}

const ReqHeartBeatMessage& ReqHeartBeatMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ReqHeartBeatMessage* ReqHeartBeatMessage::default_instance_ = NULL;

ReqHeartBeatMessage* ReqHeartBeatMessage::New() const {
  return new ReqHeartBeatMessage;
}

void ReqHeartBeatMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 115;
    dwtime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqHeartBeatMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqHeartBeat];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dwTime;
        break;
      }
      
      // required int64 dwTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwtime_)));
          set_has_dwtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqHeartBeatMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqHeartBeat];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required int64 dwTime = 2;
  if (has_dwtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->dwtime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqHeartBeatMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqHeartBeat];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required int64 dwTime = 2;
  if (has_dwtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->dwtime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqHeartBeatMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqHeartBeat];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required int64 dwTime = 2;
    if (has_dwtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwtime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqHeartBeatMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqHeartBeatMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqHeartBeatMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqHeartBeatMessage::MergeFrom(const ReqHeartBeatMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_dwtime()) {
      set_dwtime(from.dwtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqHeartBeatMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqHeartBeatMessage::CopyFrom(const ReqHeartBeatMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqHeartBeatMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void ReqHeartBeatMessage::Swap(ReqHeartBeatMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(dwtime_, other->dwtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqHeartBeatMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqHeartBeatMessage_descriptor_;
  metadata.reflection = ReqHeartBeatMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResHeartBeatMessage::kMsgIDFieldNumber;
const int ResHeartBeatMessage::kDwTimeFieldNumber;
#endif  // !_MSC_VER

ResHeartBeatMessage::ResHeartBeatMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResHeartBeatMessage::InitAsDefaultInstance() {
}

ResHeartBeatMessage::ResHeartBeatMessage(const ResHeartBeatMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResHeartBeatMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 116;
  dwtime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResHeartBeatMessage::~ResHeartBeatMessage() {
  SharedDtor();
}

void ResHeartBeatMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResHeartBeatMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResHeartBeatMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResHeartBeatMessage_descriptor_;
}

const ResHeartBeatMessage& ResHeartBeatMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ResHeartBeatMessage* ResHeartBeatMessage::default_instance_ = NULL;

ResHeartBeatMessage* ResHeartBeatMessage::New() const {
  return new ResHeartBeatMessage;
}

void ResHeartBeatMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 116;
    dwtime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResHeartBeatMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ResHeartBeat];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dwTime;
        break;
      }
      
      // required int64 dwTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwtime_)));
          set_has_dwtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResHeartBeatMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResHeartBeat];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required int64 dwTime = 2;
  if (has_dwtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->dwtime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResHeartBeatMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResHeartBeat];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required int64 dwTime = 2;
  if (has_dwtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->dwtime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResHeartBeatMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ResHeartBeat];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required int64 dwTime = 2;
    if (has_dwtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwtime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResHeartBeatMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResHeartBeatMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResHeartBeatMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResHeartBeatMessage::MergeFrom(const ResHeartBeatMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_dwtime()) {
      set_dwtime(from.dwtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResHeartBeatMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResHeartBeatMessage::CopyFrom(const ResHeartBeatMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResHeartBeatMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void ResHeartBeatMessage::Swap(ResHeartBeatMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(dwtime_, other->dwtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResHeartBeatMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResHeartBeatMessage_descriptor_;
  metadata.reflection = ResHeartBeatMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqBindUserMessage::kMsgIDFieldNumber;
const int ReqBindUserMessage::kDeviceUniqueIdentifierFieldNumber;
const int ReqBindUserMessage::kUsernameFieldNumber;
const int ReqBindUserMessage::kPassword1FieldNumber;
const int ReqBindUserMessage::kPassword2FieldNumber;
#endif  // !_MSC_VER

ReqBindUserMessage::ReqBindUserMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqBindUserMessage::InitAsDefaultInstance() {
}

ReqBindUserMessage::ReqBindUserMessage(const ReqBindUserMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqBindUserMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 131;
  deviceuniqueidentifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqBindUserMessage::~ReqBindUserMessage() {
  SharedDtor();
}

void ReqBindUserMessage::SharedDtor() {
  if (deviceuniqueidentifier_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceuniqueidentifier_;
  }
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (password1_ != &::google::protobuf::internal::kEmptyString) {
    delete password1_;
  }
  if (password2_ != &::google::protobuf::internal::kEmptyString) {
    delete password2_;
  }
  if (this != default_instance_) {
  }
}

void ReqBindUserMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqBindUserMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqBindUserMessage_descriptor_;
}

const ReqBindUserMessage& ReqBindUserMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ReqBindUserMessage* ReqBindUserMessage::default_instance_ = NULL;

ReqBindUserMessage* ReqBindUserMessage::New() const {
  return new ReqBindUserMessage;
}

void ReqBindUserMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 131;
    if (has_deviceuniqueidentifier()) {
      if (deviceuniqueidentifier_ != &::google::protobuf::internal::kEmptyString) {
        deviceuniqueidentifier_->clear();
      }
    }
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_password1()) {
      if (password1_ != &::google::protobuf::internal::kEmptyString) {
        password1_->clear();
      }
    }
    if (has_password2()) {
      if (password2_ != &::google::protobuf::internal::kEmptyString) {
        password2_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqBindUserMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqBindUser];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_deviceUniqueIdentifier;
        break;
      }
      
      // optional string deviceUniqueIdentifier = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceUniqueIdentifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceuniqueidentifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deviceuniqueidentifier().data(), this->deviceuniqueidentifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_username;
        break;
      }
      
      // optional string username = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_password1;
        break;
      }
      
      // optional string password1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password1().data(), this->password1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_password2;
        break;
      }
      
      // optional string password2 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password2().data(), this->password2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqBindUserMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqBindUser];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // optional string deviceUniqueIdentifier = 2;
  if (has_deviceuniqueidentifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceuniqueidentifier().data(), this->deviceuniqueidentifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->deviceuniqueidentifier(), output);
  }
  
  // optional string username = 3;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->username(), output);
  }
  
  // optional string password1 = 4;
  if (has_password1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password1().data(), this->password1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->password1(), output);
  }
  
  // optional string password2 = 5;
  if (has_password2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password2().data(), this->password2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->password2(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqBindUserMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqBindUser];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // optional string deviceUniqueIdentifier = 2;
  if (has_deviceuniqueidentifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceuniqueidentifier().data(), this->deviceuniqueidentifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->deviceuniqueidentifier(), target);
  }
  
  // optional string username = 3;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->username(), target);
  }
  
  // optional string password1 = 4;
  if (has_password1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password1().data(), this->password1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->password1(), target);
  }
  
  // optional string password2 = 5;
  if (has_password2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password2().data(), this->password2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->password2(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqBindUserMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqBindUser];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional string deviceUniqueIdentifier = 2;
    if (has_deviceuniqueidentifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceuniqueidentifier());
    }
    
    // optional string username = 3;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
    // optional string password1 = 4;
    if (has_password1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password1());
    }
    
    // optional string password2 = 5;
    if (has_password2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password2());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqBindUserMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqBindUserMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqBindUserMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqBindUserMessage::MergeFrom(const ReqBindUserMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_deviceuniqueidentifier()) {
      set_deviceuniqueidentifier(from.deviceuniqueidentifier());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_password1()) {
      set_password1(from.password1());
    }
    if (from.has_password2()) {
      set_password2(from.password2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqBindUserMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqBindUserMessage::CopyFrom(const ReqBindUserMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqBindUserMessage::IsInitialized() const {
  
  return true;
}

void ReqBindUserMessage::Swap(ReqBindUserMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(deviceuniqueidentifier_, other->deviceuniqueidentifier_);
    std::swap(username_, other->username_);
    std::swap(password1_, other->password1_);
    std::swap(password2_, other->password2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqBindUserMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqBindUserMessage_descriptor_;
  metadata.reflection = ReqBindUserMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResBindUserMessage::kMsgIDFieldNumber;
const int ResBindUserMessage::kCodeFieldNumber;
#endif  // !_MSC_VER

ResBindUserMessage::ResBindUserMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResBindUserMessage::InitAsDefaultInstance() {
}

ResBindUserMessage::ResBindUserMessage(const ResBindUserMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResBindUserMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 132;
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResBindUserMessage::~ResBindUserMessage() {
  SharedDtor();
}

void ResBindUserMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResBindUserMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResBindUserMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResBindUserMessage_descriptor_;
}

const ResBindUserMessage& ResBindUserMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ResBindUserMessage* ResBindUserMessage::default_instance_ = NULL;

ResBindUserMessage* ResBindUserMessage::New() const {
  return new ResBindUserMessage;
}

void ResBindUserMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 132;
    code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResBindUserMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ResBindUser];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_code;
        break;
      }
      
      // required int32 code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResBindUserMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResBindUser];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required int32 code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResBindUserMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResBindUser];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required int32 code = 2;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResBindUserMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ResBindUser];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required int32 code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResBindUserMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResBindUserMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResBindUserMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResBindUserMessage::MergeFrom(const ResBindUserMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResBindUserMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResBindUserMessage::CopyFrom(const ResBindUserMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResBindUserMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void ResBindUserMessage::Swap(ResBindUserMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResBindUserMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResBindUserMessage_descriptor_;
  metadata.reflection = ResBindUserMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqBindPhoneMessage::kMsgIDFieldNumber;
const int ReqBindPhoneMessage::kVerifyFieldNumber;
const int ReqBindPhoneMessage::kPasswordFieldNumber;
const int ReqBindPhoneMessage::kPhoneFieldNumber;
const int ReqBindPhoneMessage::kReferrerIDFieldNumber;
#endif  // !_MSC_VER

ReqBindPhoneMessage::ReqBindPhoneMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqBindPhoneMessage::InitAsDefaultInstance() {
}

ReqBindPhoneMessage::ReqBindPhoneMessage(const ReqBindPhoneMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqBindPhoneMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 133;
  verify_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  referrerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqBindPhoneMessage::~ReqBindPhoneMessage() {
  SharedDtor();
}

void ReqBindPhoneMessage::SharedDtor() {
  if (verify_ != &::google::protobuf::internal::kEmptyString) {
    delete verify_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_;
  }
  if (this != default_instance_) {
  }
}

void ReqBindPhoneMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqBindPhoneMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqBindPhoneMessage_descriptor_;
}

const ReqBindPhoneMessage& ReqBindPhoneMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ReqBindPhoneMessage* ReqBindPhoneMessage::default_instance_ = NULL;

ReqBindPhoneMessage* ReqBindPhoneMessage::New() const {
  return new ReqBindPhoneMessage;
}

void ReqBindPhoneMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 133;
    if (has_verify()) {
      if (verify_ != &::google::protobuf::internal::kEmptyString) {
        verify_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_phone()) {
      if (phone_ != &::google::protobuf::internal::kEmptyString) {
        phone_->clear();
      }
    }
    referrerid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqBindPhoneMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqBindPhone];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_verify;
        break;
      }
      
      // optional string verify = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_verify:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verify()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->verify().data(), this->verify().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_password;
        break;
      }
      
      // optional string password = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_phone;
        break;
      }
      
      // optional string phone = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phone().data(), this->phone().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_referrerID;
        break;
      }
      
      // optional int64 referrerID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_referrerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &referrerid_)));
          set_has_referrerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqBindPhoneMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqBindPhone];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // optional string verify = 3;
  if (has_verify()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->verify().data(), this->verify().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->verify(), output);
  }
  
  // optional string password = 4;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->password(), output);
  }
  
  // optional string phone = 5;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->phone(), output);
  }
  
  // optional int64 referrerID = 6;
  if (has_referrerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->referrerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqBindPhoneMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqBindPhone];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // optional string verify = 3;
  if (has_verify()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->verify().data(), this->verify().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->verify(), target);
  }
  
  // optional string password = 4;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->password(), target);
  }
  
  // optional string phone = 5;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->phone(), target);
  }
  
  // optional int64 referrerID = 6;
  if (has_referrerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->referrerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqBindPhoneMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqBindPhone];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional string verify = 3;
    if (has_verify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->verify());
    }
    
    // optional string password = 4;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }
    
    // optional string phone = 5;
    if (has_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone());
    }
    
    // optional int64 referrerID = 6;
    if (has_referrerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->referrerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqBindPhoneMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqBindPhoneMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqBindPhoneMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqBindPhoneMessage::MergeFrom(const ReqBindPhoneMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_verify()) {
      set_verify(from.verify());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_phone()) {
      set_phone(from.phone());
    }
    if (from.has_referrerid()) {
      set_referrerid(from.referrerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqBindPhoneMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqBindPhoneMessage::CopyFrom(const ReqBindPhoneMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqBindPhoneMessage::IsInitialized() const {
  
  return true;
}

void ReqBindPhoneMessage::Swap(ReqBindPhoneMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(verify_, other->verify_);
    std::swap(password_, other->password_);
    std::swap(phone_, other->phone_);
    std::swap(referrerid_, other->referrerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqBindPhoneMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqBindPhoneMessage_descriptor_;
  metadata.reflection = ReqBindPhoneMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResBindPhoneMessage::kMsgIDFieldNumber;
const int ResBindPhoneMessage::kCodeFieldNumber;
#endif  // !_MSC_VER

ResBindPhoneMessage::ResBindPhoneMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResBindPhoneMessage::InitAsDefaultInstance() {
}

ResBindPhoneMessage::ResBindPhoneMessage(const ResBindPhoneMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResBindPhoneMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 134;
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResBindPhoneMessage::~ResBindPhoneMessage() {
  SharedDtor();
}

void ResBindPhoneMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResBindPhoneMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResBindPhoneMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResBindPhoneMessage_descriptor_;
}

const ResBindPhoneMessage& ResBindPhoneMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ResBindPhoneMessage* ResBindPhoneMessage::default_instance_ = NULL;

ResBindPhoneMessage* ResBindPhoneMessage::New() const {
  return new ResBindPhoneMessage;
}

void ResBindPhoneMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 134;
    code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResBindPhoneMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ResBindPhone];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_code;
        break;
      }
      
      // required int32 code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResBindPhoneMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResBindPhone];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required int32 code = 3;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResBindPhoneMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResBindPhone];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required int32 code = 3;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResBindPhoneMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ResBindPhone];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required int32 code = 3;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResBindPhoneMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResBindPhoneMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResBindPhoneMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResBindPhoneMessage::MergeFrom(const ResBindPhoneMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResBindPhoneMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResBindPhoneMessage::CopyFrom(const ResBindPhoneMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResBindPhoneMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void ResBindPhoneMessage::Swap(ResBindPhoneMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResBindPhoneMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResBindPhoneMessage_descriptor_;
  metadata.reflection = ResBindPhoneMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqBindZFBMessage::kMsgIDFieldNumber;
const int ReqBindZFBMessage::kNameFieldNumber;
const int ReqBindZFBMessage::kAccountFieldNumber;
#endif  // !_MSC_VER

ReqBindZFBMessage::ReqBindZFBMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqBindZFBMessage::InitAsDefaultInstance() {
}

ReqBindZFBMessage::ReqBindZFBMessage(const ReqBindZFBMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqBindZFBMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 135;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqBindZFBMessage::~ReqBindZFBMessage() {
  SharedDtor();
}

void ReqBindZFBMessage::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void ReqBindZFBMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqBindZFBMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqBindZFBMessage_descriptor_;
}

const ReqBindZFBMessage& ReqBindZFBMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ReqBindZFBMessage* ReqBindZFBMessage::default_instance_ = NULL;

ReqBindZFBMessage* ReqBindZFBMessage::New() const {
  return new ReqBindZFBMessage;
}

void ReqBindZFBMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 135;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqBindZFBMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqBindZFB];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_account;
        break;
      }
      
      // optional string account = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqBindZFBMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqBindZFB];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->account(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqBindZFBMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqBindZFB];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->account(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqBindZFBMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqBindZFB];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string account = 3;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqBindZFBMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqBindZFBMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqBindZFBMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqBindZFBMessage::MergeFrom(const ReqBindZFBMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqBindZFBMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqBindZFBMessage::CopyFrom(const ReqBindZFBMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqBindZFBMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void ReqBindZFBMessage::Swap(ReqBindZFBMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(name_, other->name_);
    std::swap(account_, other->account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqBindZFBMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqBindZFBMessage_descriptor_;
  metadata.reflection = ReqBindZFBMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResBindZFBMessage::kMsgIDFieldNumber;
const int ResBindZFBMessage::kCodeFieldNumber;
const int ResBindZFBMessage::kNameFieldNumber;
const int ResBindZFBMessage::kAccountFieldNumber;
#endif  // !_MSC_VER

ResBindZFBMessage::ResBindZFBMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResBindZFBMessage::InitAsDefaultInstance() {
}

ResBindZFBMessage::ResBindZFBMessage(const ResBindZFBMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResBindZFBMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 136;
  code_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResBindZFBMessage::~ResBindZFBMessage() {
  SharedDtor();
}

void ResBindZFBMessage::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void ResBindZFBMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResBindZFBMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResBindZFBMessage_descriptor_;
}

const ResBindZFBMessage& ResBindZFBMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ResBindZFBMessage* ResBindZFBMessage::default_instance_ = NULL;

ResBindZFBMessage* ResBindZFBMessage::New() const {
  return new ResBindZFBMessage;
}

void ResBindZFBMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 136;
    code_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResBindZFBMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ResBindZFB];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_code;
        break;
      }
      
      // required int32 code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }
      
      // required string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_account;
        break;
      }
      
      // optional string account = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResBindZFBMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResBindZFB];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required int32 code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->code(), output);
  }
  
  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }
  
  // optional string account = 4;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->account(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResBindZFBMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResBindZFB];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required int32 code = 2;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->code(), target);
  }
  
  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }
  
  // optional string account = 4;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->account(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResBindZFBMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ResBindZFB];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required int32 code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }
    
    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string account = 4;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResBindZFBMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResBindZFBMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResBindZFBMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResBindZFBMessage::MergeFrom(const ResBindZFBMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResBindZFBMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResBindZFBMessage::CopyFrom(const ResBindZFBMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResBindZFBMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  return true;
}

void ResBindZFBMessage::Swap(ResBindZFBMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(code_, other->code_);
    std::swap(name_, other->name_);
    std::swap(account_, other->account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResBindZFBMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResBindZFBMessage_descriptor_;
  metadata.reflection = ResBindZFBMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqCanEnterSubGameMessage::kMsgIDFieldNumber;
const int ReqCanEnterSubGameMessage::kGameIdFieldNumber;
#endif  // !_MSC_VER

ReqCanEnterSubGameMessage::ReqCanEnterSubGameMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqCanEnterSubGameMessage::InitAsDefaultInstance() {
}

ReqCanEnterSubGameMessage::ReqCanEnterSubGameMessage(const ReqCanEnterSubGameMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqCanEnterSubGameMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 137;
  gameid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqCanEnterSubGameMessage::~ReqCanEnterSubGameMessage() {
  SharedDtor();
}

void ReqCanEnterSubGameMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqCanEnterSubGameMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqCanEnterSubGameMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqCanEnterSubGameMessage_descriptor_;
}

const ReqCanEnterSubGameMessage& ReqCanEnterSubGameMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ReqCanEnterSubGameMessage* ReqCanEnterSubGameMessage::default_instance_ = NULL;

ReqCanEnterSubGameMessage* ReqCanEnterSubGameMessage::New() const {
  return new ReqCanEnterSubGameMessage;
}

void ReqCanEnterSubGameMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 137;
    gameid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqCanEnterSubGameMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqCanEnterSubGame];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameId;
        break;
      }
      
      // required int32 gameId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqCanEnterSubGameMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqCanEnterSubGame];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required int32 gameId = 2;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqCanEnterSubGameMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqCanEnterSubGame];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required int32 gameId = 2;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gameid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqCanEnterSubGameMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqCanEnterSubGame];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required int32 gameId = 2;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqCanEnterSubGameMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqCanEnterSubGameMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqCanEnterSubGameMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqCanEnterSubGameMessage::MergeFrom(const ReqCanEnterSubGameMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqCanEnterSubGameMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCanEnterSubGameMessage::CopyFrom(const ReqCanEnterSubGameMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCanEnterSubGameMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void ReqCanEnterSubGameMessage::Swap(ReqCanEnterSubGameMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(gameid_, other->gameid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqCanEnterSubGameMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqCanEnterSubGameMessage_descriptor_;
  metadata.reflection = ReqCanEnterSubGameMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResCanEnterSubGameMessage::kMsgIDFieldNumber;
const int ResCanEnterSubGameMessage::kGameIdFieldNumber;
#endif  // !_MSC_VER

ResCanEnterSubGameMessage::ResCanEnterSubGameMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResCanEnterSubGameMessage::InitAsDefaultInstance() {
}

ResCanEnterSubGameMessage::ResCanEnterSubGameMessage(const ResCanEnterSubGameMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResCanEnterSubGameMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 138;
  gameid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResCanEnterSubGameMessage::~ResCanEnterSubGameMessage() {
  SharedDtor();
}

void ResCanEnterSubGameMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResCanEnterSubGameMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResCanEnterSubGameMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResCanEnterSubGameMessage_descriptor_;
}

const ResCanEnterSubGameMessage& ResCanEnterSubGameMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ResCanEnterSubGameMessage* ResCanEnterSubGameMessage::default_instance_ = NULL;

ResCanEnterSubGameMessage* ResCanEnterSubGameMessage::New() const {
  return new ResCanEnterSubGameMessage;
}

void ResCanEnterSubGameMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 138;
    gameid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResCanEnterSubGameMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ResCanEnterSubGame];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameId;
        break;
      }
      
      // required int32 gameId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResCanEnterSubGameMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResCanEnterSubGame];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required int32 gameId = 2;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResCanEnterSubGameMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResCanEnterSubGame];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required int32 gameId = 2;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gameid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResCanEnterSubGameMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ResCanEnterSubGame];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required int32 gameId = 2;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResCanEnterSubGameMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResCanEnterSubGameMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResCanEnterSubGameMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResCanEnterSubGameMessage::MergeFrom(const ResCanEnterSubGameMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResCanEnterSubGameMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResCanEnterSubGameMessage::CopyFrom(const ResCanEnterSubGameMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResCanEnterSubGameMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void ResCanEnterSubGameMessage::Swap(ResCanEnterSubGameMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(gameid_, other->gameid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResCanEnterSubGameMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResCanEnterSubGameMessage_descriptor_;
  metadata.reflection = ResCanEnterSubGameMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqLogin4SubGameMessage::kMsgIDFieldNumber;
const int ReqLogin4SubGameMessage::kGameIdFieldNumber;
const int ReqLogin4SubGameMessage::kIsReconnectFieldNumber;
#endif  // !_MSC_VER

ReqLogin4SubGameMessage::ReqLogin4SubGameMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqLogin4SubGameMessage::InitAsDefaultInstance() {
}

ReqLogin4SubGameMessage::ReqLogin4SubGameMessage(const ReqLogin4SubGameMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqLogin4SubGameMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 141;
  gameid_ = 0;
  isreconnect_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqLogin4SubGameMessage::~ReqLogin4SubGameMessage() {
  SharedDtor();
}

void ReqLogin4SubGameMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqLogin4SubGameMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqLogin4SubGameMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqLogin4SubGameMessage_descriptor_;
}

const ReqLogin4SubGameMessage& ReqLogin4SubGameMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ReqLogin4SubGameMessage* ReqLogin4SubGameMessage::default_instance_ = NULL;

ReqLogin4SubGameMessage* ReqLogin4SubGameMessage::New() const {
  return new ReqLogin4SubGameMessage;
}

void ReqLogin4SubGameMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 141;
    gameid_ = 0;
    isreconnect_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqLogin4SubGameMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqLogin4SubGame];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameId;
        break;
      }
      
      // required int32 gameId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isReconnect;
        break;
      }
      
      // optional int32 isReconnect = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isReconnect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isreconnect_)));
          set_has_isreconnect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqLogin4SubGameMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqLogin4SubGame];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required int32 gameId = 2;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameid(), output);
  }
  
  // optional int32 isReconnect = 3;
  if (has_isreconnect()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->isreconnect(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqLogin4SubGameMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqLogin4SubGame];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required int32 gameId = 2;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gameid(), target);
  }
  
  // optional int32 isReconnect = 3;
  if (has_isreconnect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->isreconnect(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqLogin4SubGameMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqLogin4SubGame];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required int32 gameId = 2;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // optional int32 isReconnect = 3;
    if (has_isreconnect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isreconnect());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqLogin4SubGameMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqLogin4SubGameMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqLogin4SubGameMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqLogin4SubGameMessage::MergeFrom(const ReqLogin4SubGameMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_isreconnect()) {
      set_isreconnect(from.isreconnect());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqLogin4SubGameMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLogin4SubGameMessage::CopyFrom(const ReqLogin4SubGameMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLogin4SubGameMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void ReqLogin4SubGameMessage::Swap(ReqLogin4SubGameMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(gameid_, other->gameid_);
    std::swap(isreconnect_, other->isreconnect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqLogin4SubGameMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqLogin4SubGameMessage_descriptor_;
  metadata.reflection = ReqLogin4SubGameMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqPhoneVerifyMessage::kMsgIDFieldNumber;
const int ReqPhoneVerifyMessage::kPhoneFieldNumber;
const int ReqPhoneVerifyMessage::kIsLoginFieldNumber;
#endif  // !_MSC_VER

ReqPhoneVerifyMessage::ReqPhoneVerifyMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqPhoneVerifyMessage::InitAsDefaultInstance() {
}

ReqPhoneVerifyMessage::ReqPhoneVerifyMessage(const ReqPhoneVerifyMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqPhoneVerifyMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 105;
  phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  islogin_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqPhoneVerifyMessage::~ReqPhoneVerifyMessage() {
  SharedDtor();
}

void ReqPhoneVerifyMessage::SharedDtor() {
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_;
  }
  if (this != default_instance_) {
  }
}

void ReqPhoneVerifyMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqPhoneVerifyMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqPhoneVerifyMessage_descriptor_;
}

const ReqPhoneVerifyMessage& ReqPhoneVerifyMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ReqPhoneVerifyMessage* ReqPhoneVerifyMessage::default_instance_ = NULL;

ReqPhoneVerifyMessage* ReqPhoneVerifyMessage::New() const {
  return new ReqPhoneVerifyMessage;
}

void ReqPhoneVerifyMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 105;
    if (has_phone()) {
      if (phone_ != &::google::protobuf::internal::kEmptyString) {
        phone_->clear();
      }
    }
    islogin_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqPhoneVerifyMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqPhoneVerify];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_phone;
        break;
      }
      
      // required string phone = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phone().data(), this->phone().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isLogin;
        break;
      }
      
      // required bool isLogin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isLogin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islogin_)));
          set_has_islogin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqPhoneVerifyMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqPhoneVerify];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required string phone = 2;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->phone(), output);
  }
  
  // required bool isLogin = 3;
  if (has_islogin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->islogin(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqPhoneVerifyMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqPhoneVerify];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required string phone = 2;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->phone(), target);
  }
  
  // required bool isLogin = 3;
  if (has_islogin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->islogin(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqPhoneVerifyMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqPhoneVerify];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required string phone = 2;
    if (has_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone());
    }
    
    // required bool isLogin = 3;
    if (has_islogin()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqPhoneVerifyMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqPhoneVerifyMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqPhoneVerifyMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqPhoneVerifyMessage::MergeFrom(const ReqPhoneVerifyMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_phone()) {
      set_phone(from.phone());
    }
    if (from.has_islogin()) {
      set_islogin(from.islogin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqPhoneVerifyMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqPhoneVerifyMessage::CopyFrom(const ReqPhoneVerifyMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqPhoneVerifyMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  return true;
}

void ReqPhoneVerifyMessage::Swap(ReqPhoneVerifyMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(phone_, other->phone_);
    std::swap(islogin_, other->islogin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqPhoneVerifyMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqPhoneVerifyMessage_descriptor_;
  metadata.reflection = ReqPhoneVerifyMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResLogin4SubGameMessage::kMsgIDFieldNumber;
const int ResLogin4SubGameMessage::kErrorFieldNumber;
const int ResLogin4SubGameMessage::kGameIdFieldNumber;
const int ResLogin4SubGameMessage::kIsReconnectFieldNumber;
const int ResLogin4SubGameMessage::kMapModelIdFieldNumber;
const int ResLogin4SubGameMessage::kFishIpFieldNumber;
const int ResLogin4SubGameMessage::kFishPortFieldNumber;
#endif  // !_MSC_VER

ResLogin4SubGameMessage::ResLogin4SubGameMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResLogin4SubGameMessage::InitAsDefaultInstance() {
}

ResLogin4SubGameMessage::ResLogin4SubGameMessage(const ResLogin4SubGameMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResLogin4SubGameMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 142;
  error_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gameid_ = 0;
  isreconnect_ = 0;
  mapmodelid_ = 0;
  fiship_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fishport_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResLogin4SubGameMessage::~ResLogin4SubGameMessage() {
  SharedDtor();
}

void ResLogin4SubGameMessage::SharedDtor() {
  if (error_ != &::google::protobuf::internal::kEmptyString) {
    delete error_;
  }
  if (fiship_ != &::google::protobuf::internal::kEmptyString) {
    delete fiship_;
  }
  if (this != default_instance_) {
  }
}

void ResLogin4SubGameMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResLogin4SubGameMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResLogin4SubGameMessage_descriptor_;
}

const ResLogin4SubGameMessage& ResLogin4SubGameMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ResLogin4SubGameMessage* ResLogin4SubGameMessage::default_instance_ = NULL;

ResLogin4SubGameMessage* ResLogin4SubGameMessage::New() const {
  return new ResLogin4SubGameMessage;
}

void ResLogin4SubGameMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 142;
    if (has_error()) {
      if (error_ != &::google::protobuf::internal::kEmptyString) {
        error_->clear();
      }
    }
    gameid_ = 0;
    isreconnect_ = 0;
    mapmodelid_ = 0;
    if (has_fiship()) {
      if (fiship_ != &::google::protobuf::internal::kEmptyString) {
        fiship_->clear();
      }
    }
    fishport_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResLogin4SubGameMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ResLogin4SubGame];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }
      
      // optional string error = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gameId;
        break;
      }
      
      // optional int32 gameId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isReconnect;
        break;
      }
      
      // optional int32 isReconnect = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isReconnect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isreconnect_)));
          set_has_isreconnect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_mapModelId;
        break;
      }
      
      // optional int32 mapModelId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapModelId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapmodelid_)));
          set_has_mapmodelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_fishIp;
        break;
      }
      
      // optional string fishIp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fishIp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fiship()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fiship().data(), this->fiship().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_fishPort;
        break;
      }
      
      // optional int32 fishPort = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fishPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fishport_)));
          set_has_fishport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResLogin4SubGameMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResLogin4SubGame];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // optional string error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->error(), output);
  }
  
  // optional int32 gameId = 3;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gameid(), output);
  }
  
  // optional int32 isReconnect = 4;
  if (has_isreconnect()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->isreconnect(), output);
  }
  
  // optional int32 mapModelId = 5;
  if (has_mapmodelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->mapmodelid(), output);
  }
  
  // optional string fishIp = 6;
  if (has_fiship()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fiship().data(), this->fiship().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->fiship(), output);
  }
  
  // optional int32 fishPort = 7;
  if (has_fishport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->fishport(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResLogin4SubGameMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResLogin4SubGame];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // optional string error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error(), target);
  }
  
  // optional int32 gameId = 3;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gameid(), target);
  }
  
  // optional int32 isReconnect = 4;
  if (has_isreconnect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->isreconnect(), target);
  }
  
  // optional int32 mapModelId = 5;
  if (has_mapmodelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->mapmodelid(), target);
  }
  
  // optional string fishIp = 6;
  if (has_fiship()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fiship().data(), this->fiship().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->fiship(), target);
  }
  
  // optional int32 fishPort = 7;
  if (has_fishport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->fishport(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResLogin4SubGameMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ResLogin4SubGame];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional string error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }
    
    // optional int32 gameId = 3;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // optional int32 isReconnect = 4;
    if (has_isreconnect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isreconnect());
    }
    
    // optional int32 mapModelId = 5;
    if (has_mapmodelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapmodelid());
    }
    
    // optional string fishIp = 6;
    if (has_fiship()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fiship());
    }
    
    // optional int32 fishPort = 7;
    if (has_fishport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fishport());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResLogin4SubGameMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResLogin4SubGameMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResLogin4SubGameMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResLogin4SubGameMessage::MergeFrom(const ResLogin4SubGameMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_isreconnect()) {
      set_isreconnect(from.isreconnect());
    }
    if (from.has_mapmodelid()) {
      set_mapmodelid(from.mapmodelid());
    }
    if (from.has_fiship()) {
      set_fiship(from.fiship());
    }
    if (from.has_fishport()) {
      set_fishport(from.fishport());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResLogin4SubGameMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResLogin4SubGameMessage::CopyFrom(const ResLogin4SubGameMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResLogin4SubGameMessage::IsInitialized() const {
  
  return true;
}

void ResLogin4SubGameMessage::Swap(ResLogin4SubGameMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(error_, other->error_);
    std::swap(gameid_, other->gameid_);
    std::swap(isreconnect_, other->isreconnect_);
    std::swap(mapmodelid_, other->mapmodelid_);
    std::swap(fiship_, other->fiship_);
    std::swap(fishport_, other->fishport_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResLogin4SubGameMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResLogin4SubGameMessage_descriptor_;
  metadata.reflection = ResLogin4SubGameMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqQuit4SubGameMessage::kMsgIDFieldNumber;
const int ReqQuit4SubGameMessage::kGameIdFieldNumber;
#endif  // !_MSC_VER

ReqQuit4SubGameMessage::ReqQuit4SubGameMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqQuit4SubGameMessage::InitAsDefaultInstance() {
}

ReqQuit4SubGameMessage::ReqQuit4SubGameMessage(const ReqQuit4SubGameMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqQuit4SubGameMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 143;
  gameid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqQuit4SubGameMessage::~ReqQuit4SubGameMessage() {
  SharedDtor();
}

void ReqQuit4SubGameMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqQuit4SubGameMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqQuit4SubGameMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqQuit4SubGameMessage_descriptor_;
}

const ReqQuit4SubGameMessage& ReqQuit4SubGameMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ReqQuit4SubGameMessage* ReqQuit4SubGameMessage::default_instance_ = NULL;

ReqQuit4SubGameMessage* ReqQuit4SubGameMessage::New() const {
  return new ReqQuit4SubGameMessage;
}

void ReqQuit4SubGameMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 143;
    gameid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqQuit4SubGameMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqQuit4SubGame];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameId;
        break;
      }
      
      // required int32 gameId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqQuit4SubGameMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqQuit4SubGame];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required int32 gameId = 2;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqQuit4SubGameMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqQuit4SubGame];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required int32 gameId = 2;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gameid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqQuit4SubGameMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqQuit4SubGame];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required int32 gameId = 2;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqQuit4SubGameMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqQuit4SubGameMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqQuit4SubGameMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqQuit4SubGameMessage::MergeFrom(const ReqQuit4SubGameMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqQuit4SubGameMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqQuit4SubGameMessage::CopyFrom(const ReqQuit4SubGameMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqQuit4SubGameMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void ReqQuit4SubGameMessage::Swap(ReqQuit4SubGameMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(gameid_, other->gameid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqQuit4SubGameMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqQuit4SubGameMessage_descriptor_;
  metadata.reflection = ReqQuit4SubGameMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResQuit4SubGameMessage::kMsgIDFieldNumber;
const int ResQuit4SubGameMessage::kGameIdFieldNumber;
#endif  // !_MSC_VER

ResQuit4SubGameMessage::ResQuit4SubGameMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResQuit4SubGameMessage::InitAsDefaultInstance() {
}

ResQuit4SubGameMessage::ResQuit4SubGameMessage(const ResQuit4SubGameMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResQuit4SubGameMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 144;
  gameid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResQuit4SubGameMessage::~ResQuit4SubGameMessage() {
  SharedDtor();
}

void ResQuit4SubGameMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResQuit4SubGameMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResQuit4SubGameMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResQuit4SubGameMessage_descriptor_;
}

const ResQuit4SubGameMessage& ResQuit4SubGameMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ResQuit4SubGameMessage* ResQuit4SubGameMessage::default_instance_ = NULL;

ResQuit4SubGameMessage* ResQuit4SubGameMessage::New() const {
  return new ResQuit4SubGameMessage;
}

void ResQuit4SubGameMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 144;
    gameid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResQuit4SubGameMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ResQuit4SubGame];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameId;
        break;
      }
      
      // optional int32 gameId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResQuit4SubGameMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResQuit4SubGame];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // optional int32 gameId = 2;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResQuit4SubGameMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResQuit4SubGame];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // optional int32 gameId = 2;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gameid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResQuit4SubGameMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ResQuit4SubGame];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional int32 gameId = 2;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResQuit4SubGameMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResQuit4SubGameMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResQuit4SubGameMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResQuit4SubGameMessage::MergeFrom(const ResQuit4SubGameMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResQuit4SubGameMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResQuit4SubGameMessage::CopyFrom(const ResQuit4SubGameMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResQuit4SubGameMessage::IsInitialized() const {
  
  return true;
}

void ResQuit4SubGameMessage::Swap(ResQuit4SubGameMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(gameid_, other->gameid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResQuit4SubGameMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResQuit4SubGameMessage_descriptor_;
  metadata.reflection = ResQuit4SubGameMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResUpdateMoney1Message::kMsgIDFieldNumber;
const int ResUpdateMoney1Message::kMoney1FieldNumber;
#endif  // !_MSC_VER

ResUpdateMoney1Message::ResUpdateMoney1Message()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResUpdateMoney1Message::InitAsDefaultInstance() {
}

ResUpdateMoney1Message::ResUpdateMoney1Message(const ResUpdateMoney1Message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResUpdateMoney1Message::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 151;
  money1_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResUpdateMoney1Message::~ResUpdateMoney1Message() {
  SharedDtor();
}

void ResUpdateMoney1Message::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResUpdateMoney1Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResUpdateMoney1Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResUpdateMoney1Message_descriptor_;
}

const ResUpdateMoney1Message& ResUpdateMoney1Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ResUpdateMoney1Message* ResUpdateMoney1Message::default_instance_ = NULL;

ResUpdateMoney1Message* ResUpdateMoney1Message::New() const {
  return new ResUpdateMoney1Message;
}

void ResUpdateMoney1Message::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 151;
    money1_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResUpdateMoney1Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ResUpdateMoney1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_money1;
        break;
      }
      
      // required double money1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_money1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &money1_)));
          set_has_money1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResUpdateMoney1Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResUpdateMoney1];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required double money1 = 2;
  if (has_money1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->money1(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResUpdateMoney1Message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResUpdateMoney1];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required double money1 = 2;
  if (has_money1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->money1(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResUpdateMoney1Message::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ResUpdateMoney1];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required double money1 = 2;
    if (has_money1()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResUpdateMoney1Message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResUpdateMoney1Message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResUpdateMoney1Message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResUpdateMoney1Message::MergeFrom(const ResUpdateMoney1Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_money1()) {
      set_money1(from.money1());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResUpdateMoney1Message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResUpdateMoney1Message::CopyFrom(const ResUpdateMoney1Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResUpdateMoney1Message::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void ResUpdateMoney1Message::Swap(ResUpdateMoney1Message* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(money1_, other->money1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResUpdateMoney1Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResUpdateMoney1Message_descriptor_;
  metadata.reflection = ResUpdateMoney1Message_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResUpdateMoney2Message::kMsgIDFieldNumber;
const int ResUpdateMoney2Message::kMoney2FieldNumber;
#endif  // !_MSC_VER

ResUpdateMoney2Message::ResUpdateMoney2Message()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResUpdateMoney2Message::InitAsDefaultInstance() {
}

ResUpdateMoney2Message::ResUpdateMoney2Message(const ResUpdateMoney2Message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResUpdateMoney2Message::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 152;
  money2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResUpdateMoney2Message::~ResUpdateMoney2Message() {
  SharedDtor();
}

void ResUpdateMoney2Message::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResUpdateMoney2Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResUpdateMoney2Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResUpdateMoney2Message_descriptor_;
}

const ResUpdateMoney2Message& ResUpdateMoney2Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ResUpdateMoney2Message* ResUpdateMoney2Message::default_instance_ = NULL;

ResUpdateMoney2Message* ResUpdateMoney2Message::New() const {
  return new ResUpdateMoney2Message;
}

void ResUpdateMoney2Message::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 152;
    money2_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResUpdateMoney2Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ResUpdateMoney2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_money2;
        break;
      }
      
      // required double money2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_money2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &money2_)));
          set_has_money2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResUpdateMoney2Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResUpdateMoney2];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required double money2 = 2;
  if (has_money2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->money2(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResUpdateMoney2Message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResUpdateMoney2];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required double money2 = 2;
  if (has_money2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->money2(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResUpdateMoney2Message::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ResUpdateMoney2];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required double money2 = 2;
    if (has_money2()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResUpdateMoney2Message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResUpdateMoney2Message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResUpdateMoney2Message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResUpdateMoney2Message::MergeFrom(const ResUpdateMoney2Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_money2()) {
      set_money2(from.money2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResUpdateMoney2Message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResUpdateMoney2Message::CopyFrom(const ResUpdateMoney2Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResUpdateMoney2Message::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void ResUpdateMoney2Message::Swap(ResUpdateMoney2Message* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(money2_, other->money2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResUpdateMoney2Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResUpdateMoney2Message_descriptor_;
  metadata.reflection = ResUpdateMoney2Message_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqClientLoadstringMessage::kMsgIDFieldNumber;
const int ReqClientLoadstringMessage::kLualsFieldNumber;
#endif  // !_MSC_VER

ReqClientLoadstringMessage::ReqClientLoadstringMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqClientLoadstringMessage::InitAsDefaultInstance() {
}

ReqClientLoadstringMessage::ReqClientLoadstringMessage(const ReqClientLoadstringMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqClientLoadstringMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 161;
  luals_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqClientLoadstringMessage::~ReqClientLoadstringMessage() {
  SharedDtor();
}

void ReqClientLoadstringMessage::SharedDtor() {
  if (luals_ != &::google::protobuf::internal::kEmptyString) {
    delete luals_;
  }
  if (this != default_instance_) {
  }
}

void ReqClientLoadstringMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqClientLoadstringMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqClientLoadstringMessage_descriptor_;
}

const ReqClientLoadstringMessage& ReqClientLoadstringMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ReqClientLoadstringMessage* ReqClientLoadstringMessage::default_instance_ = NULL;

ReqClientLoadstringMessage* ReqClientLoadstringMessage::New() const {
  return new ReqClientLoadstringMessage;
}

void ReqClientLoadstringMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 161;
    if (has_luals()) {
      if (luals_ != &::google::protobuf::internal::kEmptyString) {
        luals_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqClientLoadstringMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqClientLoadstring];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_luals;
        break;
      }
      
      // required string luals = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_luals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_luals()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->luals().data(), this->luals().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqClientLoadstringMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqClientLoadstring];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required string luals = 2;
  if (has_luals()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->luals().data(), this->luals().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->luals(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqClientLoadstringMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqClientLoadstring];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required string luals = 2;
  if (has_luals()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->luals().data(), this->luals().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->luals(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqClientLoadstringMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqClientLoadstring];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required string luals = 2;
    if (has_luals()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->luals());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqClientLoadstringMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqClientLoadstringMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqClientLoadstringMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqClientLoadstringMessage::MergeFrom(const ReqClientLoadstringMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_luals()) {
      set_luals(from.luals());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqClientLoadstringMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqClientLoadstringMessage::CopyFrom(const ReqClientLoadstringMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqClientLoadstringMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void ReqClientLoadstringMessage::Swap(ReqClientLoadstringMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(luals_, other->luals_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqClientLoadstringMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqClientLoadstringMessage_descriptor_;
  metadata.reflection = ReqClientLoadstringMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResClientLoadstringMessage::kMsgIDFieldNumber;
const int ResClientLoadstringMessage::kLualsFieldNumber;
#endif  // !_MSC_VER

ResClientLoadstringMessage::ResClientLoadstringMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResClientLoadstringMessage::InitAsDefaultInstance() {
}

ResClientLoadstringMessage::ResClientLoadstringMessage(const ResClientLoadstringMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResClientLoadstringMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 162;
  luals_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResClientLoadstringMessage::~ResClientLoadstringMessage() {
  SharedDtor();
}

void ResClientLoadstringMessage::SharedDtor() {
  if (luals_ != &::google::protobuf::internal::kEmptyString) {
    delete luals_;
  }
  if (this != default_instance_) {
  }
}

void ResClientLoadstringMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResClientLoadstringMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResClientLoadstringMessage_descriptor_;
}

const ResClientLoadstringMessage& ResClientLoadstringMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ResClientLoadstringMessage* ResClientLoadstringMessage::default_instance_ = NULL;

ResClientLoadstringMessage* ResClientLoadstringMessage::New() const {
  return new ResClientLoadstringMessage;
}

void ResClientLoadstringMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 162;
    if (has_luals()) {
      if (luals_ != &::google::protobuf::internal::kEmptyString) {
        luals_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResClientLoadstringMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ResClientLoadstring];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_luals;
        break;
      }
      
      // required string luals = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_luals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_luals()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->luals().data(), this->luals().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResClientLoadstringMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResClientLoadstring];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required string luals = 2;
  if (has_luals()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->luals().data(), this->luals().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->luals(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResClientLoadstringMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResClientLoadstring];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required string luals = 2;
  if (has_luals()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->luals().data(), this->luals().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->luals(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResClientLoadstringMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ResClientLoadstring];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required string luals = 2;
    if (has_luals()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->luals());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResClientLoadstringMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResClientLoadstringMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResClientLoadstringMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResClientLoadstringMessage::MergeFrom(const ResClientLoadstringMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_luals()) {
      set_luals(from.luals());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResClientLoadstringMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResClientLoadstringMessage::CopyFrom(const ResClientLoadstringMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResClientLoadstringMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void ResClientLoadstringMessage::Swap(ResClientLoadstringMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(luals_, other->luals_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResClientLoadstringMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResClientLoadstringMessage_descriptor_;
  metadata.reflection = ResClientLoadstringMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqChatMessage::kMsgIDFieldNumber;
const int ReqChatMessage::kChatTypeFieldNumber;
const int ReqChatMessage::kToPlayerIdFieldNumber;
const int ReqChatMessage::kContentFieldNumber;
#endif  // !_MSC_VER

ReqChatMessage::ReqChatMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqChatMessage::InitAsDefaultInstance() {
}

ReqChatMessage::ReqChatMessage(const ReqChatMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqChatMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 163;
  chattype_ = 0;
  toplayerid_ = GOOGLE_LONGLONG(0);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqChatMessage::~ReqChatMessage() {
  SharedDtor();
}

void ReqChatMessage::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void ReqChatMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqChatMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqChatMessage_descriptor_;
}

const ReqChatMessage& ReqChatMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ReqChatMessage* ReqChatMessage::default_instance_ = NULL;

ReqChatMessage* ReqChatMessage::New() const {
  return new ReqChatMessage;
}

void ReqChatMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 163;
    chattype_ = 0;
    toplayerid_ = GOOGLE_LONGLONG(0);
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqChatMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqChat];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chatType;
        break;
      }
      
      // required int32 chatType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chatType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chattype_)));
          set_has_chattype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_toPlayerId;
        break;
      }
      
      // optional int64 toPlayerId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_toPlayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &toplayerid_)));
          set_has_toplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }
      
      // optional string content = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqChatMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqChat];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required int32 chatType = 2;
  if (has_chattype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chattype(), output);
  }
  
  // optional int64 toPlayerId = 3;
  if (has_toplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->toplayerid(), output);
  }
  
  // optional string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->content(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqChatMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqChat];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required int32 chatType = 2;
  if (has_chattype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chattype(), target);
  }
  
  // optional int64 toPlayerId = 3;
  if (has_toplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->toplayerid(), target);
  }
  
  // optional string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->content(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqChatMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqChat];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required int32 chatType = 2;
    if (has_chattype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chattype());
    }
    
    // optional int64 toPlayerId = 3;
    if (has_toplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->toplayerid());
    }
    
    // optional string content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqChatMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqChatMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqChatMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqChatMessage::MergeFrom(const ReqChatMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_chattype()) {
      set_chattype(from.chattype());
    }
    if (from.has_toplayerid()) {
      set_toplayerid(from.toplayerid());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqChatMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqChatMessage::CopyFrom(const ReqChatMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqChatMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void ReqChatMessage::Swap(ReqChatMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(chattype_, other->chattype_);
    std::swap(toplayerid_, other->toplayerid_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqChatMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqChatMessage_descriptor_;
  metadata.reflection = ReqChatMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResChatMessage::kMsgIDFieldNumber;
const int ResChatMessage::kChatTypeFieldNumber;
const int ResChatMessage::kToPlayerIdFieldNumber;
const int ResChatMessage::kContentFieldNumber;
const int ResChatMessage::kIconFieldNumber;
const int ResChatMessage::kVipFieldNumber;
const int ResChatMessage::kNameFieldNumber;
const int ResChatMessage::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

ResChatMessage::ResChatMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResChatMessage::InitAsDefaultInstance() {
}

ResChatMessage::ResChatMessage(const ResChatMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResChatMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 164;
  chattype_ = 0;
  toplayerid_ = GOOGLE_LONGLONG(0);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vip_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResChatMessage::~ResChatMessage() {
  SharedDtor();
}

void ResChatMessage::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ResChatMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResChatMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResChatMessage_descriptor_;
}

const ResChatMessage& ResChatMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ResChatMessage* ResChatMessage::default_instance_ = NULL;

ResChatMessage* ResChatMessage::New() const {
  return new ResChatMessage;
}

void ResChatMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 164;
    chattype_ = 0;
    toplayerid_ = GOOGLE_LONGLONG(0);
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
    vip_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    playerid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResChatMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ResChat];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chatType;
        break;
      }
      
      // required int32 chatType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chatType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chattype_)));
          set_has_chattype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_toPlayerId;
        break;
      }
      
      // optional int64 toPlayerId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_toPlayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &toplayerid_)));
          set_has_toplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }
      
      // optional string content = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_icon;
        break;
      }
      
      // optional string icon = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_vip;
        break;
      }
      
      // optional int32 vip = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_name;
        break;
      }
      
      // optional string name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_playerId;
        break;
      }
      
      // optional int64 playerId = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResChatMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResChat];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required int32 chatType = 2;
  if (has_chattype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chattype(), output);
  }
  
  // optional int64 toPlayerId = 3;
  if (has_toplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->toplayerid(), output);
  }
  
  // optional string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->content(), output);
  }
  
  // optional string icon = 5;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->icon(), output);
  }
  
  // optional int32 vip = 6;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->vip(), output);
  }
  
  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->name(), output);
  }
  
  // optional int64 playerId = 8;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->playerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResChatMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResChat];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required int32 chatType = 2;
  if (has_chattype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chattype(), target);
  }
  
  // optional int64 toPlayerId = 3;
  if (has_toplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->toplayerid(), target);
  }
  
  // optional string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->content(), target);
  }
  
  // optional string icon = 5;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->icon(), target);
  }
  
  // optional int32 vip = 6;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->vip(), target);
  }
  
  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->name(), target);
  }
  
  // optional int64 playerId = 8;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->playerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResChatMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ResChat];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required int32 chatType = 2;
    if (has_chattype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chattype());
    }
    
    // optional int64 toPlayerId = 3;
    if (has_toplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->toplayerid());
    }
    
    // optional string content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }
    
    // optional string icon = 5;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }
    
    // optional int32 vip = 6;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip());
    }
    
    // optional string name = 7;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int64 playerId = 8;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResChatMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResChatMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResChatMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResChatMessage::MergeFrom(const ResChatMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_chattype()) {
      set_chattype(from.chattype());
    }
    if (from.has_toplayerid()) {
      set_toplayerid(from.toplayerid());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_vip()) {
      set_vip(from.vip());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResChatMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResChatMessage::CopyFrom(const ResChatMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResChatMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void ResChatMessage::Swap(ResChatMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(chattype_, other->chattype_);
    std::swap(toplayerid_, other->toplayerid_);
    std::swap(content_, other->content_);
    std::swap(icon_, other->icon_);
    std::swap(vip_, other->vip_);
    std::swap(name_, other->name_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResChatMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResChatMessage_descriptor_;
  metadata.reflection = ResChatMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqTopListDataMessage::kMsgIDFieldNumber;
const int ReqTopListDataMessage::kTypeFieldNumber;
#endif  // !_MSC_VER

ReqTopListDataMessage::ReqTopListDataMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqTopListDataMessage::InitAsDefaultInstance() {
}

ReqTopListDataMessage::ReqTopListDataMessage(const ReqTopListDataMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqTopListDataMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 165;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqTopListDataMessage::~ReqTopListDataMessage() {
  SharedDtor();
}

void ReqTopListDataMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqTopListDataMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqTopListDataMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqTopListDataMessage_descriptor_;
}

const ReqTopListDataMessage& ReqTopListDataMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ReqTopListDataMessage* ReqTopListDataMessage::default_instance_ = NULL;

ReqTopListDataMessage* ReqTopListDataMessage::New() const {
  return new ReqTopListDataMessage;
}

void ReqTopListDataMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 165;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqTopListDataMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqTopListData];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqTopListDataMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqTopListData];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqTopListDataMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqTopListData];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqTopListDataMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqTopListData];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqTopListDataMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqTopListDataMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqTopListDataMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqTopListDataMessage::MergeFrom(const ReqTopListDataMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqTopListDataMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqTopListDataMessage::CopyFrom(const ReqTopListDataMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqTopListDataMessage::IsInitialized() const {
  
  return true;
}

void ReqTopListDataMessage::Swap(ReqTopListDataMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqTopListDataMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqTopListDataMessage_descriptor_;
  metadata.reflection = ReqTopListDataMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResTopListDataMessage::kMsgIDFieldNumber;
const int ResTopListDataMessage::kTypeFieldNumber;
const int ResTopListDataMessage::kMoneyTopDataFieldNumber;
const int ResTopListDataMessage::kCharmTopDataFieldNumber;
const int ResTopListDataMessage::kOnlineTopDataFieldNumber;
const int ResTopListDataMessage::kTotalMoneyTopDataFieldNumber;
const int ResTopListDataMessage::kSelfWinFieldNumber;
const int ResTopListDataMessage::kSelfCharmFieldNumber;
const int ResTopListDataMessage::kSelfOnlineTimeFieldNumber;
const int ResTopListDataMessage::kSelfTotalMoneyFieldNumber;
#endif  // !_MSC_VER

ResTopListDataMessage::ResTopListDataMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResTopListDataMessage::InitAsDefaultInstance() {
}

ResTopListDataMessage::ResTopListDataMessage(const ResTopListDataMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResTopListDataMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 166;
  type_ = 0;
  selfwin_ = 0;
  selfcharm_ = 0;
  selfonlinetime_ = GOOGLE_LONGLONG(0);
  selftotalmoney_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResTopListDataMessage::~ResTopListDataMessage() {
  SharedDtor();
}

void ResTopListDataMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResTopListDataMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResTopListDataMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResTopListDataMessage_descriptor_;
}

const ResTopListDataMessage& ResTopListDataMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ResTopListDataMessage* ResTopListDataMessage::default_instance_ = NULL;

ResTopListDataMessage* ResTopListDataMessage::New() const {
  return new ResTopListDataMessage;
}

void ResTopListDataMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 166;
    type_ = 0;
    selfwin_ = 0;
    selfcharm_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    selfonlinetime_ = GOOGLE_LONGLONG(0);
    selftotalmoney_ = 0;
  }
  moneytopdata_.Clear();
  charmtopdata_.Clear();
  onlinetopdata_.Clear();
  totalmoneytopdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResTopListDataMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ResTopListData];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_moneyTopData;
        break;
      }
      
      // repeated .com.game.proto.MoneyTopData moneyTopData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_moneyTopData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_moneytopdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_moneyTopData;
        if (input->ExpectTag(34)) goto parse_charmTopData;
        break;
      }
      
      // repeated .com.game.proto.CharmTopData charmTopData = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charmTopData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_charmtopdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_charmTopData;
        if (input->ExpectTag(42)) goto parse_onlineTopData;
        break;
      }
      
      // repeated .com.game.proto.OnlineTopData onlineTopData = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_onlineTopData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_onlinetopdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_onlineTopData;
        if (input->ExpectTag(50)) goto parse_totalMoneyTopData;
        break;
      }
      
      // repeated .com.game.proto.TotalMoneyTopData totalMoneyTopData = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_totalMoneyTopData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_totalmoneytopdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_totalMoneyTopData;
        if (input->ExpectTag(57)) goto parse_selfWin;
        break;
      }
      
      // optional double selfWin = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_selfWin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &selfwin_)));
          set_has_selfwin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_selfCharm;
        break;
      }
      
      // optional int32 selfCharm = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selfCharm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selfcharm_)));
          set_has_selfcharm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_selfOnlineTime;
        break;
      }
      
      // optional int64 selfOnlineTime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selfOnlineTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &selfonlinetime_)));
          set_has_selfonlinetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_selfTotalMoney;
        break;
      }
      
      // optional double selfTotalMoney = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_selfTotalMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &selftotalmoney_)));
          set_has_selftotalmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResTopListDataMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResTopListData];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }
  
  // repeated .com.game.proto.MoneyTopData moneyTopData = 3;
  for (int i = 0; i < this->moneytopdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->moneytopdata(i), output);
  }
  
  // repeated .com.game.proto.CharmTopData charmTopData = 4;
  for (int i = 0; i < this->charmtopdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->charmtopdata(i), output);
  }
  
  // repeated .com.game.proto.OnlineTopData onlineTopData = 5;
  for (int i = 0; i < this->onlinetopdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->onlinetopdata(i), output);
  }
  
  // repeated .com.game.proto.TotalMoneyTopData totalMoneyTopData = 6;
  for (int i = 0; i < this->totalmoneytopdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->totalmoneytopdata(i), output);
  }
  
  // optional double selfWin = 7;
  if (has_selfwin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->selfwin(), output);
  }
  
  // optional int32 selfCharm = 8;
  if (has_selfcharm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->selfcharm(), output);
  }
  
  // optional int64 selfOnlineTime = 9;
  if (has_selfonlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->selfonlinetime(), output);
  }
  
  // optional double selfTotalMoney = 10;
  if (has_selftotalmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->selftotalmoney(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResTopListDataMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResTopListData];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }
  
  // repeated .com.game.proto.MoneyTopData moneyTopData = 3;
  for (int i = 0; i < this->moneytopdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->moneytopdata(i), target);
  }
  
  // repeated .com.game.proto.CharmTopData charmTopData = 4;
  for (int i = 0; i < this->charmtopdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->charmtopdata(i), target);
  }
  
  // repeated .com.game.proto.OnlineTopData onlineTopData = 5;
  for (int i = 0; i < this->onlinetopdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->onlinetopdata(i), target);
  }
  
  // repeated .com.game.proto.TotalMoneyTopData totalMoneyTopData = 6;
  for (int i = 0; i < this->totalmoneytopdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->totalmoneytopdata(i), target);
  }
  
  // optional double selfWin = 7;
  if (has_selfwin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->selfwin(), target);
  }
  
  // optional int32 selfCharm = 8;
  if (has_selfcharm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->selfcharm(), target);
  }
  
  // optional int64 selfOnlineTime = 9;
  if (has_selfonlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->selfonlinetime(), target);
  }
  
  // optional double selfTotalMoney = 10;
  if (has_selftotalmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->selftotalmoney(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResTopListDataMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ResTopListData];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional double selfWin = 7;
    if (has_selfwin()) {
      total_size += 1 + 8;
    }
    
    // optional int32 selfCharm = 8;
    if (has_selfcharm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->selfcharm());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 selfOnlineTime = 9;
    if (has_selfonlinetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->selfonlinetime());
    }
    
    // optional double selfTotalMoney = 10;
    if (has_selftotalmoney()) {
      total_size += 1 + 8;
    }
    
  }
  // repeated .com.game.proto.MoneyTopData moneyTopData = 3;
  total_size += 1 * this->moneytopdata_size();
  for (int i = 0; i < this->moneytopdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->moneytopdata(i));
  }
  
  // repeated .com.game.proto.CharmTopData charmTopData = 4;
  total_size += 1 * this->charmtopdata_size();
  for (int i = 0; i < this->charmtopdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->charmtopdata(i));
  }
  
  // repeated .com.game.proto.OnlineTopData onlineTopData = 5;
  total_size += 1 * this->onlinetopdata_size();
  for (int i = 0; i < this->onlinetopdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->onlinetopdata(i));
  }
  
  // repeated .com.game.proto.TotalMoneyTopData totalMoneyTopData = 6;
  total_size += 1 * this->totalmoneytopdata_size();
  for (int i = 0; i < this->totalmoneytopdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->totalmoneytopdata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResTopListDataMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResTopListDataMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResTopListDataMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResTopListDataMessage::MergeFrom(const ResTopListDataMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  moneytopdata_.MergeFrom(from.moneytopdata_);
  charmtopdata_.MergeFrom(from.charmtopdata_);
  onlinetopdata_.MergeFrom(from.onlinetopdata_);
  totalmoneytopdata_.MergeFrom(from.totalmoneytopdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_selfwin()) {
      set_selfwin(from.selfwin());
    }
    if (from.has_selfcharm()) {
      set_selfcharm(from.selfcharm());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_selfonlinetime()) {
      set_selfonlinetime(from.selfonlinetime());
    }
    if (from.has_selftotalmoney()) {
      set_selftotalmoney(from.selftotalmoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResTopListDataMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResTopListDataMessage::CopyFrom(const ResTopListDataMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResTopListDataMessage::IsInitialized() const {
  
  for (int i = 0; i < moneytopdata_size(); i++) {
    if (!this->moneytopdata(i).IsInitialized()) return false;
  }
  for (int i = 0; i < charmtopdata_size(); i++) {
    if (!this->charmtopdata(i).IsInitialized()) return false;
  }
  for (int i = 0; i < onlinetopdata_size(); i++) {
    if (!this->onlinetopdata(i).IsInitialized()) return false;
  }
  for (int i = 0; i < totalmoneytopdata_size(); i++) {
    if (!this->totalmoneytopdata(i).IsInitialized()) return false;
  }
  return true;
}

void ResTopListDataMessage::Swap(ResTopListDataMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(type_, other->type_);
    moneytopdata_.Swap(&other->moneytopdata_);
    charmtopdata_.Swap(&other->charmtopdata_);
    onlinetopdata_.Swap(&other->onlinetopdata_);
    totalmoneytopdata_.Swap(&other->totalmoneytopdata_);
    std::swap(selfwin_, other->selfwin_);
    std::swap(selfcharm_, other->selfcharm_);
    std::swap(selfonlinetime_, other->selfonlinetime_);
    std::swap(selftotalmoney_, other->selftotalmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResTopListDataMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResTopListDataMessage_descriptor_;
  metadata.reflection = ResTopListDataMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoneyTopData::kIdFieldNumber;
const int MoneyTopData::kRankFieldNumber;
const int MoneyTopData::kMoneyFieldNumber;
const int MoneyTopData::kNameFieldNumber;
const int MoneyTopData::kIconFieldNumber;
const int MoneyTopData::kSexFieldNumber;
const int MoneyTopData::kVipFieldNumber;
const int MoneyTopData::kHeadIconFieldNumber;
#endif  // !_MSC_VER

MoneyTopData::MoneyTopData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoneyTopData::InitAsDefaultInstance() {
}

MoneyTopData::MoneyTopData(const MoneyTopData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoneyTopData::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  rank_ = 0;
  money_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0;
  vip_ = 0;
  headicon_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneyTopData::~MoneyTopData() {
  SharedDtor();
}

void MoneyTopData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (this != default_instance_) {
  }
}

void MoneyTopData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoneyTopData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneyTopData_descriptor_;
}

const MoneyTopData& MoneyTopData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

MoneyTopData* MoneyTopData::default_instance_ = NULL;

MoneyTopData* MoneyTopData::New() const {
  return new MoneyTopData;
}

void MoneyTopData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    rank_ = 0;
    money_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
    sex_ = 0;
    vip_ = 0;
    headicon_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoneyTopData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rank;
        break;
      }
      
      // required int32 rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_money;
        break;
      }
      
      // required double money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }
      
      // required string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_icon;
        break;
      }
      
      // required string icon = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sex;
        break;
      }
      
      // required int32 sex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_vip;
        break;
      }
      
      // required int32 vip = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_headIcon;
        break;
      }
      
      // required int32 headIcon = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headIcon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headicon_)));
          set_has_headicon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoneyTopData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }
  
  // required int32 rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rank(), output);
  }
  
  // required double money = 3;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->money(), output);
  }
  
  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }
  
  // required string icon = 5;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->icon(), output);
  }
  
  // required int32 sex = 6;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sex(), output);
  }
  
  // required int32 vip = 7;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->vip(), output);
  }
  
  // required int32 headIcon = 8;
  if (has_headicon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->headicon(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoneyTopData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }
  
  // required int32 rank = 2;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rank(), target);
  }
  
  // required double money = 3;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->money(), target);
  }
  
  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }
  
  // required string icon = 5;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->icon(), target);
  }
  
  // required int32 sex = 6;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sex(), target);
  }
  
  // required int32 vip = 7;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->vip(), target);
  }
  
  // required int32 headIcon = 8;
  if (has_headicon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->headicon(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoneyTopData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }
    
    // required int32 rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }
    
    // required double money = 3;
    if (has_money()) {
      total_size += 1 + 8;
    }
    
    // required string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string icon = 5;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }
    
    // required int32 sex = 6;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }
    
    // required int32 vip = 7;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip());
    }
    
    // required int32 headIcon = 8;
    if (has_headicon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headicon());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneyTopData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoneyTopData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoneyTopData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoneyTopData::MergeFrom(const MoneyTopData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_vip()) {
      set_vip(from.vip());
    }
    if (from.has_headicon()) {
      set_headicon(from.headicon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoneyTopData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneyTopData::CopyFrom(const MoneyTopData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneyTopData::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  return true;
}

void MoneyTopData::Swap(MoneyTopData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(rank_, other->rank_);
    std::swap(money_, other->money_);
    std::swap(name_, other->name_);
    std::swap(icon_, other->icon_);
    std::swap(sex_, other->sex_);
    std::swap(vip_, other->vip_);
    std::swap(headicon_, other->headicon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoneyTopData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoneyTopData_descriptor_;
  metadata.reflection = MoneyTopData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharmTopData::kIdFieldNumber;
const int CharmTopData::kRankFieldNumber;
const int CharmTopData::kCharmFieldNumber;
const int CharmTopData::kNameFieldNumber;
const int CharmTopData::kIconFieldNumber;
const int CharmTopData::kSexFieldNumber;
const int CharmTopData::kVipFieldNumber;
const int CharmTopData::kHeadIconFieldNumber;
#endif  // !_MSC_VER

CharmTopData::CharmTopData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharmTopData::InitAsDefaultInstance() {
}

CharmTopData::CharmTopData(const CharmTopData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharmTopData::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  rank_ = 0;
  charm_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0;
  vip_ = 0;
  headicon_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharmTopData::~CharmTopData() {
  SharedDtor();
}

void CharmTopData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (this != default_instance_) {
  }
}

void CharmTopData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharmTopData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharmTopData_descriptor_;
}

const CharmTopData& CharmTopData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

CharmTopData* CharmTopData::default_instance_ = NULL;

CharmTopData* CharmTopData::New() const {
  return new CharmTopData;
}

void CharmTopData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    rank_ = 0;
    charm_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
    sex_ = 0;
    vip_ = 0;
    headicon_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharmTopData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rank;
        break;
      }
      
      // required int32 rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_charm;
        break;
      }
      
      // required int32 charm = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &charm_)));
          set_has_charm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }
      
      // required string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_icon;
        break;
      }
      
      // required string icon = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sex;
        break;
      }
      
      // required int32 sex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_vip;
        break;
      }
      
      // required int32 vip = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_headIcon;
        break;
      }
      
      // required int32 headIcon = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headIcon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headicon_)));
          set_has_headicon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharmTopData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }
  
  // required int32 rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rank(), output);
  }
  
  // required int32 charm = 3;
  if (has_charm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->charm(), output);
  }
  
  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }
  
  // required string icon = 5;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->icon(), output);
  }
  
  // required int32 sex = 6;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sex(), output);
  }
  
  // required int32 vip = 7;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->vip(), output);
  }
  
  // required int32 headIcon = 8;
  if (has_headicon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->headicon(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharmTopData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }
  
  // required int32 rank = 2;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rank(), target);
  }
  
  // required int32 charm = 3;
  if (has_charm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->charm(), target);
  }
  
  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }
  
  // required string icon = 5;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->icon(), target);
  }
  
  // required int32 sex = 6;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sex(), target);
  }
  
  // required int32 vip = 7;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->vip(), target);
  }
  
  // required int32 headIcon = 8;
  if (has_headicon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->headicon(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharmTopData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }
    
    // required int32 rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }
    
    // required int32 charm = 3;
    if (has_charm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->charm());
    }
    
    // required string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string icon = 5;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }
    
    // required int32 sex = 6;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }
    
    // required int32 vip = 7;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip());
    }
    
    // required int32 headIcon = 8;
    if (has_headicon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headicon());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharmTopData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharmTopData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharmTopData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharmTopData::MergeFrom(const CharmTopData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_charm()) {
      set_charm(from.charm());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_vip()) {
      set_vip(from.vip());
    }
    if (from.has_headicon()) {
      set_headicon(from.headicon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharmTopData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharmTopData::CopyFrom(const CharmTopData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharmTopData::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  return true;
}

void CharmTopData::Swap(CharmTopData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(rank_, other->rank_);
    std::swap(charm_, other->charm_);
    std::swap(name_, other->name_);
    std::swap(icon_, other->icon_);
    std::swap(sex_, other->sex_);
    std::swap(vip_, other->vip_);
    std::swap(headicon_, other->headicon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharmTopData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharmTopData_descriptor_;
  metadata.reflection = CharmTopData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OnlineTopData::kIdFieldNumber;
const int OnlineTopData::kRankFieldNumber;
const int OnlineTopData::kOnlineTimeFieldNumber;
const int OnlineTopData::kNameFieldNumber;
const int OnlineTopData::kIconFieldNumber;
const int OnlineTopData::kSexFieldNumber;
const int OnlineTopData::kVipFieldNumber;
const int OnlineTopData::kTotalMoneyFieldNumber;
const int OnlineTopData::kHeadIconFieldNumber;
#endif  // !_MSC_VER

OnlineTopData::OnlineTopData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OnlineTopData::InitAsDefaultInstance() {
}

OnlineTopData::OnlineTopData(const OnlineTopData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OnlineTopData::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  rank_ = 0;
  onlinetime_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0;
  vip_ = 0;
  totalmoney_ = 0;
  headicon_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OnlineTopData::~OnlineTopData() {
  SharedDtor();
}

void OnlineTopData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (this != default_instance_) {
  }
}

void OnlineTopData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OnlineTopData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OnlineTopData_descriptor_;
}

const OnlineTopData& OnlineTopData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

OnlineTopData* OnlineTopData::default_instance_ = NULL;

OnlineTopData* OnlineTopData::New() const {
  return new OnlineTopData;
}

void OnlineTopData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    rank_ = 0;
    onlinetime_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
    sex_ = 0;
    vip_ = 0;
    totalmoney_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    headicon_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OnlineTopData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rank;
        break;
      }
      
      // required int32 rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_onlineTime;
        break;
      }
      
      // required int64 onlineTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_onlineTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &onlinetime_)));
          set_has_onlinetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }
      
      // required string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_icon;
        break;
      }
      
      // required string icon = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sex;
        break;
      }
      
      // required int32 sex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_vip;
        break;
      }
      
      // required int32 vip = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_totalMoney;
        break;
      }
      
      // required double totalMoney = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_totalMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &totalmoney_)));
          set_has_totalmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_headIcon;
        break;
      }
      
      // required int32 headIcon = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headIcon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headicon_)));
          set_has_headicon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OnlineTopData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }
  
  // required int32 rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rank(), output);
  }
  
  // required int64 onlineTime = 3;
  if (has_onlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->onlinetime(), output);
  }
  
  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }
  
  // required string icon = 5;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->icon(), output);
  }
  
  // required int32 sex = 6;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sex(), output);
  }
  
  // required int32 vip = 7;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->vip(), output);
  }
  
  // required double totalMoney = 8;
  if (has_totalmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->totalmoney(), output);
  }
  
  // required int32 headIcon = 9;
  if (has_headicon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->headicon(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OnlineTopData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }
  
  // required int32 rank = 2;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rank(), target);
  }
  
  // required int64 onlineTime = 3;
  if (has_onlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->onlinetime(), target);
  }
  
  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }
  
  // required string icon = 5;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->icon(), target);
  }
  
  // required int32 sex = 6;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sex(), target);
  }
  
  // required int32 vip = 7;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->vip(), target);
  }
  
  // required double totalMoney = 8;
  if (has_totalmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->totalmoney(), target);
  }
  
  // required int32 headIcon = 9;
  if (has_headicon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->headicon(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OnlineTopData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }
    
    // required int32 rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }
    
    // required int64 onlineTime = 3;
    if (has_onlinetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->onlinetime());
    }
    
    // required string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string icon = 5;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }
    
    // required int32 sex = 6;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }
    
    // required int32 vip = 7;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip());
    }
    
    // required double totalMoney = 8;
    if (has_totalmoney()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 headIcon = 9;
    if (has_headicon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headicon());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OnlineTopData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OnlineTopData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OnlineTopData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OnlineTopData::MergeFrom(const OnlineTopData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_onlinetime()) {
      set_onlinetime(from.onlinetime());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_vip()) {
      set_vip(from.vip());
    }
    if (from.has_totalmoney()) {
      set_totalmoney(from.totalmoney());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_headicon()) {
      set_headicon(from.headicon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OnlineTopData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnlineTopData::CopyFrom(const OnlineTopData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnlineTopData::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;
  
  return true;
}

void OnlineTopData::Swap(OnlineTopData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(rank_, other->rank_);
    std::swap(onlinetime_, other->onlinetime_);
    std::swap(name_, other->name_);
    std::swap(icon_, other->icon_);
    std::swap(sex_, other->sex_);
    std::swap(vip_, other->vip_);
    std::swap(totalmoney_, other->totalmoney_);
    std::swap(headicon_, other->headicon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OnlineTopData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OnlineTopData_descriptor_;
  metadata.reflection = OnlineTopData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TotalMoneyTopData::kIdFieldNumber;
const int TotalMoneyTopData::kRankFieldNumber;
const int TotalMoneyTopData::kTotalMoneyFieldNumber;
const int TotalMoneyTopData::kNameFieldNumber;
const int TotalMoneyTopData::kIconFieldNumber;
const int TotalMoneyTopData::kSexFieldNumber;
const int TotalMoneyTopData::kVipFieldNumber;
const int TotalMoneyTopData::kCharmFieldNumber;
const int TotalMoneyTopData::kHeadIconFieldNumber;
#endif  // !_MSC_VER

TotalMoneyTopData::TotalMoneyTopData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TotalMoneyTopData::InitAsDefaultInstance() {
}

TotalMoneyTopData::TotalMoneyTopData(const TotalMoneyTopData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TotalMoneyTopData::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  rank_ = 0;
  totalmoney_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0;
  vip_ = 0;
  charm_ = 0;
  headicon_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TotalMoneyTopData::~TotalMoneyTopData() {
  SharedDtor();
}

void TotalMoneyTopData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (this != default_instance_) {
  }
}

void TotalMoneyTopData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TotalMoneyTopData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TotalMoneyTopData_descriptor_;
}

const TotalMoneyTopData& TotalMoneyTopData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

TotalMoneyTopData* TotalMoneyTopData::default_instance_ = NULL;

TotalMoneyTopData* TotalMoneyTopData::New() const {
  return new TotalMoneyTopData;
}

void TotalMoneyTopData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    rank_ = 0;
    totalmoney_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
    sex_ = 0;
    vip_ = 0;
    charm_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    headicon_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TotalMoneyTopData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rank;
        break;
      }
      
      // required int32 rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_totalMoney;
        break;
      }
      
      // required double totalMoney = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_totalMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &totalmoney_)));
          set_has_totalmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }
      
      // required string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_icon;
        break;
      }
      
      // required string icon = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sex;
        break;
      }
      
      // required int32 sex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_vip;
        break;
      }
      
      // required int32 vip = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_charm;
        break;
      }
      
      // required int32 charm = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &charm_)));
          set_has_charm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_headIcon;
        break;
      }
      
      // required int32 headIcon = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headIcon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headicon_)));
          set_has_headicon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TotalMoneyTopData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }
  
  // required int32 rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rank(), output);
  }
  
  // required double totalMoney = 3;
  if (has_totalmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->totalmoney(), output);
  }
  
  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }
  
  // required string icon = 5;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->icon(), output);
  }
  
  // required int32 sex = 6;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sex(), output);
  }
  
  // required int32 vip = 7;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->vip(), output);
  }
  
  // required int32 charm = 8;
  if (has_charm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->charm(), output);
  }
  
  // required int32 headIcon = 9;
  if (has_headicon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->headicon(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TotalMoneyTopData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }
  
  // required int32 rank = 2;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rank(), target);
  }
  
  // required double totalMoney = 3;
  if (has_totalmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->totalmoney(), target);
  }
  
  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }
  
  // required string icon = 5;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->icon(), target);
  }
  
  // required int32 sex = 6;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sex(), target);
  }
  
  // required int32 vip = 7;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->vip(), target);
  }
  
  // required int32 charm = 8;
  if (has_charm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->charm(), target);
  }
  
  // required int32 headIcon = 9;
  if (has_headicon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->headicon(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TotalMoneyTopData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }
    
    // required int32 rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }
    
    // required double totalMoney = 3;
    if (has_totalmoney()) {
      total_size += 1 + 8;
    }
    
    // required string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string icon = 5;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }
    
    // required int32 sex = 6;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }
    
    // required int32 vip = 7;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip());
    }
    
    // required int32 charm = 8;
    if (has_charm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->charm());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 headIcon = 9;
    if (has_headicon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headicon());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TotalMoneyTopData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TotalMoneyTopData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TotalMoneyTopData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TotalMoneyTopData::MergeFrom(const TotalMoneyTopData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_totalmoney()) {
      set_totalmoney(from.totalmoney());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_vip()) {
      set_vip(from.vip());
    }
    if (from.has_charm()) {
      set_charm(from.charm());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_headicon()) {
      set_headicon(from.headicon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TotalMoneyTopData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TotalMoneyTopData::CopyFrom(const TotalMoneyTopData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TotalMoneyTopData::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;
  
  return true;
}

void TotalMoneyTopData::Swap(TotalMoneyTopData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(rank_, other->rank_);
    std::swap(totalmoney_, other->totalmoney_);
    std::swap(name_, other->name_);
    std::swap(icon_, other->icon_);
    std::swap(sex_, other->sex_);
    std::swap(vip_, other->vip_);
    std::swap(charm_, other->charm_);
    std::swap(headicon_, other->headicon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TotalMoneyTopData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TotalMoneyTopData_descriptor_;
  metadata.reflection = TotalMoneyTopData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqGameRecordPanelMessage::kMsgIDFieldNumber;
const int ReqGameRecordPanelMessage::kGameIdsFieldNumber;
#endif  // !_MSC_VER

ReqGameRecordPanelMessage::ReqGameRecordPanelMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqGameRecordPanelMessage::InitAsDefaultInstance() {
}

ReqGameRecordPanelMessage::ReqGameRecordPanelMessage(const ReqGameRecordPanelMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqGameRecordPanelMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 180;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqGameRecordPanelMessage::~ReqGameRecordPanelMessage() {
  SharedDtor();
}

void ReqGameRecordPanelMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqGameRecordPanelMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqGameRecordPanelMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqGameRecordPanelMessage_descriptor_;
}

const ReqGameRecordPanelMessage& ReqGameRecordPanelMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ReqGameRecordPanelMessage* ReqGameRecordPanelMessage::default_instance_ = NULL;

ReqGameRecordPanelMessage* ReqGameRecordPanelMessage::New() const {
  return new ReqGameRecordPanelMessage;
}

void ReqGameRecordPanelMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 180;
  }
  gameids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqGameRecordPanelMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqGameRecordPanel];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIds;
        break;
      }
      
      // repeated int32 gameIds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_gameids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_gameids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIds;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqGameRecordPanelMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqGameRecordPanel];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // repeated int32 gameIds = 2;
  for (int i = 0; i < this->gameids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->gameids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqGameRecordPanelMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqGameRecordPanel];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // repeated int32 gameIds = 2;
  for (int i = 0; i < this->gameids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->gameids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqGameRecordPanelMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqGameRecordPanel];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
  }
  // repeated int32 gameIds = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->gameids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->gameids(i));
    }
    total_size += 1 * this->gameids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqGameRecordPanelMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqGameRecordPanelMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqGameRecordPanelMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqGameRecordPanelMessage::MergeFrom(const ReqGameRecordPanelMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  gameids_.MergeFrom(from.gameids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqGameRecordPanelMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGameRecordPanelMessage::CopyFrom(const ReqGameRecordPanelMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGameRecordPanelMessage::IsInitialized() const {
  
  return true;
}

void ReqGameRecordPanelMessage::Swap(ReqGameRecordPanelMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    gameids_.Swap(&other->gameids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqGameRecordPanelMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqGameRecordPanelMessage_descriptor_;
  metadata.reflection = ReqGameRecordPanelMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResGameRecordPanelMessage::kMsgIDFieldNumber;
const int ResGameRecordPanelMessage::kMaxWinMoneyFieldNumber;
const int ResGameRecordPanelMessage::kGameRecordPanelDatasFieldNumber;
#endif  // !_MSC_VER

ResGameRecordPanelMessage::ResGameRecordPanelMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResGameRecordPanelMessage::InitAsDefaultInstance() {
}

ResGameRecordPanelMessage::ResGameRecordPanelMessage(const ResGameRecordPanelMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResGameRecordPanelMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 181;
  maxwinmoney_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResGameRecordPanelMessage::~ResGameRecordPanelMessage() {
  SharedDtor();
}

void ResGameRecordPanelMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResGameRecordPanelMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResGameRecordPanelMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResGameRecordPanelMessage_descriptor_;
}

const ResGameRecordPanelMessage& ResGameRecordPanelMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ResGameRecordPanelMessage* ResGameRecordPanelMessage::default_instance_ = NULL;

ResGameRecordPanelMessage* ResGameRecordPanelMessage::New() const {
  return new ResGameRecordPanelMessage;
}

void ResGameRecordPanelMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 181;
    maxwinmoney_ = 0;
  }
  gamerecordpaneldatas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResGameRecordPanelMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ResGameRecordPanel];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_maxWinMoney;
        break;
      }
      
      // optional double maxWinMoney = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_maxWinMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxwinmoney_)));
          set_has_maxwinmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_gameRecordPanelDatas;
        break;
      }
      
      // repeated .com.game.proto.GameRecordPanelData gameRecordPanelDatas = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameRecordPanelDatas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gamerecordpaneldatas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_gameRecordPanelDatas;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResGameRecordPanelMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResGameRecordPanel];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // optional double maxWinMoney = 2;
  if (has_maxwinmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->maxwinmoney(), output);
  }
  
  // repeated .com.game.proto.GameRecordPanelData gameRecordPanelDatas = 3;
  for (int i = 0; i < this->gamerecordpaneldatas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->gamerecordpaneldatas(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResGameRecordPanelMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResGameRecordPanel];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // optional double maxWinMoney = 2;
  if (has_maxwinmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->maxwinmoney(), target);
  }
  
  // repeated .com.game.proto.GameRecordPanelData gameRecordPanelDatas = 3;
  for (int i = 0; i < this->gamerecordpaneldatas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->gamerecordpaneldatas(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResGameRecordPanelMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ResGameRecordPanel];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional double maxWinMoney = 2;
    if (has_maxwinmoney()) {
      total_size += 1 + 8;
    }
    
  }
  // repeated .com.game.proto.GameRecordPanelData gameRecordPanelDatas = 3;
  total_size += 1 * this->gamerecordpaneldatas_size();
  for (int i = 0; i < this->gamerecordpaneldatas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gamerecordpaneldatas(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResGameRecordPanelMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResGameRecordPanelMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResGameRecordPanelMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResGameRecordPanelMessage::MergeFrom(const ResGameRecordPanelMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  gamerecordpaneldatas_.MergeFrom(from.gamerecordpaneldatas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_maxwinmoney()) {
      set_maxwinmoney(from.maxwinmoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResGameRecordPanelMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResGameRecordPanelMessage::CopyFrom(const ResGameRecordPanelMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResGameRecordPanelMessage::IsInitialized() const {
  
  return true;
}

void ResGameRecordPanelMessage::Swap(ResGameRecordPanelMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(maxwinmoney_, other->maxwinmoney_);
    gamerecordpaneldatas_.Swap(&other->gamerecordpaneldatas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResGameRecordPanelMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResGameRecordPanelMessage_descriptor_;
  metadata.reflection = ResGameRecordPanelMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameRecordPanelData::kGameIdFieldNumber;
const int GameRecordPanelData::kMaxWinMoneyFieldNumber;
const int GameRecordPanelData::kWinCountFieldNumber;
const int GameRecordPanelData::kFailCountFieldNumber;
#endif  // !_MSC_VER

GameRecordPanelData::GameRecordPanelData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameRecordPanelData::InitAsDefaultInstance() {
}

GameRecordPanelData::GameRecordPanelData(const GameRecordPanelData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameRecordPanelData::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  maxwinmoney_ = 0;
  wincount_ = 0;
  failcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameRecordPanelData::~GameRecordPanelData() {
  SharedDtor();
}

void GameRecordPanelData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameRecordPanelData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameRecordPanelData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameRecordPanelData_descriptor_;
}

const GameRecordPanelData& GameRecordPanelData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

GameRecordPanelData* GameRecordPanelData::default_instance_ = NULL;

GameRecordPanelData* GameRecordPanelData::New() const {
  return new GameRecordPanelData;
}

void GameRecordPanelData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    maxwinmoney_ = 0;
    wincount_ = 0;
    failcount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameRecordPanelData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_maxWinMoney;
        break;
      }
      
      // optional double maxWinMoney = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_maxWinMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxwinmoney_)));
          set_has_maxwinmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_winCount;
        break;
      }
      
      // optional int32 winCount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wincount_)));
          set_has_wincount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_failCount;
        break;
      }
      
      // optional int32 failCount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_failCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &failcount_)));
          set_has_failcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameRecordPanelData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // optional double maxWinMoney = 2;
  if (has_maxwinmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->maxwinmoney(), output);
  }
  
  // optional int32 winCount = 3;
  if (has_wincount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wincount(), output);
  }
  
  // optional int32 failCount = 4;
  if (has_failcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->failcount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameRecordPanelData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 gameId = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gameid(), target);
  }
  
  // optional double maxWinMoney = 2;
  if (has_maxwinmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->maxwinmoney(), target);
  }
  
  // optional int32 winCount = 3;
  if (has_wincount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wincount(), target);
  }
  
  // optional int32 failCount = 4;
  if (has_failcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->failcount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameRecordPanelData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameId = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // optional double maxWinMoney = 2;
    if (has_maxwinmoney()) {
      total_size += 1 + 8;
    }
    
    // optional int32 winCount = 3;
    if (has_wincount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wincount());
    }
    
    // optional int32 failCount = 4;
    if (has_failcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->failcount());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameRecordPanelData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameRecordPanelData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameRecordPanelData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameRecordPanelData::MergeFrom(const GameRecordPanelData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_maxwinmoney()) {
      set_maxwinmoney(from.maxwinmoney());
    }
    if (from.has_wincount()) {
      set_wincount(from.wincount());
    }
    if (from.has_failcount()) {
      set_failcount(from.failcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameRecordPanelData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameRecordPanelData::CopyFrom(const GameRecordPanelData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameRecordPanelData::IsInitialized() const {
  
  return true;
}

void GameRecordPanelData::Swap(GameRecordPanelData* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(maxwinmoney_, other->maxwinmoney_);
    std::swap(wincount_, other->wincount_);
    std::swap(failcount_, other->failcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameRecordPanelData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameRecordPanelData_descriptor_;
  metadata.reflection = GameRecordPanelData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqGameRecordDataMessage::kMsgIDFieldNumber;
const int ReqGameRecordDataMessage::kGameIdFieldNumber;
#endif  // !_MSC_VER

ReqGameRecordDataMessage::ReqGameRecordDataMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqGameRecordDataMessage::InitAsDefaultInstance() {
}

ReqGameRecordDataMessage::ReqGameRecordDataMessage(const ReqGameRecordDataMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqGameRecordDataMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 182;
  gameid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqGameRecordDataMessage::~ReqGameRecordDataMessage() {
  SharedDtor();
}

void ReqGameRecordDataMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqGameRecordDataMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqGameRecordDataMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqGameRecordDataMessage_descriptor_;
}

const ReqGameRecordDataMessage& ReqGameRecordDataMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ReqGameRecordDataMessage* ReqGameRecordDataMessage::default_instance_ = NULL;

ReqGameRecordDataMessage* ReqGameRecordDataMessage::New() const {
  return new ReqGameRecordDataMessage;
}

void ReqGameRecordDataMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 182;
    gameid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqGameRecordDataMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqGameRecordData];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameId;
        break;
      }
      
      // required int32 gameId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqGameRecordDataMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqGameRecordData];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required int32 gameId = 2;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqGameRecordDataMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqGameRecordData];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required int32 gameId = 2;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gameid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqGameRecordDataMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqGameRecordData];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required int32 gameId = 2;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqGameRecordDataMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqGameRecordDataMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqGameRecordDataMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqGameRecordDataMessage::MergeFrom(const ReqGameRecordDataMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqGameRecordDataMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGameRecordDataMessage::CopyFrom(const ReqGameRecordDataMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGameRecordDataMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void ReqGameRecordDataMessage::Swap(ReqGameRecordDataMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(gameid_, other->gameid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqGameRecordDataMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqGameRecordDataMessage_descriptor_;
  metadata.reflection = ReqGameRecordDataMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResGameRecordMessage::kMsgIDFieldNumber;
const int ResGameRecordMessage::kGameIdFieldNumber;
const int ResGameRecordMessage::kGameRecordDatasFieldNumber;
#endif  // !_MSC_VER

ResGameRecordMessage::ResGameRecordMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResGameRecordMessage::InitAsDefaultInstance() {
}

ResGameRecordMessage::ResGameRecordMessage(const ResGameRecordMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResGameRecordMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 183;
  gameid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResGameRecordMessage::~ResGameRecordMessage() {
  SharedDtor();
}

void ResGameRecordMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResGameRecordMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResGameRecordMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResGameRecordMessage_descriptor_;
}

const ResGameRecordMessage& ResGameRecordMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ResGameRecordMessage* ResGameRecordMessage::default_instance_ = NULL;

ResGameRecordMessage* ResGameRecordMessage::New() const {
  return new ResGameRecordMessage;
}

void ResGameRecordMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 183;
    gameid_ = 0;
  }
  gamerecorddatas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResGameRecordMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ResGameRecordData];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameId;
        break;
      }
      
      // required int32 gameId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_gameRecordDatas;
        break;
      }
      
      // repeated .com.game.proto.GameRecordData gameRecordDatas = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameRecordDatas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gamerecorddatas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_gameRecordDatas;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResGameRecordMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResGameRecordData];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required int32 gameId = 2;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameid(), output);
  }
  
  // repeated .com.game.proto.GameRecordData gameRecordDatas = 3;
  for (int i = 0; i < this->gamerecorddatas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->gamerecorddatas(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResGameRecordMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResGameRecordData];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required int32 gameId = 2;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gameid(), target);
  }
  
  // repeated .com.game.proto.GameRecordData gameRecordDatas = 3;
  for (int i = 0; i < this->gamerecorddatas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->gamerecorddatas(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResGameRecordMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ResGameRecordData];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required int32 gameId = 2;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
  }
  // repeated .com.game.proto.GameRecordData gameRecordDatas = 3;
  total_size += 1 * this->gamerecorddatas_size();
  for (int i = 0; i < this->gamerecorddatas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gamerecorddatas(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResGameRecordMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResGameRecordMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResGameRecordMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResGameRecordMessage::MergeFrom(const ResGameRecordMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  gamerecorddatas_.MergeFrom(from.gamerecorddatas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResGameRecordMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResGameRecordMessage::CopyFrom(const ResGameRecordMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResGameRecordMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  for (int i = 0; i < gamerecorddatas_size(); i++) {
    if (!this->gamerecorddatas(i).IsInitialized()) return false;
  }
  return true;
}

void ResGameRecordMessage::Swap(ResGameRecordMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(gameid_, other->gameid_);
    gamerecorddatas_.Swap(&other->gamerecorddatas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResGameRecordMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResGameRecordMessage_descriptor_;
  metadata.reflection = ResGameRecordMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameRecordData::kRoundFieldNumber;
const int GameRecordData::kChageMoneyFieldNumber;
const int GameRecordData::kPositionIdsFieldNumber;
const int GameRecordData::kCardDataFieldNumber;
const int GameRecordData::kBetDataFieldNumber;
#endif  // !_MSC_VER

GameRecordData::GameRecordData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameRecordData::InitAsDefaultInstance() {
}

GameRecordData::GameRecordData(const GameRecordData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameRecordData::SharedCtor() {
  _cached_size_ = 0;
  round_ = 0;
  chagemoney_ = 0;
  positionids_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameRecordData::~GameRecordData() {
  SharedDtor();
}

void GameRecordData::SharedDtor() {
  if (positionids_ != &::google::protobuf::internal::kEmptyString) {
    delete positionids_;
  }
  if (this != default_instance_) {
  }
}

void GameRecordData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameRecordData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameRecordData_descriptor_;
}

const GameRecordData& GameRecordData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

GameRecordData* GameRecordData::default_instance_ = NULL;

GameRecordData* GameRecordData::New() const {
  return new GameRecordData;
}

void GameRecordData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    round_ = 0;
    chagemoney_ = 0;
    if (has_positionids()) {
      if (positionids_ != &::google::protobuf::internal::kEmptyString) {
        positionids_->clear();
      }
    }
  }
  carddata_.Clear();
  betdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameRecordData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 round = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_)));
          set_has_round();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_chageMoney;
        break;
      }
      
      // required double chageMoney = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_chageMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &chagemoney_)));
          set_has_chagemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_positionIds;
        break;
      }
      
      // optional string positionIds = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_positionIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_positionids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->positionids().data(), this->positionids().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_cardData;
        break;
      }
      
      // repeated .com.game.proto.CardData cardData = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cardData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_carddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_cardData;
        if (input->ExpectTag(42)) goto parse_betData;
        break;
      }
      
      // repeated .com.game.proto.BetData betData = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_betData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_betdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_betData;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameRecordData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 round = 1;
  if (has_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->round(), output);
  }
  
  // required double chageMoney = 2;
  if (has_chagemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->chagemoney(), output);
  }
  
  // optional string positionIds = 3;
  if (has_positionids()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->positionids().data(), this->positionids().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->positionids(), output);
  }
  
  // repeated .com.game.proto.CardData cardData = 4;
  for (int i = 0; i < this->carddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->carddata(i), output);
  }
  
  // repeated .com.game.proto.BetData betData = 5;
  for (int i = 0; i < this->betdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->betdata(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameRecordData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 round = 1;
  if (has_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->round(), target);
  }
  
  // required double chageMoney = 2;
  if (has_chagemoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->chagemoney(), target);
  }
  
  // optional string positionIds = 3;
  if (has_positionids()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->positionids().data(), this->positionids().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->positionids(), target);
  }
  
  // repeated .com.game.proto.CardData cardData = 4;
  for (int i = 0; i < this->carddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->carddata(i), target);
  }
  
  // repeated .com.game.proto.BetData betData = 5;
  for (int i = 0; i < this->betdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->betdata(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameRecordData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 round = 1;
    if (has_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->round());
    }
    
    // required double chageMoney = 2;
    if (has_chagemoney()) {
      total_size += 1 + 8;
    }
    
    // optional string positionIds = 3;
    if (has_positionids()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->positionids());
    }
    
  }
  // repeated .com.game.proto.CardData cardData = 4;
  total_size += 1 * this->carddata_size();
  for (int i = 0; i < this->carddata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->carddata(i));
  }
  
  // repeated .com.game.proto.BetData betData = 5;
  total_size += 1 * this->betdata_size();
  for (int i = 0; i < this->betdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->betdata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameRecordData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameRecordData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameRecordData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameRecordData::MergeFrom(const GameRecordData& from) {
  GOOGLE_CHECK_NE(&from, this);
  carddata_.MergeFrom(from.carddata_);
  betdata_.MergeFrom(from.betdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_round()) {
      set_round(from.round());
    }
    if (from.has_chagemoney()) {
      set_chagemoney(from.chagemoney());
    }
    if (from.has_positionids()) {
      set_positionids(from.positionids());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameRecordData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameRecordData::CopyFrom(const GameRecordData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameRecordData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < carddata_size(); i++) {
    if (!this->carddata(i).IsInitialized()) return false;
  }
  return true;
}

void GameRecordData::Swap(GameRecordData* other) {
  if (other != this) {
    std::swap(round_, other->round_);
    std::swap(chagemoney_, other->chagemoney_);
    std::swap(positionids_, other->positionids_);
    carddata_.Swap(&other->carddata_);
    betdata_.Swap(&other->betdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameRecordData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameRecordData_descriptor_;
  metadata.reflection = GameRecordData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CardData::kIdFieldNumber;
const int CardData::kPositionIdFieldNumber;
const int CardData::kCardRecordFieldNumber;
const int CardData::kCommonCardRecordFieldNumber;
#endif  // !_MSC_VER

CardData::CardData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CardData::InitAsDefaultInstance() {
}

CardData::CardData(const CardData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CardData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  positionid_ = 0;
  cardrecord_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  commoncardrecord_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CardData::~CardData() {
  SharedDtor();
}

void CardData::SharedDtor() {
  if (cardrecord_ != &::google::protobuf::internal::kEmptyString) {
    delete cardrecord_;
  }
  if (commoncardrecord_ != &::google::protobuf::internal::kEmptyString) {
    delete commoncardrecord_;
  }
  if (this != default_instance_) {
  }
}

void CardData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CardData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CardData_descriptor_;
}

const CardData& CardData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

CardData* CardData::default_instance_ = NULL;

CardData* CardData::New() const {
  return new CardData;
}

void CardData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    positionid_ = 0;
    if (has_cardrecord()) {
      if (cardrecord_ != &::google::protobuf::internal::kEmptyString) {
        cardrecord_->clear();
      }
    }
    if (has_commoncardrecord()) {
      if (commoncardrecord_ != &::google::protobuf::internal::kEmptyString) {
        commoncardrecord_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CardData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_positionId;
        break;
      }
      
      // optional int32 positionId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_positionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &positionid_)));
          set_has_positionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cardRecord;
        break;
      }
      
      // optional string cardRecord = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cardRecord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cardrecord()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cardrecord().data(), this->cardrecord().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_commonCardRecord;
        break;
      }
      
      // optional string commonCardRecord = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commonCardRecord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_commoncardrecord()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->commoncardrecord().data(), this->commoncardrecord().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CardData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 positionId = 2;
  if (has_positionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->positionid(), output);
  }
  
  // optional string cardRecord = 3;
  if (has_cardrecord()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cardrecord().data(), this->cardrecord().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->cardrecord(), output);
  }
  
  // optional string commonCardRecord = 4;
  if (has_commoncardrecord()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->commoncardrecord().data(), this->commoncardrecord().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->commoncardrecord(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CardData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 positionId = 2;
  if (has_positionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->positionid(), target);
  }
  
  // optional string cardRecord = 3;
  if (has_cardrecord()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cardrecord().data(), this->cardrecord().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cardrecord(), target);
  }
  
  // optional string commonCardRecord = 4;
  if (has_commoncardrecord()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->commoncardrecord().data(), this->commoncardrecord().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->commoncardrecord(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CardData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 positionId = 2;
    if (has_positionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->positionid());
    }
    
    // optional string cardRecord = 3;
    if (has_cardrecord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cardrecord());
    }
    
    // optional string commonCardRecord = 4;
    if (has_commoncardrecord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->commoncardrecord());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CardData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CardData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CardData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CardData::MergeFrom(const CardData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_positionid()) {
      set_positionid(from.positionid());
    }
    if (from.has_cardrecord()) {
      set_cardrecord(from.cardrecord());
    }
    if (from.has_commoncardrecord()) {
      set_commoncardrecord(from.commoncardrecord());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CardData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CardData::CopyFrom(const CardData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CardData::Swap(CardData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(positionid_, other->positionid_);
    std::swap(cardrecord_, other->cardrecord_);
    std::swap(commoncardrecord_, other->commoncardrecord_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CardData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CardData_descriptor_;
  metadata.reflection = CardData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BetData::kPositionIdFieldNumber;
const int BetData::kBettingMoneyFieldNumber;
const int BetData::kCardTypeFieldNumber;
const int BetData::kBettingMultipleFieldNumber;
const int BetData::kBettingFieldNumber;
#endif  // !_MSC_VER

BetData::BetData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BetData::InitAsDefaultInstance() {
}

BetData::BetData(const BetData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BetData::SharedCtor() {
  _cached_size_ = 0;
  positionid_ = 0;
  bettingmoney_ = 0;
  cardtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bettingmultiple_ = 0;
  betting_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BetData::~BetData() {
  SharedDtor();
}

void BetData::SharedDtor() {
  if (cardtype_ != &::google::protobuf::internal::kEmptyString) {
    delete cardtype_;
  }
  if (betting_ != &::google::protobuf::internal::kEmptyString) {
    delete betting_;
  }
  if (this != default_instance_) {
  }
}

void BetData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BetData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BetData_descriptor_;
}

const BetData& BetData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

BetData* BetData::default_instance_ = NULL;

BetData* BetData::New() const {
  return new BetData;
}

void BetData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    positionid_ = 0;
    bettingmoney_ = 0;
    if (has_cardtype()) {
      if (cardtype_ != &::google::protobuf::internal::kEmptyString) {
        cardtype_->clear();
      }
    }
    bettingmultiple_ = 0;
    if (has_betting()) {
      if (betting_ != &::google::protobuf::internal::kEmptyString) {
        betting_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BetData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 positionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &positionid_)));
          set_has_positionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_bettingMoney;
        break;
      }
      
      // optional double bettingMoney = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_bettingMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bettingmoney_)));
          set_has_bettingmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cardType;
        break;
      }
      
      // optional string cardType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cardType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cardtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cardtype().data(), this->cardtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bettingMultiple;
        break;
      }
      
      // optional int32 bettingMultiple = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bettingMultiple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bettingmultiple_)));
          set_has_bettingmultiple();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_betting;
        break;
      }
      
      // optional string betting = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_betting:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_betting()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->betting().data(), this->betting().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BetData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 positionId = 1;
  if (has_positionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->positionid(), output);
  }
  
  // optional double bettingMoney = 2;
  if (has_bettingmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->bettingmoney(), output);
  }
  
  // optional string cardType = 3;
  if (has_cardtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cardtype().data(), this->cardtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->cardtype(), output);
  }
  
  // optional int32 bettingMultiple = 4;
  if (has_bettingmultiple()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bettingmultiple(), output);
  }
  
  // optional string betting = 5;
  if (has_betting()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->betting().data(), this->betting().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->betting(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BetData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 positionId = 1;
  if (has_positionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->positionid(), target);
  }
  
  // optional double bettingMoney = 2;
  if (has_bettingmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->bettingmoney(), target);
  }
  
  // optional string cardType = 3;
  if (has_cardtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cardtype().data(), this->cardtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cardtype(), target);
  }
  
  // optional int32 bettingMultiple = 4;
  if (has_bettingmultiple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bettingmultiple(), target);
  }
  
  // optional string betting = 5;
  if (has_betting()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->betting().data(), this->betting().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->betting(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BetData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 positionId = 1;
    if (has_positionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->positionid());
    }
    
    // optional double bettingMoney = 2;
    if (has_bettingmoney()) {
      total_size += 1 + 8;
    }
    
    // optional string cardType = 3;
    if (has_cardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cardtype());
    }
    
    // optional int32 bettingMultiple = 4;
    if (has_bettingmultiple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bettingmultiple());
    }
    
    // optional string betting = 5;
    if (has_betting()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->betting());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BetData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BetData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BetData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BetData::MergeFrom(const BetData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_positionid()) {
      set_positionid(from.positionid());
    }
    if (from.has_bettingmoney()) {
      set_bettingmoney(from.bettingmoney());
    }
    if (from.has_cardtype()) {
      set_cardtype(from.cardtype());
    }
    if (from.has_bettingmultiple()) {
      set_bettingmultiple(from.bettingmultiple());
    }
    if (from.has_betting()) {
      set_betting(from.betting());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BetData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BetData::CopyFrom(const BetData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BetData::IsInitialized() const {
  
  return true;
}

void BetData::Swap(BetData* other) {
  if (other != this) {
    std::swap(positionid_, other->positionid_);
    std::swap(bettingmoney_, other->bettingmoney_);
    std::swap(cardtype_, other->cardtype_);
    std::swap(bettingmultiple_, other->bettingmultiple_);
    std::swap(betting_, other->betting_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BetData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BetData_descriptor_;
  metadata.reflection = BetData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqSaveMoneyMessage::kMsgIDFieldNumber;
const int ReqSaveMoneyMessage::kSaveMoneyFieldNumber;
const int ReqSaveMoneyMessage::kPasswordFieldNumber;
#endif  // !_MSC_VER

ReqSaveMoneyMessage::ReqSaveMoneyMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqSaveMoneyMessage::InitAsDefaultInstance() {
}

ReqSaveMoneyMessage::ReqSaveMoneyMessage(const ReqSaveMoneyMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqSaveMoneyMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 167;
  savemoney_ = 0;
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqSaveMoneyMessage::~ReqSaveMoneyMessage() {
  SharedDtor();
}

void ReqSaveMoneyMessage::SharedDtor() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void ReqSaveMoneyMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqSaveMoneyMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqSaveMoneyMessage_descriptor_;
}

const ReqSaveMoneyMessage& ReqSaveMoneyMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ReqSaveMoneyMessage* ReqSaveMoneyMessage::default_instance_ = NULL;

ReqSaveMoneyMessage* ReqSaveMoneyMessage::New() const {
  return new ReqSaveMoneyMessage;
}

void ReqSaveMoneyMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 167;
    savemoney_ = 0;
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqSaveMoneyMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqSaveMoney];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_saveMoney;
        break;
      }
      
      // required double saveMoney = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_saveMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &savemoney_)));
          set_has_savemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }
      
      // required string password = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqSaveMoneyMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqSaveMoney];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required double saveMoney = 2;
  if (has_savemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->savemoney(), output);
  }
  
  // required string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->password(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqSaveMoneyMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqSaveMoney];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required double saveMoney = 2;
  if (has_savemoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->savemoney(), target);
  }
  
  // required string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqSaveMoneyMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqSaveMoney];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required double saveMoney = 2;
    if (has_savemoney()) {
      total_size += 1 + 8;
    }
    
    // required string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqSaveMoneyMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqSaveMoneyMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqSaveMoneyMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqSaveMoneyMessage::MergeFrom(const ReqSaveMoneyMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_savemoney()) {
      set_savemoney(from.savemoney());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqSaveMoneyMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSaveMoneyMessage::CopyFrom(const ReqSaveMoneyMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSaveMoneyMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  return true;
}

void ReqSaveMoneyMessage::Swap(ReqSaveMoneyMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(savemoney_, other->savemoney_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqSaveMoneyMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqSaveMoneyMessage_descriptor_;
  metadata.reflection = ReqSaveMoneyMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqDrawMoneyMessage::kMsgIDFieldNumber;
const int ReqDrawMoneyMessage::kDrawMoneyFieldNumber;
const int ReqDrawMoneyMessage::kPasswordFieldNumber;
#endif  // !_MSC_VER

ReqDrawMoneyMessage::ReqDrawMoneyMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqDrawMoneyMessage::InitAsDefaultInstance() {
}

ReqDrawMoneyMessage::ReqDrawMoneyMessage(const ReqDrawMoneyMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqDrawMoneyMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 168;
  drawmoney_ = 0;
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqDrawMoneyMessage::~ReqDrawMoneyMessage() {
  SharedDtor();
}

void ReqDrawMoneyMessage::SharedDtor() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void ReqDrawMoneyMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqDrawMoneyMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqDrawMoneyMessage_descriptor_;
}

const ReqDrawMoneyMessage& ReqDrawMoneyMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ReqDrawMoneyMessage* ReqDrawMoneyMessage::default_instance_ = NULL;

ReqDrawMoneyMessage* ReqDrawMoneyMessage::New() const {
  return new ReqDrawMoneyMessage;
}

void ReqDrawMoneyMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 168;
    drawmoney_ = 0;
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqDrawMoneyMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqDrawMoney];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_drawMoney;
        break;
      }
      
      // required double drawMoney = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_drawMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &drawmoney_)));
          set_has_drawmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }
      
      // required string password = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqDrawMoneyMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqDrawMoney];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required double drawMoney = 2;
  if (has_drawmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->drawmoney(), output);
  }
  
  // required string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->password(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqDrawMoneyMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqDrawMoney];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required double drawMoney = 2;
  if (has_drawmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->drawmoney(), target);
  }
  
  // required string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqDrawMoneyMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqDrawMoney];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required double drawMoney = 2;
    if (has_drawmoney()) {
      total_size += 1 + 8;
    }
    
    // required string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqDrawMoneyMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqDrawMoneyMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqDrawMoneyMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqDrawMoneyMessage::MergeFrom(const ReqDrawMoneyMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_drawmoney()) {
      set_drawmoney(from.drawmoney());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqDrawMoneyMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqDrawMoneyMessage::CopyFrom(const ReqDrawMoneyMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqDrawMoneyMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  return true;
}

void ReqDrawMoneyMessage::Swap(ReqDrawMoneyMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(drawmoney_, other->drawmoney_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqDrawMoneyMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqDrawMoneyMessage_descriptor_;
  metadata.reflection = ReqDrawMoneyMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResNoticeMessage::kMsgIDFieldNumber;
const int ResNoticeMessage::kNoticeFieldNumber;
#endif  // !_MSC_VER

ResNoticeMessage::ResNoticeMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResNoticeMessage::InitAsDefaultInstance() {
}

ResNoticeMessage::ResNoticeMessage(const ResNoticeMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResNoticeMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 170;
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResNoticeMessage::~ResNoticeMessage() {
  SharedDtor();
}

void ResNoticeMessage::SharedDtor() {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (this != default_instance_) {
  }
}

void ResNoticeMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResNoticeMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResNoticeMessage_descriptor_;
}

const ResNoticeMessage& ResNoticeMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ResNoticeMessage* ResNoticeMessage::default_instance_ = NULL;

ResNoticeMessage* ResNoticeMessage::New() const {
  return new ResNoticeMessage;
}

void ResNoticeMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 170;
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::kEmptyString) {
        notice_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResNoticeMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ResNotice];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_notice;
        break;
      }
      
      // required string notice = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->notice().data(), this->notice().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResNoticeMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResNotice];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required string notice = 3;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->notice(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResNoticeMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResNotice];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required string notice = 3;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->notice(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResNoticeMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ResNotice];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required string notice = 3;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notice());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResNoticeMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResNoticeMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResNoticeMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResNoticeMessage::MergeFrom(const ResNoticeMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_notice()) {
      set_notice(from.notice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResNoticeMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResNoticeMessage::CopyFrom(const ResNoticeMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResNoticeMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void ResNoticeMessage::Swap(ResNoticeMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(notice_, other->notice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResNoticeMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResNoticeMessage_descriptor_;
  metadata.reflection = ResNoticeMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqModifyPlayerInfoMessage::kMsgIDFieldNumber;
const int ReqModifyPlayerInfoMessage::kNameFieldNumber;
const int ReqModifyPlayerInfoMessage::kIconFieldNumber;
const int ReqModifyPlayerInfoMessage::kSexFieldNumber;
const int ReqModifyPlayerInfoMessage::kSignatureFieldNumber;
#endif  // !_MSC_VER

ReqModifyPlayerInfoMessage::ReqModifyPlayerInfoMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqModifyPlayerInfoMessage::InitAsDefaultInstance() {
}

ReqModifyPlayerInfoMessage::ReqModifyPlayerInfoMessage(const ReqModifyPlayerInfoMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqModifyPlayerInfoMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 171;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0;
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqModifyPlayerInfoMessage::~ReqModifyPlayerInfoMessage() {
  SharedDtor();
}

void ReqModifyPlayerInfoMessage::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (this != default_instance_) {
  }
}

void ReqModifyPlayerInfoMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqModifyPlayerInfoMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqModifyPlayerInfoMessage_descriptor_;
}

const ReqModifyPlayerInfoMessage& ReqModifyPlayerInfoMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ReqModifyPlayerInfoMessage* ReqModifyPlayerInfoMessage::default_instance_ = NULL;

ReqModifyPlayerInfoMessage* ReqModifyPlayerInfoMessage::New() const {
  return new ReqModifyPlayerInfoMessage;
}

void ReqModifyPlayerInfoMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 171;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
    sex_ = 0;
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::kEmptyString) {
        signature_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqModifyPlayerInfoMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqModifyPlayerInfo];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_icon;
        break;
      }
      
      // optional string icon = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sex;
        break;
      }
      
      // optional int32 sex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_signature;
        break;
      }
      
      // optional string signature = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqModifyPlayerInfoMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqModifyPlayerInfo];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional string icon = 3;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->icon(), output);
  }
  
  // optional int32 sex = 4;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sex(), output);
  }
  
  // optional string signature = 5;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->signature(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqModifyPlayerInfoMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqModifyPlayerInfo];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional string icon = 3;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->icon(), target);
  }
  
  // optional int32 sex = 4;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sex(), target);
  }
  
  // optional string signature = 5;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->signature(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqModifyPlayerInfoMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqModifyPlayerInfo];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string icon = 3;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }
    
    // optional int32 sex = 4;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }
    
    // optional string signature = 5;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signature());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqModifyPlayerInfoMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqModifyPlayerInfoMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqModifyPlayerInfoMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqModifyPlayerInfoMessage::MergeFrom(const ReqModifyPlayerInfoMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_signature()) {
      set_signature(from.signature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqModifyPlayerInfoMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqModifyPlayerInfoMessage::CopyFrom(const ReqModifyPlayerInfoMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqModifyPlayerInfoMessage::IsInitialized() const {
  
  return true;
}

void ReqModifyPlayerInfoMessage::Swap(ReqModifyPlayerInfoMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(name_, other->name_);
    std::swap(icon_, other->icon_);
    std::swap(sex_, other->sex_);
    std::swap(signature_, other->signature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqModifyPlayerInfoMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqModifyPlayerInfoMessage_descriptor_;
  metadata.reflection = ReqModifyPlayerInfoMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResModifyPlayerInfoMessage::kMsgIDFieldNumber;
const int ResModifyPlayerInfoMessage::kNameFieldNumber;
const int ResModifyPlayerInfoMessage::kIconFieldNumber;
const int ResModifyPlayerInfoMessage::kSexFieldNumber;
const int ResModifyPlayerInfoMessage::kSignatureFieldNumber;
#endif  // !_MSC_VER

ResModifyPlayerInfoMessage::ResModifyPlayerInfoMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResModifyPlayerInfoMessage::InitAsDefaultInstance() {
}

ResModifyPlayerInfoMessage::ResModifyPlayerInfoMessage(const ResModifyPlayerInfoMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResModifyPlayerInfoMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 172;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0;
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResModifyPlayerInfoMessage::~ResModifyPlayerInfoMessage() {
  SharedDtor();
}

void ResModifyPlayerInfoMessage::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (this != default_instance_) {
  }
}

void ResModifyPlayerInfoMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResModifyPlayerInfoMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResModifyPlayerInfoMessage_descriptor_;
}

const ResModifyPlayerInfoMessage& ResModifyPlayerInfoMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ResModifyPlayerInfoMessage* ResModifyPlayerInfoMessage::default_instance_ = NULL;

ResModifyPlayerInfoMessage* ResModifyPlayerInfoMessage::New() const {
  return new ResModifyPlayerInfoMessage;
}

void ResModifyPlayerInfoMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 172;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
    sex_ = 0;
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::kEmptyString) {
        signature_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResModifyPlayerInfoMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ResModifyPlayerInfo];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_icon;
        break;
      }
      
      // optional string icon = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sex;
        break;
      }
      
      // optional int32 sex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_signature;
        break;
      }
      
      // optional string signature = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResModifyPlayerInfoMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResModifyPlayerInfo];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional string icon = 3;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->icon(), output);
  }
  
  // optional int32 sex = 4;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sex(), output);
  }
  
  // optional string signature = 5;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->signature(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResModifyPlayerInfoMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResModifyPlayerInfo];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional string icon = 3;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->icon(), target);
  }
  
  // optional int32 sex = 4;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sex(), target);
  }
  
  // optional string signature = 5;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->signature(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResModifyPlayerInfoMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ResModifyPlayerInfo];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string icon = 3;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }
    
    // optional int32 sex = 4;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }
    
    // optional string signature = 5;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signature());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResModifyPlayerInfoMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResModifyPlayerInfoMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResModifyPlayerInfoMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResModifyPlayerInfoMessage::MergeFrom(const ResModifyPlayerInfoMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_signature()) {
      set_signature(from.signature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResModifyPlayerInfoMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResModifyPlayerInfoMessage::CopyFrom(const ResModifyPlayerInfoMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResModifyPlayerInfoMessage::IsInitialized() const {
  
  return true;
}

void ResModifyPlayerInfoMessage::Swap(ResModifyPlayerInfoMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(name_, other->name_);
    std::swap(icon_, other->icon_);
    std::swap(sex_, other->sex_);
    std::swap(signature_, other->signature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResModifyPlayerInfoMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResModifyPlayerInfoMessage_descriptor_;
  metadata.reflection = ResModifyPlayerInfoMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqModifyBankPassWordMessage::kMsgIDFieldNumber;
const int ReqModifyBankPassWordMessage::kTypeFieldNumber;
const int ReqModifyBankPassWordMessage::kBankOldPasswordFieldNumber;
const int ReqModifyBankPassWordMessage::kBankNewPasswordFieldNumber;
const int ReqModifyBankPassWordMessage::kPhoneFieldNumber;
const int ReqModifyBankPassWordMessage::kVerifyFieldNumber;
#endif  // !_MSC_VER

ReqModifyBankPassWordMessage::ReqModifyBankPassWordMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqModifyBankPassWordMessage::InitAsDefaultInstance() {
}

ReqModifyBankPassWordMessage::ReqModifyBankPassWordMessage(const ReqModifyBankPassWordMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqModifyBankPassWordMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 173;
  type_ = 0;
  bankoldpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  banknewpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  verify_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqModifyBankPassWordMessage::~ReqModifyBankPassWordMessage() {
  SharedDtor();
}

void ReqModifyBankPassWordMessage::SharedDtor() {
  if (bankoldpassword_ != &::google::protobuf::internal::kEmptyString) {
    delete bankoldpassword_;
  }
  if (banknewpassword_ != &::google::protobuf::internal::kEmptyString) {
    delete banknewpassword_;
  }
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_;
  }
  if (verify_ != &::google::protobuf::internal::kEmptyString) {
    delete verify_;
  }
  if (this != default_instance_) {
  }
}

void ReqModifyBankPassWordMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqModifyBankPassWordMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqModifyBankPassWordMessage_descriptor_;
}

const ReqModifyBankPassWordMessage& ReqModifyBankPassWordMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ReqModifyBankPassWordMessage* ReqModifyBankPassWordMessage::default_instance_ = NULL;

ReqModifyBankPassWordMessage* ReqModifyBankPassWordMessage::New() const {
  return new ReqModifyBankPassWordMessage;
}

void ReqModifyBankPassWordMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 173;
    type_ = 0;
    if (has_bankoldpassword()) {
      if (bankoldpassword_ != &::google::protobuf::internal::kEmptyString) {
        bankoldpassword_->clear();
      }
    }
    if (has_banknewpassword()) {
      if (banknewpassword_ != &::google::protobuf::internal::kEmptyString) {
        banknewpassword_->clear();
      }
    }
    if (has_phone()) {
      if (phone_ != &::google::protobuf::internal::kEmptyString) {
        phone_->clear();
      }
    }
    if (has_verify()) {
      if (verify_ != &::google::protobuf::internal::kEmptyString) {
        verify_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqModifyBankPassWordMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqModifyBankPassWord];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bankOldPassword;
        break;
      }
      
      // optional string bankOldPassword = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankOldPassword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bankoldpassword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bankoldpassword().data(), this->bankoldpassword().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_bankNewPassword;
        break;
      }
      
      // optional string bankNewPassword = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankNewPassword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_banknewpassword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->banknewpassword().data(), this->banknewpassword().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_phone;
        break;
      }
      
      // optional string phone = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phone().data(), this->phone().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_verify;
        break;
      }
      
      // optional string verify = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_verify:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verify()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->verify().data(), this->verify().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqModifyBankPassWordMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqModifyBankPassWord];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }
  
  // optional string bankOldPassword = 3;
  if (has_bankoldpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankoldpassword().data(), this->bankoldpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->bankoldpassword(), output);
  }
  
  // optional string bankNewPassword = 4;
  if (has_banknewpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->banknewpassword().data(), this->banknewpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->banknewpassword(), output);
  }
  
  // optional string phone = 5;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->phone(), output);
  }
  
  // optional string verify = 6;
  if (has_verify()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->verify().data(), this->verify().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->verify(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqModifyBankPassWordMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqModifyBankPassWord];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }
  
  // optional string bankOldPassword = 3;
  if (has_bankoldpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankoldpassword().data(), this->bankoldpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bankoldpassword(), target);
  }
  
  // optional string bankNewPassword = 4;
  if (has_banknewpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->banknewpassword().data(), this->banknewpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->banknewpassword(), target);
  }
  
  // optional string phone = 5;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->phone(), target);
  }
  
  // optional string verify = 6;
  if (has_verify()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->verify().data(), this->verify().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->verify(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqModifyBankPassWordMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqModifyBankPassWord];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional string bankOldPassword = 3;
    if (has_bankoldpassword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bankoldpassword());
    }
    
    // optional string bankNewPassword = 4;
    if (has_banknewpassword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->banknewpassword());
    }
    
    // optional string phone = 5;
    if (has_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone());
    }
    
    // optional string verify = 6;
    if (has_verify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->verify());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqModifyBankPassWordMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqModifyBankPassWordMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqModifyBankPassWordMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqModifyBankPassWordMessage::MergeFrom(const ReqModifyBankPassWordMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_bankoldpassword()) {
      set_bankoldpassword(from.bankoldpassword());
    }
    if (from.has_banknewpassword()) {
      set_banknewpassword(from.banknewpassword());
    }
    if (from.has_phone()) {
      set_phone(from.phone());
    }
    if (from.has_verify()) {
      set_verify(from.verify());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqModifyBankPassWordMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqModifyBankPassWordMessage::CopyFrom(const ReqModifyBankPassWordMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqModifyBankPassWordMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void ReqModifyBankPassWordMessage::Swap(ReqModifyBankPassWordMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(type_, other->type_);
    std::swap(bankoldpassword_, other->bankoldpassword_);
    std::swap(banknewpassword_, other->banknewpassword_);
    std::swap(phone_, other->phone_);
    std::swap(verify_, other->verify_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqModifyBankPassWordMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqModifyBankPassWordMessage_descriptor_;
  metadata.reflection = ReqModifyBankPassWordMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResModifyBankPassWordMessage::kMsgIDFieldNumber;
const int ResModifyBankPassWordMessage::kCodeFieldNumber;
#endif  // !_MSC_VER

ResModifyBankPassWordMessage::ResModifyBankPassWordMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResModifyBankPassWordMessage::InitAsDefaultInstance() {
}

ResModifyBankPassWordMessage::ResModifyBankPassWordMessage(const ResModifyBankPassWordMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResModifyBankPassWordMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 174;
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResModifyBankPassWordMessage::~ResModifyBankPassWordMessage() {
  SharedDtor();
}

void ResModifyBankPassWordMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResModifyBankPassWordMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResModifyBankPassWordMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResModifyBankPassWordMessage_descriptor_;
}

const ResModifyBankPassWordMessage& ResModifyBankPassWordMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ResModifyBankPassWordMessage* ResModifyBankPassWordMessage::default_instance_ = NULL;

ResModifyBankPassWordMessage* ResModifyBankPassWordMessage::New() const {
  return new ResModifyBankPassWordMessage;
}

void ResModifyBankPassWordMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 174;
    code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResModifyBankPassWordMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ResModifyBankPassWord];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_code;
        break;
      }
      
      // optional int32 code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResModifyBankPassWordMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResModifyBankPassWord];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // optional int32 code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResModifyBankPassWordMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResModifyBankPassWord];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // optional int32 code = 2;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResModifyBankPassWordMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ResModifyBankPassWord];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional int32 code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResModifyBankPassWordMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResModifyBankPassWordMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResModifyBankPassWordMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResModifyBankPassWordMessage::MergeFrom(const ResModifyBankPassWordMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResModifyBankPassWordMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResModifyBankPassWordMessage::CopyFrom(const ResModifyBankPassWordMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResModifyBankPassWordMessage::IsInitialized() const {
  
  return true;
}

void ResModifyBankPassWordMessage::Swap(ResModifyBankPassWordMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResModifyBankPassWordMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResModifyBankPassWordMessage_descriptor_;
  metadata.reflection = ResModifyBankPassWordMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqModifyLoginPassWordMessage::kMsgIDFieldNumber;
const int ReqModifyLoginPassWordMessage::kTypeFieldNumber;
const int ReqModifyLoginPassWordMessage::kBankOldPasswordFieldNumber;
const int ReqModifyLoginPassWordMessage::kBankNewPasswordFieldNumber;
const int ReqModifyLoginPassWordMessage::kPhoneFieldNumber;
const int ReqModifyLoginPassWordMessage::kVerifyFieldNumber;
#endif  // !_MSC_VER

ReqModifyLoginPassWordMessage::ReqModifyLoginPassWordMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqModifyLoginPassWordMessage::InitAsDefaultInstance() {
}

ReqModifyLoginPassWordMessage::ReqModifyLoginPassWordMessage(const ReqModifyLoginPassWordMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqModifyLoginPassWordMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 175;
  type_ = 0;
  bankoldpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  banknewpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  verify_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqModifyLoginPassWordMessage::~ReqModifyLoginPassWordMessage() {
  SharedDtor();
}

void ReqModifyLoginPassWordMessage::SharedDtor() {
  if (bankoldpassword_ != &::google::protobuf::internal::kEmptyString) {
    delete bankoldpassword_;
  }
  if (banknewpassword_ != &::google::protobuf::internal::kEmptyString) {
    delete banknewpassword_;
  }
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_;
  }
  if (verify_ != &::google::protobuf::internal::kEmptyString) {
    delete verify_;
  }
  if (this != default_instance_) {
  }
}

void ReqModifyLoginPassWordMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqModifyLoginPassWordMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqModifyLoginPassWordMessage_descriptor_;
}

const ReqModifyLoginPassWordMessage& ReqModifyLoginPassWordMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ReqModifyLoginPassWordMessage* ReqModifyLoginPassWordMessage::default_instance_ = NULL;

ReqModifyLoginPassWordMessage* ReqModifyLoginPassWordMessage::New() const {
  return new ReqModifyLoginPassWordMessage;
}

void ReqModifyLoginPassWordMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 175;
    type_ = 0;
    if (has_bankoldpassword()) {
      if (bankoldpassword_ != &::google::protobuf::internal::kEmptyString) {
        bankoldpassword_->clear();
      }
    }
    if (has_banknewpassword()) {
      if (banknewpassword_ != &::google::protobuf::internal::kEmptyString) {
        banknewpassword_->clear();
      }
    }
    if (has_phone()) {
      if (phone_ != &::google::protobuf::internal::kEmptyString) {
        phone_->clear();
      }
    }
    if (has_verify()) {
      if (verify_ != &::google::protobuf::internal::kEmptyString) {
        verify_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqModifyLoginPassWordMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqModifyLoginPassWord];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bankOldPassword;
        break;
      }
      
      // optional string bankOldPassword = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankOldPassword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bankoldpassword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bankoldpassword().data(), this->bankoldpassword().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_bankNewPassword;
        break;
      }
      
      // optional string bankNewPassword = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankNewPassword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_banknewpassword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->banknewpassword().data(), this->banknewpassword().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_phone;
        break;
      }
      
      // optional string phone = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phone().data(), this->phone().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_verify;
        break;
      }
      
      // optional string verify = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_verify:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verify()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->verify().data(), this->verify().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqModifyLoginPassWordMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqModifyLoginPassWord];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }
  
  // optional string bankOldPassword = 3;
  if (has_bankoldpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankoldpassword().data(), this->bankoldpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->bankoldpassword(), output);
  }
  
  // optional string bankNewPassword = 4;
  if (has_banknewpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->banknewpassword().data(), this->banknewpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->banknewpassword(), output);
  }
  
  // optional string phone = 5;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->phone(), output);
  }
  
  // optional string verify = 6;
  if (has_verify()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->verify().data(), this->verify().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->verify(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqModifyLoginPassWordMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqModifyLoginPassWord];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }
  
  // optional string bankOldPassword = 3;
  if (has_bankoldpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankoldpassword().data(), this->bankoldpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bankoldpassword(), target);
  }
  
  // optional string bankNewPassword = 4;
  if (has_banknewpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->banknewpassword().data(), this->banknewpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->banknewpassword(), target);
  }
  
  // optional string phone = 5;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->phone(), target);
  }
  
  // optional string verify = 6;
  if (has_verify()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->verify().data(), this->verify().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->verify(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqModifyLoginPassWordMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqModifyLoginPassWord];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional string bankOldPassword = 3;
    if (has_bankoldpassword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bankoldpassword());
    }
    
    // optional string bankNewPassword = 4;
    if (has_banknewpassword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->banknewpassword());
    }
    
    // optional string phone = 5;
    if (has_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone());
    }
    
    // optional string verify = 6;
    if (has_verify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->verify());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqModifyLoginPassWordMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqModifyLoginPassWordMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqModifyLoginPassWordMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqModifyLoginPassWordMessage::MergeFrom(const ReqModifyLoginPassWordMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_bankoldpassword()) {
      set_bankoldpassword(from.bankoldpassword());
    }
    if (from.has_banknewpassword()) {
      set_banknewpassword(from.banknewpassword());
    }
    if (from.has_phone()) {
      set_phone(from.phone());
    }
    if (from.has_verify()) {
      set_verify(from.verify());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqModifyLoginPassWordMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqModifyLoginPassWordMessage::CopyFrom(const ReqModifyLoginPassWordMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqModifyLoginPassWordMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void ReqModifyLoginPassWordMessage::Swap(ReqModifyLoginPassWordMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(type_, other->type_);
    std::swap(bankoldpassword_, other->bankoldpassword_);
    std::swap(banknewpassword_, other->banknewpassword_);
    std::swap(phone_, other->phone_);
    std::swap(verify_, other->verify_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqModifyLoginPassWordMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqModifyLoginPassWordMessage_descriptor_;
  metadata.reflection = ReqModifyLoginPassWordMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResModifyLoginPassWordMessage::kMsgIDFieldNumber;
const int ResModifyLoginPassWordMessage::kCodeFieldNumber;
#endif  // !_MSC_VER

ResModifyLoginPassWordMessage::ResModifyLoginPassWordMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResModifyLoginPassWordMessage::InitAsDefaultInstance() {
}

ResModifyLoginPassWordMessage::ResModifyLoginPassWordMessage(const ResModifyLoginPassWordMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResModifyLoginPassWordMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 176;
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResModifyLoginPassWordMessage::~ResModifyLoginPassWordMessage() {
  SharedDtor();
}

void ResModifyLoginPassWordMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResModifyLoginPassWordMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResModifyLoginPassWordMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResModifyLoginPassWordMessage_descriptor_;
}

const ResModifyLoginPassWordMessage& ResModifyLoginPassWordMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ResModifyLoginPassWordMessage* ResModifyLoginPassWordMessage::default_instance_ = NULL;

ResModifyLoginPassWordMessage* ResModifyLoginPassWordMessage::New() const {
  return new ResModifyLoginPassWordMessage;
}

void ResModifyLoginPassWordMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 176;
    code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResModifyLoginPassWordMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ResModifyLoginPassWord];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_code;
        break;
      }
      
      // optional int32 code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResModifyLoginPassWordMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResModifyLoginPassWord];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // optional int32 code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResModifyLoginPassWordMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResModifyLoginPassWord];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // optional int32 code = 2;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResModifyLoginPassWordMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ResModifyLoginPassWord];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional int32 code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResModifyLoginPassWordMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResModifyLoginPassWordMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResModifyLoginPassWordMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResModifyLoginPassWordMessage::MergeFrom(const ResModifyLoginPassWordMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResModifyLoginPassWordMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResModifyLoginPassWordMessage::CopyFrom(const ResModifyLoginPassWordMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResModifyLoginPassWordMessage::IsInitialized() const {
  
  return true;
}

void ResModifyLoginPassWordMessage::Swap(ResModifyLoginPassWordMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResModifyLoginPassWordMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResModifyLoginPassWordMessage_descriptor_;
  metadata.reflection = ResModifyLoginPassWordMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqBindBankCardMessage::kMsgIDFieldNumber;
const int ReqBindBankCardMessage::kBankCardAccountFieldNumber;
const int ReqBindBankCardMessage::kBankCardNameFieldNumber;
const int ReqBindBankCardMessage::kBankBelongFieldNumber;
#endif  // !_MSC_VER

ReqBindBankCardMessage::ReqBindBankCardMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqBindBankCardMessage::InitAsDefaultInstance() {
}

ReqBindBankCardMessage::ReqBindBankCardMessage(const ReqBindBankCardMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqBindBankCardMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 177;
  bankcardaccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bankcardname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bankbelong_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqBindBankCardMessage::~ReqBindBankCardMessage() {
  SharedDtor();
}

void ReqBindBankCardMessage::SharedDtor() {
  if (bankcardaccount_ != &::google::protobuf::internal::kEmptyString) {
    delete bankcardaccount_;
  }
  if (bankcardname_ != &::google::protobuf::internal::kEmptyString) {
    delete bankcardname_;
  }
  if (bankbelong_ != &::google::protobuf::internal::kEmptyString) {
    delete bankbelong_;
  }
  if (this != default_instance_) {
  }
}

void ReqBindBankCardMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqBindBankCardMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqBindBankCardMessage_descriptor_;
}

const ReqBindBankCardMessage& ReqBindBankCardMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ReqBindBankCardMessage* ReqBindBankCardMessage::default_instance_ = NULL;

ReqBindBankCardMessage* ReqBindBankCardMessage::New() const {
  return new ReqBindBankCardMessage;
}

void ReqBindBankCardMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 177;
    if (has_bankcardaccount()) {
      if (bankcardaccount_ != &::google::protobuf::internal::kEmptyString) {
        bankcardaccount_->clear();
      }
    }
    if (has_bankcardname()) {
      if (bankcardname_ != &::google::protobuf::internal::kEmptyString) {
        bankcardname_->clear();
      }
    }
    if (has_bankbelong()) {
      if (bankbelong_ != &::google::protobuf::internal::kEmptyString) {
        bankbelong_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqBindBankCardMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqBindBankCard];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bankCardAccount;
        break;
      }
      
      // optional string bankCardAccount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankCardAccount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bankcardaccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bankcardaccount().data(), this->bankcardaccount().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bankCardName;
        break;
      }
      
      // optional string bankCardName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankCardName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bankcardname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bankcardname().data(), this->bankcardname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_bankBelong;
        break;
      }
      
      // optional string bankBelong = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankBelong:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bankbelong()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bankbelong().data(), this->bankbelong().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqBindBankCardMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqBindBankCard];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // optional string bankCardAccount = 2;
  if (has_bankcardaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankcardaccount().data(), this->bankcardaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->bankcardaccount(), output);
  }
  
  // optional string bankCardName = 3;
  if (has_bankcardname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankcardname().data(), this->bankcardname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->bankcardname(), output);
  }
  
  // optional string bankBelong = 4;
  if (has_bankbelong()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankbelong().data(), this->bankbelong().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->bankbelong(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqBindBankCardMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqBindBankCard];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // optional string bankCardAccount = 2;
  if (has_bankcardaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankcardaccount().data(), this->bankcardaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->bankcardaccount(), target);
  }
  
  // optional string bankCardName = 3;
  if (has_bankcardname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankcardname().data(), this->bankcardname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bankcardname(), target);
  }
  
  // optional string bankBelong = 4;
  if (has_bankbelong()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankbelong().data(), this->bankbelong().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->bankbelong(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqBindBankCardMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqBindBankCard];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional string bankCardAccount = 2;
    if (has_bankcardaccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bankcardaccount());
    }
    
    // optional string bankCardName = 3;
    if (has_bankcardname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bankcardname());
    }
    
    // optional string bankBelong = 4;
    if (has_bankbelong()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bankbelong());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqBindBankCardMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqBindBankCardMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqBindBankCardMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqBindBankCardMessage::MergeFrom(const ReqBindBankCardMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_bankcardaccount()) {
      set_bankcardaccount(from.bankcardaccount());
    }
    if (from.has_bankcardname()) {
      set_bankcardname(from.bankcardname());
    }
    if (from.has_bankbelong()) {
      set_bankbelong(from.bankbelong());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqBindBankCardMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqBindBankCardMessage::CopyFrom(const ReqBindBankCardMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqBindBankCardMessage::IsInitialized() const {
  
  return true;
}

void ReqBindBankCardMessage::Swap(ReqBindBankCardMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(bankcardaccount_, other->bankcardaccount_);
    std::swap(bankcardname_, other->bankcardname_);
    std::swap(bankbelong_, other->bankbelong_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqBindBankCardMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqBindBankCardMessage_descriptor_;
  metadata.reflection = ReqBindBankCardMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResBindBankCardMessage::kMsgIDFieldNumber;
const int ResBindBankCardMessage::kBankCardAccFieldNumber;
const int ResBindBankCardMessage::kBankCardNameFieldNumber;
const int ResBindBankCardMessage::kBankCardBelongFieldNumber;
#endif  // !_MSC_VER

ResBindBankCardMessage::ResBindBankCardMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResBindBankCardMessage::InitAsDefaultInstance() {
}

ResBindBankCardMessage::ResBindBankCardMessage(const ResBindBankCardMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResBindBankCardMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 178;
  bankcardacc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bankcardname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bankcardbelong_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResBindBankCardMessage::~ResBindBankCardMessage() {
  SharedDtor();
}

void ResBindBankCardMessage::SharedDtor() {
  if (bankcardacc_ != &::google::protobuf::internal::kEmptyString) {
    delete bankcardacc_;
  }
  if (bankcardname_ != &::google::protobuf::internal::kEmptyString) {
    delete bankcardname_;
  }
  if (bankcardbelong_ != &::google::protobuf::internal::kEmptyString) {
    delete bankcardbelong_;
  }
  if (this != default_instance_) {
  }
}

void ResBindBankCardMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResBindBankCardMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResBindBankCardMessage_descriptor_;
}

const ResBindBankCardMessage& ResBindBankCardMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ResBindBankCardMessage* ResBindBankCardMessage::default_instance_ = NULL;

ResBindBankCardMessage* ResBindBankCardMessage::New() const {
  return new ResBindBankCardMessage;
}

void ResBindBankCardMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 178;
    if (has_bankcardacc()) {
      if (bankcardacc_ != &::google::protobuf::internal::kEmptyString) {
        bankcardacc_->clear();
      }
    }
    if (has_bankcardname()) {
      if (bankcardname_ != &::google::protobuf::internal::kEmptyString) {
        bankcardname_->clear();
      }
    }
    if (has_bankcardbelong()) {
      if (bankcardbelong_ != &::google::protobuf::internal::kEmptyString) {
        bankcardbelong_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResBindBankCardMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ResBindBankCard];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bankCardAcc;
        break;
      }
      
      // optional string bankCardAcc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankCardAcc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bankcardacc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bankcardacc().data(), this->bankcardacc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bankCardName;
        break;
      }
      
      // optional string bankCardName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankCardName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bankcardname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bankcardname().data(), this->bankcardname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_bankCardBelong;
        break;
      }
      
      // optional string bankCardBelong = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankCardBelong:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bankcardbelong()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bankcardbelong().data(), this->bankcardbelong().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResBindBankCardMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResBindBankCard];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // optional string bankCardAcc = 2;
  if (has_bankcardacc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankcardacc().data(), this->bankcardacc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->bankcardacc(), output);
  }
  
  // optional string bankCardName = 3;
  if (has_bankcardname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankcardname().data(), this->bankcardname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->bankcardname(), output);
  }
  
  // optional string bankCardBelong = 4;
  if (has_bankcardbelong()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankcardbelong().data(), this->bankcardbelong().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->bankcardbelong(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResBindBankCardMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResBindBankCard];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // optional string bankCardAcc = 2;
  if (has_bankcardacc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankcardacc().data(), this->bankcardacc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->bankcardacc(), target);
  }
  
  // optional string bankCardName = 3;
  if (has_bankcardname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankcardname().data(), this->bankcardname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bankcardname(), target);
  }
  
  // optional string bankCardBelong = 4;
  if (has_bankcardbelong()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankcardbelong().data(), this->bankcardbelong().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->bankcardbelong(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResBindBankCardMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ResBindBankCard];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional string bankCardAcc = 2;
    if (has_bankcardacc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bankcardacc());
    }
    
    // optional string bankCardName = 3;
    if (has_bankcardname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bankcardname());
    }
    
    // optional string bankCardBelong = 4;
    if (has_bankcardbelong()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bankcardbelong());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResBindBankCardMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResBindBankCardMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResBindBankCardMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResBindBankCardMessage::MergeFrom(const ResBindBankCardMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_bankcardacc()) {
      set_bankcardacc(from.bankcardacc());
    }
    if (from.has_bankcardname()) {
      set_bankcardname(from.bankcardname());
    }
    if (from.has_bankcardbelong()) {
      set_bankcardbelong(from.bankcardbelong());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResBindBankCardMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResBindBankCardMessage::CopyFrom(const ResBindBankCardMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResBindBankCardMessage::IsInitialized() const {
  
  return true;
}

void ResBindBankCardMessage::Swap(ResBindBankCardMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(bankcardacc_, other->bankcardacc_);
    std::swap(bankcardname_, other->bankcardname_);
    std::swap(bankcardbelong_, other->bankcardbelong_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResBindBankCardMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResBindBankCardMessage_descriptor_;
  metadata.reflection = ResBindBankCardMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqRechargeMessage::kMsgIDFieldNumber;
const int ReqRechargeMessage::kRechargeInfoFieldNumber;
#endif  // !_MSC_VER

ReqRechargeMessage::ReqRechargeMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqRechargeMessage::InitAsDefaultInstance() {
}

ReqRechargeMessage::ReqRechargeMessage(const ReqRechargeMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqRechargeMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 200;
  rechargeinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqRechargeMessage::~ReqRechargeMessage() {
  SharedDtor();
}

void ReqRechargeMessage::SharedDtor() {
  if (rechargeinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete rechargeinfo_;
  }
  if (this != default_instance_) {
  }
}

void ReqRechargeMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqRechargeMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqRechargeMessage_descriptor_;
}

const ReqRechargeMessage& ReqRechargeMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ReqRechargeMessage* ReqRechargeMessage::default_instance_ = NULL;

ReqRechargeMessage* ReqRechargeMessage::New() const {
  return new ReqRechargeMessage;
}

void ReqRechargeMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 200;
    if (has_rechargeinfo()) {
      if (rechargeinfo_ != &::google::protobuf::internal::kEmptyString) {
        rechargeinfo_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqRechargeMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqRecharge];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rechargeInfo;
        break;
      }
      
      // required string rechargeInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rechargeInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rechargeinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rechargeinfo().data(), this->rechargeinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqRechargeMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqRecharge];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required string rechargeInfo = 2;
  if (has_rechargeinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rechargeinfo().data(), this->rechargeinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->rechargeinfo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqRechargeMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqRecharge];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required string rechargeInfo = 2;
  if (has_rechargeinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rechargeinfo().data(), this->rechargeinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rechargeinfo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqRechargeMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqRecharge];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required string rechargeInfo = 2;
    if (has_rechargeinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rechargeinfo());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqRechargeMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqRechargeMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqRechargeMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqRechargeMessage::MergeFrom(const ReqRechargeMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_rechargeinfo()) {
      set_rechargeinfo(from.rechargeinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqRechargeMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqRechargeMessage::CopyFrom(const ReqRechargeMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqRechargeMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void ReqRechargeMessage::Swap(ReqRechargeMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(rechargeinfo_, other->rechargeinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqRechargeMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqRechargeMessage_descriptor_;
  metadata.reflection = ReqRechargeMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResRechargeMessage::kMsgIDFieldNumber;
const int ResRechargeMessage::kRechargeInfoFieldNumber;
#endif  // !_MSC_VER

ResRechargeMessage::ResRechargeMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResRechargeMessage::InitAsDefaultInstance() {
}

ResRechargeMessage::ResRechargeMessage(const ResRechargeMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResRechargeMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 201;
  rechargeinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResRechargeMessage::~ResRechargeMessage() {
  SharedDtor();
}

void ResRechargeMessage::SharedDtor() {
  if (rechargeinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete rechargeinfo_;
  }
  if (this != default_instance_) {
  }
}

void ResRechargeMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResRechargeMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResRechargeMessage_descriptor_;
}

const ResRechargeMessage& ResRechargeMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ResRechargeMessage* ResRechargeMessage::default_instance_ = NULL;

ResRechargeMessage* ResRechargeMessage::New() const {
  return new ResRechargeMessage;
}

void ResRechargeMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 201;
    if (has_rechargeinfo()) {
      if (rechargeinfo_ != &::google::protobuf::internal::kEmptyString) {
        rechargeinfo_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResRechargeMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ResRecharge];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rechargeInfo;
        break;
      }
      
      // required string rechargeInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rechargeInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rechargeinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rechargeinfo().data(), this->rechargeinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResRechargeMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResRecharge];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required string rechargeInfo = 2;
  if (has_rechargeinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rechargeinfo().data(), this->rechargeinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->rechargeinfo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResRechargeMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResRecharge];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required string rechargeInfo = 2;
  if (has_rechargeinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rechargeinfo().data(), this->rechargeinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rechargeinfo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResRechargeMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ResRecharge];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required string rechargeInfo = 2;
    if (has_rechargeinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rechargeinfo());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResRechargeMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResRechargeMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResRechargeMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResRechargeMessage::MergeFrom(const ResRechargeMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_rechargeinfo()) {
      set_rechargeinfo(from.rechargeinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResRechargeMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResRechargeMessage::CopyFrom(const ResRechargeMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResRechargeMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void ResRechargeMessage::Swap(ResRechargeMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(rechargeinfo_, other->rechargeinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResRechargeMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResRechargeMessage_descriptor_;
  metadata.reflection = ResRechargeMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqRechargeIOSMessage::kMsgIDFieldNumber;
const int ReqRechargeIOSMessage::kIosPayJsonResultFieldNumber;
const int ReqRechargeIOSMessage::kServerOrderIdFieldNumber;
#endif  // !_MSC_VER

ReqRechargeIOSMessage::ReqRechargeIOSMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqRechargeIOSMessage::InitAsDefaultInstance() {
}

ReqRechargeIOSMessage::ReqRechargeIOSMessage(const ReqRechargeIOSMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqRechargeIOSMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 202;
  iospayjsonresult_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serverorderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqRechargeIOSMessage::~ReqRechargeIOSMessage() {
  SharedDtor();
}

void ReqRechargeIOSMessage::SharedDtor() {
  if (iospayjsonresult_ != &::google::protobuf::internal::kEmptyString) {
    delete iospayjsonresult_;
  }
  if (serverorderid_ != &::google::protobuf::internal::kEmptyString) {
    delete serverorderid_;
  }
  if (this != default_instance_) {
  }
}

void ReqRechargeIOSMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqRechargeIOSMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqRechargeIOSMessage_descriptor_;
}

const ReqRechargeIOSMessage& ReqRechargeIOSMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ReqRechargeIOSMessage* ReqRechargeIOSMessage::default_instance_ = NULL;

ReqRechargeIOSMessage* ReqRechargeIOSMessage::New() const {
  return new ReqRechargeIOSMessage;
}

void ReqRechargeIOSMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 202;
    if (has_iospayjsonresult()) {
      if (iospayjsonresult_ != &::google::protobuf::internal::kEmptyString) {
        iospayjsonresult_->clear();
      }
    }
    if (has_serverorderid()) {
      if (serverorderid_ != &::google::protobuf::internal::kEmptyString) {
        serverorderid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqRechargeIOSMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqRechargeIOS];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_iosPayJsonResult;
        break;
      }
      
      // required string iosPayJsonResult = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_iosPayJsonResult:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_iospayjsonresult()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->iospayjsonresult().data(), this->iospayjsonresult().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_serverOrderId;
        break;
      }
      
      // required string serverOrderId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serverOrderId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverorderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->serverorderid().data(), this->serverorderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqRechargeIOSMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqRechargeIOS];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required string iosPayJsonResult = 2;
  if (has_iospayjsonresult()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->iospayjsonresult().data(), this->iospayjsonresult().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->iospayjsonresult(), output);
  }
  
  // required string serverOrderId = 3;
  if (has_serverorderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serverorderid().data(), this->serverorderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->serverorderid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqRechargeIOSMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqRechargeIOS];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required string iosPayJsonResult = 2;
  if (has_iospayjsonresult()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->iospayjsonresult().data(), this->iospayjsonresult().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->iospayjsonresult(), target);
  }
  
  // required string serverOrderId = 3;
  if (has_serverorderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serverorderid().data(), this->serverorderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->serverorderid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqRechargeIOSMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqRechargeIOS];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required string iosPayJsonResult = 2;
    if (has_iospayjsonresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->iospayjsonresult());
    }
    
    // required string serverOrderId = 3;
    if (has_serverorderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverorderid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqRechargeIOSMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqRechargeIOSMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqRechargeIOSMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqRechargeIOSMessage::MergeFrom(const ReqRechargeIOSMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_iospayjsonresult()) {
      set_iospayjsonresult(from.iospayjsonresult());
    }
    if (from.has_serverorderid()) {
      set_serverorderid(from.serverorderid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqRechargeIOSMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqRechargeIOSMessage::CopyFrom(const ReqRechargeIOSMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqRechargeIOSMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  return true;
}

void ReqRechargeIOSMessage::Swap(ReqRechargeIOSMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(iospayjsonresult_, other->iospayjsonresult_);
    std::swap(serverorderid_, other->serverorderid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqRechargeIOSMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqRechargeIOSMessage_descriptor_;
  metadata.reflection = ReqRechargeIOSMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResRechargeIOSMessage::kMsgIDFieldNumber;
const int ResRechargeIOSMessage::kIosPayResultsFieldNumber;
#endif  // !_MSC_VER

ResRechargeIOSMessage::ResRechargeIOSMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResRechargeIOSMessage::InitAsDefaultInstance() {
}

ResRechargeIOSMessage::ResRechargeIOSMessage(const ResRechargeIOSMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResRechargeIOSMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 203;
  iospayresults_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResRechargeIOSMessage::~ResRechargeIOSMessage() {
  SharedDtor();
}

void ResRechargeIOSMessage::SharedDtor() {
  if (iospayresults_ != &::google::protobuf::internal::kEmptyString) {
    delete iospayresults_;
  }
  if (this != default_instance_) {
  }
}

void ResRechargeIOSMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResRechargeIOSMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResRechargeIOSMessage_descriptor_;
}

const ResRechargeIOSMessage& ResRechargeIOSMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ResRechargeIOSMessage* ResRechargeIOSMessage::default_instance_ = NULL;

ResRechargeIOSMessage* ResRechargeIOSMessage::New() const {
  return new ResRechargeIOSMessage;
}

void ResRechargeIOSMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 203;
    if (has_iospayresults()) {
      if (iospayresults_ != &::google::protobuf::internal::kEmptyString) {
        iospayresults_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResRechargeIOSMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ResRechargeIOS];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_iosPayResults;
        break;
      }
      
      // required string iosPayResults = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_iosPayResults:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_iospayresults()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->iospayresults().data(), this->iospayresults().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResRechargeIOSMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResRechargeIOS];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required string iosPayResults = 2;
  if (has_iospayresults()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->iospayresults().data(), this->iospayresults().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->iospayresults(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResRechargeIOSMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResRechargeIOS];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required string iosPayResults = 2;
  if (has_iospayresults()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->iospayresults().data(), this->iospayresults().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->iospayresults(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResRechargeIOSMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ResRechargeIOS];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required string iosPayResults = 2;
    if (has_iospayresults()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->iospayresults());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResRechargeIOSMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResRechargeIOSMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResRechargeIOSMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResRechargeIOSMessage::MergeFrom(const ResRechargeIOSMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_iospayresults()) {
      set_iospayresults(from.iospayresults());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResRechargeIOSMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResRechargeIOSMessage::CopyFrom(const ResRechargeIOSMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResRechargeIOSMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void ResRechargeIOSMessage::Swap(ResRechargeIOSMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(iospayresults_, other->iospayresults_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResRechargeIOSMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResRechargeIOSMessage_descriptor_;
  metadata.reflection = ResRechargeIOSMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqWithDrawCashMessage::kMsgIDFieldNumber;
const int ReqWithDrawCashMessage::kTypeFieldNumber;
const int ReqWithDrawCashMessage::kRmbFieldNumber;
#endif  // !_MSC_VER

ReqWithDrawCashMessage::ReqWithDrawCashMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqWithDrawCashMessage::InitAsDefaultInstance() {
}

ReqWithDrawCashMessage::ReqWithDrawCashMessage(const ReqWithDrawCashMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqWithDrawCashMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 250;
  type_ = 0;
  rmb_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqWithDrawCashMessage::~ReqWithDrawCashMessage() {
  SharedDtor();
}

void ReqWithDrawCashMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqWithDrawCashMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqWithDrawCashMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqWithDrawCashMessage_descriptor_;
}

const ReqWithDrawCashMessage& ReqWithDrawCashMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ReqWithDrawCashMessage* ReqWithDrawCashMessage::default_instance_ = NULL;

ReqWithDrawCashMessage* ReqWithDrawCashMessage::New() const {
  return new ReqWithDrawCashMessage;
}

void ReqWithDrawCashMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 250;
    type_ = 0;
    rmb_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqWithDrawCashMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqWithDrawCash];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rmb;
        break;
      }
      
      // required int32 rmb = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rmb_)));
          set_has_rmb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqWithDrawCashMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqWithDrawCash];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }
  
  // required int32 rmb = 3;
  if (has_rmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rmb(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqWithDrawCashMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqWithDrawCash];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }
  
  // required int32 rmb = 3;
  if (has_rmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rmb(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqWithDrawCashMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqWithDrawCash];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // required int32 rmb = 3;
    if (has_rmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rmb());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqWithDrawCashMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqWithDrawCashMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqWithDrawCashMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqWithDrawCashMessage::MergeFrom(const ReqWithDrawCashMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_rmb()) {
      set_rmb(from.rmb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqWithDrawCashMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqWithDrawCashMessage::CopyFrom(const ReqWithDrawCashMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqWithDrawCashMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  return true;
}

void ReqWithDrawCashMessage::Swap(ReqWithDrawCashMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(type_, other->type_);
    std::swap(rmb_, other->rmb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqWithDrawCashMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqWithDrawCashMessage_descriptor_;
  metadata.reflection = ReqWithDrawCashMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResWithDrawCashMessage::kMsgIDFieldNumber;
const int ResWithDrawCashMessage::kResultFieldNumber;
const int ResWithDrawCashMessage::kRmbFieldNumber;
const int ResWithDrawCashMessage::kTypeFieldNumber;
#endif  // !_MSC_VER

ResWithDrawCashMessage::ResWithDrawCashMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResWithDrawCashMessage::InitAsDefaultInstance() {
}

ResWithDrawCashMessage::ResWithDrawCashMessage(const ResWithDrawCashMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResWithDrawCashMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 251;
  result_ = 0;
  rmb_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResWithDrawCashMessage::~ResWithDrawCashMessage() {
  SharedDtor();
}

void ResWithDrawCashMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResWithDrawCashMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResWithDrawCashMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResWithDrawCashMessage_descriptor_;
}

const ResWithDrawCashMessage& ResWithDrawCashMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ResWithDrawCashMessage* ResWithDrawCashMessage::default_instance_ = NULL;

ResWithDrawCashMessage* ResWithDrawCashMessage::New() const {
  return new ResWithDrawCashMessage;
}

void ResWithDrawCashMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 251;
    result_ = 0;
    rmb_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResWithDrawCashMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ResWithDrawCash];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }
      
      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rmb;
        break;
      }
      
      // optional int32 rmb = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rmb_)));
          set_has_rmb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }
      
      // optional int32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResWithDrawCashMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResWithDrawCash];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }
  
  // optional int32 rmb = 3;
  if (has_rmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rmb(), output);
  }
  
  // optional int32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResWithDrawCashMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResWithDrawCash];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }
  
  // optional int32 rmb = 3;
  if (has_rmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rmb(), target);
  }
  
  // optional int32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResWithDrawCashMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ResWithDrawCash];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
    // optional int32 rmb = 3;
    if (has_rmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rmb());
    }
    
    // optional int32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResWithDrawCashMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResWithDrawCashMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResWithDrawCashMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResWithDrawCashMessage::MergeFrom(const ResWithDrawCashMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_rmb()) {
      set_rmb(from.rmb());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResWithDrawCashMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResWithDrawCashMessage::CopyFrom(const ResWithDrawCashMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResWithDrawCashMessage::IsInitialized() const {
  
  return true;
}

void ResWithDrawCashMessage::Swap(ResWithDrawCashMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(result_, other->result_);
    std::swap(rmb_, other->rmb_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResWithDrawCashMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResWithDrawCashMessage_descriptor_;
  metadata.reflection = ResWithDrawCashMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqChangeCardBgMessage::kMsgIDFieldNumber;
const int ReqChangeCardBgMessage::kReqTypeFieldNumber;
const int ReqChangeCardBgMessage::kReqIndexFieldNumber;
#endif  // !_MSC_VER

ReqChangeCardBgMessage::ReqChangeCardBgMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqChangeCardBgMessage::InitAsDefaultInstance() {
}

ReqChangeCardBgMessage::ReqChangeCardBgMessage(const ReqChangeCardBgMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqChangeCardBgMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 301;
  reqtype_ = 0;
  reqindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqChangeCardBgMessage::~ReqChangeCardBgMessage() {
  SharedDtor();
}

void ReqChangeCardBgMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqChangeCardBgMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqChangeCardBgMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqChangeCardBgMessage_descriptor_;
}

const ReqChangeCardBgMessage& ReqChangeCardBgMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ReqChangeCardBgMessage* ReqChangeCardBgMessage::default_instance_ = NULL;

ReqChangeCardBgMessage* ReqChangeCardBgMessage::New() const {
  return new ReqChangeCardBgMessage;
}

void ReqChangeCardBgMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 301;
    reqtype_ = 0;
    reqindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqChangeCardBgMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqChangeCardBg];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reqType;
        break;
      }
      
      // required int32 reqType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reqType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reqtype_)));
          set_has_reqtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reqIndex;
        break;
      }
      
      // required int32 reqIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reqIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reqindex_)));
          set_has_reqindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqChangeCardBgMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqChangeCardBg];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required int32 reqType = 2;
  if (has_reqtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reqtype(), output);
  }
  
  // required int32 reqIndex = 3;
  if (has_reqindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->reqindex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqChangeCardBgMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqChangeCardBg];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required int32 reqType = 2;
  if (has_reqtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->reqtype(), target);
  }
  
  // required int32 reqIndex = 3;
  if (has_reqindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->reqindex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqChangeCardBgMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqChangeCardBg];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required int32 reqType = 2;
    if (has_reqtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reqtype());
    }
    
    // required int32 reqIndex = 3;
    if (has_reqindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reqindex());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqChangeCardBgMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqChangeCardBgMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqChangeCardBgMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqChangeCardBgMessage::MergeFrom(const ReqChangeCardBgMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_reqtype()) {
      set_reqtype(from.reqtype());
    }
    if (from.has_reqindex()) {
      set_reqindex(from.reqindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqChangeCardBgMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqChangeCardBgMessage::CopyFrom(const ReqChangeCardBgMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqChangeCardBgMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  return true;
}

void ReqChangeCardBgMessage::Swap(ReqChangeCardBgMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(reqtype_, other->reqtype_);
    std::swap(reqindex_, other->reqindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqChangeCardBgMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqChangeCardBgMessage_descriptor_;
  metadata.reflection = ReqChangeCardBgMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResChangeCardBgMessage::kMsgIDFieldNumber;
const int ResChangeCardBgMessage::kResTypeFieldNumber;
const int ResChangeCardBgMessage::kResIndexFieldNumber;
#endif  // !_MSC_VER

ResChangeCardBgMessage::ResChangeCardBgMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResChangeCardBgMessage::InitAsDefaultInstance() {
}

ResChangeCardBgMessage::ResChangeCardBgMessage(const ResChangeCardBgMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResChangeCardBgMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 302;
  restype_ = 0;
  resindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResChangeCardBgMessage::~ResChangeCardBgMessage() {
  SharedDtor();
}

void ResChangeCardBgMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResChangeCardBgMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResChangeCardBgMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResChangeCardBgMessage_descriptor_;
}

const ResChangeCardBgMessage& ResChangeCardBgMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ResChangeCardBgMessage* ResChangeCardBgMessage::default_instance_ = NULL;

ResChangeCardBgMessage* ResChangeCardBgMessage::New() const {
  return new ResChangeCardBgMessage;
}

void ResChangeCardBgMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 302;
    restype_ = 0;
    resindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResChangeCardBgMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ResChangeCardBg];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_resType;
        break;
      }
      
      // required int32 resType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &restype_)));
          set_has_restype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_resIndex;
        break;
      }
      
      // optional int32 resIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resindex_)));
          set_has_resindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResChangeCardBgMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResChangeCardBg];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required int32 resType = 2;
  if (has_restype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->restype(), output);
  }
  
  // optional int32 resIndex = 3;
  if (has_resindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->resindex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResChangeCardBgMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResChangeCardBg];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required int32 resType = 2;
  if (has_restype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->restype(), target);
  }
  
  // optional int32 resIndex = 3;
  if (has_resindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->resindex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResChangeCardBgMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ResChangeCardBg];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required int32 resType = 2;
    if (has_restype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->restype());
    }
    
    // optional int32 resIndex = 3;
    if (has_resindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resindex());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResChangeCardBgMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResChangeCardBgMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResChangeCardBgMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResChangeCardBgMessage::MergeFrom(const ResChangeCardBgMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_restype()) {
      set_restype(from.restype());
    }
    if (from.has_resindex()) {
      set_resindex(from.resindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResChangeCardBgMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResChangeCardBgMessage::CopyFrom(const ResChangeCardBgMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResChangeCardBgMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void ResChangeCardBgMessage::Swap(ResChangeCardBgMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(restype_, other->restype_);
    std::swap(resindex_, other->resindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResChangeCardBgMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResChangeCardBgMessage_descriptor_;
  metadata.reflection = ResChangeCardBgMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqApplyAgencyMessage::kMsgIDFieldNumber;
const int ReqApplyAgencyMessage::kAgentAccFieldNumber;
const int ReqApplyAgencyMessage::kQQFieldNumber;
const int ReqApplyAgencyMessage::kWechatFieldNumber;
const int ReqApplyAgencyMessage::kAgentNameFieldNumber;
const int ReqApplyAgencyMessage::kReasonFieldNumber;
#endif  // !_MSC_VER

ReqApplyAgencyMessage::ReqApplyAgencyMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqApplyAgencyMessage::InitAsDefaultInstance() {
}

ReqApplyAgencyMessage::ReqApplyAgencyMessage(const ReqApplyAgencyMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqApplyAgencyMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 310;
  agentacc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  qq_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wechat_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  agentname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqApplyAgencyMessage::~ReqApplyAgencyMessage() {
  SharedDtor();
}

void ReqApplyAgencyMessage::SharedDtor() {
  if (agentacc_ != &::google::protobuf::internal::kEmptyString) {
    delete agentacc_;
  }
  if (qq_ != &::google::protobuf::internal::kEmptyString) {
    delete qq_;
  }
  if (wechat_ != &::google::protobuf::internal::kEmptyString) {
    delete wechat_;
  }
  if (agentname_ != &::google::protobuf::internal::kEmptyString) {
    delete agentname_;
  }
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    delete reason_;
  }
  if (this != default_instance_) {
  }
}

void ReqApplyAgencyMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqApplyAgencyMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqApplyAgencyMessage_descriptor_;
}

const ReqApplyAgencyMessage& ReqApplyAgencyMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ReqApplyAgencyMessage* ReqApplyAgencyMessage::default_instance_ = NULL;

ReqApplyAgencyMessage* ReqApplyAgencyMessage::New() const {
  return new ReqApplyAgencyMessage;
}

void ReqApplyAgencyMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 310;
    if (has_agentacc()) {
      if (agentacc_ != &::google::protobuf::internal::kEmptyString) {
        agentacc_->clear();
      }
    }
    if (has_qq()) {
      if (qq_ != &::google::protobuf::internal::kEmptyString) {
        qq_->clear();
      }
    }
    if (has_wechat()) {
      if (wechat_ != &::google::protobuf::internal::kEmptyString) {
        wechat_->clear();
      }
    }
    if (has_agentname()) {
      if (agentname_ != &::google::protobuf::internal::kEmptyString) {
        agentname_->clear();
      }
    }
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::kEmptyString) {
        reason_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqApplyAgencyMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqApplyAgency];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_agentAcc;
        break;
      }
      
      // optional string agentAcc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_agentAcc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_agentacc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->agentacc().data(), this->agentacc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_QQ;
        break;
      }
      
      // optional string QQ = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_QQ:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qq()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->qq().data(), this->qq().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_wechat;
        break;
      }
      
      // optional string wechat = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wechat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wechat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->wechat().data(), this->wechat().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_agentName;
        break;
      }
      
      // optional string agentName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_agentName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_agentname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->agentname().data(), this->agentname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_reason;
        break;
      }
      
      // optional string reason = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqApplyAgencyMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqApplyAgency];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // optional string agentAcc = 2;
  if (has_agentacc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->agentacc().data(), this->agentacc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->agentacc(), output);
  }
  
  // optional string QQ = 3;
  if (has_qq()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->qq().data(), this->qq().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->qq(), output);
  }
  
  // optional string wechat = 4;
  if (has_wechat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wechat().data(), this->wechat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->wechat(), output);
  }
  
  // optional string agentName = 5;
  if (has_agentname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->agentname().data(), this->agentname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->agentname(), output);
  }
  
  // optional string reason = 6;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->reason(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqApplyAgencyMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqApplyAgency];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // optional string agentAcc = 2;
  if (has_agentacc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->agentacc().data(), this->agentacc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->agentacc(), target);
  }
  
  // optional string QQ = 3;
  if (has_qq()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->qq().data(), this->qq().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->qq(), target);
  }
  
  // optional string wechat = 4;
  if (has_wechat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wechat().data(), this->wechat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->wechat(), target);
  }
  
  // optional string agentName = 5;
  if (has_agentname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->agentname().data(), this->agentname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->agentname(), target);
  }
  
  // optional string reason = 6;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->reason(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqApplyAgencyMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqApplyAgency];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional string agentAcc = 2;
    if (has_agentacc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->agentacc());
    }
    
    // optional string QQ = 3;
    if (has_qq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->qq());
    }
    
    // optional string wechat = 4;
    if (has_wechat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wechat());
    }
    
    // optional string agentName = 5;
    if (has_agentname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->agentname());
    }
    
    // optional string reason = 6;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqApplyAgencyMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqApplyAgencyMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqApplyAgencyMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqApplyAgencyMessage::MergeFrom(const ReqApplyAgencyMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_agentacc()) {
      set_agentacc(from.agentacc());
    }
    if (from.has_qq()) {
      set_qq(from.qq());
    }
    if (from.has_wechat()) {
      set_wechat(from.wechat());
    }
    if (from.has_agentname()) {
      set_agentname(from.agentname());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqApplyAgencyMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqApplyAgencyMessage::CopyFrom(const ReqApplyAgencyMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqApplyAgencyMessage::IsInitialized() const {
  
  return true;
}

void ReqApplyAgencyMessage::Swap(ReqApplyAgencyMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(agentacc_, other->agentacc_);
    std::swap(qq_, other->qq_);
    std::swap(wechat_, other->wechat_);
    std::swap(agentname_, other->agentname_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqApplyAgencyMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqApplyAgencyMessage_descriptor_;
  metadata.reflection = ReqApplyAgencyMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResApplyAgencyMessage::kMsgIDFieldNumber;
const int ResApplyAgencyMessage::kResultFieldNumber;
#endif  // !_MSC_VER

ResApplyAgencyMessage::ResApplyAgencyMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResApplyAgencyMessage::InitAsDefaultInstance() {
}

ResApplyAgencyMessage::ResApplyAgencyMessage(const ResApplyAgencyMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResApplyAgencyMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 311;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResApplyAgencyMessage::~ResApplyAgencyMessage() {
  SharedDtor();
}

void ResApplyAgencyMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResApplyAgencyMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResApplyAgencyMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResApplyAgencyMessage_descriptor_;
}

const ResApplyAgencyMessage& ResApplyAgencyMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ResApplyAgencyMessage* ResApplyAgencyMessage::default_instance_ = NULL;

ResApplyAgencyMessage* ResApplyAgencyMessage::New() const {
  return new ResApplyAgencyMessage;
}

void ResApplyAgencyMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 311;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResApplyAgencyMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ResApplyAgency];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }
      
      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResApplyAgencyMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResApplyAgency];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResApplyAgencyMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResApplyAgency];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResApplyAgencyMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ResApplyAgency];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResApplyAgencyMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResApplyAgencyMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResApplyAgencyMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResApplyAgencyMessage::MergeFrom(const ResApplyAgencyMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResApplyAgencyMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResApplyAgencyMessage::CopyFrom(const ResApplyAgencyMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResApplyAgencyMessage::IsInitialized() const {
  
  return true;
}

void ResApplyAgencyMessage::Swap(ResApplyAgencyMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResApplyAgencyMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResApplyAgencyMessage_descriptor_;
  metadata.reflection = ResApplyAgencyMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqChatWithServiceMessage::kMsgIDFieldNumber;
const int ReqChatWithServiceMessage::kTypeFieldNumber;
const int ReqChatWithServiceMessage::kContentFieldNumber;
#endif  // !_MSC_VER

ReqChatWithServiceMessage::ReqChatWithServiceMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqChatWithServiceMessage::InitAsDefaultInstance() {
}

ReqChatWithServiceMessage::ReqChatWithServiceMessage(const ReqChatWithServiceMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqChatWithServiceMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 312;
  type_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqChatWithServiceMessage::~ReqChatWithServiceMessage() {
  SharedDtor();
}

void ReqChatWithServiceMessage::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void ReqChatWithServiceMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqChatWithServiceMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqChatWithServiceMessage_descriptor_;
}

const ReqChatWithServiceMessage& ReqChatWithServiceMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ReqChatWithServiceMessage* ReqChatWithServiceMessage::default_instance_ = NULL;

ReqChatWithServiceMessage* ReqChatWithServiceMessage::New() const {
  return new ReqChatWithServiceMessage;
}

void ReqChatWithServiceMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 312;
    type_ = 0;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqChatWithServiceMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqChatWithService];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }
      
      // optional string content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqChatWithServiceMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqChatWithService];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }
  
  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->content(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqChatWithServiceMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqChatWithService];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }
  
  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqChatWithServiceMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqChatWithService];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional string content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqChatWithServiceMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqChatWithServiceMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqChatWithServiceMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqChatWithServiceMessage::MergeFrom(const ReqChatWithServiceMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqChatWithServiceMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqChatWithServiceMessage::CopyFrom(const ReqChatWithServiceMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqChatWithServiceMessage::IsInitialized() const {
  
  return true;
}

void ReqChatWithServiceMessage::Swap(ReqChatWithServiceMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(type_, other->type_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqChatWithServiceMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqChatWithServiceMessage_descriptor_;
  metadata.reflection = ReqChatWithServiceMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResChatWithServiceMessage::kMsgIDFieldNumber;
const int ResChatWithServiceMessage::kContentsFieldNumber;
#endif  // !_MSC_VER

ResChatWithServiceMessage::ResChatWithServiceMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResChatWithServiceMessage::InitAsDefaultInstance() {
}

ResChatWithServiceMessage::ResChatWithServiceMessage(const ResChatWithServiceMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResChatWithServiceMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 313;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResChatWithServiceMessage::~ResChatWithServiceMessage() {
  SharedDtor();
}

void ResChatWithServiceMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResChatWithServiceMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResChatWithServiceMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResChatWithServiceMessage_descriptor_;
}

const ResChatWithServiceMessage& ResChatWithServiceMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ResChatWithServiceMessage* ResChatWithServiceMessage::default_instance_ = NULL;

ResChatWithServiceMessage* ResChatWithServiceMessage::New() const {
  return new ResChatWithServiceMessage;
}

void ResChatWithServiceMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 313;
  }
  contents_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResChatWithServiceMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ResChatWithService];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_contents;
        break;
      }
      
      // repeated string contents = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_contents()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->contents(0).data(), this->contents(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_contents;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResChatWithServiceMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResChatWithService];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // repeated string contents = 2;
  for (int i = 0; i < this->contents_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->contents(i).data(), this->contents(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->contents(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResChatWithServiceMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResChatWithService];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // repeated string contents = 2;
  for (int i = 0; i < this->contents_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contents(i).data(), this->contents(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->contents(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResChatWithServiceMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ResChatWithService];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
  }
  // repeated string contents = 2;
  total_size += 1 * this->contents_size();
  for (int i = 0; i < this->contents_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->contents(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResChatWithServiceMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResChatWithServiceMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResChatWithServiceMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResChatWithServiceMessage::MergeFrom(const ResChatWithServiceMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  contents_.MergeFrom(from.contents_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResChatWithServiceMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResChatWithServiceMessage::CopyFrom(const ResChatWithServiceMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResChatWithServiceMessage::IsInitialized() const {
  
  return true;
}

void ResChatWithServiceMessage::Swap(ResChatWithServiceMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    contents_.Swap(&other->contents_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResChatWithServiceMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResChatWithServiceMessage_descriptor_;
  metadata.reflection = ResChatWithServiceMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqReportAgencyMessage::kMsgIDFieldNumber;
const int ReqReportAgencyMessage::kWeChatFieldNumber;
const int ReqReportAgencyMessage::kReasonFieldNumber;
#endif  // !_MSC_VER

ReqReportAgencyMessage::ReqReportAgencyMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqReportAgencyMessage::InitAsDefaultInstance() {
}

ReqReportAgencyMessage::ReqReportAgencyMessage(const ReqReportAgencyMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqReportAgencyMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 314;
  wechat_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqReportAgencyMessage::~ReqReportAgencyMessage() {
  SharedDtor();
}

void ReqReportAgencyMessage::SharedDtor() {
  if (wechat_ != &::google::protobuf::internal::kEmptyString) {
    delete wechat_;
  }
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    delete reason_;
  }
  if (this != default_instance_) {
  }
}

void ReqReportAgencyMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqReportAgencyMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqReportAgencyMessage_descriptor_;
}

const ReqReportAgencyMessage& ReqReportAgencyMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ReqReportAgencyMessage* ReqReportAgencyMessage::default_instance_ = NULL;

ReqReportAgencyMessage* ReqReportAgencyMessage::New() const {
  return new ReqReportAgencyMessage;
}

void ReqReportAgencyMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 314;
    if (has_wechat()) {
      if (wechat_ != &::google::protobuf::internal::kEmptyString) {
        wechat_->clear();
      }
    }
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::kEmptyString) {
        reason_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqReportAgencyMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqReportAgency];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_weChat;
        break;
      }
      
      // optional string weChat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weChat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wechat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->wechat().data(), this->wechat().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_reason;
        break;
      }
      
      // optional string reason = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqReportAgencyMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqReportAgency];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // optional string weChat = 2;
  if (has_wechat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wechat().data(), this->wechat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->wechat(), output);
  }
  
  // optional string reason = 3;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->reason(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqReportAgencyMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqReportAgency];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // optional string weChat = 2;
  if (has_wechat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wechat().data(), this->wechat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->wechat(), target);
  }
  
  // optional string reason = 3;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->reason(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqReportAgencyMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqReportAgency];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional string weChat = 2;
    if (has_wechat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wechat());
    }
    
    // optional string reason = 3;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqReportAgencyMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqReportAgencyMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqReportAgencyMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqReportAgencyMessage::MergeFrom(const ReqReportAgencyMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_wechat()) {
      set_wechat(from.wechat());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqReportAgencyMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqReportAgencyMessage::CopyFrom(const ReqReportAgencyMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqReportAgencyMessage::IsInitialized() const {
  
  return true;
}

void ReqReportAgencyMessage::Swap(ReqReportAgencyMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(wechat_, other->wechat_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqReportAgencyMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqReportAgencyMessage_descriptor_;
  metadata.reflection = ReqReportAgencyMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResReportAgencyMessage::kMsgIDFieldNumber;
const int ResReportAgencyMessage::kResultFieldNumber;
#endif  // !_MSC_VER

ResReportAgencyMessage::ResReportAgencyMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResReportAgencyMessage::InitAsDefaultInstance() {
}

ResReportAgencyMessage::ResReportAgencyMessage(const ResReportAgencyMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResReportAgencyMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 315;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResReportAgencyMessage::~ResReportAgencyMessage() {
  SharedDtor();
}

void ResReportAgencyMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResReportAgencyMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResReportAgencyMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResReportAgencyMessage_descriptor_;
}

const ResReportAgencyMessage& ResReportAgencyMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ResReportAgencyMessage* ResReportAgencyMessage::default_instance_ = NULL;

ResReportAgencyMessage* ResReportAgencyMessage::New() const {
  return new ResReportAgencyMessage;
}

void ResReportAgencyMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 315;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResReportAgencyMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ResReportAgency];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }
      
      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResReportAgencyMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResReportAgency];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResReportAgencyMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResReportAgency];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResReportAgencyMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ResReportAgency];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResReportAgencyMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResReportAgencyMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResReportAgencyMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResReportAgencyMessage::MergeFrom(const ResReportAgencyMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResReportAgencyMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResReportAgencyMessage::CopyFrom(const ResReportAgencyMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResReportAgencyMessage::IsInitialized() const {
  
  return true;
}

void ResReportAgencyMessage::Swap(ResReportAgencyMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResReportAgencyMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResReportAgencyMessage_descriptor_;
  metadata.reflection = ResReportAgencyMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqWithDrawCashInfoMessage::kMsgIDFieldNumber;
#endif  // !_MSC_VER

ReqWithDrawCashInfoMessage::ReqWithDrawCashInfoMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqWithDrawCashInfoMessage::InitAsDefaultInstance() {
}

ReqWithDrawCashInfoMessage::ReqWithDrawCashInfoMessage(const ReqWithDrawCashInfoMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqWithDrawCashInfoMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 316;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqWithDrawCashInfoMessage::~ReqWithDrawCashInfoMessage() {
  SharedDtor();
}

void ReqWithDrawCashInfoMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqWithDrawCashInfoMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqWithDrawCashInfoMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqWithDrawCashInfoMessage_descriptor_;
}

const ReqWithDrawCashInfoMessage& ReqWithDrawCashInfoMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ReqWithDrawCashInfoMessage* ReqWithDrawCashInfoMessage::default_instance_ = NULL;

ReqWithDrawCashInfoMessage* ReqWithDrawCashInfoMessage::New() const {
  return new ReqWithDrawCashInfoMessage;
}

void ReqWithDrawCashInfoMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 316;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqWithDrawCashInfoMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqWithDrawCashInfo];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqWithDrawCashInfoMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqWithDrawCashInfo];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqWithDrawCashInfoMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqWithDrawCashInfo];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqWithDrawCashInfoMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqWithDrawCashInfo];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqWithDrawCashInfoMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqWithDrawCashInfoMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqWithDrawCashInfoMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqWithDrawCashInfoMessage::MergeFrom(const ReqWithDrawCashInfoMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqWithDrawCashInfoMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqWithDrawCashInfoMessage::CopyFrom(const ReqWithDrawCashInfoMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqWithDrawCashInfoMessage::IsInitialized() const {
  
  return true;
}

void ReqWithDrawCashInfoMessage::Swap(ReqWithDrawCashInfoMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqWithDrawCashInfoMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqWithDrawCashInfoMessage_descriptor_;
  metadata.reflection = ReqWithDrawCashInfoMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResWithDrawCashInfoMessage::kMsgIDFieldNumber;
const int ResWithDrawCashInfoMessage::kWithDrawCashInfoFieldNumber;
#endif  // !_MSC_VER

ResWithDrawCashInfoMessage::ResWithDrawCashInfoMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResWithDrawCashInfoMessage::InitAsDefaultInstance() {
}

ResWithDrawCashInfoMessage::ResWithDrawCashInfoMessage(const ResWithDrawCashInfoMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResWithDrawCashInfoMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 317;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResWithDrawCashInfoMessage::~ResWithDrawCashInfoMessage() {
  SharedDtor();
}

void ResWithDrawCashInfoMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResWithDrawCashInfoMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResWithDrawCashInfoMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResWithDrawCashInfoMessage_descriptor_;
}

const ResWithDrawCashInfoMessage& ResWithDrawCashInfoMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ResWithDrawCashInfoMessage* ResWithDrawCashInfoMessage::default_instance_ = NULL;

ResWithDrawCashInfoMessage* ResWithDrawCashInfoMessage::New() const {
  return new ResWithDrawCashInfoMessage;
}

void ResWithDrawCashInfoMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 317;
  }
  withdrawcashinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResWithDrawCashInfoMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ResWithDrawCashInfo];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_withDrawCashInfo;
        break;
      }
      
      // repeated .com.game.proto.WithDrawCashInfo withDrawCashInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_withDrawCashInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_withdrawcashinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_withDrawCashInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResWithDrawCashInfoMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResWithDrawCashInfo];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // repeated .com.game.proto.WithDrawCashInfo withDrawCashInfo = 2;
  for (int i = 0; i < this->withdrawcashinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->withdrawcashinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResWithDrawCashInfoMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResWithDrawCashInfo];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // repeated .com.game.proto.WithDrawCashInfo withDrawCashInfo = 2;
  for (int i = 0; i < this->withdrawcashinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->withdrawcashinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResWithDrawCashInfoMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ResWithDrawCashInfo];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
  }
  // repeated .com.game.proto.WithDrawCashInfo withDrawCashInfo = 2;
  total_size += 1 * this->withdrawcashinfo_size();
  for (int i = 0; i < this->withdrawcashinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->withdrawcashinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResWithDrawCashInfoMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResWithDrawCashInfoMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResWithDrawCashInfoMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResWithDrawCashInfoMessage::MergeFrom(const ResWithDrawCashInfoMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  withdrawcashinfo_.MergeFrom(from.withdrawcashinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResWithDrawCashInfoMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResWithDrawCashInfoMessage::CopyFrom(const ResWithDrawCashInfoMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResWithDrawCashInfoMessage::IsInitialized() const {
  
  return true;
}

void ResWithDrawCashInfoMessage::Swap(ResWithDrawCashInfoMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    withdrawcashinfo_.Swap(&other->withdrawcashinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResWithDrawCashInfoMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResWithDrawCashInfoMessage_descriptor_;
  metadata.reflection = ResWithDrawCashInfoMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WithDrawCashInfo::kIdFieldNumber;
const int WithDrawCashInfo::kAlipyaccFieldNumber;
const int WithDrawCashInfo::kTimeFieldNumber;
const int WithDrawCashInfo::kMoneyFieldNumber;
const int WithDrawCashInfo::kResultFieldNumber;
#endif  // !_MSC_VER

WithDrawCashInfo::WithDrawCashInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WithDrawCashInfo::InitAsDefaultInstance() {
}

WithDrawCashInfo::WithDrawCashInfo(const WithDrawCashInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WithDrawCashInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  alipyacc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = GOOGLE_LONGLONG(0);
  money_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WithDrawCashInfo::~WithDrawCashInfo() {
  SharedDtor();
}

void WithDrawCashInfo::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (alipyacc_ != &::google::protobuf::internal::kEmptyString) {
    delete alipyacc_;
  }
  if (this != default_instance_) {
  }
}

void WithDrawCashInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WithDrawCashInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WithDrawCashInfo_descriptor_;
}

const WithDrawCashInfo& WithDrawCashInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

WithDrawCashInfo* WithDrawCashInfo::default_instance_ = NULL;

WithDrawCashInfo* WithDrawCashInfo::New() const {
  return new WithDrawCashInfo;
}

void WithDrawCashInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_alipyacc()) {
      if (alipyacc_ != &::google::protobuf::internal::kEmptyString) {
        alipyacc_->clear();
      }
    }
    time_ = GOOGLE_LONGLONG(0);
    money_ = 0;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WithDrawCashInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_alipyacc;
        break;
      }
      
      // optional string alipyacc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alipyacc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alipyacc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->alipyacc().data(), this->alipyacc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }
      
      // optional int64 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_money;
        break;
      }
      
      // optional double money = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_result;
        break;
      }
      
      // optional int32 result = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WithDrawCashInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }
  
  // optional string alipyacc = 2;
  if (has_alipyacc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alipyacc().data(), this->alipyacc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->alipyacc(), output);
  }
  
  // optional int64 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->time(), output);
  }
  
  // optional double money = 4;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->money(), output);
  }
  
  // optional int32 result = 5;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WithDrawCashInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }
  
  // optional string alipyacc = 2;
  if (has_alipyacc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alipyacc().data(), this->alipyacc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->alipyacc(), target);
  }
  
  // optional int64 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->time(), target);
  }
  
  // optional double money = 4;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->money(), target);
  }
  
  // optional int32 result = 5;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WithDrawCashInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
    // optional string alipyacc = 2;
    if (has_alipyacc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alipyacc());
    }
    
    // optional int64 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }
    
    // optional double money = 4;
    if (has_money()) {
      total_size += 1 + 8;
    }
    
    // optional int32 result = 5;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WithDrawCashInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WithDrawCashInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WithDrawCashInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WithDrawCashInfo::MergeFrom(const WithDrawCashInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_alipyacc()) {
      set_alipyacc(from.alipyacc());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WithDrawCashInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WithDrawCashInfo::CopyFrom(const WithDrawCashInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WithDrawCashInfo::IsInitialized() const {
  
  return true;
}

void WithDrawCashInfo::Swap(WithDrawCashInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(alipyacc_, other->alipyacc_);
    std::swap(time_, other->time_);
    std::swap(money_, other->money_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WithDrawCashInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WithDrawCashInfo_descriptor_;
  metadata.reflection = WithDrawCashInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateWithDrawCashInfoMessage::kMsgIDFieldNumber;
const int UpdateWithDrawCashInfoMessage::kIdFieldNumber;
const int UpdateWithDrawCashInfoMessage::kStateFieldNumber;
#endif  // !_MSC_VER

UpdateWithDrawCashInfoMessage::UpdateWithDrawCashInfoMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateWithDrawCashInfoMessage::InitAsDefaultInstance() {
}

UpdateWithDrawCashInfoMessage::UpdateWithDrawCashInfoMessage(const UpdateWithDrawCashInfoMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateWithDrawCashInfoMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 318;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateWithDrawCashInfoMessage::~UpdateWithDrawCashInfoMessage() {
  SharedDtor();
}

void UpdateWithDrawCashInfoMessage::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void UpdateWithDrawCashInfoMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateWithDrawCashInfoMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateWithDrawCashInfoMessage_descriptor_;
}

const UpdateWithDrawCashInfoMessage& UpdateWithDrawCashInfoMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

UpdateWithDrawCashInfoMessage* UpdateWithDrawCashInfoMessage::default_instance_ = NULL;

UpdateWithDrawCashInfoMessage* UpdateWithDrawCashInfoMessage::New() const {
  return new UpdateWithDrawCashInfoMessage;
}

void UpdateWithDrawCashInfoMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 318;
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateWithDrawCashInfoMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = UpdateWithDrawCashInfo];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }
      
      // optional string id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }
      
      // optional int32 state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateWithDrawCashInfoMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = UpdateWithDrawCashInfo];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // optional string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->id(), output);
  }
  
  // optional int32 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->state(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateWithDrawCashInfoMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = UpdateWithDrawCashInfo];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // optional string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }
  
  // optional int32 state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->state(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateWithDrawCashInfoMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = UpdateWithDrawCashInfo];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional string id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
    // optional int32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateWithDrawCashInfoMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateWithDrawCashInfoMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateWithDrawCashInfoMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateWithDrawCashInfoMessage::MergeFrom(const UpdateWithDrawCashInfoMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateWithDrawCashInfoMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateWithDrawCashInfoMessage::CopyFrom(const UpdateWithDrawCashInfoMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateWithDrawCashInfoMessage::IsInitialized() const {
  
  return true;
}

void UpdateWithDrawCashInfoMessage::Swap(UpdateWithDrawCashInfoMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(id_, other->id_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateWithDrawCashInfoMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateWithDrawCashInfoMessage_descriptor_;
  metadata.reflection = UpdateWithDrawCashInfoMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqAgencyInfoMessage::kMsgIDFieldNumber;
#endif  // !_MSC_VER

ReqAgencyInfoMessage::ReqAgencyInfoMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqAgencyInfoMessage::InitAsDefaultInstance() {
}

ReqAgencyInfoMessage::ReqAgencyInfoMessage(const ReqAgencyInfoMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqAgencyInfoMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 319;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAgencyInfoMessage::~ReqAgencyInfoMessage() {
  SharedDtor();
}

void ReqAgencyInfoMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqAgencyInfoMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAgencyInfoMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAgencyInfoMessage_descriptor_;
}

const ReqAgencyInfoMessage& ReqAgencyInfoMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ReqAgencyInfoMessage* ReqAgencyInfoMessage::default_instance_ = NULL;

ReqAgencyInfoMessage* ReqAgencyInfoMessage::New() const {
  return new ReqAgencyInfoMessage;
}

void ReqAgencyInfoMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 319;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqAgencyInfoMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqAgencyInfo];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqAgencyInfoMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqAgencyInfo];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqAgencyInfoMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqAgencyInfo];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqAgencyInfoMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqAgencyInfo];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAgencyInfoMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqAgencyInfoMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqAgencyInfoMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqAgencyInfoMessage::MergeFrom(const ReqAgencyInfoMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqAgencyInfoMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAgencyInfoMessage::CopyFrom(const ReqAgencyInfoMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAgencyInfoMessage::IsInitialized() const {
  
  return true;
}

void ReqAgencyInfoMessage::Swap(ReqAgencyInfoMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqAgencyInfoMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAgencyInfoMessage_descriptor_;
  metadata.reflection = ReqAgencyInfoMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResAgencyInfoMessage::kMsgIDFieldNumber;
const int ResAgencyInfoMessage::kAgencyInfoFieldNumber;
#endif  // !_MSC_VER

ResAgencyInfoMessage::ResAgencyInfoMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResAgencyInfoMessage::InitAsDefaultInstance() {
}

ResAgencyInfoMessage::ResAgencyInfoMessage(const ResAgencyInfoMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResAgencyInfoMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 320;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResAgencyInfoMessage::~ResAgencyInfoMessage() {
  SharedDtor();
}

void ResAgencyInfoMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResAgencyInfoMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResAgencyInfoMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResAgencyInfoMessage_descriptor_;
}

const ResAgencyInfoMessage& ResAgencyInfoMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ResAgencyInfoMessage* ResAgencyInfoMessage::default_instance_ = NULL;

ResAgencyInfoMessage* ResAgencyInfoMessage::New() const {
  return new ResAgencyInfoMessage;
}

void ResAgencyInfoMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 320;
  }
  agencyinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResAgencyInfoMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ResAgencyInfo];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_agencyInfo;
        break;
      }
      
      // repeated .com.game.proto.AgencyInfo agencyInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_agencyInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_agencyinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_agencyInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResAgencyInfoMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResAgencyInfo];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // repeated .com.game.proto.AgencyInfo agencyInfo = 2;
  for (int i = 0; i < this->agencyinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->agencyinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResAgencyInfoMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResAgencyInfo];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // repeated .com.game.proto.AgencyInfo agencyInfo = 2;
  for (int i = 0; i < this->agencyinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->agencyinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResAgencyInfoMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ResAgencyInfo];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
  }
  // repeated .com.game.proto.AgencyInfo agencyInfo = 2;
  total_size += 1 * this->agencyinfo_size();
  for (int i = 0; i < this->agencyinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->agencyinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResAgencyInfoMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResAgencyInfoMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResAgencyInfoMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResAgencyInfoMessage::MergeFrom(const ResAgencyInfoMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  agencyinfo_.MergeFrom(from.agencyinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResAgencyInfoMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResAgencyInfoMessage::CopyFrom(const ResAgencyInfoMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResAgencyInfoMessage::IsInitialized() const {
  
  return true;
}

void ResAgencyInfoMessage::Swap(ResAgencyInfoMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    agencyinfo_.Swap(&other->agencyinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResAgencyInfoMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResAgencyInfoMessage_descriptor_;
  metadata.reflection = ResAgencyInfoMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AgencyInfo::kIdFieldNumber;
const int AgencyInfo::kNameFieldNumber;
const int AgencyInfo::kQQFieldNumber;
const int AgencyInfo::kWeChatFieldNumber;
const int AgencyInfo::kDescribeFieldNumber;
#endif  // !_MSC_VER

AgencyInfo::AgencyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AgencyInfo::InitAsDefaultInstance() {
}

AgencyInfo::AgencyInfo(const AgencyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AgencyInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  qq_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wechat_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  describe_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AgencyInfo::~AgencyInfo() {
  SharedDtor();
}

void AgencyInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (qq_ != &::google::protobuf::internal::kEmptyString) {
    delete qq_;
  }
  if (wechat_ != &::google::protobuf::internal::kEmptyString) {
    delete wechat_;
  }
  if (describe_ != &::google::protobuf::internal::kEmptyString) {
    delete describe_;
  }
  if (this != default_instance_) {
  }
}

void AgencyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AgencyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AgencyInfo_descriptor_;
}

const AgencyInfo& AgencyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

AgencyInfo* AgencyInfo::default_instance_ = NULL;

AgencyInfo* AgencyInfo::New() const {
  return new AgencyInfo;
}

void AgencyInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_qq()) {
      if (qq_ != &::google::protobuf::internal::kEmptyString) {
        qq_->clear();
      }
    }
    if (has_wechat()) {
      if (wechat_ != &::google::protobuf::internal::kEmptyString) {
        wechat_->clear();
      }
    }
    if (has_describe()) {
      if (describe_ != &::google::protobuf::internal::kEmptyString) {
        describe_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AgencyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_QQ;
        break;
      }
      
      // optional string QQ = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_QQ:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qq()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->qq().data(), this->qq().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_weChat;
        break;
      }
      
      // optional string weChat = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weChat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wechat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->wechat().data(), this->wechat().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_describe;
        break;
      }
      
      // optional string describe = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_describe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_describe()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->describe().data(), this->describe().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AgencyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional string QQ = 3;
  if (has_qq()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->qq().data(), this->qq().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->qq(), output);
  }
  
  // optional string weChat = 4;
  if (has_wechat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wechat().data(), this->wechat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->wechat(), output);
  }
  
  // optional string describe = 5;
  if (has_describe()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->describe().data(), this->describe().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->describe(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AgencyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional string QQ = 3;
  if (has_qq()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->qq().data(), this->qq().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->qq(), target);
  }
  
  // optional string weChat = 4;
  if (has_wechat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wechat().data(), this->wechat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->wechat(), target);
  }
  
  // optional string describe = 5;
  if (has_describe()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->describe().data(), this->describe().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->describe(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AgencyInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string QQ = 3;
    if (has_qq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->qq());
    }
    
    // optional string weChat = 4;
    if (has_wechat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wechat());
    }
    
    // optional string describe = 5;
    if (has_describe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->describe());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AgencyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AgencyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AgencyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AgencyInfo::MergeFrom(const AgencyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_qq()) {
      set_qq(from.qq());
    }
    if (from.has_wechat()) {
      set_wechat(from.wechat());
    }
    if (from.has_describe()) {
      set_describe(from.describe());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AgencyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgencyInfo::CopyFrom(const AgencyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgencyInfo::IsInitialized() const {
  
  return true;
}

void AgencyInfo::Swap(AgencyInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(qq_, other->qq_);
    std::swap(wechat_, other->wechat_);
    std::swap(describe_, other->describe_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AgencyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AgencyInfo_descriptor_;
  metadata.reflection = AgencyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateBankWithdrawStateMessage::kMsgIDFieldNumber;
const int UpdateBankWithdrawStateMessage::kIsOpenFieldNumber;
#endif  // !_MSC_VER

UpdateBankWithdrawStateMessage::UpdateBankWithdrawStateMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateBankWithdrawStateMessage::InitAsDefaultInstance() {
}

UpdateBankWithdrawStateMessage::UpdateBankWithdrawStateMessage(const UpdateBankWithdrawStateMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateBankWithdrawStateMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 321;
  isopen_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateBankWithdrawStateMessage::~UpdateBankWithdrawStateMessage() {
  SharedDtor();
}

void UpdateBankWithdrawStateMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateBankWithdrawStateMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateBankWithdrawStateMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateBankWithdrawStateMessage_descriptor_;
}

const UpdateBankWithdrawStateMessage& UpdateBankWithdrawStateMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

UpdateBankWithdrawStateMessage* UpdateBankWithdrawStateMessage::default_instance_ = NULL;

UpdateBankWithdrawStateMessage* UpdateBankWithdrawStateMessage::New() const {
  return new UpdateBankWithdrawStateMessage;
}

void UpdateBankWithdrawStateMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 321;
    isopen_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateBankWithdrawStateMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = UpdateBankWithdrawState];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isOpen;
        break;
      }
      
      // optional bool isOpen = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isOpen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isopen_)));
          set_has_isopen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateBankWithdrawStateMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = UpdateBankWithdrawState];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // optional bool isOpen = 2;
  if (has_isopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isopen(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateBankWithdrawStateMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = UpdateBankWithdrawState];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // optional bool isOpen = 2;
  if (has_isopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isopen(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateBankWithdrawStateMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = UpdateBankWithdrawState];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional bool isOpen = 2;
    if (has_isopen()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateBankWithdrawStateMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateBankWithdrawStateMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateBankWithdrawStateMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateBankWithdrawStateMessage::MergeFrom(const UpdateBankWithdrawStateMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_isopen()) {
      set_isopen(from.isopen());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateBankWithdrawStateMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateBankWithdrawStateMessage::CopyFrom(const UpdateBankWithdrawStateMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateBankWithdrawStateMessage::IsInitialized() const {
  
  return true;
}

void UpdateBankWithdrawStateMessage::Swap(UpdateBankWithdrawStateMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(isopen_, other->isopen_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateBankWithdrawStateMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateBankWithdrawStateMessage_descriptor_;
  metadata.reflection = UpdateBankWithdrawStateMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateReferrerInfoMessage::kMsgIDFieldNumber;
const int UpdateReferrerInfoMessage::kNum1FieldNumber;
const int UpdateReferrerInfoMessage::kNum2FieldNumber;
const int UpdateReferrerInfoMessage::kNum3FieldNumber;
const int UpdateReferrerInfoMessage::kNum4FieldNumber;
const int UpdateReferrerInfoMessage::kGetMoneyFieldNumber;
#endif  // !_MSC_VER

UpdateReferrerInfoMessage::UpdateReferrerInfoMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateReferrerInfoMessage::InitAsDefaultInstance() {
}

UpdateReferrerInfoMessage::UpdateReferrerInfoMessage(const UpdateReferrerInfoMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateReferrerInfoMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 322;
  num1_ = 0;
  num2_ = 0;
  num3_ = 0;
  num4_ = 0;
  getmoney_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateReferrerInfoMessage::~UpdateReferrerInfoMessage() {
  SharedDtor();
}

void UpdateReferrerInfoMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateReferrerInfoMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateReferrerInfoMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateReferrerInfoMessage_descriptor_;
}

const UpdateReferrerInfoMessage& UpdateReferrerInfoMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

UpdateReferrerInfoMessage* UpdateReferrerInfoMessage::default_instance_ = NULL;

UpdateReferrerInfoMessage* UpdateReferrerInfoMessage::New() const {
  return new UpdateReferrerInfoMessage;
}

void UpdateReferrerInfoMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 322;
    num1_ = 0;
    num2_ = 0;
    num3_ = 0;
    num4_ = 0;
    getmoney_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateReferrerInfoMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = UpdateReferrerInfo];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num1;
        break;
      }
      
      // optional int32 num1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num1_)));
          set_has_num1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num2;
        break;
      }
      
      // optional int32 num2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num2_)));
          set_has_num2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_num3;
        break;
      }
      
      // optional int32 num3 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num3_)));
          set_has_num3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_num4;
        break;
      }
      
      // optional int32 num4 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num4_)));
          set_has_num4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_getMoney;
        break;
      }
      
      // optional double getMoney = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_getMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &getmoney_)));
          set_has_getmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateReferrerInfoMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = UpdateReferrerInfo];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // optional int32 num1 = 2;
  if (has_num1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num1(), output);
  }
  
  // optional int32 num2 = 3;
  if (has_num2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num2(), output);
  }
  
  // optional int32 num3 = 4;
  if (has_num3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num3(), output);
  }
  
  // optional int32 num4 = 5;
  if (has_num4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->num4(), output);
  }
  
  // optional double getMoney = 6;
  if (has_getmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->getmoney(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateReferrerInfoMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = UpdateReferrerInfo];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // optional int32 num1 = 2;
  if (has_num1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num1(), target);
  }
  
  // optional int32 num2 = 3;
  if (has_num2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num2(), target);
  }
  
  // optional int32 num3 = 4;
  if (has_num3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num3(), target);
  }
  
  // optional int32 num4 = 5;
  if (has_num4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->num4(), target);
  }
  
  // optional double getMoney = 6;
  if (has_getmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->getmoney(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateReferrerInfoMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = UpdateReferrerInfo];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional int32 num1 = 2;
    if (has_num1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num1());
    }
    
    // optional int32 num2 = 3;
    if (has_num2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num2());
    }
    
    // optional int32 num3 = 4;
    if (has_num3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num3());
    }
    
    // optional int32 num4 = 5;
    if (has_num4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num4());
    }
    
    // optional double getMoney = 6;
    if (has_getmoney()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateReferrerInfoMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateReferrerInfoMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateReferrerInfoMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateReferrerInfoMessage::MergeFrom(const UpdateReferrerInfoMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_num1()) {
      set_num1(from.num1());
    }
    if (from.has_num2()) {
      set_num2(from.num2());
    }
    if (from.has_num3()) {
      set_num3(from.num3());
    }
    if (from.has_num4()) {
      set_num4(from.num4());
    }
    if (from.has_getmoney()) {
      set_getmoney(from.getmoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateReferrerInfoMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateReferrerInfoMessage::CopyFrom(const UpdateReferrerInfoMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateReferrerInfoMessage::IsInitialized() const {
  
  return true;
}

void UpdateReferrerInfoMessage::Swap(UpdateReferrerInfoMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(num1_, other->num1_);
    std::swap(num2_, other->num2_);
    std::swap(num3_, other->num3_);
    std::swap(num4_, other->num4_);
    std::swap(getmoney_, other->getmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateReferrerInfoMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateReferrerInfoMessage_descriptor_;
  metadata.reflection = UpdateReferrerInfoMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqTransferReferMoneyMessage::kMsgIDFieldNumber;
#endif  // !_MSC_VER

ReqTransferReferMoneyMessage::ReqTransferReferMoneyMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqTransferReferMoneyMessage::InitAsDefaultInstance() {
}

ReqTransferReferMoneyMessage::ReqTransferReferMoneyMessage(const ReqTransferReferMoneyMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqTransferReferMoneyMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 323;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqTransferReferMoneyMessage::~ReqTransferReferMoneyMessage() {
  SharedDtor();
}

void ReqTransferReferMoneyMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqTransferReferMoneyMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqTransferReferMoneyMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqTransferReferMoneyMessage_descriptor_;
}

const ReqTransferReferMoneyMessage& ReqTransferReferMoneyMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ReqTransferReferMoneyMessage* ReqTransferReferMoneyMessage::default_instance_ = NULL;

ReqTransferReferMoneyMessage* ReqTransferReferMoneyMessage::New() const {
  return new ReqTransferReferMoneyMessage;
}

void ReqTransferReferMoneyMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 323;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqTransferReferMoneyMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqTransferReferMoney];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqTransferReferMoneyMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqTransferReferMoney];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqTransferReferMoneyMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqTransferReferMoney];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqTransferReferMoneyMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqTransferReferMoney];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqTransferReferMoneyMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqTransferReferMoneyMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqTransferReferMoneyMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqTransferReferMoneyMessage::MergeFrom(const ReqTransferReferMoneyMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqTransferReferMoneyMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqTransferReferMoneyMessage::CopyFrom(const ReqTransferReferMoneyMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqTransferReferMoneyMessage::IsInitialized() const {
  
  return true;
}

void ReqTransferReferMoneyMessage::Swap(ReqTransferReferMoneyMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqTransferReferMoneyMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqTransferReferMoneyMessage_descriptor_;
  metadata.reflection = ReqTransferReferMoneyMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResSystemNoticeMessage::kMsgIDFieldNumber;
const int ResSystemNoticeMessage::kStateFieldNumber;
const int ResSystemNoticeMessage::kMoneyFieldNumber;
const int ResSystemNoticeMessage::kContentFieldNumber;
const int ResSystemNoticeMessage::kVipFieldNumber;
const int ResSystemNoticeMessage::kGameidFieldNumber;
#endif  // !_MSC_VER

ResSystemNoticeMessage::ResSystemNoticeMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResSystemNoticeMessage::InitAsDefaultInstance() {
}

ResSystemNoticeMessage::ResSystemNoticeMessage(const ResSystemNoticeMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResSystemNoticeMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 324;
  state_ = 0;
  money_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vip_ = 0;
  gameid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResSystemNoticeMessage::~ResSystemNoticeMessage() {
  SharedDtor();
}

void ResSystemNoticeMessage::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void ResSystemNoticeMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResSystemNoticeMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResSystemNoticeMessage_descriptor_;
}

const ResSystemNoticeMessage& ResSystemNoticeMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ResSystemNoticeMessage* ResSystemNoticeMessage::default_instance_ = NULL;

ResSystemNoticeMessage* ResSystemNoticeMessage::New() const {
  return new ResSystemNoticeMessage;
}

void ResSystemNoticeMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 324;
    state_ = 0;
    money_ = 0;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    vip_ = 0;
    gameid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResSystemNoticeMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ResSystemNotice];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }
      
      // optional int32 state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_money;
        break;
      }
      
      // optional double money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }
      
      // optional string content = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_vip;
        break;
      }
      
      // optional int32 vip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_gameid;
        break;
      }
      
      // optional int32 gameid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResSystemNoticeMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResSystemNotice];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // optional int32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }
  
  // optional double money = 3;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->money(), output);
  }
  
  // optional string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->content(), output);
  }
  
  // optional int32 vip = 5;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->vip(), output);
  }
  
  // optional int32 gameid = 6;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->gameid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResSystemNoticeMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResSystemNotice];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // optional int32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }
  
  // optional double money = 3;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->money(), target);
  }
  
  // optional string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->content(), target);
  }
  
  // optional int32 vip = 5;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->vip(), target);
  }
  
  // optional int32 gameid = 6;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->gameid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResSystemNoticeMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ResSystemNotice];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional int32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }
    
    // optional double money = 3;
    if (has_money()) {
      total_size += 1 + 8;
    }
    
    // optional string content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }
    
    // optional int32 vip = 5;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip());
    }
    
    // optional int32 gameid = 6;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResSystemNoticeMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResSystemNoticeMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResSystemNoticeMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResSystemNoticeMessage::MergeFrom(const ResSystemNoticeMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_vip()) {
      set_vip(from.vip());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResSystemNoticeMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResSystemNoticeMessage::CopyFrom(const ResSystemNoticeMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResSystemNoticeMessage::IsInitialized() const {
  
  return true;
}

void ResSystemNoticeMessage::Swap(ResSystemNoticeMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(state_, other->state_);
    std::swap(money_, other->money_);
    std::swap(content_, other->content_);
    std::swap(vip_, other->vip_);
    std::swap(gameid_, other->gameid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResSystemNoticeMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResSystemNoticeMessage_descriptor_;
  metadata.reflection = ResSystemNoticeMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqReadMailMessage::kMsgIDFieldNumber;
const int ReqReadMailMessage::kMailIdFieldNumber;
#endif  // !_MSC_VER

ReqReadMailMessage::ReqReadMailMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqReadMailMessage::InitAsDefaultInstance() {
}

ReqReadMailMessage::ReqReadMailMessage(const ReqReadMailMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqReadMailMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 401;
  mailid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqReadMailMessage::~ReqReadMailMessage() {
  SharedDtor();
}

void ReqReadMailMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqReadMailMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqReadMailMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqReadMailMessage_descriptor_;
}

const ReqReadMailMessage& ReqReadMailMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ReqReadMailMessage* ReqReadMailMessage::default_instance_ = NULL;

ReqReadMailMessage* ReqReadMailMessage::New() const {
  return new ReqReadMailMessage;
}

void ReqReadMailMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 401;
    mailid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqReadMailMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqReadMail];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mailId;
        break;
      }
      
      // optional int64 mailId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mailId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqReadMailMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqReadMail];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // optional int64 mailId = 2;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->mailid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqReadMailMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqReadMail];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // optional int64 mailId = 2;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->mailid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqReadMailMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqReadMail];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional int64 mailId = 2;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mailid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqReadMailMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqReadMailMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqReadMailMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqReadMailMessage::MergeFrom(const ReqReadMailMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqReadMailMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqReadMailMessage::CopyFrom(const ReqReadMailMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqReadMailMessage::IsInitialized() const {
  
  return true;
}

void ReqReadMailMessage::Swap(ReqReadMailMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(mailid_, other->mailid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqReadMailMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqReadMailMessage_descriptor_;
  metadata.reflection = ReqReadMailMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqDeleteMailMessage::kMsgIDFieldNumber;
const int ReqDeleteMailMessage::kMailIdsFieldNumber;
#endif  // !_MSC_VER

ReqDeleteMailMessage::ReqDeleteMailMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqDeleteMailMessage::InitAsDefaultInstance() {
}

ReqDeleteMailMessage::ReqDeleteMailMessage(const ReqDeleteMailMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqDeleteMailMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 400;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqDeleteMailMessage::~ReqDeleteMailMessage() {
  SharedDtor();
}

void ReqDeleteMailMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqDeleteMailMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqDeleteMailMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqDeleteMailMessage_descriptor_;
}

const ReqDeleteMailMessage& ReqDeleteMailMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ReqDeleteMailMessage* ReqDeleteMailMessage::default_instance_ = NULL;

ReqDeleteMailMessage* ReqDeleteMailMessage::New() const {
  return new ReqDeleteMailMessage;
}

void ReqDeleteMailMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 400;
  }
  mailids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqDeleteMailMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqDeleteMail];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mailIds;
        break;
      }
      
      // repeated int64 mailIds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mailIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_mailids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_mailids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mailIds;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqDeleteMailMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqDeleteMail];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // repeated int64 mailIds = 2;
  for (int i = 0; i < this->mailids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->mailids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqDeleteMailMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqDeleteMail];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // repeated int64 mailIds = 2;
  for (int i = 0; i < this->mailids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->mailids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqDeleteMailMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqDeleteMail];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
  }
  // repeated int64 mailIds = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->mailids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->mailids(i));
    }
    total_size += 1 * this->mailids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqDeleteMailMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqDeleteMailMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqDeleteMailMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqDeleteMailMessage::MergeFrom(const ReqDeleteMailMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  mailids_.MergeFrom(from.mailids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqDeleteMailMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqDeleteMailMessage::CopyFrom(const ReqDeleteMailMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqDeleteMailMessage::IsInitialized() const {
  
  return true;
}

void ReqDeleteMailMessage::Swap(ReqDeleteMailMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    mailids_.Swap(&other->mailids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqDeleteMailMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqDeleteMailMessage_descriptor_;
  metadata.reflection = ReqDeleteMailMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqGetMailMoneyMessage::kMsgIDFieldNumber;
const int ReqGetMailMoneyMessage::kMailIdFieldNumber;
#endif  // !_MSC_VER

ReqGetMailMoneyMessage::ReqGetMailMoneyMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqGetMailMoneyMessage::InitAsDefaultInstance() {
}

ReqGetMailMoneyMessage::ReqGetMailMoneyMessage(const ReqGetMailMoneyMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqGetMailMoneyMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 402;
  mailid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqGetMailMoneyMessage::~ReqGetMailMoneyMessage() {
  SharedDtor();
}

void ReqGetMailMoneyMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqGetMailMoneyMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqGetMailMoneyMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqGetMailMoneyMessage_descriptor_;
}

const ReqGetMailMoneyMessage& ReqGetMailMoneyMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ReqGetMailMoneyMessage* ReqGetMailMoneyMessage::default_instance_ = NULL;

ReqGetMailMoneyMessage* ReqGetMailMoneyMessage::New() const {
  return new ReqGetMailMoneyMessage;
}

void ReqGetMailMoneyMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 402;
    mailid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqGetMailMoneyMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqGetMailMoney];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mailId;
        break;
      }
      
      // optional int64 mailId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mailId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqGetMailMoneyMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqGetMailMoney];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // optional int64 mailId = 2;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->mailid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqGetMailMoneyMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqGetMailMoney];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // optional int64 mailId = 2;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->mailid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqGetMailMoneyMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqGetMailMoney];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional int64 mailId = 2;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mailid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqGetMailMoneyMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqGetMailMoneyMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqGetMailMoneyMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqGetMailMoneyMessage::MergeFrom(const ReqGetMailMoneyMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqGetMailMoneyMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGetMailMoneyMessage::CopyFrom(const ReqGetMailMoneyMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGetMailMoneyMessage::IsInitialized() const {
  
  return true;
}

void ReqGetMailMoneyMessage::Swap(ReqGetMailMoneyMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(mailid_, other->mailid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqGetMailMoneyMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqGetMailMoneyMessage_descriptor_;
  metadata.reflection = ReqGetMailMoneyMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateMailMessage::kMsgIDFieldNumber;
const int UpdateMailMessage::kTypeFieldNumber;
const int UpdateMailMessage::kMailsFieldNumber;
#endif  // !_MSC_VER

UpdateMailMessage::UpdateMailMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateMailMessage::InitAsDefaultInstance() {
}

UpdateMailMessage::UpdateMailMessage(const UpdateMailMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateMailMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 403;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateMailMessage::~UpdateMailMessage() {
  SharedDtor();
}

void UpdateMailMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateMailMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateMailMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateMailMessage_descriptor_;
}

const UpdateMailMessage& UpdateMailMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

UpdateMailMessage* UpdateMailMessage::default_instance_ = NULL;

UpdateMailMessage* UpdateMailMessage::New() const {
  return new UpdateMailMessage;
}

void UpdateMailMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 403;
    type_ = 0;
  }
  mails_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateMailMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = UpdateMail];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mails;
        break;
      }
      
      // repeated .com.game.proto.MailInfo mails = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mails()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mails;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateMailMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = UpdateMail];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }
  
  // repeated .com.game.proto.MailInfo mails = 3;
  for (int i = 0; i < this->mails_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->mails(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateMailMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = UpdateMail];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }
  
  // repeated .com.game.proto.MailInfo mails = 3;
  for (int i = 0; i < this->mails_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->mails(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateMailMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = UpdateMail];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
  }
  // repeated .com.game.proto.MailInfo mails = 3;
  total_size += 1 * this->mails_size();
  for (int i = 0; i < this->mails_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mails(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateMailMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateMailMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateMailMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateMailMessage::MergeFrom(const UpdateMailMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  mails_.MergeFrom(from.mails_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateMailMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateMailMessage::CopyFrom(const UpdateMailMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateMailMessage::IsInitialized() const {
  
  return true;
}

void UpdateMailMessage::Swap(UpdateMailMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(type_, other->type_);
    mails_.Swap(&other->mails_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateMailMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateMailMessage_descriptor_;
  metadata.reflection = UpdateMailMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MailInfo::kMailIdFieldNumber;
const int MailInfo::kSendNameFieldNumber;
const int MailInfo::kTitleFieldNumber;
const int MailInfo::kNoticeFieldNumber;
const int MailInfo::kCreatTimeFieldNumber;
const int MailInfo::kIsReadFieldNumber;
const int MailInfo::kMoneyFieldNumber;
const int MailInfo::kGetMoneyTimeFieldNumber;
const int MailInfo::kGoodsListFieldNumber;
#endif  // !_MSC_VER

MailInfo::MailInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MailInfo::InitAsDefaultInstance() {
}

MailInfo::MailInfo(const MailInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MailInfo::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = GOOGLE_LONGLONG(0);
  sendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  creattime_ = GOOGLE_LONGLONG(0);
  isread_ = false;
  money_ = 0;
  getmoneytime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailInfo::~MailInfo() {
  SharedDtor();
}

void MailInfo::SharedDtor() {
  if (sendname_ != &::google::protobuf::internal::kEmptyString) {
    delete sendname_;
  }
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (this != default_instance_) {
  }
}

void MailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailInfo_descriptor_;
}

const MailInfo& MailInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

MailInfo* MailInfo::default_instance_ = NULL;

MailInfo* MailInfo::New() const {
  return new MailInfo;
}

void MailInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = GOOGLE_LONGLONG(0);
    if (has_sendname()) {
      if (sendname_ != &::google::protobuf::internal::kEmptyString) {
        sendname_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::kEmptyString) {
        notice_->clear();
      }
    }
    creattime_ = GOOGLE_LONGLONG(0);
    isread_ = false;
    money_ = 0;
    getmoneytime_ = GOOGLE_LONGLONG(0);
  }
  goodslist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 mailId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sendName;
        break;
      }
      
      // optional string sendName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sendName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sendname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sendname().data(), this->sendname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_title;
        break;
      }
      
      // optional string title = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_notice;
        break;
      }
      
      // optional string notice = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->notice().data(), this->notice().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_creatTime;
        break;
      }
      
      // optional int64 creatTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_creatTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &creattime_)));
          set_has_creattime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_isRead;
        break;
      }
      
      // optional bool isRead = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isRead:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isread_)));
          set_has_isread();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_money;
        break;
      }
      
      // optional double money = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_getMoneyTime;
        break;
      }
      
      // optional int64 getMoneyTime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getMoneyTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &getmoneytime_)));
          set_has_getmoneytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_goodsList;
        break;
      }
      
      // repeated .com.game.proto.MailGoods goodsList = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_goodsList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goodslist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_goodsList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 mailId = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->mailid(), output);
  }
  
  // optional string sendName = 2;
  if (has_sendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendname().data(), this->sendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sendname(), output);
  }
  
  // optional string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->title(), output);
  }
  
  // optional string notice = 4;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->notice(), output);
  }
  
  // optional int64 creatTime = 5;
  if (has_creattime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->creattime(), output);
  }
  
  // optional bool isRead = 6;
  if (has_isread()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isread(), output);
  }
  
  // optional double money = 7;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->money(), output);
  }
  
  // optional int64 getMoneyTime = 8;
  if (has_getmoneytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->getmoneytime(), output);
  }
  
  // repeated .com.game.proto.MailGoods goodsList = 9;
  for (int i = 0; i < this->goodslist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->goodslist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MailInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 mailId = 1;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->mailid(), target);
  }
  
  // optional string sendName = 2;
  if (has_sendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendname().data(), this->sendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sendname(), target);
  }
  
  // optional string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->title(), target);
  }
  
  // optional string notice = 4;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->notice(), target);
  }
  
  // optional int64 creatTime = 5;
  if (has_creattime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->creattime(), target);
  }
  
  // optional bool isRead = 6;
  if (has_isread()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isread(), target);
  }
  
  // optional double money = 7;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->money(), target);
  }
  
  // optional int64 getMoneyTime = 8;
  if (has_getmoneytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->getmoneytime(), target);
  }
  
  // repeated .com.game.proto.MailGoods goodsList = 9;
  for (int i = 0; i < this->goodslist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->goodslist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MailInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 mailId = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mailid());
    }
    
    // optional string sendName = 2;
    if (has_sendname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sendname());
    }
    
    // optional string title = 3;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }
    
    // optional string notice = 4;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notice());
    }
    
    // optional int64 creatTime = 5;
    if (has_creattime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->creattime());
    }
    
    // optional bool isRead = 6;
    if (has_isread()) {
      total_size += 1 + 1;
    }
    
    // optional double money = 7;
    if (has_money()) {
      total_size += 1 + 8;
    }
    
    // optional int64 getMoneyTime = 8;
    if (has_getmoneytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->getmoneytime());
    }
    
  }
  // repeated .com.game.proto.MailGoods goodsList = 9;
  total_size += 1 * this->goodslist_size();
  for (int i = 0; i < this->goodslist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->goodslist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MailInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MailInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MailInfo::MergeFrom(const MailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  goodslist_.MergeFrom(from.goodslist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_sendname()) {
      set_sendname(from.sendname());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_notice()) {
      set_notice(from.notice());
    }
    if (from.has_creattime()) {
      set_creattime(from.creattime());
    }
    if (from.has_isread()) {
      set_isread(from.isread());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_getmoneytime()) {
      set_getmoneytime(from.getmoneytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MailInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailInfo::CopyFrom(const MailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailInfo::IsInitialized() const {
  
  return true;
}

void MailInfo::Swap(MailInfo* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(sendname_, other->sendname_);
    std::swap(title_, other->title_);
    std::swap(notice_, other->notice_);
    std::swap(creattime_, other->creattime_);
    std::swap(isread_, other->isread_);
    std::swap(money_, other->money_);
    std::swap(getmoneytime_, other->getmoneytime_);
    goodslist_.Swap(&other->goodslist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MailInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailInfo_descriptor_;
  metadata.reflection = MailInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MailGoods::kGoodsModelIdFieldNumber;
const int MailGoods::kGoodsNumFieldNumber;
#endif  // !_MSC_VER

MailGoods::MailGoods()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MailGoods::InitAsDefaultInstance() {
}

MailGoods::MailGoods(const MailGoods& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MailGoods::SharedCtor() {
  _cached_size_ = 0;
  goodsmodelid_ = 0;
  goodsnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailGoods::~MailGoods() {
  SharedDtor();
}

void MailGoods::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MailGoods::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailGoods::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailGoods_descriptor_;
}

const MailGoods& MailGoods::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

MailGoods* MailGoods::default_instance_ = NULL;

MailGoods* MailGoods::New() const {
  return new MailGoods;
}

void MailGoods::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    goodsmodelid_ = 0;
    goodsnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MailGoods::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 goodsModelId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goodsmodelid_)));
          set_has_goodsmodelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_goodsNum;
        break;
      }
      
      // optional int32 goodsNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goodsNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goodsnum_)));
          set_has_goodsnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MailGoods::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 goodsModelId = 1;
  if (has_goodsmodelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->goodsmodelid(), output);
  }
  
  // optional int32 goodsNum = 2;
  if (has_goodsnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->goodsnum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MailGoods::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 goodsModelId = 1;
  if (has_goodsmodelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->goodsmodelid(), target);
  }
  
  // optional int32 goodsNum = 2;
  if (has_goodsnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->goodsnum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MailGoods::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 goodsModelId = 1;
    if (has_goodsmodelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goodsmodelid());
    }
    
    // optional int32 goodsNum = 2;
    if (has_goodsnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goodsnum());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailGoods::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MailGoods* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MailGoods*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MailGoods::MergeFrom(const MailGoods& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_goodsmodelid()) {
      set_goodsmodelid(from.goodsmodelid());
    }
    if (from.has_goodsnum()) {
      set_goodsnum(from.goodsnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MailGoods::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailGoods::CopyFrom(const MailGoods& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailGoods::IsInitialized() const {
  
  return true;
}

void MailGoods::Swap(MailGoods* other) {
  if (other != this) {
    std::swap(goodsmodelid_, other->goodsmodelid_);
    std::swap(goodsnum_, other->goodsnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MailGoods::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailGoods_descriptor_;
  metadata.reflection = MailGoods_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdatePlayerRechargeInfoMessage::kMsgIDFieldNumber;
const int UpdatePlayerRechargeInfoMessage::kTypeFieldNumber;
const int UpdatePlayerRechargeInfoMessage::kAgencyRechargeCountFieldNumber;
const int UpdatePlayerRechargeInfoMessage::kAgencyRechargeMoneyFieldNumber;
const int UpdatePlayerRechargeInfoMessage::kOfficialRechargeCountFieldNumber;
const int UpdatePlayerRechargeInfoMessage::kOfficialRechargeMoneyFieldNumber;
#endif  // !_MSC_VER

UpdatePlayerRechargeInfoMessage::UpdatePlayerRechargeInfoMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdatePlayerRechargeInfoMessage::InitAsDefaultInstance() {
}

UpdatePlayerRechargeInfoMessage::UpdatePlayerRechargeInfoMessage(const UpdatePlayerRechargeInfoMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdatePlayerRechargeInfoMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 404;
  type_ = 0;
  agencyrechargecount_ = 0;
  agencyrechargemoney_ = 0;
  officialrechargecount_ = 0;
  officialrechargemoney_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdatePlayerRechargeInfoMessage::~UpdatePlayerRechargeInfoMessage() {
  SharedDtor();
}

void UpdatePlayerRechargeInfoMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdatePlayerRechargeInfoMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdatePlayerRechargeInfoMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdatePlayerRechargeInfoMessage_descriptor_;
}

const UpdatePlayerRechargeInfoMessage& UpdatePlayerRechargeInfoMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

UpdatePlayerRechargeInfoMessage* UpdatePlayerRechargeInfoMessage::default_instance_ = NULL;

UpdatePlayerRechargeInfoMessage* UpdatePlayerRechargeInfoMessage::New() const {
  return new UpdatePlayerRechargeInfoMessage;
}

void UpdatePlayerRechargeInfoMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 404;
    type_ = 0;
    agencyrechargecount_ = 0;
    agencyrechargemoney_ = 0;
    officialrechargecount_ = 0;
    officialrechargemoney_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdatePlayerRechargeInfoMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = UpdatePlayerRechargeInfo];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_agencyRechargeCount;
        break;
      }
      
      // optional int32 agencyRechargeCount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agencyRechargeCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &agencyrechargecount_)));
          set_has_agencyrechargecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_agencyRechargeMoney;
        break;
      }
      
      // optional double agencyRechargeMoney = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_agencyRechargeMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &agencyrechargemoney_)));
          set_has_agencyrechargemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_officialRechargeCount;
        break;
      }
      
      // optional int32 officialRechargeCount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_officialRechargeCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &officialrechargecount_)));
          set_has_officialrechargecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_officialRechargeMoney;
        break;
      }
      
      // optional double officialRechargeMoney = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_officialRechargeMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &officialrechargemoney_)));
          set_has_officialrechargemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdatePlayerRechargeInfoMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = UpdatePlayerRechargeInfo];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }
  
  // optional int32 agencyRechargeCount = 3;
  if (has_agencyrechargecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->agencyrechargecount(), output);
  }
  
  // optional double agencyRechargeMoney = 4;
  if (has_agencyrechargemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->agencyrechargemoney(), output);
  }
  
  // optional int32 officialRechargeCount = 5;
  if (has_officialrechargecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->officialrechargecount(), output);
  }
  
  // optional double officialRechargeMoney = 6;
  if (has_officialrechargemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->officialrechargemoney(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdatePlayerRechargeInfoMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = UpdatePlayerRechargeInfo];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }
  
  // optional int32 agencyRechargeCount = 3;
  if (has_agencyrechargecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->agencyrechargecount(), target);
  }
  
  // optional double agencyRechargeMoney = 4;
  if (has_agencyrechargemoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->agencyrechargemoney(), target);
  }
  
  // optional int32 officialRechargeCount = 5;
  if (has_officialrechargecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->officialrechargecount(), target);
  }
  
  // optional double officialRechargeMoney = 6;
  if (has_officialrechargemoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->officialrechargemoney(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdatePlayerRechargeInfoMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = UpdatePlayerRechargeInfo];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional int32 agencyRechargeCount = 3;
    if (has_agencyrechargecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->agencyrechargecount());
    }
    
    // optional double agencyRechargeMoney = 4;
    if (has_agencyrechargemoney()) {
      total_size += 1 + 8;
    }
    
    // optional int32 officialRechargeCount = 5;
    if (has_officialrechargecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->officialrechargecount());
    }
    
    // optional double officialRechargeMoney = 6;
    if (has_officialrechargemoney()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdatePlayerRechargeInfoMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdatePlayerRechargeInfoMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdatePlayerRechargeInfoMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdatePlayerRechargeInfoMessage::MergeFrom(const UpdatePlayerRechargeInfoMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_agencyrechargecount()) {
      set_agencyrechargecount(from.agencyrechargecount());
    }
    if (from.has_agencyrechargemoney()) {
      set_agencyrechargemoney(from.agencyrechargemoney());
    }
    if (from.has_officialrechargecount()) {
      set_officialrechargecount(from.officialrechargecount());
    }
    if (from.has_officialrechargemoney()) {
      set_officialrechargemoney(from.officialrechargemoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdatePlayerRechargeInfoMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdatePlayerRechargeInfoMessage::CopyFrom(const UpdatePlayerRechargeInfoMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatePlayerRechargeInfoMessage::IsInitialized() const {
  
  return true;
}

void UpdatePlayerRechargeInfoMessage::Swap(UpdatePlayerRechargeInfoMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(type_, other->type_);
    std::swap(agencyrechargecount_, other->agencyrechargecount_);
    std::swap(agencyrechargemoney_, other->agencyrechargemoney_);
    std::swap(officialrechargecount_, other->officialrechargecount_);
    std::swap(officialrechargemoney_, other->officialrechargemoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdatePlayerRechargeInfoMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdatePlayerRechargeInfoMessage_descriptor_;
  metadata.reflection = UpdatePlayerRechargeInfoMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateControllerRechargeMessage::kMsgIDFieldNumber;
const int UpdateControllerRechargeMessage::kIsOpenFieldNumber;
const int UpdateControllerRechargeMessage::kRechargeChannelFieldNumber;
const int UpdateControllerRechargeMessage::kInitRatioFieldNumber;
#endif  // !_MSC_VER

UpdateControllerRechargeMessage::UpdateControllerRechargeMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateControllerRechargeMessage::InitAsDefaultInstance() {
}

UpdateControllerRechargeMessage::UpdateControllerRechargeMessage(const UpdateControllerRechargeMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateControllerRechargeMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 405;
  isopen_ = false;
  rechargechannel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  initratio_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateControllerRechargeMessage::~UpdateControllerRechargeMessage() {
  SharedDtor();
}

void UpdateControllerRechargeMessage::SharedDtor() {
  if (rechargechannel_ != &::google::protobuf::internal::kEmptyString) {
    delete rechargechannel_;
  }
  if (this != default_instance_) {
  }
}

void UpdateControllerRechargeMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateControllerRechargeMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateControllerRechargeMessage_descriptor_;
}

const UpdateControllerRechargeMessage& UpdateControllerRechargeMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

UpdateControllerRechargeMessage* UpdateControllerRechargeMessage::default_instance_ = NULL;

UpdateControllerRechargeMessage* UpdateControllerRechargeMessage::New() const {
  return new UpdateControllerRechargeMessage;
}

void UpdateControllerRechargeMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 405;
    isopen_ = false;
    if (has_rechargechannel()) {
      if (rechargechannel_ != &::google::protobuf::internal::kEmptyString) {
        rechargechannel_->clear();
      }
    }
    initratio_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateControllerRechargeMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = UpdateControllerRecharge];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isOpen;
        break;
      }
      
      // optional bool isOpen = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isOpen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isopen_)));
          set_has_isopen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rechargeChannel;
        break;
      }
      
      // optional string rechargeChannel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rechargeChannel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rechargechannel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rechargechannel().data(), this->rechargechannel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_initRatio;
        break;
      }
      
      // optional int32 initRatio = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_initRatio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &initratio_)));
          set_has_initratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateControllerRechargeMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = UpdateControllerRecharge];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // optional bool isOpen = 2;
  if (has_isopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isopen(), output);
  }
  
  // optional string rechargeChannel = 3;
  if (has_rechargechannel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rechargechannel().data(), this->rechargechannel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->rechargechannel(), output);
  }
  
  // optional int32 initRatio = 4;
  if (has_initratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->initratio(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateControllerRechargeMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = UpdateControllerRecharge];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // optional bool isOpen = 2;
  if (has_isopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isopen(), target);
  }
  
  // optional string rechargeChannel = 3;
  if (has_rechargechannel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rechargechannel().data(), this->rechargechannel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->rechargechannel(), target);
  }
  
  // optional int32 initRatio = 4;
  if (has_initratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->initratio(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateControllerRechargeMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = UpdateControllerRecharge];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional bool isOpen = 2;
    if (has_isopen()) {
      total_size += 1 + 1;
    }
    
    // optional string rechargeChannel = 3;
    if (has_rechargechannel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rechargechannel());
    }
    
    // optional int32 initRatio = 4;
    if (has_initratio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->initratio());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateControllerRechargeMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateControllerRechargeMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateControllerRechargeMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateControllerRechargeMessage::MergeFrom(const UpdateControllerRechargeMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_isopen()) {
      set_isopen(from.isopen());
    }
    if (from.has_rechargechannel()) {
      set_rechargechannel(from.rechargechannel());
    }
    if (from.has_initratio()) {
      set_initratio(from.initratio());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateControllerRechargeMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateControllerRechargeMessage::CopyFrom(const UpdateControllerRechargeMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateControllerRechargeMessage::IsInitialized() const {
  
  return true;
}

void UpdateControllerRechargeMessage::Swap(UpdateControllerRechargeMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(isopen_, other->isopen_);
    std::swap(rechargechannel_, other->rechargechannel_);
    std::swap(initratio_, other->initratio_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateControllerRechargeMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateControllerRechargeMessage_descriptor_;
  metadata.reflection = UpdateControllerRechargeMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqChatWithAgentMessage::kMsgIDFieldNumber;
const int ReqChatWithAgentMessage::kTypeFieldNumber;
const int ReqChatWithAgentMessage::kAgentIdFieldNumber;
const int ReqChatWithAgentMessage::kContentFieldNumber;
#endif  // !_MSC_VER

ReqChatWithAgentMessage::ReqChatWithAgentMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqChatWithAgentMessage::InitAsDefaultInstance() {
}

ReqChatWithAgentMessage::ReqChatWithAgentMessage(const ReqChatWithAgentMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqChatWithAgentMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 325;
  type_ = 0;
  agentid_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqChatWithAgentMessage::~ReqChatWithAgentMessage() {
  SharedDtor();
}

void ReqChatWithAgentMessage::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void ReqChatWithAgentMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqChatWithAgentMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqChatWithAgentMessage_descriptor_;
}

const ReqChatWithAgentMessage& ReqChatWithAgentMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ReqChatWithAgentMessage* ReqChatWithAgentMessage::default_instance_ = NULL;

ReqChatWithAgentMessage* ReqChatWithAgentMessage::New() const {
  return new ReqChatWithAgentMessage;
}

void ReqChatWithAgentMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 325;
    type_ = 0;
    agentid_ = 0;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqChatWithAgentMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqChatWithAgent];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_agentId;
        break;
      }
      
      // optional int32 agentId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agentId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &agentid_)));
          set_has_agentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }
      
      // optional string content = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqChatWithAgentMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqChatWithAgent];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }
  
  // optional int32 agentId = 3;
  if (has_agentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->agentid(), output);
  }
  
  // optional string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->content(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqChatWithAgentMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqChatWithAgent];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }
  
  // optional int32 agentId = 3;
  if (has_agentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->agentid(), target);
  }
  
  // optional string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->content(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqChatWithAgentMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqChatWithAgent];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional int32 agentId = 3;
    if (has_agentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->agentid());
    }
    
    // optional string content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqChatWithAgentMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqChatWithAgentMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqChatWithAgentMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqChatWithAgentMessage::MergeFrom(const ReqChatWithAgentMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_agentid()) {
      set_agentid(from.agentid());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqChatWithAgentMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqChatWithAgentMessage::CopyFrom(const ReqChatWithAgentMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqChatWithAgentMessage::IsInitialized() const {
  
  return true;
}

void ReqChatWithAgentMessage::Swap(ReqChatWithAgentMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(type_, other->type_);
    std::swap(agentid_, other->agentid_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqChatWithAgentMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqChatWithAgentMessage_descriptor_;
  metadata.reflection = ReqChatWithAgentMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResChatWithAgentMessage::kMsgIDFieldNumber;
const int ResChatWithAgentMessage::kChatInfoFieldNumber;
#endif  // !_MSC_VER

ResChatWithAgentMessage::ResChatWithAgentMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResChatWithAgentMessage::InitAsDefaultInstance() {
}

ResChatWithAgentMessage::ResChatWithAgentMessage(const ResChatWithAgentMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResChatWithAgentMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 326;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResChatWithAgentMessage::~ResChatWithAgentMessage() {
  SharedDtor();
}

void ResChatWithAgentMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResChatWithAgentMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResChatWithAgentMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResChatWithAgentMessage_descriptor_;
}

const ResChatWithAgentMessage& ResChatWithAgentMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ResChatWithAgentMessage* ResChatWithAgentMessage::default_instance_ = NULL;

ResChatWithAgentMessage* ResChatWithAgentMessage::New() const {
  return new ResChatWithAgentMessage;
}

void ResChatWithAgentMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 326;
  }
  chatinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResChatWithAgentMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ResChatWithAgent];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_chatInfo;
        break;
      }
      
      // repeated .com.game.proto.AgentChatInfo chatInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chatInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chatinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_chatInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResChatWithAgentMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResChatWithAgent];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // repeated .com.game.proto.AgentChatInfo chatInfo = 2;
  for (int i = 0; i < this->chatinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->chatinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResChatWithAgentMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResChatWithAgent];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // repeated .com.game.proto.AgentChatInfo chatInfo = 2;
  for (int i = 0; i < this->chatinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->chatinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResChatWithAgentMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ResChatWithAgent];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
  }
  // repeated .com.game.proto.AgentChatInfo chatInfo = 2;
  total_size += 1 * this->chatinfo_size();
  for (int i = 0; i < this->chatinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chatinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResChatWithAgentMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResChatWithAgentMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResChatWithAgentMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResChatWithAgentMessage::MergeFrom(const ResChatWithAgentMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  chatinfo_.MergeFrom(from.chatinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResChatWithAgentMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResChatWithAgentMessage::CopyFrom(const ResChatWithAgentMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResChatWithAgentMessage::IsInitialized() const {
  
  return true;
}

void ResChatWithAgentMessage::Swap(ResChatWithAgentMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    chatinfo_.Swap(&other->chatinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResChatWithAgentMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResChatWithAgentMessage_descriptor_;
  metadata.reflection = ResChatWithAgentMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AgentChatInfo::kAgentIdFieldNumber;
const int AgentChatInfo::kContentFieldNumber;
#endif  // !_MSC_VER

AgentChatInfo::AgentChatInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AgentChatInfo::InitAsDefaultInstance() {
}

AgentChatInfo::AgentChatInfo(const AgentChatInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AgentChatInfo::SharedCtor() {
  _cached_size_ = 0;
  agentid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AgentChatInfo::~AgentChatInfo() {
  SharedDtor();
}

void AgentChatInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AgentChatInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AgentChatInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AgentChatInfo_descriptor_;
}

const AgentChatInfo& AgentChatInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

AgentChatInfo* AgentChatInfo::default_instance_ = NULL;

AgentChatInfo* AgentChatInfo::New() const {
  return new AgentChatInfo;
}

void AgentChatInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    agentid_ = 0;
  }
  content_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AgentChatInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 agentId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &agentid_)));
          set_has_agentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }
      
      // repeated string content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content(0).data(), this->content(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AgentChatInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 agentId = 1;
  if (has_agentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->agentid(), output);
  }
  
  // repeated string content = 2;
  for (int i = 0; i < this->content_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->content(i).data(), this->content(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->content(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AgentChatInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 agentId = 1;
  if (has_agentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->agentid(), target);
  }
  
  // repeated string content = 2;
  for (int i = 0; i < this->content_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content(i).data(), this->content(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->content(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AgentChatInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 agentId = 1;
    if (has_agentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->agentid());
    }
    
  }
  // repeated string content = 2;
  total_size += 1 * this->content_size();
  for (int i = 0; i < this->content_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->content(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AgentChatInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AgentChatInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AgentChatInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AgentChatInfo::MergeFrom(const AgentChatInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  content_.MergeFrom(from.content_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_agentid()) {
      set_agentid(from.agentid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AgentChatInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentChatInfo::CopyFrom(const AgentChatInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentChatInfo::IsInitialized() const {
  
  return true;
}

void AgentChatInfo::Swap(AgentChatInfo* other) {
  if (other != this) {
    std::swap(agentid_, other->agentid_);
    content_.Swap(&other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AgentChatInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AgentChatInfo_descriptor_;
  metadata.reflection = AgentChatInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqAgentChatWithServiceMessage::kMsgIDFieldNumber;
const int ReqAgentChatWithServiceMessage::kTypeFieldNumber;
const int ReqAgentChatWithServiceMessage::kContentFieldNumber;
#endif  // !_MSC_VER

ReqAgentChatWithServiceMessage::ReqAgentChatWithServiceMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqAgentChatWithServiceMessage::InitAsDefaultInstance() {
}

ReqAgentChatWithServiceMessage::ReqAgentChatWithServiceMessage(const ReqAgentChatWithServiceMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqAgentChatWithServiceMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 327;
  type_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAgentChatWithServiceMessage::~ReqAgentChatWithServiceMessage() {
  SharedDtor();
}

void ReqAgentChatWithServiceMessage::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void ReqAgentChatWithServiceMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAgentChatWithServiceMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAgentChatWithServiceMessage_descriptor_;
}

const ReqAgentChatWithServiceMessage& ReqAgentChatWithServiceMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ReqAgentChatWithServiceMessage* ReqAgentChatWithServiceMessage::default_instance_ = NULL;

ReqAgentChatWithServiceMessage* ReqAgentChatWithServiceMessage::New() const {
  return new ReqAgentChatWithServiceMessage;
}

void ReqAgentChatWithServiceMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 327;
    type_ = 0;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqAgentChatWithServiceMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqAgentChatWithService];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }
      
      // optional string content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqAgentChatWithServiceMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqAgentChatWithService];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }
  
  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->content(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqAgentChatWithServiceMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqAgentChatWithService];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }
  
  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqAgentChatWithServiceMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqAgentChatWithService];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional string content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAgentChatWithServiceMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqAgentChatWithServiceMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqAgentChatWithServiceMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqAgentChatWithServiceMessage::MergeFrom(const ReqAgentChatWithServiceMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqAgentChatWithServiceMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAgentChatWithServiceMessage::CopyFrom(const ReqAgentChatWithServiceMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAgentChatWithServiceMessage::IsInitialized() const {
  
  return true;
}

void ReqAgentChatWithServiceMessage::Swap(ReqAgentChatWithServiceMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(type_, other->type_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqAgentChatWithServiceMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAgentChatWithServiceMessage_descriptor_;
  metadata.reflection = ReqAgentChatWithServiceMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResAgentChatWithServiceMessage::kMsgIDFieldNumber;
const int ResAgentChatWithServiceMessage::kContentFieldNumber;
#endif  // !_MSC_VER

ResAgentChatWithServiceMessage::ResAgentChatWithServiceMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResAgentChatWithServiceMessage::InitAsDefaultInstance() {
}

ResAgentChatWithServiceMessage::ResAgentChatWithServiceMessage(const ResAgentChatWithServiceMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResAgentChatWithServiceMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 328;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResAgentChatWithServiceMessage::~ResAgentChatWithServiceMessage() {
  SharedDtor();
}

void ResAgentChatWithServiceMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResAgentChatWithServiceMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResAgentChatWithServiceMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResAgentChatWithServiceMessage_descriptor_;
}

const ResAgentChatWithServiceMessage& ResAgentChatWithServiceMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ResAgentChatWithServiceMessage* ResAgentChatWithServiceMessage::default_instance_ = NULL;

ResAgentChatWithServiceMessage* ResAgentChatWithServiceMessage::New() const {
  return new ResAgentChatWithServiceMessage;
}

void ResAgentChatWithServiceMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 328;
  }
  content_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResAgentChatWithServiceMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ResAgentChatWithService];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }
      
      // repeated string content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content(0).data(), this->content(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResAgentChatWithServiceMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResAgentChatWithService];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // repeated string content = 2;
  for (int i = 0; i < this->content_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->content(i).data(), this->content(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->content(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResAgentChatWithServiceMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResAgentChatWithService];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // repeated string content = 2;
  for (int i = 0; i < this->content_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content(i).data(), this->content(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->content(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResAgentChatWithServiceMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ResAgentChatWithService];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
  }
  // repeated string content = 2;
  total_size += 1 * this->content_size();
  for (int i = 0; i < this->content_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->content(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResAgentChatWithServiceMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResAgentChatWithServiceMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResAgentChatWithServiceMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResAgentChatWithServiceMessage::MergeFrom(const ResAgentChatWithServiceMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  content_.MergeFrom(from.content_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResAgentChatWithServiceMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResAgentChatWithServiceMessage::CopyFrom(const ResAgentChatWithServiceMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResAgentChatWithServiceMessage::IsInitialized() const {
  
  return true;
}

void ResAgentChatWithServiceMessage::Swap(ResAgentChatWithServiceMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    content_.Swap(&other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResAgentChatWithServiceMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResAgentChatWithServiceMessage_descriptor_;
  metadata.reflection = ResAgentChatWithServiceMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqCommonMessage::kMsgIDFieldNumber;
const int ReqCommonMessage::kSubMsgIDFieldNumber;
const int ReqCommonMessage::kStrsFieldNumber;
const int ReqCommonMessage::kBuffsFieldNumber;
#endif  // !_MSC_VER

ReqCommonMessage::ReqCommonMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqCommonMessage::InitAsDefaultInstance() {
}

ReqCommonMessage::ReqCommonMessage(const ReqCommonMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqCommonMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 410;
  submsgid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqCommonMessage::~ReqCommonMessage() {
  SharedDtor();
}

void ReqCommonMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqCommonMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqCommonMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqCommonMessage_descriptor_;
}

const ReqCommonMessage& ReqCommonMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ReqCommonMessage* ReqCommonMessage::default_instance_ = NULL;

ReqCommonMessage* ReqCommonMessage::New() const {
  return new ReqCommonMessage;
}

void ReqCommonMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 410;
    submsgid_ = 0;
  }
  strs_.Clear();
  buffs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqCommonMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqCommon];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_subMsgID;
        break;
      }
      
      // optional int32 subMsgID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subMsgID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &submsgid_)));
          set_has_submsgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_strs;
        break;
      }
      
      // repeated string strs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_strs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strs(0).data(), this->strs(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_strs;
        if (input->ExpectTag(34)) goto parse_buffs;
        break;
      }
      
      // repeated bytes buffs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buffs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_buffs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_buffs;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqCommonMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqCommon];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // optional int32 subMsgID = 2;
  if (has_submsgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->submsgid(), output);
  }
  
  // repeated string strs = 3;
  for (int i = 0; i < this->strs_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->strs(i).data(), this->strs(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->strs(i), output);
  }
  
  // repeated bytes buffs = 4;
  for (int i = 0; i < this->buffs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->buffs(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqCommonMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqCommon];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // optional int32 subMsgID = 2;
  if (has_submsgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->submsgid(), target);
  }
  
  // repeated string strs = 3;
  for (int i = 0; i < this->strs_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strs(i).data(), this->strs(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->strs(i), target);
  }
  
  // repeated bytes buffs = 4;
  for (int i = 0; i < this->buffs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(4, this->buffs(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqCommonMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqCommon];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional int32 subMsgID = 2;
    if (has_submsgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->submsgid());
    }
    
  }
  // repeated string strs = 3;
  total_size += 1 * this->strs_size();
  for (int i = 0; i < this->strs_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->strs(i));
  }
  
  // repeated bytes buffs = 4;
  total_size += 1 * this->buffs_size();
  for (int i = 0; i < this->buffs_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->buffs(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqCommonMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqCommonMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqCommonMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqCommonMessage::MergeFrom(const ReqCommonMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  strs_.MergeFrom(from.strs_);
  buffs_.MergeFrom(from.buffs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_submsgid()) {
      set_submsgid(from.submsgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqCommonMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCommonMessage::CopyFrom(const ReqCommonMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCommonMessage::IsInitialized() const {
  
  return true;
}

void ReqCommonMessage::Swap(ReqCommonMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(submsgid_, other->submsgid_);
    strs_.Swap(&other->strs_);
    buffs_.Swap(&other->buffs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqCommonMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqCommonMessage_descriptor_;
  metadata.reflection = ReqCommonMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResCommonMessage::kMsgIDFieldNumber;
const int ResCommonMessage::kSubMsgIDFieldNumber;
const int ResCommonMessage::kStrsFieldNumber;
const int ResCommonMessage::kBuffsFieldNumber;
#endif  // !_MSC_VER

ResCommonMessage::ResCommonMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResCommonMessage::InitAsDefaultInstance() {
}

ResCommonMessage::ResCommonMessage(const ResCommonMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResCommonMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 411;
  submsgid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResCommonMessage::~ResCommonMessage() {
  SharedDtor();
}

void ResCommonMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResCommonMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResCommonMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResCommonMessage_descriptor_;
}

const ResCommonMessage& ResCommonMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ResCommonMessage* ResCommonMessage::default_instance_ = NULL;

ResCommonMessage* ResCommonMessage::New() const {
  return new ResCommonMessage;
}

void ResCommonMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 411;
    submsgid_ = 0;
  }
  strs_.Clear();
  buffs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResCommonMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ResCommon];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_subMsgID;
        break;
      }
      
      // optional int32 subMsgID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subMsgID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &submsgid_)));
          set_has_submsgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_strs;
        break;
      }
      
      // repeated string strs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_strs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strs(0).data(), this->strs(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_strs;
        if (input->ExpectTag(34)) goto parse_buffs;
        break;
      }
      
      // repeated bytes buffs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buffs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_buffs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_buffs;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResCommonMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResCommon];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // optional int32 subMsgID = 2;
  if (has_submsgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->submsgid(), output);
  }
  
  // repeated string strs = 3;
  for (int i = 0; i < this->strs_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->strs(i).data(), this->strs(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->strs(i), output);
  }
  
  // repeated bytes buffs = 4;
  for (int i = 0; i < this->buffs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->buffs(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResCommonMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResCommon];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // optional int32 subMsgID = 2;
  if (has_submsgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->submsgid(), target);
  }
  
  // repeated string strs = 3;
  for (int i = 0; i < this->strs_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strs(i).data(), this->strs(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->strs(i), target);
  }
  
  // repeated bytes buffs = 4;
  for (int i = 0; i < this->buffs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(4, this->buffs(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResCommonMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ResCommon];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional int32 subMsgID = 2;
    if (has_submsgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->submsgid());
    }
    
  }
  // repeated string strs = 3;
  total_size += 1 * this->strs_size();
  for (int i = 0; i < this->strs_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->strs(i));
  }
  
  // repeated bytes buffs = 4;
  total_size += 1 * this->buffs_size();
  for (int i = 0; i < this->buffs_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->buffs(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResCommonMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResCommonMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResCommonMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResCommonMessage::MergeFrom(const ResCommonMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  strs_.MergeFrom(from.strs_);
  buffs_.MergeFrom(from.buffs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_submsgid()) {
      set_submsgid(from.submsgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResCommonMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResCommonMessage::CopyFrom(const ResCommonMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResCommonMessage::IsInitialized() const {
  
  return true;
}

void ResCommonMessage::Swap(ResCommonMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(submsgid_, other->submsgid_);
    strs_.Swap(&other->strs_);
    buffs_.Swap(&other->buffs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResCommonMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResCommonMessage_descriptor_;
  metadata.reflection = ResCommonMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RefreshOnlineAwardMessage::kMsgIDFieldNumber;
const int RefreshOnlineAwardMessage::kNextGetAwardTimeFieldNumber;
const int RefreshOnlineAwardMessage::kRemainNumFieldNumber;
#endif  // !_MSC_VER

RefreshOnlineAwardMessage::RefreshOnlineAwardMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RefreshOnlineAwardMessage::InitAsDefaultInstance() {
}

RefreshOnlineAwardMessage::RefreshOnlineAwardMessage(const RefreshOnlineAwardMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RefreshOnlineAwardMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 601;
  nextgetawardtime_ = GOOGLE_LONGLONG(0);
  remainnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RefreshOnlineAwardMessage::~RefreshOnlineAwardMessage() {
  SharedDtor();
}

void RefreshOnlineAwardMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RefreshOnlineAwardMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RefreshOnlineAwardMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RefreshOnlineAwardMessage_descriptor_;
}

const RefreshOnlineAwardMessage& RefreshOnlineAwardMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

RefreshOnlineAwardMessage* RefreshOnlineAwardMessage::default_instance_ = NULL;

RefreshOnlineAwardMessage* RefreshOnlineAwardMessage::New() const {
  return new RefreshOnlineAwardMessage;
}

void RefreshOnlineAwardMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 601;
    nextgetawardtime_ = GOOGLE_LONGLONG(0);
    remainnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RefreshOnlineAwardMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = RefreshOnlineAward];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nextGetAwardTime;
        break;
      }
      
      // optional int64 nextGetAwardTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nextGetAwardTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nextgetawardtime_)));
          set_has_nextgetawardtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_remainNum;
        break;
      }
      
      // optional int32 remainNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remainNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remainnum_)));
          set_has_remainnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RefreshOnlineAwardMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = RefreshOnlineAward];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // optional int64 nextGetAwardTime = 2;
  if (has_nextgetawardtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->nextgetawardtime(), output);
  }
  
  // optional int32 remainNum = 3;
  if (has_remainnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->remainnum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RefreshOnlineAwardMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = RefreshOnlineAward];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // optional int64 nextGetAwardTime = 2;
  if (has_nextgetawardtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->nextgetawardtime(), target);
  }
  
  // optional int32 remainNum = 3;
  if (has_remainnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->remainnum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RefreshOnlineAwardMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = RefreshOnlineAward];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional int64 nextGetAwardTime = 2;
    if (has_nextgetawardtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->nextgetawardtime());
    }
    
    // optional int32 remainNum = 3;
    if (has_remainnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remainnum());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RefreshOnlineAwardMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RefreshOnlineAwardMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RefreshOnlineAwardMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RefreshOnlineAwardMessage::MergeFrom(const RefreshOnlineAwardMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_nextgetawardtime()) {
      set_nextgetawardtime(from.nextgetawardtime());
    }
    if (from.has_remainnum()) {
      set_remainnum(from.remainnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RefreshOnlineAwardMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefreshOnlineAwardMessage::CopyFrom(const RefreshOnlineAwardMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefreshOnlineAwardMessage::IsInitialized() const {
  
  return true;
}

void RefreshOnlineAwardMessage::Swap(RefreshOnlineAwardMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(nextgetawardtime_, other->nextgetawardtime_);
    std::swap(remainnum_, other->remainnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RefreshOnlineAwardMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RefreshOnlineAwardMessage_descriptor_;
  metadata.reflection = RefreshOnlineAwardMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqGetOnlineAwardMessage::kMsgIDFieldNumber;
#endif  // !_MSC_VER

ReqGetOnlineAwardMessage::ReqGetOnlineAwardMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqGetOnlineAwardMessage::InitAsDefaultInstance() {
}

ReqGetOnlineAwardMessage::ReqGetOnlineAwardMessage(const ReqGetOnlineAwardMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqGetOnlineAwardMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 602;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqGetOnlineAwardMessage::~ReqGetOnlineAwardMessage() {
  SharedDtor();
}

void ReqGetOnlineAwardMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqGetOnlineAwardMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqGetOnlineAwardMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqGetOnlineAwardMessage_descriptor_;
}

const ReqGetOnlineAwardMessage& ReqGetOnlineAwardMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ReqGetOnlineAwardMessage* ReqGetOnlineAwardMessage::default_instance_ = NULL;

ReqGetOnlineAwardMessage* ReqGetOnlineAwardMessage::New() const {
  return new ReqGetOnlineAwardMessage;
}

void ReqGetOnlineAwardMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 602;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqGetOnlineAwardMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqGetOnlineAward];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqGetOnlineAwardMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqGetOnlineAward];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqGetOnlineAwardMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqGetOnlineAward];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqGetOnlineAwardMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqGetOnlineAward];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqGetOnlineAwardMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqGetOnlineAwardMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqGetOnlineAwardMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqGetOnlineAwardMessage::MergeFrom(const ReqGetOnlineAwardMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqGetOnlineAwardMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGetOnlineAwardMessage::CopyFrom(const ReqGetOnlineAwardMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGetOnlineAwardMessage::IsInitialized() const {
  
  return true;
}

void ReqGetOnlineAwardMessage::Swap(ReqGetOnlineAwardMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqGetOnlineAwardMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqGetOnlineAwardMessage_descriptor_;
  metadata.reflection = ReqGetOnlineAwardMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResGetOnlineAwardMessage::kMsgIDFieldNumber;
const int ResGetOnlineAwardMessage::kNormalMoneyFieldNumber;
const int ResGetOnlineAwardMessage::kVipMoneyFieldNumber;
const int ResGetOnlineAwardMessage::kRemainDayNumFieldNumber;
#endif  // !_MSC_VER

ResGetOnlineAwardMessage::ResGetOnlineAwardMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResGetOnlineAwardMessage::InitAsDefaultInstance() {
}

ResGetOnlineAwardMessage::ResGetOnlineAwardMessage(const ResGetOnlineAwardMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResGetOnlineAwardMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 603;
  normalmoney_ = 0;
  vipmoney_ = 0;
  remaindaynum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResGetOnlineAwardMessage::~ResGetOnlineAwardMessage() {
  SharedDtor();
}

void ResGetOnlineAwardMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResGetOnlineAwardMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResGetOnlineAwardMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResGetOnlineAwardMessage_descriptor_;
}

const ResGetOnlineAwardMessage& ResGetOnlineAwardMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ResGetOnlineAwardMessage* ResGetOnlineAwardMessage::default_instance_ = NULL;

ResGetOnlineAwardMessage* ResGetOnlineAwardMessage::New() const {
  return new ResGetOnlineAwardMessage;
}

void ResGetOnlineAwardMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 603;
    normalmoney_ = 0;
    vipmoney_ = 0;
    remaindaynum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResGetOnlineAwardMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ResGetOnlineAward];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_normalMoney;
        break;
      }
      
      // optional double normalMoney = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_normalMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &normalmoney_)));
          set_has_normalmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_vipMoney;
        break;
      }
      
      // optional double vipMoney = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_vipMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vipmoney_)));
          set_has_vipmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_remainDayNum;
        break;
      }
      
      // optional int32 remainDayNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remainDayNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remaindaynum_)));
          set_has_remaindaynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResGetOnlineAwardMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResGetOnlineAward];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // optional double normalMoney = 2;
  if (has_normalmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->normalmoney(), output);
  }
  
  // optional double vipMoney = 3;
  if (has_vipmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->vipmoney(), output);
  }
  
  // optional int32 remainDayNum = 4;
  if (has_remaindaynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->remaindaynum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResGetOnlineAwardMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResGetOnlineAward];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // optional double normalMoney = 2;
  if (has_normalmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->normalmoney(), target);
  }
  
  // optional double vipMoney = 3;
  if (has_vipmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->vipmoney(), target);
  }
  
  // optional int32 remainDayNum = 4;
  if (has_remaindaynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->remaindaynum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResGetOnlineAwardMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ResGetOnlineAward];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional double normalMoney = 2;
    if (has_normalmoney()) {
      total_size += 1 + 8;
    }
    
    // optional double vipMoney = 3;
    if (has_vipmoney()) {
      total_size += 1 + 8;
    }
    
    // optional int32 remainDayNum = 4;
    if (has_remaindaynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remaindaynum());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResGetOnlineAwardMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResGetOnlineAwardMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResGetOnlineAwardMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResGetOnlineAwardMessage::MergeFrom(const ResGetOnlineAwardMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_normalmoney()) {
      set_normalmoney(from.normalmoney());
    }
    if (from.has_vipmoney()) {
      set_vipmoney(from.vipmoney());
    }
    if (from.has_remaindaynum()) {
      set_remaindaynum(from.remaindaynum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResGetOnlineAwardMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResGetOnlineAwardMessage::CopyFrom(const ResGetOnlineAwardMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResGetOnlineAwardMessage::IsInitialized() const {
  
  return true;
}

void ResGetOnlineAwardMessage::Swap(ResGetOnlineAwardMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(normalmoney_, other->normalmoney_);
    std::swap(vipmoney_, other->vipmoney_);
    std::swap(remaindaynum_, other->remaindaynum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResGetOnlineAwardMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResGetOnlineAwardMessage_descriptor_;
  metadata.reflection = ResGetOnlineAwardMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqGetBankruptcyAwardMessage::kMsgIDFieldNumber;
#endif  // !_MSC_VER

ReqGetBankruptcyAwardMessage::ReqGetBankruptcyAwardMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqGetBankruptcyAwardMessage::InitAsDefaultInstance() {
}

ReqGetBankruptcyAwardMessage::ReqGetBankruptcyAwardMessage(const ReqGetBankruptcyAwardMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqGetBankruptcyAwardMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 604;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqGetBankruptcyAwardMessage::~ReqGetBankruptcyAwardMessage() {
  SharedDtor();
}

void ReqGetBankruptcyAwardMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqGetBankruptcyAwardMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqGetBankruptcyAwardMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqGetBankruptcyAwardMessage_descriptor_;
}

const ReqGetBankruptcyAwardMessage& ReqGetBankruptcyAwardMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ReqGetBankruptcyAwardMessage* ReqGetBankruptcyAwardMessage::default_instance_ = NULL;

ReqGetBankruptcyAwardMessage* ReqGetBankruptcyAwardMessage::New() const {
  return new ReqGetBankruptcyAwardMessage;
}

void ReqGetBankruptcyAwardMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 604;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqGetBankruptcyAwardMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqGetBankruptcyAward];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqGetBankruptcyAwardMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqGetBankruptcyAward];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqGetBankruptcyAwardMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqGetBankruptcyAward];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqGetBankruptcyAwardMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqGetBankruptcyAward];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqGetBankruptcyAwardMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqGetBankruptcyAwardMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqGetBankruptcyAwardMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqGetBankruptcyAwardMessage::MergeFrom(const ReqGetBankruptcyAwardMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqGetBankruptcyAwardMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGetBankruptcyAwardMessage::CopyFrom(const ReqGetBankruptcyAwardMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGetBankruptcyAwardMessage::IsInitialized() const {
  
  return true;
}

void ReqGetBankruptcyAwardMessage::Swap(ReqGetBankruptcyAwardMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqGetBankruptcyAwardMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqGetBankruptcyAwardMessage_descriptor_;
  metadata.reflection = ReqGetBankruptcyAwardMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResGetBankruptcyAwardMessage::kMsgIDFieldNumber;
const int ResGetBankruptcyAwardMessage::kMoneyFieldNumber;
const int ResGetBankruptcyAwardMessage::kMinMoneyFieldNumber;
const int ResGetBankruptcyAwardMessage::kRemainDayNumFieldNumber;
const int ResGetBankruptcyAwardMessage::kDayNormalNumFieldNumber;
const int ResGetBankruptcyAwardMessage::kDayVIPNumFieldNumber;
#endif  // !_MSC_VER

ResGetBankruptcyAwardMessage::ResGetBankruptcyAwardMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResGetBankruptcyAwardMessage::InitAsDefaultInstance() {
}

ResGetBankruptcyAwardMessage::ResGetBankruptcyAwardMessage(const ResGetBankruptcyAwardMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResGetBankruptcyAwardMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 605;
  money_ = 0;
  minmoney_ = 0;
  remaindaynum_ = 0;
  daynormalnum_ = 0;
  dayvipnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResGetBankruptcyAwardMessage::~ResGetBankruptcyAwardMessage() {
  SharedDtor();
}

void ResGetBankruptcyAwardMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResGetBankruptcyAwardMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResGetBankruptcyAwardMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResGetBankruptcyAwardMessage_descriptor_;
}

const ResGetBankruptcyAwardMessage& ResGetBankruptcyAwardMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ResGetBankruptcyAwardMessage* ResGetBankruptcyAwardMessage::default_instance_ = NULL;

ResGetBankruptcyAwardMessage* ResGetBankruptcyAwardMessage::New() const {
  return new ResGetBankruptcyAwardMessage;
}

void ResGetBankruptcyAwardMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 605;
    money_ = 0;
    minmoney_ = 0;
    remaindaynum_ = 0;
    daynormalnum_ = 0;
    dayvipnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResGetBankruptcyAwardMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ResGetBankruptcyAward];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_money;
        break;
      }
      
      // optional double money = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_minMoney;
        break;
      }
      
      // optional double minMoney = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_minMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minmoney_)));
          set_has_minmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_remainDayNum;
        break;
      }
      
      // optional int32 remainDayNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remainDayNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remaindaynum_)));
          set_has_remaindaynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_dayNormalNum;
        break;
      }
      
      // optional int32 dayNormalNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dayNormalNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &daynormalnum_)));
          set_has_daynormalnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_dayVIPNum;
        break;
      }
      
      // optional int32 dayVIPNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dayVIPNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dayvipnum_)));
          set_has_dayvipnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResGetBankruptcyAwardMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResGetBankruptcyAward];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // optional double money = 2;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->money(), output);
  }
  
  // optional double minMoney = 3;
  if (has_minmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->minmoney(), output);
  }
  
  // optional int32 remainDayNum = 4;
  if (has_remaindaynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->remaindaynum(), output);
  }
  
  // optional int32 dayNormalNum = 5;
  if (has_daynormalnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->daynormalnum(), output);
  }
  
  // optional int32 dayVIPNum = 6;
  if (has_dayvipnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->dayvipnum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResGetBankruptcyAwardMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResGetBankruptcyAward];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // optional double money = 2;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->money(), target);
  }
  
  // optional double minMoney = 3;
  if (has_minmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->minmoney(), target);
  }
  
  // optional int32 remainDayNum = 4;
  if (has_remaindaynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->remaindaynum(), target);
  }
  
  // optional int32 dayNormalNum = 5;
  if (has_daynormalnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->daynormalnum(), target);
  }
  
  // optional int32 dayVIPNum = 6;
  if (has_dayvipnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->dayvipnum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResGetBankruptcyAwardMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ResGetBankruptcyAward];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional double money = 2;
    if (has_money()) {
      total_size += 1 + 8;
    }
    
    // optional double minMoney = 3;
    if (has_minmoney()) {
      total_size += 1 + 8;
    }
    
    // optional int32 remainDayNum = 4;
    if (has_remaindaynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remaindaynum());
    }
    
    // optional int32 dayNormalNum = 5;
    if (has_daynormalnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daynormalnum());
    }
    
    // optional int32 dayVIPNum = 6;
    if (has_dayvipnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dayvipnum());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResGetBankruptcyAwardMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResGetBankruptcyAwardMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResGetBankruptcyAwardMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResGetBankruptcyAwardMessage::MergeFrom(const ResGetBankruptcyAwardMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_minmoney()) {
      set_minmoney(from.minmoney());
    }
    if (from.has_remaindaynum()) {
      set_remaindaynum(from.remaindaynum());
    }
    if (from.has_daynormalnum()) {
      set_daynormalnum(from.daynormalnum());
    }
    if (from.has_dayvipnum()) {
      set_dayvipnum(from.dayvipnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResGetBankruptcyAwardMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResGetBankruptcyAwardMessage::CopyFrom(const ResGetBankruptcyAwardMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResGetBankruptcyAwardMessage::IsInitialized() const {
  
  return true;
}

void ResGetBankruptcyAwardMessage::Swap(ResGetBankruptcyAwardMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(money_, other->money_);
    std::swap(minmoney_, other->minmoney_);
    std::swap(remaindaynum_, other->remaindaynum_);
    std::swap(daynormalnum_, other->daynormalnum_);
    std::swap(dayvipnum_, other->dayvipnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResGetBankruptcyAwardMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResGetBankruptcyAwardMessage_descriptor_;
  metadata.reflection = ResGetBankruptcyAwardMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqPresentCharmValueMessage::kMsgIDFieldNumber;
const int ReqPresentCharmValueMessage::kPlayerIdFieldNumber;
const int ReqPresentCharmValueMessage::kPresentPosFromFieldNumber;
const int ReqPresentCharmValueMessage::kPresentPosToFieldNumber;
const int ReqPresentCharmValueMessage::kSubGameIdFieldNumber;
const int ReqPresentCharmValueMessage::kPresentTypeFieldNumber;
const int ReqPresentCharmValueMessage::kPresentValueFieldNumber;
const int ReqPresentCharmValueMessage::kCostMoneyFieldNumber;
const int ReqPresentCharmValueMessage::kChangeCharmValueFieldNumber;
#endif  // !_MSC_VER

ReqPresentCharmValueMessage::ReqPresentCharmValueMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqPresentCharmValueMessage::InitAsDefaultInstance() {
}

ReqPresentCharmValueMessage::ReqPresentCharmValueMessage(const ReqPresentCharmValueMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqPresentCharmValueMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 606;
  playerid_ = GOOGLE_LONGLONG(0);
  presentposfrom_ = 0;
  presentposto_ = 0;
  subgameid_ = 0;
  presenttype_ = 0;
  presentvalue_ = 0;
  costmoney_ = 0;
  changecharmvalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqPresentCharmValueMessage::~ReqPresentCharmValueMessage() {
  SharedDtor();
}

void ReqPresentCharmValueMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqPresentCharmValueMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqPresentCharmValueMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqPresentCharmValueMessage_descriptor_;
}

const ReqPresentCharmValueMessage& ReqPresentCharmValueMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ReqPresentCharmValueMessage* ReqPresentCharmValueMessage::default_instance_ = NULL;

ReqPresentCharmValueMessage* ReqPresentCharmValueMessage::New() const {
  return new ReqPresentCharmValueMessage;
}

void ReqPresentCharmValueMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 606;
    playerid_ = GOOGLE_LONGLONG(0);
    presentposfrom_ = 0;
    presentposto_ = 0;
    subgameid_ = 0;
    presenttype_ = 0;
    presentvalue_ = 0;
    costmoney_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    changecharmvalue_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqPresentCharmValueMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqPresentCharmValue];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerId;
        break;
      }
      
      // optional int64 playerId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_presentPosFrom;
        break;
      }
      
      // optional int32 presentPosFrom = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_presentPosFrom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &presentposfrom_)));
          set_has_presentposfrom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_presentPosTo;
        break;
      }
      
      // optional int32 presentPosTo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_presentPosTo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &presentposto_)));
          set_has_presentposto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_subGameId;
        break;
      }
      
      // optional int32 subGameId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subGameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subgameid_)));
          set_has_subgameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_presentType;
        break;
      }
      
      // optional int32 presentType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_presentType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &presenttype_)));
          set_has_presenttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_presentValue;
        break;
      }
      
      // optional int32 presentValue = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_presentValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &presentvalue_)));
          set_has_presentvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_costMoney;
        break;
      }
      
      // optional double costMoney = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_costMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &costmoney_)));
          set_has_costmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_changeCharmValue;
        break;
      }
      
      // optional int32 changeCharmValue = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_changeCharmValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &changecharmvalue_)));
          set_has_changecharmvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqPresentCharmValueMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqPresentCharmValue];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // optional int64 playerId = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->playerid(), output);
  }
  
  // optional int32 presentPosFrom = 3;
  if (has_presentposfrom()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->presentposfrom(), output);
  }
  
  // optional int32 presentPosTo = 4;
  if (has_presentposto()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->presentposto(), output);
  }
  
  // optional int32 subGameId = 5;
  if (has_subgameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->subgameid(), output);
  }
  
  // optional int32 presentType = 6;
  if (has_presenttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->presenttype(), output);
  }
  
  // optional int32 presentValue = 7;
  if (has_presentvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->presentvalue(), output);
  }
  
  // optional double costMoney = 8;
  if (has_costmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->costmoney(), output);
  }
  
  // optional int32 changeCharmValue = 9;
  if (has_changecharmvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->changecharmvalue(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqPresentCharmValueMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqPresentCharmValue];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // optional int64 playerId = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->playerid(), target);
  }
  
  // optional int32 presentPosFrom = 3;
  if (has_presentposfrom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->presentposfrom(), target);
  }
  
  // optional int32 presentPosTo = 4;
  if (has_presentposto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->presentposto(), target);
  }
  
  // optional int32 subGameId = 5;
  if (has_subgameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->subgameid(), target);
  }
  
  // optional int32 presentType = 6;
  if (has_presenttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->presenttype(), target);
  }
  
  // optional int32 presentValue = 7;
  if (has_presentvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->presentvalue(), target);
  }
  
  // optional double costMoney = 8;
  if (has_costmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->costmoney(), target);
  }
  
  // optional int32 changeCharmValue = 9;
  if (has_changecharmvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->changecharmvalue(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqPresentCharmValueMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqPresentCharmValue];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional int64 playerId = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }
    
    // optional int32 presentPosFrom = 3;
    if (has_presentposfrom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->presentposfrom());
    }
    
    // optional int32 presentPosTo = 4;
    if (has_presentposto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->presentposto());
    }
    
    // optional int32 subGameId = 5;
    if (has_subgameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->subgameid());
    }
    
    // optional int32 presentType = 6;
    if (has_presenttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->presenttype());
    }
    
    // optional int32 presentValue = 7;
    if (has_presentvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->presentvalue());
    }
    
    // optional double costMoney = 8;
    if (has_costmoney()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 changeCharmValue = 9;
    if (has_changecharmvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->changecharmvalue());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqPresentCharmValueMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqPresentCharmValueMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqPresentCharmValueMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqPresentCharmValueMessage::MergeFrom(const ReqPresentCharmValueMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_presentposfrom()) {
      set_presentposfrom(from.presentposfrom());
    }
    if (from.has_presentposto()) {
      set_presentposto(from.presentposto());
    }
    if (from.has_subgameid()) {
      set_subgameid(from.subgameid());
    }
    if (from.has_presenttype()) {
      set_presenttype(from.presenttype());
    }
    if (from.has_presentvalue()) {
      set_presentvalue(from.presentvalue());
    }
    if (from.has_costmoney()) {
      set_costmoney(from.costmoney());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_changecharmvalue()) {
      set_changecharmvalue(from.changecharmvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqPresentCharmValueMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqPresentCharmValueMessage::CopyFrom(const ReqPresentCharmValueMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqPresentCharmValueMessage::IsInitialized() const {
  
  return true;
}

void ReqPresentCharmValueMessage::Swap(ReqPresentCharmValueMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(playerid_, other->playerid_);
    std::swap(presentposfrom_, other->presentposfrom_);
    std::swap(presentposto_, other->presentposto_);
    std::swap(subgameid_, other->subgameid_);
    std::swap(presenttype_, other->presenttype_);
    std::swap(presentvalue_, other->presentvalue_);
    std::swap(costmoney_, other->costmoney_);
    std::swap(changecharmvalue_, other->changecharmvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqPresentCharmValueMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqPresentCharmValueMessage_descriptor_;
  metadata.reflection = ReqPresentCharmValueMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResPresentCharmValueMessage::kMsgIDFieldNumber;
const int ResPresentCharmValueMessage::kFromPlayerIdFieldNumber;
const int ResPresentCharmValueMessage::kToPlayerIdFieldNumber;
const int ResPresentCharmValueMessage::kPresentPosFromFieldNumber;
const int ResPresentCharmValueMessage::kPresentPosToFieldNumber;
const int ResPresentCharmValueMessage::kPresentValueFieldNumber;
const int ResPresentCharmValueMessage::kChangeCharmValueFieldNumber;
#endif  // !_MSC_VER

ResPresentCharmValueMessage::ResPresentCharmValueMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResPresentCharmValueMessage::InitAsDefaultInstance() {
}

ResPresentCharmValueMessage::ResPresentCharmValueMessage(const ResPresentCharmValueMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResPresentCharmValueMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 607;
  fromplayerid_ = GOOGLE_LONGLONG(0);
  toplayerid_ = GOOGLE_LONGLONG(0);
  presentposfrom_ = 0;
  presentposto_ = 0;
  presentvalue_ = 0;
  changecharmvalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResPresentCharmValueMessage::~ResPresentCharmValueMessage() {
  SharedDtor();
}

void ResPresentCharmValueMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResPresentCharmValueMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResPresentCharmValueMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResPresentCharmValueMessage_descriptor_;
}

const ResPresentCharmValueMessage& ResPresentCharmValueMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ResPresentCharmValueMessage* ResPresentCharmValueMessage::default_instance_ = NULL;

ResPresentCharmValueMessage* ResPresentCharmValueMessage::New() const {
  return new ResPresentCharmValueMessage;
}

void ResPresentCharmValueMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 607;
    fromplayerid_ = GOOGLE_LONGLONG(0);
    toplayerid_ = GOOGLE_LONGLONG(0);
    presentposfrom_ = 0;
    presentposto_ = 0;
    presentvalue_ = 0;
    changecharmvalue_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResPresentCharmValueMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ResPresentCharmValue];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fromPlayerId;
        break;
      }
      
      // optional int64 fromPlayerId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fromPlayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fromplayerid_)));
          set_has_fromplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_toPlayerId;
        break;
      }
      
      // optional int64 toPlayerId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_toPlayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &toplayerid_)));
          set_has_toplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_presentPosFrom;
        break;
      }
      
      // optional int32 presentPosFrom = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_presentPosFrom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &presentposfrom_)));
          set_has_presentposfrom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_presentPosTo;
        break;
      }
      
      // optional int32 presentPosTo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_presentPosTo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &presentposto_)));
          set_has_presentposto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_presentValue;
        break;
      }
      
      // optional int32 presentValue = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_presentValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &presentvalue_)));
          set_has_presentvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_changeCharmValue;
        break;
      }
      
      // optional int32 changeCharmValue = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_changeCharmValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &changecharmvalue_)));
          set_has_changecharmvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResPresentCharmValueMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResPresentCharmValue];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // optional int64 fromPlayerId = 2;
  if (has_fromplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->fromplayerid(), output);
  }
  
  // optional int64 toPlayerId = 3;
  if (has_toplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->toplayerid(), output);
  }
  
  // optional int32 presentPosFrom = 4;
  if (has_presentposfrom()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->presentposfrom(), output);
  }
  
  // optional int32 presentPosTo = 5;
  if (has_presentposto()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->presentposto(), output);
  }
  
  // optional int32 presentValue = 6;
  if (has_presentvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->presentvalue(), output);
  }
  
  // optional int32 changeCharmValue = 7;
  if (has_changecharmvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->changecharmvalue(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResPresentCharmValueMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResPresentCharmValue];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // optional int64 fromPlayerId = 2;
  if (has_fromplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->fromplayerid(), target);
  }
  
  // optional int64 toPlayerId = 3;
  if (has_toplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->toplayerid(), target);
  }
  
  // optional int32 presentPosFrom = 4;
  if (has_presentposfrom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->presentposfrom(), target);
  }
  
  // optional int32 presentPosTo = 5;
  if (has_presentposto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->presentposto(), target);
  }
  
  // optional int32 presentValue = 6;
  if (has_presentvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->presentvalue(), target);
  }
  
  // optional int32 changeCharmValue = 7;
  if (has_changecharmvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->changecharmvalue(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResPresentCharmValueMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ResPresentCharmValue];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional int64 fromPlayerId = 2;
    if (has_fromplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fromplayerid());
    }
    
    // optional int64 toPlayerId = 3;
    if (has_toplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->toplayerid());
    }
    
    // optional int32 presentPosFrom = 4;
    if (has_presentposfrom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->presentposfrom());
    }
    
    // optional int32 presentPosTo = 5;
    if (has_presentposto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->presentposto());
    }
    
    // optional int32 presentValue = 6;
    if (has_presentvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->presentvalue());
    }
    
    // optional int32 changeCharmValue = 7;
    if (has_changecharmvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->changecharmvalue());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResPresentCharmValueMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResPresentCharmValueMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResPresentCharmValueMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResPresentCharmValueMessage::MergeFrom(const ResPresentCharmValueMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_fromplayerid()) {
      set_fromplayerid(from.fromplayerid());
    }
    if (from.has_toplayerid()) {
      set_toplayerid(from.toplayerid());
    }
    if (from.has_presentposfrom()) {
      set_presentposfrom(from.presentposfrom());
    }
    if (from.has_presentposto()) {
      set_presentposto(from.presentposto());
    }
    if (from.has_presentvalue()) {
      set_presentvalue(from.presentvalue());
    }
    if (from.has_changecharmvalue()) {
      set_changecharmvalue(from.changecharmvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResPresentCharmValueMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResPresentCharmValueMessage::CopyFrom(const ResPresentCharmValueMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResPresentCharmValueMessage::IsInitialized() const {
  
  return true;
}

void ResPresentCharmValueMessage::Swap(ResPresentCharmValueMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(fromplayerid_, other->fromplayerid_);
    std::swap(toplayerid_, other->toplayerid_);
    std::swap(presentposfrom_, other->presentposfrom_);
    std::swap(presentposto_, other->presentposto_);
    std::swap(presentvalue_, other->presentvalue_);
    std::swap(changecharmvalue_, other->changecharmvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResPresentCharmValueMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResPresentCharmValueMessage_descriptor_;
  metadata.reflection = ResPresentCharmValueMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqGetStartUpMoneyMessage::kMsgIDFieldNumber;
#endif  // !_MSC_VER

ReqGetStartUpMoneyMessage::ReqGetStartUpMoneyMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqGetStartUpMoneyMessage::InitAsDefaultInstance() {
}

ReqGetStartUpMoneyMessage::ReqGetStartUpMoneyMessage(const ReqGetStartUpMoneyMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqGetStartUpMoneyMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 608;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqGetStartUpMoneyMessage::~ReqGetStartUpMoneyMessage() {
  SharedDtor();
}

void ReqGetStartUpMoneyMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqGetStartUpMoneyMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqGetStartUpMoneyMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqGetStartUpMoneyMessage_descriptor_;
}

const ReqGetStartUpMoneyMessage& ReqGetStartUpMoneyMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ReqGetStartUpMoneyMessage* ReqGetStartUpMoneyMessage::default_instance_ = NULL;

ReqGetStartUpMoneyMessage* ReqGetStartUpMoneyMessage::New() const {
  return new ReqGetStartUpMoneyMessage;
}

void ReqGetStartUpMoneyMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 608;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqGetStartUpMoneyMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqGetStartUpMoney];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqGetStartUpMoneyMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqGetStartUpMoney];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqGetStartUpMoneyMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqGetStartUpMoney];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqGetStartUpMoneyMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqGetStartUpMoney];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqGetStartUpMoneyMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqGetStartUpMoneyMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqGetStartUpMoneyMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqGetStartUpMoneyMessage::MergeFrom(const ReqGetStartUpMoneyMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqGetStartUpMoneyMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGetStartUpMoneyMessage::CopyFrom(const ReqGetStartUpMoneyMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGetStartUpMoneyMessage::IsInitialized() const {
  
  return true;
}

void ReqGetStartUpMoneyMessage::Swap(ReqGetStartUpMoneyMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqGetStartUpMoneyMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqGetStartUpMoneyMessage_descriptor_;
  metadata.reflection = ReqGetStartUpMoneyMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqSignInMessage::kMsgIDFieldNumber;
const int ReqSignInMessage::kSigninTypeFieldNumber;
const int ReqSignInMessage::kSigninDayFieldNumber;
#endif  // !_MSC_VER

ReqSignInMessage::ReqSignInMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqSignInMessage::InitAsDefaultInstance() {
}

ReqSignInMessage::ReqSignInMessage(const ReqSignInMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqSignInMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 609;
  signintype_ = 0;
  signinday_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqSignInMessage::~ReqSignInMessage() {
  SharedDtor();
}

void ReqSignInMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqSignInMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqSignInMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqSignInMessage_descriptor_;
}

const ReqSignInMessage& ReqSignInMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ReqSignInMessage* ReqSignInMessage::default_instance_ = NULL;

ReqSignInMessage* ReqSignInMessage::New() const {
  return new ReqSignInMessage;
}

void ReqSignInMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 609;
    signintype_ = 0;
    signinday_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqSignInMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqSignIn];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_signinType;
        break;
      }
      
      // optional int32 signinType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_signinType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &signintype_)));
          set_has_signintype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_signinDay;
        break;
      }
      
      // optional int32 signinDay = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_signinDay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &signinday_)));
          set_has_signinday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqSignInMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqSignIn];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // optional int32 signinType = 2;
  if (has_signintype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->signintype(), output);
  }
  
  // optional int32 signinDay = 3;
  if (has_signinday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->signinday(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqSignInMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqSignIn];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // optional int32 signinType = 2;
  if (has_signintype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->signintype(), target);
  }
  
  // optional int32 signinDay = 3;
  if (has_signinday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->signinday(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqSignInMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqSignIn];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional int32 signinType = 2;
    if (has_signintype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->signintype());
    }
    
    // optional int32 signinDay = 3;
    if (has_signinday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->signinday());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqSignInMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqSignInMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqSignInMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqSignInMessage::MergeFrom(const ReqSignInMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_signintype()) {
      set_signintype(from.signintype());
    }
    if (from.has_signinday()) {
      set_signinday(from.signinday());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqSignInMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSignInMessage::CopyFrom(const ReqSignInMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSignInMessage::IsInitialized() const {
  
  return true;
}

void ReqSignInMessage::Swap(ReqSignInMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(signintype_, other->signintype_);
    std::swap(signinday_, other->signinday_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqSignInMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqSignInMessage_descriptor_;
  metadata.reflection = ReqSignInMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResSignInMessage::kMsgIDFieldNumber;
const int ResSignInMessage::kCurSignInNumFieldNumber;
const int ResSignInMessage::kStateFieldNumber;
const int ResSignInMessage::kNextSignInFieldNumber;
const int ResSignInMessage::kCanSignInFieldNumber;
const int ResSignInMessage::kNormalMoneyFieldNumber;
const int ResSignInMessage::kVipMoneyFieldNumber;
#endif  // !_MSC_VER

ResSignInMessage::ResSignInMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResSignInMessage::InitAsDefaultInstance() {
}

ResSignInMessage::ResSignInMessage(const ResSignInMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResSignInMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 610;
  cursigninnum_ = 0;
  nextsignin_ = 0;
  cansignin_ = false;
  normalmoney_ = 0;
  vipmoney_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResSignInMessage::~ResSignInMessage() {
  SharedDtor();
}

void ResSignInMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResSignInMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResSignInMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResSignInMessage_descriptor_;
}

const ResSignInMessage& ResSignInMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ResSignInMessage* ResSignInMessage::default_instance_ = NULL;

ResSignInMessage* ResSignInMessage::New() const {
  return new ResSignInMessage;
}

void ResSignInMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 610;
    cursigninnum_ = 0;
    nextsignin_ = 0;
    cansignin_ = false;
    normalmoney_ = 0;
    vipmoney_ = 0;
  }
  state_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResSignInMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ResSignIn];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_curSignInNum;
        break;
      }
      
      // optional int32 curSignInNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curSignInNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cursigninnum_)));
          set_has_cursigninnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }
      
      // repeated int32 state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_state())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_state())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_state;
        if (input->ExpectTag(32)) goto parse_nextSignIn;
        break;
      }
      
      // optional int32 nextSignIn = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nextSignIn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nextsignin_)));
          set_has_nextsignin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_canSignIn;
        break;
      }
      
      // optional bool canSignIn = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_canSignIn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cansignin_)));
          set_has_cansignin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_normalMoney;
        break;
      }
      
      // optional double normalMoney = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_normalMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &normalmoney_)));
          set_has_normalmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_vipMoney;
        break;
      }
      
      // optional double vipMoney = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_vipMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vipmoney_)));
          set_has_vipmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResSignInMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResSignIn];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // optional int32 curSignInNum = 2;
  if (has_cursigninnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cursigninnum(), output);
  }
  
  // repeated int32 state = 3;
  for (int i = 0; i < this->state_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->state(i), output);
  }
  
  // optional int32 nextSignIn = 4;
  if (has_nextsignin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->nextsignin(), output);
  }
  
  // optional bool canSignIn = 5;
  if (has_cansignin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->cansignin(), output);
  }
  
  // optional double normalMoney = 6;
  if (has_normalmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->normalmoney(), output);
  }
  
  // optional double vipMoney = 7;
  if (has_vipmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->vipmoney(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResSignInMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResSignIn];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // optional int32 curSignInNum = 2;
  if (has_cursigninnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cursigninnum(), target);
  }
  
  // repeated int32 state = 3;
  for (int i = 0; i < this->state_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->state(i), target);
  }
  
  // optional int32 nextSignIn = 4;
  if (has_nextsignin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->nextsignin(), target);
  }
  
  // optional bool canSignIn = 5;
  if (has_cansignin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->cansignin(), target);
  }
  
  // optional double normalMoney = 6;
  if (has_normalmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->normalmoney(), target);
  }
  
  // optional double vipMoney = 7;
  if (has_vipmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->vipmoney(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResSignInMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ResSignIn];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional int32 curSignInNum = 2;
    if (has_cursigninnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cursigninnum());
    }
    
    // optional int32 nextSignIn = 4;
    if (has_nextsignin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nextsignin());
    }
    
    // optional bool canSignIn = 5;
    if (has_cansignin()) {
      total_size += 1 + 1;
    }
    
    // optional double normalMoney = 6;
    if (has_normalmoney()) {
      total_size += 1 + 8;
    }
    
    // optional double vipMoney = 7;
    if (has_vipmoney()) {
      total_size += 1 + 8;
    }
    
  }
  // repeated int32 state = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->state_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->state(i));
    }
    total_size += 1 * this->state_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResSignInMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResSignInMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResSignInMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResSignInMessage::MergeFrom(const ResSignInMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  state_.MergeFrom(from.state_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_cursigninnum()) {
      set_cursigninnum(from.cursigninnum());
    }
    if (from.has_nextsignin()) {
      set_nextsignin(from.nextsignin());
    }
    if (from.has_cansignin()) {
      set_cansignin(from.cansignin());
    }
    if (from.has_normalmoney()) {
      set_normalmoney(from.normalmoney());
    }
    if (from.has_vipmoney()) {
      set_vipmoney(from.vipmoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResSignInMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResSignInMessage::CopyFrom(const ResSignInMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResSignInMessage::IsInitialized() const {
  
  return true;
}

void ResSignInMessage::Swap(ResSignInMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(cursigninnum_, other->cursigninnum_);
    state_.Swap(&other->state_);
    std::swap(nextsignin_, other->nextsignin_);
    std::swap(cansignin_, other->cansignin_);
    std::swap(normalmoney_, other->normalmoney_);
    std::swap(vipmoney_, other->vipmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResSignInMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResSignInMessage_descriptor_;
  metadata.reflection = ResSignInMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResSignInDataMessage::kMsgIDFieldNumber;
const int ResSignInDataMessage::kAddUpDayFieldNumber;
const int ResSignInDataMessage::kAddUpDayMoneyFieldNumber;
const int ResSignInDataMessage::kContinueDayFieldNumber;
const int ResSignInDataMessage::kContinueDayMoneyFieldNumber;
const int ResSignInDataMessage::kVipAddFieldNumber;
#endif  // !_MSC_VER

ResSignInDataMessage::ResSignInDataMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResSignInDataMessage::InitAsDefaultInstance() {
}

ResSignInDataMessage::ResSignInDataMessage(const ResSignInDataMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResSignInDataMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 611;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResSignInDataMessage::~ResSignInDataMessage() {
  SharedDtor();
}

void ResSignInDataMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResSignInDataMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResSignInDataMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResSignInDataMessage_descriptor_;
}

const ResSignInDataMessage& ResSignInDataMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ResSignInDataMessage* ResSignInDataMessage::default_instance_ = NULL;

ResSignInDataMessage* ResSignInDataMessage::New() const {
  return new ResSignInDataMessage;
}

void ResSignInDataMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 611;
  }
  addupday_.Clear();
  addupdaymoney_.Clear();
  continueday_.Clear();
  continuedaymoney_.Clear();
  vipadd_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResSignInDataMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ResSignInData];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_addUpDay;
        break;
      }
      
      // repeated int32 addUpDay = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addUpDay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_addupday())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_addupday())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_addUpDay;
        if (input->ExpectTag(25)) goto parse_addUpDayMoney;
        break;
      }
      
      // repeated double addUpDayMoney = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_addUpDayMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25, input, this->mutable_addupdaymoney())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_addupdaymoney())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_addUpDayMoney;
        if (input->ExpectTag(32)) goto parse_continueDay;
        break;
      }
      
      // repeated int32 continueDay = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_continueDay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_continueday())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_continueday())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_continueDay;
        if (input->ExpectTag(41)) goto parse_continueDayMoney;
        break;
      }
      
      // repeated double continueDayMoney = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_continueDayMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 41, input, this->mutable_continuedaymoney())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_continuedaymoney())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_continueDayMoney;
        if (input->ExpectTag(48)) goto parse_vipAdd;
        break;
      }
      
      // repeated int32 vipAdd = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipAdd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_vipadd())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_vipadd())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_vipAdd;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResSignInDataMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResSignInData];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // repeated int32 addUpDay = 2;
  for (int i = 0; i < this->addupday_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->addupday(i), output);
  }
  
  // repeated double addUpDayMoney = 3;
  for (int i = 0; i < this->addupdaymoney_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->addupdaymoney(i), output);
  }
  
  // repeated int32 continueDay = 4;
  for (int i = 0; i < this->continueday_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->continueday(i), output);
  }
  
  // repeated double continueDayMoney = 5;
  for (int i = 0; i < this->continuedaymoney_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      5, this->continuedaymoney(i), output);
  }
  
  // repeated int32 vipAdd = 6;
  for (int i = 0; i < this->vipadd_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->vipadd(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResSignInDataMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResSignInData];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // repeated int32 addUpDay = 2;
  for (int i = 0; i < this->addupday_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->addupday(i), target);
  }
  
  // repeated double addUpDayMoney = 3;
  for (int i = 0; i < this->addupdaymoney_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(3, this->addupdaymoney(i), target);
  }
  
  // repeated int32 continueDay = 4;
  for (int i = 0; i < this->continueday_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->continueday(i), target);
  }
  
  // repeated double continueDayMoney = 5;
  for (int i = 0; i < this->continuedaymoney_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(5, this->continuedaymoney(i), target);
  }
  
  // repeated int32 vipAdd = 6;
  for (int i = 0; i < this->vipadd_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->vipadd(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResSignInDataMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ResSignInData];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
  }
  // repeated int32 addUpDay = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->addupday_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->addupday(i));
    }
    total_size += 1 * this->addupday_size() + data_size;
  }
  
  // repeated double addUpDayMoney = 3;
  {
    int data_size = 0;
    data_size = 8 * this->addupdaymoney_size();
    total_size += 1 * this->addupdaymoney_size() + data_size;
  }
  
  // repeated int32 continueDay = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->continueday_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->continueday(i));
    }
    total_size += 1 * this->continueday_size() + data_size;
  }
  
  // repeated double continueDayMoney = 5;
  {
    int data_size = 0;
    data_size = 8 * this->continuedaymoney_size();
    total_size += 1 * this->continuedaymoney_size() + data_size;
  }
  
  // repeated int32 vipAdd = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->vipadd_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->vipadd(i));
    }
    total_size += 1 * this->vipadd_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResSignInDataMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResSignInDataMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResSignInDataMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResSignInDataMessage::MergeFrom(const ResSignInDataMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  addupday_.MergeFrom(from.addupday_);
  addupdaymoney_.MergeFrom(from.addupdaymoney_);
  continueday_.MergeFrom(from.continueday_);
  continuedaymoney_.MergeFrom(from.continuedaymoney_);
  vipadd_.MergeFrom(from.vipadd_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResSignInDataMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResSignInDataMessage::CopyFrom(const ResSignInDataMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResSignInDataMessage::IsInitialized() const {
  
  return true;
}

void ResSignInDataMessage::Swap(ResSignInDataMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    addupday_.Swap(&other->addupday_);
    addupdaymoney_.Swap(&other->addupdaymoney_);
    continueday_.Swap(&other->continueday_);
    continuedaymoney_.Swap(&other->continuedaymoney_);
    vipadd_.Swap(&other->vipadd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResSignInDataMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResSignInDataMessage_descriptor_;
  metadata.reflection = ResSignInDataMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResBarrageChangeMessage::kMsgIDFieldNumber;
const int ResBarrageChangeMessage::kRemainNumFieldNumber;
const int ResBarrageChangeMessage::kMaxNumFieldNumber;
#endif  // !_MSC_VER

ResBarrageChangeMessage::ResBarrageChangeMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResBarrageChangeMessage::InitAsDefaultInstance() {
}

ResBarrageChangeMessage::ResBarrageChangeMessage(const ResBarrageChangeMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResBarrageChangeMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 612;
  remainnum_ = 0;
  maxnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResBarrageChangeMessage::~ResBarrageChangeMessage() {
  SharedDtor();
}

void ResBarrageChangeMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResBarrageChangeMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResBarrageChangeMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResBarrageChangeMessage_descriptor_;
}

const ResBarrageChangeMessage& ResBarrageChangeMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ResBarrageChangeMessage* ResBarrageChangeMessage::default_instance_ = NULL;

ResBarrageChangeMessage* ResBarrageChangeMessage::New() const {
  return new ResBarrageChangeMessage;
}

void ResBarrageChangeMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 612;
    remainnum_ = 0;
    maxnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResBarrageChangeMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ResBarrageChange];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_remainNum;
        break;
      }
      
      // optional int32 remainNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remainNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remainnum_)));
          set_has_remainnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_maxNum;
        break;
      }
      
      // optional int32 maxNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxnum_)));
          set_has_maxnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResBarrageChangeMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResBarrageChange];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // optional int32 remainNum = 2;
  if (has_remainnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->remainnum(), output);
  }
  
  // optional int32 maxNum = 3;
  if (has_maxnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->maxnum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResBarrageChangeMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResBarrageChange];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // optional int32 remainNum = 2;
  if (has_remainnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->remainnum(), target);
  }
  
  // optional int32 maxNum = 3;
  if (has_maxnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->maxnum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResBarrageChangeMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ResBarrageChange];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional int32 remainNum = 2;
    if (has_remainnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remainnum());
    }
    
    // optional int32 maxNum = 3;
    if (has_maxnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxnum());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResBarrageChangeMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResBarrageChangeMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResBarrageChangeMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResBarrageChangeMessage::MergeFrom(const ResBarrageChangeMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_remainnum()) {
      set_remainnum(from.remainnum());
    }
    if (from.has_maxnum()) {
      set_maxnum(from.maxnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResBarrageChangeMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResBarrageChangeMessage::CopyFrom(const ResBarrageChangeMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResBarrageChangeMessage::IsInitialized() const {
  
  return true;
}

void ResBarrageChangeMessage::Swap(ResBarrageChangeMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(remainnum_, other->remainnum_);
    std::swap(maxnum_, other->maxnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResBarrageChangeMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResBarrageChangeMessage_descriptor_;
  metadata.reflection = ResBarrageChangeMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResVIPInfoMessage::kMsgIDFieldNumber;
const int ResVIPInfoMessage::kVipLevelFieldNumber;
const int ResVIPInfoMessage::kRechargeMoneyFieldNumber;
#endif  // !_MSC_VER

ResVIPInfoMessage::ResVIPInfoMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResVIPInfoMessage::InitAsDefaultInstance() {
}

ResVIPInfoMessage::ResVIPInfoMessage(const ResVIPInfoMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResVIPInfoMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 613;
  viplevel_ = 0;
  rechargemoney_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResVIPInfoMessage::~ResVIPInfoMessage() {
  SharedDtor();
}

void ResVIPInfoMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResVIPInfoMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResVIPInfoMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResVIPInfoMessage_descriptor_;
}

const ResVIPInfoMessage& ResVIPInfoMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ResVIPInfoMessage* ResVIPInfoMessage::default_instance_ = NULL;

ResVIPInfoMessage* ResVIPInfoMessage::New() const {
  return new ResVIPInfoMessage;
}

void ResVIPInfoMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 613;
    viplevel_ = 0;
    rechargemoney_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResVIPInfoMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ResVIPInfo];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_vipLevel;
        break;
      }
      
      // optional int32 vipLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_rechargeMoney;
        break;
      }
      
      // optional double rechargeMoney = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_rechargeMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rechargemoney_)));
          set_has_rechargemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResVIPInfoMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResVIPInfo];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // optional int32 vipLevel = 2;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->viplevel(), output);
  }
  
  // optional double rechargeMoney = 3;
  if (has_rechargemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->rechargemoney(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResVIPInfoMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResVIPInfo];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // optional int32 vipLevel = 2;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->viplevel(), target);
  }
  
  // optional double rechargeMoney = 3;
  if (has_rechargemoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->rechargemoney(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResVIPInfoMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ResVIPInfo];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional int32 vipLevel = 2;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplevel());
    }
    
    // optional double rechargeMoney = 3;
    if (has_rechargemoney()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResVIPInfoMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResVIPInfoMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResVIPInfoMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResVIPInfoMessage::MergeFrom(const ResVIPInfoMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_rechargemoney()) {
      set_rechargemoney(from.rechargemoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResVIPInfoMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResVIPInfoMessage::CopyFrom(const ResVIPInfoMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResVIPInfoMessage::IsInitialized() const {
  
  return true;
}

void ResVIPInfoMessage::Swap(ResVIPInfoMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(rechargemoney_, other->rechargemoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResVIPInfoMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResVIPInfoMessage_descriptor_;
  metadata.reflection = ResVIPInfoMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResCharmInfoMessage::kMsgIDFieldNumber;
const int ResCharmInfoMessage::kTitleIdFieldNumber;
const int ResCharmInfoMessage::kGameMaxWinMoneyFieldNumber;
const int ResCharmInfoMessage::kCharmValueFieldNumber;
#endif  // !_MSC_VER

ResCharmInfoMessage::ResCharmInfoMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResCharmInfoMessage::InitAsDefaultInstance() {
}

ResCharmInfoMessage::ResCharmInfoMessage(const ResCharmInfoMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResCharmInfoMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 614;
  titleid_ = 0;
  gamemaxwinmoney_ = 0;
  charmvalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResCharmInfoMessage::~ResCharmInfoMessage() {
  SharedDtor();
}

void ResCharmInfoMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResCharmInfoMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResCharmInfoMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResCharmInfoMessage_descriptor_;
}

const ResCharmInfoMessage& ResCharmInfoMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ResCharmInfoMessage* ResCharmInfoMessage::default_instance_ = NULL;

ResCharmInfoMessage* ResCharmInfoMessage::New() const {
  return new ResCharmInfoMessage;
}

void ResCharmInfoMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 614;
    titleid_ = 0;
    gamemaxwinmoney_ = 0;
    charmvalue_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResCharmInfoMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ResCharmInfo];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_titleId;
        break;
      }
      
      // optional int32 titleId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_titleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &titleid_)));
          set_has_titleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_gameMaxWinMoney;
        break;
      }
      
      // optional double gameMaxWinMoney = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_gameMaxWinMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gamemaxwinmoney_)));
          set_has_gamemaxwinmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_charmValue;
        break;
      }
      
      // optional int32 charmValue = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charmValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &charmvalue_)));
          set_has_charmvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResCharmInfoMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResCharmInfo];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // optional int32 titleId = 2;
  if (has_titleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->titleid(), output);
  }
  
  // optional double gameMaxWinMoney = 3;
  if (has_gamemaxwinmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->gamemaxwinmoney(), output);
  }
  
  // optional int32 charmValue = 4;
  if (has_charmvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->charmvalue(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResCharmInfoMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResCharmInfo];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // optional int32 titleId = 2;
  if (has_titleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->titleid(), target);
  }
  
  // optional double gameMaxWinMoney = 3;
  if (has_gamemaxwinmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->gamemaxwinmoney(), target);
  }
  
  // optional int32 charmValue = 4;
  if (has_charmvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->charmvalue(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResCharmInfoMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ResCharmInfo];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional int32 titleId = 2;
    if (has_titleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->titleid());
    }
    
    // optional double gameMaxWinMoney = 3;
    if (has_gamemaxwinmoney()) {
      total_size += 1 + 8;
    }
    
    // optional int32 charmValue = 4;
    if (has_charmvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->charmvalue());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResCharmInfoMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResCharmInfoMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResCharmInfoMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResCharmInfoMessage::MergeFrom(const ResCharmInfoMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_titleid()) {
      set_titleid(from.titleid());
    }
    if (from.has_gamemaxwinmoney()) {
      set_gamemaxwinmoney(from.gamemaxwinmoney());
    }
    if (from.has_charmvalue()) {
      set_charmvalue(from.charmvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResCharmInfoMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResCharmInfoMessage::CopyFrom(const ResCharmInfoMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResCharmInfoMessage::IsInitialized() const {
  
  return true;
}

void ResCharmInfoMessage::Swap(ResCharmInfoMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(titleid_, other->titleid_);
    std::swap(gamemaxwinmoney_, other->gamemaxwinmoney_);
    std::swap(charmvalue_, other->charmvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResCharmInfoMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResCharmInfoMessage_descriptor_;
  metadata.reflection = ResCharmInfoMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqTurntableDataMessage::kMsgIDFieldNumber;
#endif  // !_MSC_VER

ReqTurntableDataMessage::ReqTurntableDataMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqTurntableDataMessage::InitAsDefaultInstance() {
}

ReqTurntableDataMessage::ReqTurntableDataMessage(const ReqTurntableDataMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqTurntableDataMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 617;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqTurntableDataMessage::~ReqTurntableDataMessage() {
  SharedDtor();
}

void ReqTurntableDataMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqTurntableDataMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqTurntableDataMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqTurntableDataMessage_descriptor_;
}

const ReqTurntableDataMessage& ReqTurntableDataMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ReqTurntableDataMessage* ReqTurntableDataMessage::default_instance_ = NULL;

ReqTurntableDataMessage* ReqTurntableDataMessage::New() const {
  return new ReqTurntableDataMessage;
}

void ReqTurntableDataMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 617;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqTurntableDataMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqTurntableData];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqTurntableDataMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqTurntableData];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqTurntableDataMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqTurntableData];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqTurntableDataMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqTurntableData];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqTurntableDataMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqTurntableDataMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqTurntableDataMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqTurntableDataMessage::MergeFrom(const ReqTurntableDataMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqTurntableDataMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqTurntableDataMessage::CopyFrom(const ReqTurntableDataMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqTurntableDataMessage::IsInitialized() const {
  
  return true;
}

void ReqTurntableDataMessage::Swap(ReqTurntableDataMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqTurntableDataMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqTurntableDataMessage_descriptor_;
  metadata.reflection = ReqTurntableDataMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqTurntableMessage::kMsgIDFieldNumber;
#endif  // !_MSC_VER

ReqTurntableMessage::ReqTurntableMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqTurntableMessage::InitAsDefaultInstance() {
}

ReqTurntableMessage::ReqTurntableMessage(const ReqTurntableMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqTurntableMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 618;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqTurntableMessage::~ReqTurntableMessage() {
  SharedDtor();
}

void ReqTurntableMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqTurntableMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqTurntableMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqTurntableMessage_descriptor_;
}

const ReqTurntableMessage& ReqTurntableMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ReqTurntableMessage* ReqTurntableMessage::default_instance_ = NULL;

ReqTurntableMessage* ReqTurntableMessage::New() const {
  return new ReqTurntableMessage;
}

void ReqTurntableMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 618;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqTurntableMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqTurntable];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqTurntableMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqTurntable];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqTurntableMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqTurntable];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqTurntableMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqTurntable];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqTurntableMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqTurntableMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqTurntableMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqTurntableMessage::MergeFrom(const ReqTurntableMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqTurntableMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqTurntableMessage::CopyFrom(const ReqTurntableMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqTurntableMessage::IsInitialized() const {
  
  return true;
}

void ReqTurntableMessage::Swap(ReqTurntableMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqTurntableMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqTurntableMessage_descriptor_;
  metadata.reflection = ReqTurntableMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqLftfreshMessage::kMsgIDFieldNumber;
#endif  // !_MSC_VER

ReqLftfreshMessage::ReqLftfreshMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqLftfreshMessage::InitAsDefaultInstance() {
}

ReqLftfreshMessage::ReqLftfreshMessage(const ReqLftfreshMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqLftfreshMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 642;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqLftfreshMessage::~ReqLftfreshMessage() {
  SharedDtor();
}

void ReqLftfreshMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqLftfreshMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqLftfreshMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqLftfreshMessage_descriptor_;
}

const ReqLftfreshMessage& ReqLftfreshMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ReqLftfreshMessage* ReqLftfreshMessage::default_instance_ = NULL;

ReqLftfreshMessage* ReqLftfreshMessage::New() const {
  return new ReqLftfreshMessage;
}

void ReqLftfreshMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 642;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqLftfreshMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqLftfresh];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqLftfreshMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqLftfresh];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqLftfreshMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqLftfresh];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqLftfreshMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqLftfresh];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqLftfreshMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqLftfreshMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqLftfreshMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqLftfreshMessage::MergeFrom(const ReqLftfreshMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqLftfreshMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLftfreshMessage::CopyFrom(const ReqLftfreshMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLftfreshMessage::IsInitialized() const {
  
  return true;
}

void ReqLftfreshMessage::Swap(ReqLftfreshMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqLftfreshMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqLftfreshMessage_descriptor_;
  metadata.reflection = ReqLftfreshMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqLftScratchMessage::kMsgIDFieldNumber;
#endif  // !_MSC_VER

ReqLftScratchMessage::ReqLftScratchMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqLftScratchMessage::InitAsDefaultInstance() {
}

ReqLftScratchMessage::ReqLftScratchMessage(const ReqLftScratchMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqLftScratchMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 640;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqLftScratchMessage::~ReqLftScratchMessage() {
  SharedDtor();
}

void ReqLftScratchMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqLftScratchMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqLftScratchMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqLftScratchMessage_descriptor_;
}

const ReqLftScratchMessage& ReqLftScratchMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ReqLftScratchMessage* ReqLftScratchMessage::default_instance_ = NULL;

ReqLftScratchMessage* ReqLftScratchMessage::New() const {
  return new ReqLftScratchMessage;
}

void ReqLftScratchMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 640;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqLftScratchMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqLftScratch];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqLftScratchMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqLftScratch];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqLftScratchMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqLftScratch];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqLftScratchMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqLftScratch];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqLftScratchMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqLftScratchMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqLftScratchMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqLftScratchMessage::MergeFrom(const ReqLftScratchMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqLftScratchMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLftScratchMessage::CopyFrom(const ReqLftScratchMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLftScratchMessage::IsInitialized() const {
  
  return true;
}

void ReqLftScratchMessage::Swap(ReqLftScratchMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqLftScratchMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqLftScratchMessage_descriptor_;
  metadata.reflection = ReqLftScratchMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqHftReceiveMessage::kMsgIDFieldNumber;
#endif  // !_MSC_VER

ReqHftReceiveMessage::ReqHftReceiveMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqHftReceiveMessage::InitAsDefaultInstance() {
}

ReqHftReceiveMessage::ReqHftReceiveMessage(const ReqHftReceiveMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqHftReceiveMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 650;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqHftReceiveMessage::~ReqHftReceiveMessage() {
  SharedDtor();
}

void ReqHftReceiveMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqHftReceiveMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqHftReceiveMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqHftReceiveMessage_descriptor_;
}

const ReqHftReceiveMessage& ReqHftReceiveMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ReqHftReceiveMessage* ReqHftReceiveMessage::default_instance_ = NULL;

ReqHftReceiveMessage* ReqHftReceiveMessage::New() const {
  return new ReqHftReceiveMessage;
}

void ReqHftReceiveMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 650;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqHftReceiveMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqHftReceive];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqHftReceiveMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqHftReceive];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqHftReceiveMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqHftReceive];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqHftReceiveMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqHftReceive];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqHftReceiveMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqHftReceiveMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqHftReceiveMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqHftReceiveMessage::MergeFrom(const ReqHftReceiveMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqHftReceiveMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqHftReceiveMessage::CopyFrom(const ReqHftReceiveMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqHftReceiveMessage::IsInitialized() const {
  
  return true;
}

void ReqHftReceiveMessage::Swap(ReqHftReceiveMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqHftReceiveMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqHftReceiveMessage_descriptor_;
  metadata.reflection = ReqHftReceiveMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqHftScratchMessage::kMsgIDFieldNumber;
#endif  // !_MSC_VER

ReqHftScratchMessage::ReqHftScratchMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqHftScratchMessage::InitAsDefaultInstance() {
}

ReqHftScratchMessage::ReqHftScratchMessage(const ReqHftScratchMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqHftScratchMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 651;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqHftScratchMessage::~ReqHftScratchMessage() {
  SharedDtor();
}

void ReqHftScratchMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqHftScratchMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqHftScratchMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqHftScratchMessage_descriptor_;
}

const ReqHftScratchMessage& ReqHftScratchMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ReqHftScratchMessage* ReqHftScratchMessage::default_instance_ = NULL;

ReqHftScratchMessage* ReqHftScratchMessage::New() const {
  return new ReqHftScratchMessage;
}

void ReqHftScratchMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 651;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqHftScratchMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqHftScratch];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqHftScratchMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqHftScratch];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqHftScratchMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqHftScratch];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqHftScratchMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqHftScratch];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqHftScratchMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqHftScratchMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqHftScratchMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqHftScratchMessage::MergeFrom(const ReqHftScratchMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqHftScratchMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqHftScratchMessage::CopyFrom(const ReqHftScratchMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqHftScratchMessage::IsInitialized() const {
  
  return true;
}

void ReqHftScratchMessage::Swap(ReqHftScratchMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqHftScratchMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqHftScratchMessage_descriptor_;
  metadata.reflection = ReqHftScratchMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResHftScratchMessage::kMsgIDFieldNumber;
const int ResHftScratchMessage::kProfitIdFieldNumber;
const int ResHftScratchMessage::kProfitMoneyFieldNumber;
const int ResHftScratchMessage::kAmountMoneyFieldNumber;
const int ResHftScratchMessage::kReceiveIdFieldNumber;
const int ResHftScratchMessage::kOpendateFieldNumber;
const int ResHftScratchMessage::kReceivedateFieldNumber;
const int ResHftScratchMessage::kTimeFieldNumber;
const int ResHftScratchMessage::kZtFieldNumber;
#endif  // !_MSC_VER

ResHftScratchMessage::ResHftScratchMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResHftScratchMessage::InitAsDefaultInstance() {
}

ResHftScratchMessage::ResHftScratchMessage(const ResHftScratchMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResHftScratchMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 652;
  profitid_ = 0;
  profitmoney_ = 0;
  amountmoney_ = 0;
  receiveid_ = 0;
  opendate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  receivedate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = GOOGLE_LONGLONG(0);
  zt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResHftScratchMessage::~ResHftScratchMessage() {
  SharedDtor();
}

void ResHftScratchMessage::SharedDtor() {
  if (opendate_ != &::google::protobuf::internal::kEmptyString) {
    delete opendate_;
  }
  if (receivedate_ != &::google::protobuf::internal::kEmptyString) {
    delete receivedate_;
  }
  if (this != default_instance_) {
  }
}

void ResHftScratchMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResHftScratchMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResHftScratchMessage_descriptor_;
}

const ResHftScratchMessage& ResHftScratchMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ResHftScratchMessage* ResHftScratchMessage::default_instance_ = NULL;

ResHftScratchMessage* ResHftScratchMessage::New() const {
  return new ResHftScratchMessage;
}

void ResHftScratchMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 652;
    profitid_ = 0;
    profitmoney_ = 0;
    amountmoney_ = 0;
    receiveid_ = 0;
    if (has_opendate()) {
      if (opendate_ != &::google::protobuf::internal::kEmptyString) {
        opendate_->clear();
      }
    }
    if (has_receivedate()) {
      if (receivedate_ != &::google::protobuf::internal::kEmptyString) {
        receivedate_->clear();
      }
    }
    time_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    zt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResHftScratchMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ResHftScratch];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_profitId;
        break;
      }
      
      // optional int32 profitId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profitId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &profitid_)));
          set_has_profitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_profitMoney;
        break;
      }
      
      // optional double profitMoney = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_profitMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &profitmoney_)));
          set_has_profitmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_AmountMoney;
        break;
      }
      
      // optional double AmountMoney = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_AmountMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &amountmoney_)));
          set_has_amountmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ReceiveId;
        break;
      }
      
      // optional int32 ReceiveId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ReceiveId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &receiveid_)));
          set_has_receiveid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_opendate;
        break;
      }
      
      // optional string opendate = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_opendate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opendate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->opendate().data(), this->opendate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_receivedate;
        break;
      }
      
      // optional string receivedate = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_receivedate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_receivedate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->receivedate().data(), this->receivedate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_time;
        break;
      }
      
      // optional int64 time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_zt;
        break;
      }
      
      // optional int32 zt = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zt_)));
          set_has_zt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResHftScratchMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResHftScratch];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // optional int32 profitId = 2;
  if (has_profitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->profitid(), output);
  }
  
  // optional double profitMoney = 3;
  if (has_profitmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->profitmoney(), output);
  }
  
  // optional double AmountMoney = 4;
  if (has_amountmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->amountmoney(), output);
  }
  
  // optional int32 ReceiveId = 5;
  if (has_receiveid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->receiveid(), output);
  }
  
  // optional string opendate = 6;
  if (has_opendate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opendate().data(), this->opendate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->opendate(), output);
  }
  
  // optional string receivedate = 7;
  if (has_receivedate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->receivedate().data(), this->receivedate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->receivedate(), output);
  }
  
  // optional int64 time = 8;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->time(), output);
  }
  
  // optional int32 zt = 9;
  if (has_zt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->zt(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResHftScratchMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResHftScratch];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // optional int32 profitId = 2;
  if (has_profitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->profitid(), target);
  }
  
  // optional double profitMoney = 3;
  if (has_profitmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->profitmoney(), target);
  }
  
  // optional double AmountMoney = 4;
  if (has_amountmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->amountmoney(), target);
  }
  
  // optional int32 ReceiveId = 5;
  if (has_receiveid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->receiveid(), target);
  }
  
  // optional string opendate = 6;
  if (has_opendate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opendate().data(), this->opendate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->opendate(), target);
  }
  
  // optional string receivedate = 7;
  if (has_receivedate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->receivedate().data(), this->receivedate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->receivedate(), target);
  }
  
  // optional int64 time = 8;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->time(), target);
  }
  
  // optional int32 zt = 9;
  if (has_zt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->zt(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResHftScratchMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ResHftScratch];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional int32 profitId = 2;
    if (has_profitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->profitid());
    }
    
    // optional double profitMoney = 3;
    if (has_profitmoney()) {
      total_size += 1 + 8;
    }
    
    // optional double AmountMoney = 4;
    if (has_amountmoney()) {
      total_size += 1 + 8;
    }
    
    // optional int32 ReceiveId = 5;
    if (has_receiveid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->receiveid());
    }
    
    // optional string opendate = 6;
    if (has_opendate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->opendate());
    }
    
    // optional string receivedate = 7;
    if (has_receivedate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->receivedate());
    }
    
    // optional int64 time = 8;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 zt = 9;
    if (has_zt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zt());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResHftScratchMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResHftScratchMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResHftScratchMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResHftScratchMessage::MergeFrom(const ResHftScratchMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_profitid()) {
      set_profitid(from.profitid());
    }
    if (from.has_profitmoney()) {
      set_profitmoney(from.profitmoney());
    }
    if (from.has_amountmoney()) {
      set_amountmoney(from.amountmoney());
    }
    if (from.has_receiveid()) {
      set_receiveid(from.receiveid());
    }
    if (from.has_opendate()) {
      set_opendate(from.opendate());
    }
    if (from.has_receivedate()) {
      set_receivedate(from.receivedate());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_zt()) {
      set_zt(from.zt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResHftScratchMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResHftScratchMessage::CopyFrom(const ResHftScratchMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResHftScratchMessage::IsInitialized() const {
  
  return true;
}

void ResHftScratchMessage::Swap(ResHftScratchMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(profitid_, other->profitid_);
    std::swap(profitmoney_, other->profitmoney_);
    std::swap(amountmoney_, other->amountmoney_);
    std::swap(receiveid_, other->receiveid_);
    std::swap(opendate_, other->opendate_);
    std::swap(receivedate_, other->receivedate_);
    std::swap(time_, other->time_);
    std::swap(zt_, other->zt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResHftScratchMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResHftScratchMessage_descriptor_;
  metadata.reflection = ResHftScratchMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqLftRwScratchMessage::kMsgIDFieldNumber;
#endif  // !_MSC_VER

ReqLftRwScratchMessage::ReqLftRwScratchMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqLftRwScratchMessage::InitAsDefaultInstance() {
}

ReqLftRwScratchMessage::ReqLftRwScratchMessage(const ReqLftRwScratchMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqLftRwScratchMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 660;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqLftRwScratchMessage::~ReqLftRwScratchMessage() {
  SharedDtor();
}

void ReqLftRwScratchMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqLftRwScratchMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqLftRwScratchMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqLftRwScratchMessage_descriptor_;
}

const ReqLftRwScratchMessage& ReqLftRwScratchMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ReqLftRwScratchMessage* ReqLftRwScratchMessage::default_instance_ = NULL;

ReqLftRwScratchMessage* ReqLftRwScratchMessage::New() const {
  return new ReqLftRwScratchMessage;
}

void ReqLftRwScratchMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 660;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqLftRwScratchMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqLftRwScratch];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqLftRwScratchMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqLftRwScratch];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqLftRwScratchMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqLftRwScratch];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqLftRwScratchMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqLftRwScratch];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqLftRwScratchMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqLftRwScratchMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqLftRwScratchMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqLftRwScratchMessage::MergeFrom(const ReqLftRwScratchMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqLftRwScratchMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLftRwScratchMessage::CopyFrom(const ReqLftRwScratchMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLftRwScratchMessage::IsInitialized() const {
  
  return true;
}

void ReqLftRwScratchMessage::Swap(ReqLftRwScratchMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqLftRwScratchMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqLftRwScratchMessage_descriptor_;
  metadata.reflection = ReqLftRwScratchMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqLftRwReceiveMessage::kMsgIDFieldNumber;
const int ReqLftRwReceiveMessage::kIdFieldNumber;
#endif  // !_MSC_VER

ReqLftRwReceiveMessage::ReqLftRwReceiveMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqLftRwReceiveMessage::InitAsDefaultInstance() {
}

ReqLftRwReceiveMessage::ReqLftRwReceiveMessage(const ReqLftRwReceiveMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqLftRwReceiveMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 661;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqLftRwReceiveMessage::~ReqLftRwReceiveMessage() {
  SharedDtor();
}

void ReqLftRwReceiveMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqLftRwReceiveMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqLftRwReceiveMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqLftRwReceiveMessage_descriptor_;
}

const ReqLftRwReceiveMessage& ReqLftRwReceiveMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ReqLftRwReceiveMessage* ReqLftRwReceiveMessage::default_instance_ = NULL;

ReqLftRwReceiveMessage* ReqLftRwReceiveMessage::New() const {
  return new ReqLftRwReceiveMessage;
}

void ReqLftRwReceiveMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 661;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqLftRwReceiveMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqLftRwReceive];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Id;
        break;
      }
      
      // optional int32 Id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqLftRwReceiveMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqLftRwReceive];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // optional int32 Id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqLftRwReceiveMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqLftRwReceive];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // optional int32 Id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqLftRwReceiveMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqLftRwReceive];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional int32 Id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqLftRwReceiveMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqLftRwReceiveMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqLftRwReceiveMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqLftRwReceiveMessage::MergeFrom(const ReqLftRwReceiveMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqLftRwReceiveMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLftRwReceiveMessage::CopyFrom(const ReqLftRwReceiveMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLftRwReceiveMessage::IsInitialized() const {
  
  return true;
}

void ReqLftRwReceiveMessage::Swap(ReqLftRwReceiveMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqLftRwReceiveMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqLftRwReceiveMessage_descriptor_;
  metadata.reflection = ReqLftRwReceiveMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResLftRwScratchMessage::kMsgIDFieldNumber;
const int ResLftRwScratchMessage::kLftewsFieldNumber;
const int ResLftRwScratchMessage::kOpendateFieldNumber;
const int ResLftRwScratchMessage::kZtFieldNumber;
#endif  // !_MSC_VER

ResLftRwScratchMessage::ResLftRwScratchMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResLftRwScratchMessage::InitAsDefaultInstance() {
}

ResLftRwScratchMessage::ResLftRwScratchMessage(const ResLftRwScratchMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResLftRwScratchMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 662;
  opendate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResLftRwScratchMessage::~ResLftRwScratchMessage() {
  SharedDtor();
}

void ResLftRwScratchMessage::SharedDtor() {
  if (opendate_ != &::google::protobuf::internal::kEmptyString) {
    delete opendate_;
  }
  if (this != default_instance_) {
  }
}

void ResLftRwScratchMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResLftRwScratchMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResLftRwScratchMessage_descriptor_;
}

const ResLftRwScratchMessage& ResLftRwScratchMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ResLftRwScratchMessage* ResLftRwScratchMessage::default_instance_ = NULL;

ResLftRwScratchMessage* ResLftRwScratchMessage::New() const {
  return new ResLftRwScratchMessage;
}

void ResLftRwScratchMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 662;
    if (has_opendate()) {
      if (opendate_ != &::google::protobuf::internal::kEmptyString) {
        opendate_->clear();
      }
    }
    zt_ = 0;
  }
  lftews_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResLftRwScratchMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ResLftRwScratch];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_lftews;
        break;
      }
      
      // repeated .com.game.proto.LftrwInfo lftews = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lftews:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lftews()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_lftews;
        if (input->ExpectTag(26)) goto parse_opendate;
        break;
      }
      
      // optional string opendate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_opendate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opendate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->opendate().data(), this->opendate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_zt;
        break;
      }
      
      // optional int32 zt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zt_)));
          set_has_zt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResLftRwScratchMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResLftRwScratch];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // repeated .com.game.proto.LftrwInfo lftews = 2;
  for (int i = 0; i < this->lftews_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lftews(i), output);
  }
  
  // optional string opendate = 3;
  if (has_opendate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opendate().data(), this->opendate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->opendate(), output);
  }
  
  // optional int32 zt = 4;
  if (has_zt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->zt(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResLftRwScratchMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResLftRwScratch];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // repeated .com.game.proto.LftrwInfo lftews = 2;
  for (int i = 0; i < this->lftews_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->lftews(i), target);
  }
  
  // optional string opendate = 3;
  if (has_opendate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opendate().data(), this->opendate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->opendate(), target);
  }
  
  // optional int32 zt = 4;
  if (has_zt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->zt(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResLftRwScratchMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ResLftRwScratch];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional string opendate = 3;
    if (has_opendate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->opendate());
    }
    
    // optional int32 zt = 4;
    if (has_zt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zt());
    }
    
  }
  // repeated .com.game.proto.LftrwInfo lftews = 2;
  total_size += 1 * this->lftews_size();
  for (int i = 0; i < this->lftews_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lftews(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResLftRwScratchMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResLftRwScratchMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResLftRwScratchMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResLftRwScratchMessage::MergeFrom(const ResLftRwScratchMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  lftews_.MergeFrom(from.lftews_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_opendate()) {
      set_opendate(from.opendate());
    }
    if (from.has_zt()) {
      set_zt(from.zt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResLftRwScratchMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResLftRwScratchMessage::CopyFrom(const ResLftRwScratchMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResLftRwScratchMessage::IsInitialized() const {
  
  return true;
}

void ResLftRwScratchMessage::Swap(ResLftRwScratchMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    lftews_.Swap(&other->lftews_);
    std::swap(opendate_, other->opendate_);
    std::swap(zt_, other->zt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResLftRwScratchMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResLftRwScratchMessage_descriptor_;
  metadata.reflection = ResLftRwScratchMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LftrwInfo::kIdFieldNumber;
const int LftrwInfo::kNeedMoneyFieldNumber;
const int LftrwInfo::kReceiveMoneyFieldNumber;
const int LftrwInfo::kStateFieldNumber;
const int LftrwInfo::kProfitMoneyFieldNumber;
#endif  // !_MSC_VER

LftrwInfo::LftrwInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LftrwInfo::InitAsDefaultInstance() {
}

LftrwInfo::LftrwInfo(const LftrwInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LftrwInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  needmoney_ = 0;
  receivemoney_ = 0;
  state_ = 0;
  profitmoney_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LftrwInfo::~LftrwInfo() {
  SharedDtor();
}

void LftrwInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LftrwInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LftrwInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LftrwInfo_descriptor_;
}

const LftrwInfo& LftrwInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

LftrwInfo* LftrwInfo::default_instance_ = NULL;

LftrwInfo* LftrwInfo::New() const {
  return new LftrwInfo;
}

void LftrwInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    needmoney_ = 0;
    receivemoney_ = 0;
    state_ = 0;
    profitmoney_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LftrwInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_needMoney;
        break;
      }
      
      // optional double needMoney = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_needMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &needmoney_)));
          set_has_needmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_receiveMoney;
        break;
      }
      
      // optional double receiveMoney = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_receiveMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &receivemoney_)));
          set_has_receivemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }
      
      // optional int32 state = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_profitMoney;
        break;
      }
      
      // optional double profitMoney = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_profitMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &profitmoney_)));
          set_has_profitmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LftrwInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional double needMoney = 2;
  if (has_needmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->needmoney(), output);
  }
  
  // optional double receiveMoney = 3;
  if (has_receivemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->receivemoney(), output);
  }
  
  // optional int32 state = 4;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->state(), output);
  }
  
  // optional double profitMoney = 5;
  if (has_profitmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->profitmoney(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LftrwInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional double needMoney = 2;
  if (has_needmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->needmoney(), target);
  }
  
  // optional double receiveMoney = 3;
  if (has_receivemoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->receivemoney(), target);
  }
  
  // optional int32 state = 4;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->state(), target);
  }
  
  // optional double profitMoney = 5;
  if (has_profitmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->profitmoney(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LftrwInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional double needMoney = 2;
    if (has_needmoney()) {
      total_size += 1 + 8;
    }
    
    // optional double receiveMoney = 3;
    if (has_receivemoney()) {
      total_size += 1 + 8;
    }
    
    // optional int32 state = 4;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }
    
    // optional double profitMoney = 5;
    if (has_profitmoney()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LftrwInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LftrwInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LftrwInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LftrwInfo::MergeFrom(const LftrwInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_needmoney()) {
      set_needmoney(from.needmoney());
    }
    if (from.has_receivemoney()) {
      set_receivemoney(from.receivemoney());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_profitmoney()) {
      set_profitmoney(from.profitmoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LftrwInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LftrwInfo::CopyFrom(const LftrwInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LftrwInfo::IsInitialized() const {
  
  return true;
}

void LftrwInfo::Swap(LftrwInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(needmoney_, other->needmoney_);
    std::swap(receivemoney_, other->receivemoney_);
    std::swap(state_, other->state_);
    std::swap(profitmoney_, other->profitmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LftrwInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LftrwInfo_descriptor_;
  metadata.reflection = LftrwInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqhuodongMessage::kMsgIDFieldNumber;
#endif  // !_MSC_VER

ReqhuodongMessage::ReqhuodongMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqhuodongMessage::InitAsDefaultInstance() {
}

ReqhuodongMessage::ReqhuodongMessage(const ReqhuodongMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqhuodongMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 670;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqhuodongMessage::~ReqhuodongMessage() {
  SharedDtor();
}

void ReqhuodongMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqhuodongMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqhuodongMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqhuodongMessage_descriptor_;
}

const ReqhuodongMessage& ReqhuodongMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ReqhuodongMessage* ReqhuodongMessage::default_instance_ = NULL;

ReqhuodongMessage* ReqhuodongMessage::New() const {
  return new ReqhuodongMessage;
}

void ReqhuodongMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 670;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqhuodongMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = Reqhuodong];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqhuodongMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = Reqhuodong];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqhuodongMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = Reqhuodong];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqhuodongMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = Reqhuodong];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqhuodongMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqhuodongMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqhuodongMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqhuodongMessage::MergeFrom(const ReqhuodongMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqhuodongMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqhuodongMessage::CopyFrom(const ReqhuodongMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqhuodongMessage::IsInitialized() const {
  
  return true;
}

void ReqhuodongMessage::Swap(ReqhuodongMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqhuodongMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqhuodongMessage_descriptor_;
  metadata.reflection = ReqhuodongMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReshuodongMessage::kMsgIDFieldNumber;
const int ReshuodongMessage::kHuodongsFieldNumber;
#endif  // !_MSC_VER

ReshuodongMessage::ReshuodongMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReshuodongMessage::InitAsDefaultInstance() {
}

ReshuodongMessage::ReshuodongMessage(const ReshuodongMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReshuodongMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 671;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReshuodongMessage::~ReshuodongMessage() {
  SharedDtor();
}

void ReshuodongMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReshuodongMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReshuodongMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReshuodongMessage_descriptor_;
}

const ReshuodongMessage& ReshuodongMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ReshuodongMessage* ReshuodongMessage::default_instance_ = NULL;

ReshuodongMessage* ReshuodongMessage::New() const {
  return new ReshuodongMessage;
}

void ReshuodongMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 671;
  }
  huodongs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReshuodongMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = Reshuodong];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_huodongs;
        break;
      }
      
      // repeated .com.game.proto.huodonginfo huodongs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_huodongs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_huodongs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_huodongs;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReshuodongMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = Reshuodong];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // repeated .com.game.proto.huodonginfo huodongs = 2;
  for (int i = 0; i < this->huodongs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->huodongs(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReshuodongMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = Reshuodong];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // repeated .com.game.proto.huodonginfo huodongs = 2;
  for (int i = 0; i < this->huodongs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->huodongs(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReshuodongMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = Reshuodong];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
  }
  // repeated .com.game.proto.huodonginfo huodongs = 2;
  total_size += 1 * this->huodongs_size();
  for (int i = 0; i < this->huodongs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->huodongs(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReshuodongMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReshuodongMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReshuodongMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReshuodongMessage::MergeFrom(const ReshuodongMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  huodongs_.MergeFrom(from.huodongs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReshuodongMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReshuodongMessage::CopyFrom(const ReshuodongMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReshuodongMessage::IsInitialized() const {
  
  return true;
}

void ReshuodongMessage::Swap(ReshuodongMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    huodongs_.Swap(&other->huodongs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReshuodongMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReshuodongMessage_descriptor_;
  metadata.reflection = ReshuodongMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int huodonginfo::kIdFieldNumber;
const int huodonginfo::kZtFieldNumber;
#endif  // !_MSC_VER

huodonginfo::huodonginfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void huodonginfo::InitAsDefaultInstance() {
}

huodonginfo::huodonginfo(const huodonginfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void huodonginfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  zt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

huodonginfo::~huodonginfo() {
  SharedDtor();
}

void huodonginfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void huodonginfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* huodonginfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return huodonginfo_descriptor_;
}

const huodonginfo& huodonginfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

huodonginfo* huodonginfo::default_instance_ = NULL;

huodonginfo* huodonginfo::New() const {
  return new huodonginfo;
}

void huodonginfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    zt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool huodonginfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_zt;
        break;
      }
      
      // optional int32 zt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zt_)));
          set_has_zt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void huodonginfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 zt = 2;
  if (has_zt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->zt(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* huodonginfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 zt = 2;
  if (has_zt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->zt(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int huodonginfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 zt = 2;
    if (has_zt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zt());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void huodonginfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const huodonginfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const huodonginfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void huodonginfo::MergeFrom(const huodonginfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_zt()) {
      set_zt(from.zt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void huodonginfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void huodonginfo::CopyFrom(const huodonginfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool huodonginfo::IsInitialized() const {
  
  return true;
}

void huodonginfo::Swap(huodonginfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(zt_, other->zt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata huodonginfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = huodonginfo_descriptor_;
  metadata.reflection = huodonginfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqExpandPlayerInfoMessage::kMsgIDFieldNumber;
#endif  // !_MSC_VER

ReqExpandPlayerInfoMessage::ReqExpandPlayerInfoMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqExpandPlayerInfoMessage::InitAsDefaultInstance() {
}

ReqExpandPlayerInfoMessage::ReqExpandPlayerInfoMessage(const ReqExpandPlayerInfoMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqExpandPlayerInfoMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 672;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqExpandPlayerInfoMessage::~ReqExpandPlayerInfoMessage() {
  SharedDtor();
}

void ReqExpandPlayerInfoMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqExpandPlayerInfoMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqExpandPlayerInfoMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqExpandPlayerInfoMessage_descriptor_;
}

const ReqExpandPlayerInfoMessage& ReqExpandPlayerInfoMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ReqExpandPlayerInfoMessage* ReqExpandPlayerInfoMessage::default_instance_ = NULL;

ReqExpandPlayerInfoMessage* ReqExpandPlayerInfoMessage::New() const {
  return new ReqExpandPlayerInfoMessage;
}

void ReqExpandPlayerInfoMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 672;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqExpandPlayerInfoMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqExpandPlayerInfo];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqExpandPlayerInfoMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqExpandPlayerInfo];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqExpandPlayerInfoMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqExpandPlayerInfo];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqExpandPlayerInfoMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqExpandPlayerInfo];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqExpandPlayerInfoMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqExpandPlayerInfoMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqExpandPlayerInfoMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqExpandPlayerInfoMessage::MergeFrom(const ReqExpandPlayerInfoMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqExpandPlayerInfoMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqExpandPlayerInfoMessage::CopyFrom(const ReqExpandPlayerInfoMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqExpandPlayerInfoMessage::IsInitialized() const {
  
  return true;
}

void ReqExpandPlayerInfoMessage::Swap(ReqExpandPlayerInfoMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqExpandPlayerInfoMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqExpandPlayerInfoMessage_descriptor_;
  metadata.reflection = ReqExpandPlayerInfoMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqGetShopGoodsMessage::kMsgIDFieldNumber;
#endif  // !_MSC_VER

ReqGetShopGoodsMessage::ReqGetShopGoodsMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqGetShopGoodsMessage::InitAsDefaultInstance() {
}

ReqGetShopGoodsMessage::ReqGetShopGoodsMessage(const ReqGetShopGoodsMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqGetShopGoodsMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 673;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqGetShopGoodsMessage::~ReqGetShopGoodsMessage() {
  SharedDtor();
}

void ReqGetShopGoodsMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqGetShopGoodsMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqGetShopGoodsMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqGetShopGoodsMessage_descriptor_;
}

const ReqGetShopGoodsMessage& ReqGetShopGoodsMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ReqGetShopGoodsMessage* ReqGetShopGoodsMessage::default_instance_ = NULL;

ReqGetShopGoodsMessage* ReqGetShopGoodsMessage::New() const {
  return new ReqGetShopGoodsMessage;
}

void ReqGetShopGoodsMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 673;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqGetShopGoodsMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqGetShopGoods];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqGetShopGoodsMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqGetShopGoods];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqGetShopGoodsMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqGetShopGoods];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqGetShopGoodsMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqGetShopGoods];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqGetShopGoodsMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqGetShopGoodsMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqGetShopGoodsMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqGetShopGoodsMessage::MergeFrom(const ReqGetShopGoodsMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqGetShopGoodsMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGetShopGoodsMessage::CopyFrom(const ReqGetShopGoodsMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGetShopGoodsMessage::IsInitialized() const {
  
  return true;
}

void ReqGetShopGoodsMessage::Swap(ReqGetShopGoodsMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqGetShopGoodsMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqGetShopGoodsMessage_descriptor_;
  metadata.reflection = ReqGetShopGoodsMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqBuyItemMessage::kMsgIDFieldNumber;
const int ReqBuyItemMessage::kGoodsIdFieldNumber;
const int ReqBuyItemMessage::kNumFieldNumber;
#endif  // !_MSC_VER

ReqBuyItemMessage::ReqBuyItemMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqBuyItemMessage::InitAsDefaultInstance() {
}

ReqBuyItemMessage::ReqBuyItemMessage(const ReqBuyItemMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqBuyItemMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 674;
  goodsid_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqBuyItemMessage::~ReqBuyItemMessage() {
  SharedDtor();
}

void ReqBuyItemMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqBuyItemMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqBuyItemMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqBuyItemMessage_descriptor_;
}

const ReqBuyItemMessage& ReqBuyItemMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ReqBuyItemMessage* ReqBuyItemMessage::default_instance_ = NULL;

ReqBuyItemMessage* ReqBuyItemMessage::New() const {
  return new ReqBuyItemMessage;
}

void ReqBuyItemMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 674;
    goodsid_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqBuyItemMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqBuyItem];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_goodsId;
        break;
      }
      
      // optional int32 goodsId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goodsId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goodsid_)));
          set_has_goodsid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }
      
      // optional int32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqBuyItemMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqBuyItem];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // optional int32 goodsId = 2;
  if (has_goodsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->goodsid(), output);
  }
  
  // optional int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqBuyItemMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqBuyItem];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // optional int32 goodsId = 2;
  if (has_goodsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->goodsid(), target);
  }
  
  // optional int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqBuyItemMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqBuyItem];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional int32 goodsId = 2;
    if (has_goodsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goodsid());
    }
    
    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqBuyItemMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqBuyItemMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqBuyItemMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqBuyItemMessage::MergeFrom(const ReqBuyItemMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_goodsid()) {
      set_goodsid(from.goodsid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqBuyItemMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqBuyItemMessage::CopyFrom(const ReqBuyItemMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqBuyItemMessage::IsInitialized() const {
  
  return true;
}

void ReqBuyItemMessage::Swap(ReqBuyItemMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(goodsid_, other->goodsid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqBuyItemMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqBuyItemMessage_descriptor_;
  metadata.reflection = ReqBuyItemMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqRemainderTaskMessage::kMsgIDFieldNumber;
#endif  // !_MSC_VER

ReqRemainderTaskMessage::ReqRemainderTaskMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqRemainderTaskMessage::InitAsDefaultInstance() {
}

ReqRemainderTaskMessage::ReqRemainderTaskMessage(const ReqRemainderTaskMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqRemainderTaskMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 675;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqRemainderTaskMessage::~ReqRemainderTaskMessage() {
  SharedDtor();
}

void ReqRemainderTaskMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqRemainderTaskMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqRemainderTaskMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqRemainderTaskMessage_descriptor_;
}

const ReqRemainderTaskMessage& ReqRemainderTaskMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ReqRemainderTaskMessage* ReqRemainderTaskMessage::default_instance_ = NULL;

ReqRemainderTaskMessage* ReqRemainderTaskMessage::New() const {
  return new ReqRemainderTaskMessage;
}

void ReqRemainderTaskMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 675;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqRemainderTaskMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqRemainderTask];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqRemainderTaskMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqRemainderTask];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqRemainderTaskMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqRemainderTask];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqRemainderTaskMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqRemainderTask];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqRemainderTaskMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqRemainderTaskMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqRemainderTaskMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqRemainderTaskMessage::MergeFrom(const ReqRemainderTaskMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqRemainderTaskMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqRemainderTaskMessage::CopyFrom(const ReqRemainderTaskMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqRemainderTaskMessage::IsInitialized() const {
  
  return true;
}

void ReqRemainderTaskMessage::Swap(ReqRemainderTaskMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqRemainderTaskMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqRemainderTaskMessage_descriptor_;
  metadata.reflection = ReqRemainderTaskMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResRemainderTaskMessage::kMsgIDFieldNumber;
const int ResRemainderTaskMessage::kGoldFieldNumber;
#endif  // !_MSC_VER

ResRemainderTaskMessage::ResRemainderTaskMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResRemainderTaskMessage::InitAsDefaultInstance() {
}

ResRemainderTaskMessage::ResRemainderTaskMessage(const ResRemainderTaskMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResRemainderTaskMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 676;
  gold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResRemainderTaskMessage::~ResRemainderTaskMessage() {
  SharedDtor();
}

void ResRemainderTaskMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResRemainderTaskMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResRemainderTaskMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResRemainderTaskMessage_descriptor_;
}

const ResRemainderTaskMessage& ResRemainderTaskMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ResRemainderTaskMessage* ResRemainderTaskMessage::default_instance_ = NULL;

ResRemainderTaskMessage* ResRemainderTaskMessage::New() const {
  return new ResRemainderTaskMessage;
}

void ResRemainderTaskMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 676;
    gold_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResRemainderTaskMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ResRemainderTask];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_gold;
        break;
      }
      
      // optional double gold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResRemainderTaskMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResRemainderTask];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // optional double gold = 2;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->gold(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResRemainderTaskMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResRemainderTask];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // optional double gold = 2;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->gold(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResRemainderTaskMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ResRemainderTask];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional double gold = 2;
    if (has_gold()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResRemainderTaskMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResRemainderTaskMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResRemainderTaskMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResRemainderTaskMessage::MergeFrom(const ResRemainderTaskMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResRemainderTaskMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResRemainderTaskMessage::CopyFrom(const ResRemainderTaskMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResRemainderTaskMessage::IsInitialized() const {
  
  return true;
}

void ResRemainderTaskMessage::Swap(ResRemainderTaskMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(gold_, other->gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResRemainderTaskMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResRemainderTaskMessage_descriptor_;
  metadata.reflection = ResRemainderTaskMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemBaseAttribute::kIdFieldNumber;
const int ItemBaseAttribute::kModelIdFieldNumber;
const int ItemBaseAttribute::kCountFieldNumber;
#endif  // !_MSC_VER

ItemBaseAttribute::ItemBaseAttribute()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemBaseAttribute::InitAsDefaultInstance() {
}

ItemBaseAttribute::ItemBaseAttribute(const ItemBaseAttribute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemBaseAttribute::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  modelid_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemBaseAttribute::~ItemBaseAttribute() {
  SharedDtor();
}

void ItemBaseAttribute::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemBaseAttribute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemBaseAttribute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemBaseAttribute_descriptor_;
}

const ItemBaseAttribute& ItemBaseAttribute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ItemBaseAttribute* ItemBaseAttribute::default_instance_ = NULL;

ItemBaseAttribute* ItemBaseAttribute::New() const {
  return new ItemBaseAttribute;
}

void ItemBaseAttribute::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    modelid_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemBaseAttribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_modelId;
        break;
      }
      
      // optional int32 modelId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_modelId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modelid_)));
          set_has_modelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }
      
      // optional int32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemBaseAttribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }
  
  // optional int32 modelId = 2;
  if (has_modelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->modelid(), output);
  }
  
  // optional int32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemBaseAttribute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }
  
  // optional int32 modelId = 2;
  if (has_modelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->modelid(), target);
  }
  
  // optional int32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemBaseAttribute::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }
    
    // optional int32 modelId = 2;
    if (has_modelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modelid());
    }
    
    // optional int32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemBaseAttribute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemBaseAttribute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemBaseAttribute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemBaseAttribute::MergeFrom(const ItemBaseAttribute& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_modelid()) {
      set_modelid(from.modelid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemBaseAttribute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemBaseAttribute::CopyFrom(const ItemBaseAttribute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemBaseAttribute::IsInitialized() const {
  
  return true;
}

void ItemBaseAttribute::Swap(ItemBaseAttribute* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(modelid_, other->modelid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemBaseAttribute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemBaseAttribute_descriptor_;
  metadata.reflection = ItemBaseAttribute_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResBackpackListMessage::kMsgIDFieldNumber;
const int ResBackpackListMessage::kGoodListFieldNumber;
const int ResBackpackListMessage::kTypeFieldNumber;
#endif  // !_MSC_VER

ResBackpackListMessage::ResBackpackListMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResBackpackListMessage::InitAsDefaultInstance() {
}

ResBackpackListMessage::ResBackpackListMessage(const ResBackpackListMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResBackpackListMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 677;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResBackpackListMessage::~ResBackpackListMessage() {
  SharedDtor();
}

void ResBackpackListMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResBackpackListMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResBackpackListMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResBackpackListMessage_descriptor_;
}

const ResBackpackListMessage& ResBackpackListMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ResBackpackListMessage* ResBackpackListMessage::default_instance_ = NULL;

ResBackpackListMessage* ResBackpackListMessage::New() const {
  return new ResBackpackListMessage;
}

void ResBackpackListMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 677;
    type_ = 0;
  }
  goodlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResBackpackListMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ResBackpackList];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_goodList;
        break;
      }
      
      // repeated .com.game.proto.ItemBaseAttribute goodList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_goodList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goodlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_goodList;
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // optional int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResBackpackListMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResBackpackList];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // repeated .com.game.proto.ItemBaseAttribute goodList = 2;
  for (int i = 0; i < this->goodlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->goodlist(i), output);
  }
  
  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResBackpackListMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResBackpackList];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // repeated .com.game.proto.ItemBaseAttribute goodList = 2;
  for (int i = 0; i < this->goodlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->goodlist(i), target);
  }
  
  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResBackpackListMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ResBackpackList];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
  }
  // repeated .com.game.proto.ItemBaseAttribute goodList = 2;
  total_size += 1 * this->goodlist_size();
  for (int i = 0; i < this->goodlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->goodlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResBackpackListMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResBackpackListMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResBackpackListMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResBackpackListMessage::MergeFrom(const ResBackpackListMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  goodlist_.MergeFrom(from.goodlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResBackpackListMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResBackpackListMessage::CopyFrom(const ResBackpackListMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResBackpackListMessage::IsInitialized() const {
  
  return true;
}

void ResBackpackListMessage::Swap(ResBackpackListMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    goodlist_.Swap(&other->goodlist_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResBackpackListMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResBackpackListMessage_descriptor_;
  metadata.reflection = ResBackpackListMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqReceiveMailItemMessage::kMsgIDFieldNumber;
const int ReqReceiveMailItemMessage::kMailIdsFieldNumber;
#endif  // !_MSC_VER

ReqReceiveMailItemMessage::ReqReceiveMailItemMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqReceiveMailItemMessage::InitAsDefaultInstance() {
}

ReqReceiveMailItemMessage::ReqReceiveMailItemMessage(const ReqReceiveMailItemMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqReceiveMailItemMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 679;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqReceiveMailItemMessage::~ReqReceiveMailItemMessage() {
  SharedDtor();
}

void ReqReceiveMailItemMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqReceiveMailItemMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqReceiveMailItemMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqReceiveMailItemMessage_descriptor_;
}

const ReqReceiveMailItemMessage& ReqReceiveMailItemMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ReqReceiveMailItemMessage* ReqReceiveMailItemMessage::default_instance_ = NULL;

ReqReceiveMailItemMessage* ReqReceiveMailItemMessage::New() const {
  return new ReqReceiveMailItemMessage;
}

void ReqReceiveMailItemMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 679;
  }
  mailids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqReceiveMailItemMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqReceiveMailItem];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mailIds;
        break;
      }
      
      // repeated int64 mailIds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mailIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_mailids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_mailids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mailIds;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqReceiveMailItemMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqReceiveMailItem];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // repeated int64 mailIds = 2;
  for (int i = 0; i < this->mailids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->mailids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqReceiveMailItemMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqReceiveMailItem];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // repeated int64 mailIds = 2;
  for (int i = 0; i < this->mailids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->mailids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqReceiveMailItemMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqReceiveMailItem];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
  }
  // repeated int64 mailIds = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->mailids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->mailids(i));
    }
    total_size += 1 * this->mailids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqReceiveMailItemMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqReceiveMailItemMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqReceiveMailItemMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqReceiveMailItemMessage::MergeFrom(const ReqReceiveMailItemMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  mailids_.MergeFrom(from.mailids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqReceiveMailItemMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqReceiveMailItemMessage::CopyFrom(const ReqReceiveMailItemMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqReceiveMailItemMessage::IsInitialized() const {
  
  return true;
}

void ReqReceiveMailItemMessage::Swap(ReqReceiveMailItemMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    mailids_.Swap(&other->mailids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqReceiveMailItemMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqReceiveMailItemMessage_descriptor_;
  metadata.reflection = ReqReceiveMailItemMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqOpenUpMessage::kMsgIDFieldNumber;
#endif  // !_MSC_VER

ReqOpenUpMessage::ReqOpenUpMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqOpenUpMessage::InitAsDefaultInstance() {
}

ReqOpenUpMessage::ReqOpenUpMessage(const ReqOpenUpMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqOpenUpMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 680;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqOpenUpMessage::~ReqOpenUpMessage() {
  SharedDtor();
}

void ReqOpenUpMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqOpenUpMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqOpenUpMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqOpenUpMessage_descriptor_;
}

const ReqOpenUpMessage& ReqOpenUpMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ReqOpenUpMessage* ReqOpenUpMessage::default_instance_ = NULL;

ReqOpenUpMessage* ReqOpenUpMessage::New() const {
  return new ReqOpenUpMessage;
}

void ReqOpenUpMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 680;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqOpenUpMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqOpenUp];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqOpenUpMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqOpenUp];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqOpenUpMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqOpenUp];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqOpenUpMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqOpenUp];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqOpenUpMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqOpenUpMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqOpenUpMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqOpenUpMessage::MergeFrom(const ReqOpenUpMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqOpenUpMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqOpenUpMessage::CopyFrom(const ReqOpenUpMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqOpenUpMessage::IsInitialized() const {
  
  return true;
}

void ReqOpenUpMessage::Swap(ReqOpenUpMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqOpenUpMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqOpenUpMessage_descriptor_;
  metadata.reflection = ReqOpenUpMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResOpenUpMessage::kMsgIDFieldNumber;
const int ResOpenUpMessage::kOpenupinfosFieldNumber;
#endif  // !_MSC_VER

ResOpenUpMessage::ResOpenUpMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResOpenUpMessage::InitAsDefaultInstance() {
}

ResOpenUpMessage::ResOpenUpMessage(const ResOpenUpMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResOpenUpMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 681;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResOpenUpMessage::~ResOpenUpMessage() {
  SharedDtor();
}

void ResOpenUpMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResOpenUpMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResOpenUpMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResOpenUpMessage_descriptor_;
}

const ResOpenUpMessage& ResOpenUpMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ResOpenUpMessage* ResOpenUpMessage::default_instance_ = NULL;

ResOpenUpMessage* ResOpenUpMessage::New() const {
  return new ResOpenUpMessage;
}

void ResOpenUpMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 681;
  }
  openupinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResOpenUpMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ResOpenUp];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_openupinfos;
        break;
      }
      
      // repeated .com.game.proto.openupinfo openupinfos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_openupinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_openupinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_openupinfos;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResOpenUpMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResOpenUp];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // repeated .com.game.proto.openupinfo openupinfos = 2;
  for (int i = 0; i < this->openupinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->openupinfos(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResOpenUpMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResOpenUp];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // repeated .com.game.proto.openupinfo openupinfos = 2;
  for (int i = 0; i < this->openupinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->openupinfos(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResOpenUpMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ResOpenUp];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
  }
  // repeated .com.game.proto.openupinfo openupinfos = 2;
  total_size += 1 * this->openupinfos_size();
  for (int i = 0; i < this->openupinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->openupinfos(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResOpenUpMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResOpenUpMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResOpenUpMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResOpenUpMessage::MergeFrom(const ResOpenUpMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  openupinfos_.MergeFrom(from.openupinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResOpenUpMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResOpenUpMessage::CopyFrom(const ResOpenUpMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResOpenUpMessage::IsInitialized() const {
  
  return true;
}

void ResOpenUpMessage::Swap(ResOpenUpMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    openupinfos_.Swap(&other->openupinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResOpenUpMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResOpenUpMessage_descriptor_;
  metadata.reflection = ResOpenUpMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int openupinfo::kNamesFieldNumber;
const int openupinfo::kTimesFieldNumber;
#endif  // !_MSC_VER

openupinfo::openupinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void openupinfo::InitAsDefaultInstance() {
}

openupinfo::openupinfo(const openupinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void openupinfo::SharedCtor() {
  _cached_size_ = 0;
  names_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  times_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

openupinfo::~openupinfo() {
  SharedDtor();
}

void openupinfo::SharedDtor() {
  if (names_ != &::google::protobuf::internal::kEmptyString) {
    delete names_;
  }
  if (this != default_instance_) {
  }
}

void openupinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* openupinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return openupinfo_descriptor_;
}

const openupinfo& openupinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

openupinfo* openupinfo::default_instance_ = NULL;

openupinfo* openupinfo::New() const {
  return new openupinfo;
}

void openupinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_names()) {
      if (names_ != &::google::protobuf::internal::kEmptyString) {
        names_->clear();
      }
    }
    times_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool openupinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string names = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->names().data(), this->names().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_times;
        break;
      }
      
      // optional int64 times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void openupinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string names = 1;
  if (has_names()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->names().data(), this->names().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->names(), output);
  }
  
  // optional int64 times = 2;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->times(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* openupinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string names = 1;
  if (has_names()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->names().data(), this->names().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->names(), target);
  }
  
  // optional int64 times = 2;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->times(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int openupinfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string names = 1;
    if (has_names()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->names());
    }
    
    // optional int64 times = 2;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->times());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void openupinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const openupinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const openupinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void openupinfo::MergeFrom(const openupinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_names()) {
      set_names(from.names());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void openupinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void openupinfo::CopyFrom(const openupinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool openupinfo::IsInitialized() const {
  
  return true;
}

void openupinfo::Swap(openupinfo* other) {
  if (other != this) {
    std::swap(names_, other->names_);
    std::swap(times_, other->times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata openupinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = openupinfo_descriptor_;
  metadata.reflection = openupinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqShareInfoMessage::kMsgIDFieldNumber;
#endif  // !_MSC_VER

ReqShareInfoMessage::ReqShareInfoMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqShareInfoMessage::InitAsDefaultInstance() {
}

ReqShareInfoMessage::ReqShareInfoMessage(const ReqShareInfoMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqShareInfoMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 682;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqShareInfoMessage::~ReqShareInfoMessage() {
  SharedDtor();
}

void ReqShareInfoMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqShareInfoMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqShareInfoMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqShareInfoMessage_descriptor_;
}

const ReqShareInfoMessage& ReqShareInfoMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ReqShareInfoMessage* ReqShareInfoMessage::default_instance_ = NULL;

ReqShareInfoMessage* ReqShareInfoMessage::New() const {
  return new ReqShareInfoMessage;
}

void ReqShareInfoMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 682;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqShareInfoMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqShareInfo];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqShareInfoMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqShareInfo];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqShareInfoMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqShareInfo];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqShareInfoMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqShareInfo];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqShareInfoMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqShareInfoMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqShareInfoMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqShareInfoMessage::MergeFrom(const ReqShareInfoMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqShareInfoMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqShareInfoMessage::CopyFrom(const ReqShareInfoMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqShareInfoMessage::IsInitialized() const {
  
  return true;
}

void ReqShareInfoMessage::Swap(ReqShareInfoMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqShareInfoMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqShareInfoMessage_descriptor_;
  metadata.reflection = ReqShareInfoMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResShareInfoMessage::kMsgIDFieldNumber;
const int ResShareInfoMessage::kDownShareMoneyFieldNumber;
const int ResShareInfoMessage::kDownShareNum1FieldNumber;
const int ResShareInfoMessage::kDownShareNum2FieldNumber;
const int ResShareInfoMessage::kDownShareNum3FieldNumber;
const int ResShareInfoMessage::kDownShareNum4FieldNumber;
const int ResShareInfoMessage::kDownShareDescFieldNumber;
const int ResShareInfoMessage::kDownShareMoneyTotal1FieldNumber;
const int ResShareInfoMessage::kDownShareMoneyTotal2FieldNumber;
const int ResShareInfoMessage::kDownShareMoneyTotal3FieldNumber;
const int ResShareInfoMessage::kDownShareMoneyTotal4FieldNumber;
const int ResShareInfoMessage::kDownShareMonthMoney1FieldNumber;
const int ResShareInfoMessage::kDownShareMonthMoney2FieldNumber;
const int ResShareInfoMessage::kDownShareMonthMoney3FieldNumber;
const int ResShareInfoMessage::kDownShareMonthMoney4FieldNumber;
const int ResShareInfoMessage::kDownShareDayMoney1FieldNumber;
const int ResShareInfoMessage::kDownShareDayMoney2FieldNumber;
const int ResShareInfoMessage::kDownShareDayMoney3FieldNumber;
const int ResShareInfoMessage::kDownShareDayMoney4FieldNumber;
#endif  // !_MSC_VER

ResShareInfoMessage::ResShareInfoMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResShareInfoMessage::InitAsDefaultInstance() {
}

ResShareInfoMessage::ResShareInfoMessage(const ResShareInfoMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResShareInfoMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 683;
  downsharemoney_ = 0;
  downsharenum1_ = 0;
  downsharenum2_ = 0;
  downsharenum3_ = 0;
  downsharenum4_ = 0;
  downsharemoneytotal1_ = 0;
  downsharemoneytotal2_ = 0;
  downsharemoneytotal3_ = 0;
  downsharemoneytotal4_ = 0;
  downsharemonthmoney1_ = 0;
  downsharemonthmoney2_ = 0;
  downsharemonthmoney3_ = 0;
  downsharemonthmoney4_ = 0;
  downsharedaymoney1_ = 0;
  downsharedaymoney2_ = 0;
  downsharedaymoney3_ = 0;
  downsharedaymoney4_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResShareInfoMessage::~ResShareInfoMessage() {
  SharedDtor();
}

void ResShareInfoMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResShareInfoMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResShareInfoMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResShareInfoMessage_descriptor_;
}

const ResShareInfoMessage& ResShareInfoMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ResShareInfoMessage* ResShareInfoMessage::default_instance_ = NULL;

ResShareInfoMessage* ResShareInfoMessage::New() const {
  return new ResShareInfoMessage;
}

void ResShareInfoMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 683;
    downsharemoney_ = 0;
    downsharenum1_ = 0;
    downsharenum2_ = 0;
    downsharenum3_ = 0;
    downsharenum4_ = 0;
    downsharemoneytotal1_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    downsharemoneytotal2_ = 0;
    downsharemoneytotal3_ = 0;
    downsharemoneytotal4_ = 0;
    downsharemonthmoney1_ = 0;
    downsharemonthmoney2_ = 0;
    downsharemonthmoney3_ = 0;
    downsharemonthmoney4_ = 0;
    downsharedaymoney1_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    downsharedaymoney2_ = 0;
    downsharedaymoney3_ = 0;
    downsharedaymoney4_ = 0;
  }
  downsharedesc_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResShareInfoMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ResShareInfo];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_downShareMoney;
        break;
      }
      
      // optional double downShareMoney = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_downShareMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &downsharemoney_)));
          set_has_downsharemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_downShareNum1;
        break;
      }
      
      // optional int32 downShareNum1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_downShareNum1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &downsharenum1_)));
          set_has_downsharenum1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_downShareNum2;
        break;
      }
      
      // optional int32 downShareNum2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_downShareNum2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &downsharenum2_)));
          set_has_downsharenum2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_downShareNum3;
        break;
      }
      
      // optional int32 downShareNum3 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_downShareNum3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &downsharenum3_)));
          set_has_downsharenum3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_downShareNum4;
        break;
      }
      
      // optional int32 downShareNum4 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_downShareNum4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &downsharenum4_)));
          set_has_downsharenum4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_downShareDesc;
        break;
      }
      
      // repeated .com.game.proto.DownShareDesc downShareDesc = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_downShareDesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_downsharedesc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_downShareDesc;
        if (input->ExpectTag(65)) goto parse_downShareMoneyTotal1;
        break;
      }
      
      // optional double downShareMoneyTotal1 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_downShareMoneyTotal1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &downsharemoneytotal1_)));
          set_has_downsharemoneytotal1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_downShareMoneyTotal2;
        break;
      }
      
      // optional double downShareMoneyTotal2 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_downShareMoneyTotal2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &downsharemoneytotal2_)));
          set_has_downsharemoneytotal2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_downShareMoneyTotal3;
        break;
      }
      
      // optional double downShareMoneyTotal3 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_downShareMoneyTotal3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &downsharemoneytotal3_)));
          set_has_downsharemoneytotal3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_downShareMoneyTotal4;
        break;
      }
      
      // optional double downShareMoneyTotal4 = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_downShareMoneyTotal4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &downsharemoneytotal4_)));
          set_has_downsharemoneytotal4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_downShareMonthMoney1;
        break;
      }
      
      // optional double downShareMonthMoney1 = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_downShareMonthMoney1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &downsharemonthmoney1_)));
          set_has_downsharemonthmoney1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_downShareMonthMoney2;
        break;
      }
      
      // optional double downShareMonthMoney2 = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_downShareMonthMoney2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &downsharemonthmoney2_)));
          set_has_downsharemonthmoney2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_downShareMonthMoney3;
        break;
      }
      
      // optional double downShareMonthMoney3 = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_downShareMonthMoney3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &downsharemonthmoney3_)));
          set_has_downsharemonthmoney3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_downShareMonthMoney4;
        break;
      }
      
      // optional double downShareMonthMoney4 = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_downShareMonthMoney4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &downsharemonthmoney4_)));
          set_has_downsharemonthmoney4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_downShareDayMoney1;
        break;
      }
      
      // optional double downShareDayMoney1 = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_downShareDayMoney1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &downsharedaymoney1_)));
          set_has_downsharedaymoney1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(137)) goto parse_downShareDayMoney2;
        break;
      }
      
      // optional double downShareDayMoney2 = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_downShareDayMoney2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &downsharedaymoney2_)));
          set_has_downsharedaymoney2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(145)) goto parse_downShareDayMoney3;
        break;
      }
      
      // optional double downShareDayMoney3 = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_downShareDayMoney3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &downsharedaymoney3_)));
          set_has_downsharedaymoney3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(153)) goto parse_downShareDayMoney4;
        break;
      }
      
      // optional double downShareDayMoney4 = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_downShareDayMoney4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &downsharedaymoney4_)));
          set_has_downsharedaymoney4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResShareInfoMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResShareInfo];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // optional double downShareMoney = 2;
  if (has_downsharemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->downsharemoney(), output);
  }
  
  // optional int32 downShareNum1 = 3;
  if (has_downsharenum1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->downsharenum1(), output);
  }
  
  // optional int32 downShareNum2 = 4;
  if (has_downsharenum2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->downsharenum2(), output);
  }
  
  // optional int32 downShareNum3 = 5;
  if (has_downsharenum3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->downsharenum3(), output);
  }
  
  // optional int32 downShareNum4 = 6;
  if (has_downsharenum4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->downsharenum4(), output);
  }
  
  // repeated .com.game.proto.DownShareDesc downShareDesc = 7;
  for (int i = 0; i < this->downsharedesc_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->downsharedesc(i), output);
  }
  
  // optional double downShareMoneyTotal1 = 8;
  if (has_downsharemoneytotal1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->downsharemoneytotal1(), output);
  }
  
  // optional double downShareMoneyTotal2 = 9;
  if (has_downsharemoneytotal2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->downsharemoneytotal2(), output);
  }
  
  // optional double downShareMoneyTotal3 = 10;
  if (has_downsharemoneytotal3()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->downsharemoneytotal3(), output);
  }
  
  // optional double downShareMoneyTotal4 = 11;
  if (has_downsharemoneytotal4()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->downsharemoneytotal4(), output);
  }
  
  // optional double downShareMonthMoney1 = 12;
  if (has_downsharemonthmoney1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->downsharemonthmoney1(), output);
  }
  
  // optional double downShareMonthMoney2 = 13;
  if (has_downsharemonthmoney2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->downsharemonthmoney2(), output);
  }
  
  // optional double downShareMonthMoney3 = 14;
  if (has_downsharemonthmoney3()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->downsharemonthmoney3(), output);
  }
  
  // optional double downShareMonthMoney4 = 15;
  if (has_downsharemonthmoney4()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->downsharemonthmoney4(), output);
  }
  
  // optional double downShareDayMoney1 = 16;
  if (has_downsharedaymoney1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->downsharedaymoney1(), output);
  }
  
  // optional double downShareDayMoney2 = 17;
  if (has_downsharedaymoney2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->downsharedaymoney2(), output);
  }
  
  // optional double downShareDayMoney3 = 18;
  if (has_downsharedaymoney3()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->downsharedaymoney3(), output);
  }
  
  // optional double downShareDayMoney4 = 19;
  if (has_downsharedaymoney4()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->downsharedaymoney4(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResShareInfoMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResShareInfo];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // optional double downShareMoney = 2;
  if (has_downsharemoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->downsharemoney(), target);
  }
  
  // optional int32 downShareNum1 = 3;
  if (has_downsharenum1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->downsharenum1(), target);
  }
  
  // optional int32 downShareNum2 = 4;
  if (has_downsharenum2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->downsharenum2(), target);
  }
  
  // optional int32 downShareNum3 = 5;
  if (has_downsharenum3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->downsharenum3(), target);
  }
  
  // optional int32 downShareNum4 = 6;
  if (has_downsharenum4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->downsharenum4(), target);
  }
  
  // repeated .com.game.proto.DownShareDesc downShareDesc = 7;
  for (int i = 0; i < this->downsharedesc_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->downsharedesc(i), target);
  }
  
  // optional double downShareMoneyTotal1 = 8;
  if (has_downsharemoneytotal1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->downsharemoneytotal1(), target);
  }
  
  // optional double downShareMoneyTotal2 = 9;
  if (has_downsharemoneytotal2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->downsharemoneytotal2(), target);
  }
  
  // optional double downShareMoneyTotal3 = 10;
  if (has_downsharemoneytotal3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->downsharemoneytotal3(), target);
  }
  
  // optional double downShareMoneyTotal4 = 11;
  if (has_downsharemoneytotal4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->downsharemoneytotal4(), target);
  }
  
  // optional double downShareMonthMoney1 = 12;
  if (has_downsharemonthmoney1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->downsharemonthmoney1(), target);
  }
  
  // optional double downShareMonthMoney2 = 13;
  if (has_downsharemonthmoney2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->downsharemonthmoney2(), target);
  }
  
  // optional double downShareMonthMoney3 = 14;
  if (has_downsharemonthmoney3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->downsharemonthmoney3(), target);
  }
  
  // optional double downShareMonthMoney4 = 15;
  if (has_downsharemonthmoney4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->downsharemonthmoney4(), target);
  }
  
  // optional double downShareDayMoney1 = 16;
  if (has_downsharedaymoney1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->downsharedaymoney1(), target);
  }
  
  // optional double downShareDayMoney2 = 17;
  if (has_downsharedaymoney2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->downsharedaymoney2(), target);
  }
  
  // optional double downShareDayMoney3 = 18;
  if (has_downsharedaymoney3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->downsharedaymoney3(), target);
  }
  
  // optional double downShareDayMoney4 = 19;
  if (has_downsharedaymoney4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->downsharedaymoney4(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResShareInfoMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ResShareInfo];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional double downShareMoney = 2;
    if (has_downsharemoney()) {
      total_size += 1 + 8;
    }
    
    // optional int32 downShareNum1 = 3;
    if (has_downsharenum1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->downsharenum1());
    }
    
    // optional int32 downShareNum2 = 4;
    if (has_downsharenum2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->downsharenum2());
    }
    
    // optional int32 downShareNum3 = 5;
    if (has_downsharenum3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->downsharenum3());
    }
    
    // optional int32 downShareNum4 = 6;
    if (has_downsharenum4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->downsharenum4());
    }
    
    // optional double downShareMoneyTotal1 = 8;
    if (has_downsharemoneytotal1()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double downShareMoneyTotal2 = 9;
    if (has_downsharemoneytotal2()) {
      total_size += 1 + 8;
    }
    
    // optional double downShareMoneyTotal3 = 10;
    if (has_downsharemoneytotal3()) {
      total_size += 1 + 8;
    }
    
    // optional double downShareMoneyTotal4 = 11;
    if (has_downsharemoneytotal4()) {
      total_size += 1 + 8;
    }
    
    // optional double downShareMonthMoney1 = 12;
    if (has_downsharemonthmoney1()) {
      total_size += 1 + 8;
    }
    
    // optional double downShareMonthMoney2 = 13;
    if (has_downsharemonthmoney2()) {
      total_size += 1 + 8;
    }
    
    // optional double downShareMonthMoney3 = 14;
    if (has_downsharemonthmoney3()) {
      total_size += 1 + 8;
    }
    
    // optional double downShareMonthMoney4 = 15;
    if (has_downsharemonthmoney4()) {
      total_size += 1 + 8;
    }
    
    // optional double downShareDayMoney1 = 16;
    if (has_downsharedaymoney1()) {
      total_size += 2 + 8;
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional double downShareDayMoney2 = 17;
    if (has_downsharedaymoney2()) {
      total_size += 2 + 8;
    }
    
    // optional double downShareDayMoney3 = 18;
    if (has_downsharedaymoney3()) {
      total_size += 2 + 8;
    }
    
    // optional double downShareDayMoney4 = 19;
    if (has_downsharedaymoney4()) {
      total_size += 2 + 8;
    }
    
  }
  // repeated .com.game.proto.DownShareDesc downShareDesc = 7;
  total_size += 1 * this->downsharedesc_size();
  for (int i = 0; i < this->downsharedesc_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->downsharedesc(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResShareInfoMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResShareInfoMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResShareInfoMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResShareInfoMessage::MergeFrom(const ResShareInfoMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  downsharedesc_.MergeFrom(from.downsharedesc_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_downsharemoney()) {
      set_downsharemoney(from.downsharemoney());
    }
    if (from.has_downsharenum1()) {
      set_downsharenum1(from.downsharenum1());
    }
    if (from.has_downsharenum2()) {
      set_downsharenum2(from.downsharenum2());
    }
    if (from.has_downsharenum3()) {
      set_downsharenum3(from.downsharenum3());
    }
    if (from.has_downsharenum4()) {
      set_downsharenum4(from.downsharenum4());
    }
    if (from.has_downsharemoneytotal1()) {
      set_downsharemoneytotal1(from.downsharemoneytotal1());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_downsharemoneytotal2()) {
      set_downsharemoneytotal2(from.downsharemoneytotal2());
    }
    if (from.has_downsharemoneytotal3()) {
      set_downsharemoneytotal3(from.downsharemoneytotal3());
    }
    if (from.has_downsharemoneytotal4()) {
      set_downsharemoneytotal4(from.downsharemoneytotal4());
    }
    if (from.has_downsharemonthmoney1()) {
      set_downsharemonthmoney1(from.downsharemonthmoney1());
    }
    if (from.has_downsharemonthmoney2()) {
      set_downsharemonthmoney2(from.downsharemonthmoney2());
    }
    if (from.has_downsharemonthmoney3()) {
      set_downsharemonthmoney3(from.downsharemonthmoney3());
    }
    if (from.has_downsharemonthmoney4()) {
      set_downsharemonthmoney4(from.downsharemonthmoney4());
    }
    if (from.has_downsharedaymoney1()) {
      set_downsharedaymoney1(from.downsharedaymoney1());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_downsharedaymoney2()) {
      set_downsharedaymoney2(from.downsharedaymoney2());
    }
    if (from.has_downsharedaymoney3()) {
      set_downsharedaymoney3(from.downsharedaymoney3());
    }
    if (from.has_downsharedaymoney4()) {
      set_downsharedaymoney4(from.downsharedaymoney4());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResShareInfoMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResShareInfoMessage::CopyFrom(const ResShareInfoMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResShareInfoMessage::IsInitialized() const {
  
  return true;
}

void ResShareInfoMessage::Swap(ResShareInfoMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(downsharemoney_, other->downsharemoney_);
    std::swap(downsharenum1_, other->downsharenum1_);
    std::swap(downsharenum2_, other->downsharenum2_);
    std::swap(downsharenum3_, other->downsharenum3_);
    std::swap(downsharenum4_, other->downsharenum4_);
    downsharedesc_.Swap(&other->downsharedesc_);
    std::swap(downsharemoneytotal1_, other->downsharemoneytotal1_);
    std::swap(downsharemoneytotal2_, other->downsharemoneytotal2_);
    std::swap(downsharemoneytotal3_, other->downsharemoneytotal3_);
    std::swap(downsharemoneytotal4_, other->downsharemoneytotal4_);
    std::swap(downsharemonthmoney1_, other->downsharemonthmoney1_);
    std::swap(downsharemonthmoney2_, other->downsharemonthmoney2_);
    std::swap(downsharemonthmoney3_, other->downsharemonthmoney3_);
    std::swap(downsharemonthmoney4_, other->downsharemonthmoney4_);
    std::swap(downsharedaymoney1_, other->downsharedaymoney1_);
    std::swap(downsharedaymoney2_, other->downsharedaymoney2_);
    std::swap(downsharedaymoney3_, other->downsharedaymoney3_);
    std::swap(downsharedaymoney4_, other->downsharedaymoney4_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResShareInfoMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResShareInfoMessage_descriptor_;
  metadata.reflection = ResShareInfoMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DownShareDesc::kNameFieldNumber;
const int DownShareDesc::kShareMoneyFieldNumber;
#endif  // !_MSC_VER

DownShareDesc::DownShareDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DownShareDesc::InitAsDefaultInstance() {
}

DownShareDesc::DownShareDesc(const DownShareDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DownShareDesc::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sharemoney_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DownShareDesc::~DownShareDesc() {
  SharedDtor();
}

void DownShareDesc::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void DownShareDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DownShareDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DownShareDesc_descriptor_;
}

const DownShareDesc& DownShareDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

DownShareDesc* DownShareDesc::default_instance_ = NULL;

DownShareDesc* DownShareDesc::New() const {
  return new DownShareDesc;
}

void DownShareDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    sharemoney_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DownShareDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_shareMoney;
        break;
      }
      
      // optional double shareMoney = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_shareMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sharemoney_)));
          set_has_sharemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DownShareDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional double shareMoney = 2;
  if (has_sharemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->sharemoney(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DownShareDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional double shareMoney = 2;
  if (has_sharemoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->sharemoney(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DownShareDesc::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional double shareMoney = 2;
    if (has_sharemoney()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownShareDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DownShareDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DownShareDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DownShareDesc::MergeFrom(const DownShareDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_sharemoney()) {
      set_sharemoney(from.sharemoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DownShareDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownShareDesc::CopyFrom(const DownShareDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownShareDesc::IsInitialized() const {
  
  return true;
}

void DownShareDesc::Swap(DownShareDesc* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(sharemoney_, other->sharemoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DownShareDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DownShareDesc_descriptor_;
  metadata.reflection = DownShareDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqPubAuctionMessage::kMsgIDFieldNumber;
const int ReqPubAuctionMessage::kPubCountFieldNumber;
#endif  // !_MSC_VER

ReqPubAuctionMessage::ReqPubAuctionMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqPubAuctionMessage::InitAsDefaultInstance() {
}

ReqPubAuctionMessage::ReqPubAuctionMessage(const ReqPubAuctionMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqPubAuctionMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 684;
  pubcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqPubAuctionMessage::~ReqPubAuctionMessage() {
  SharedDtor();
}

void ReqPubAuctionMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqPubAuctionMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqPubAuctionMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqPubAuctionMessage_descriptor_;
}

const ReqPubAuctionMessage& ReqPubAuctionMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ReqPubAuctionMessage* ReqPubAuctionMessage::default_instance_ = NULL;

ReqPubAuctionMessage* ReqPubAuctionMessage::New() const {
  return new ReqPubAuctionMessage;
}

void ReqPubAuctionMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 684;
    pubcount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqPubAuctionMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqPubAuction];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pubCount;
        break;
      }
      
      // required int32 pubCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pubCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pubcount_)));
          set_has_pubcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqPubAuctionMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqPubAuction];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required int32 pubCount = 2;
  if (has_pubcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pubcount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqPubAuctionMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqPubAuction];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required int32 pubCount = 2;
  if (has_pubcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pubcount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqPubAuctionMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqPubAuction];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required int32 pubCount = 2;
    if (has_pubcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pubcount());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqPubAuctionMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqPubAuctionMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqPubAuctionMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqPubAuctionMessage::MergeFrom(const ReqPubAuctionMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_pubcount()) {
      set_pubcount(from.pubcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqPubAuctionMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqPubAuctionMessage::CopyFrom(const ReqPubAuctionMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqPubAuctionMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void ReqPubAuctionMessage::Swap(ReqPubAuctionMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(pubcount_, other->pubcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqPubAuctionMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqPubAuctionMessage_descriptor_;
  metadata.reflection = ReqPubAuctionMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqBuyAuctionMessage::kMsgIDFieldNumber;
const int ReqBuyAuctionMessage::kItemIdFieldNumber;
const int ReqBuyAuctionMessage::kBuyCountFieldNumber;
const int ReqBuyAuctionMessage::kPageFieldNumber;
#endif  // !_MSC_VER

ReqBuyAuctionMessage::ReqBuyAuctionMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqBuyAuctionMessage::InitAsDefaultInstance() {
}

ReqBuyAuctionMessage::ReqBuyAuctionMessage(const ReqBuyAuctionMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqBuyAuctionMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 685;
  itemid_ = GOOGLE_LONGLONG(0);
  buycount_ = 0;
  page_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqBuyAuctionMessage::~ReqBuyAuctionMessage() {
  SharedDtor();
}

void ReqBuyAuctionMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqBuyAuctionMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqBuyAuctionMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqBuyAuctionMessage_descriptor_;
}

const ReqBuyAuctionMessage& ReqBuyAuctionMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ReqBuyAuctionMessage* ReqBuyAuctionMessage::default_instance_ = NULL;

ReqBuyAuctionMessage* ReqBuyAuctionMessage::New() const {
  return new ReqBuyAuctionMessage;
}

void ReqBuyAuctionMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 685;
    itemid_ = GOOGLE_LONGLONG(0);
    buycount_ = 0;
    page_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqBuyAuctionMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqBuyAuction];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }
      
      // required int64 itemId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_buyCount;
        break;
      }
      
      // required int32 buyCount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buycount_)));
          set_has_buycount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_page;
        break;
      }
      
      // required int32 page = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_)));
          set_has_page();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqBuyAuctionMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqBuyAuction];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required int64 itemId = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->itemid(), output);
  }
  
  // required int32 buyCount = 3;
  if (has_buycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->buycount(), output);
  }
  
  // required int32 page = 4;
  if (has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->page(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqBuyAuctionMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqBuyAuction];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required int64 itemId = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->itemid(), target);
  }
  
  // required int32 buyCount = 3;
  if (has_buycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->buycount(), target);
  }
  
  // required int32 page = 4;
  if (has_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->page(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqBuyAuctionMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqBuyAuction];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required int64 itemId = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->itemid());
    }
    
    // required int32 buyCount = 3;
    if (has_buycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buycount());
    }
    
    // required int32 page = 4;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqBuyAuctionMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqBuyAuctionMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqBuyAuctionMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqBuyAuctionMessage::MergeFrom(const ReqBuyAuctionMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_buycount()) {
      set_buycount(from.buycount());
    }
    if (from.has_page()) {
      set_page(from.page());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqBuyAuctionMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqBuyAuctionMessage::CopyFrom(const ReqBuyAuctionMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqBuyAuctionMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;
  
  return true;
}

void ReqBuyAuctionMessage::Swap(ReqBuyAuctionMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(itemid_, other->itemid_);
    std::swap(buycount_, other->buycount_);
    std::swap(page_, other->page_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqBuyAuctionMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqBuyAuctionMessage_descriptor_;
  metadata.reflection = ReqBuyAuctionMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqAuctionsMessage::kMsgIDFieldNumber;
const int ReqAuctionsMessage::kPageFieldNumber;
const int ReqAuctionsMessage::kPageShowFieldNumber;
#endif  // !_MSC_VER

ReqAuctionsMessage::ReqAuctionsMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqAuctionsMessage::InitAsDefaultInstance() {
}

ReqAuctionsMessage::ReqAuctionsMessage(const ReqAuctionsMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqAuctionsMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 686;
  page_ = 0;
  pageshow_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAuctionsMessage::~ReqAuctionsMessage() {
  SharedDtor();
}

void ReqAuctionsMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqAuctionsMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAuctionsMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAuctionsMessage_descriptor_;
}

const ReqAuctionsMessage& ReqAuctionsMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ReqAuctionsMessage* ReqAuctionsMessage::default_instance_ = NULL;

ReqAuctionsMessage* ReqAuctionsMessage::New() const {
  return new ReqAuctionsMessage;
}

void ReqAuctionsMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 686;
    page_ = 0;
    pageshow_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqAuctionsMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqAuctions];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_page;
        break;
      }
      
      // required int32 page = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_)));
          set_has_page();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pageShow;
        break;
      }
      
      // required int32 pageShow = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pageShow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pageshow_)));
          set_has_pageshow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqAuctionsMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqAuctions];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required int32 page = 2;
  if (has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->page(), output);
  }
  
  // required int32 pageShow = 3;
  if (has_pageshow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pageshow(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqAuctionsMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqAuctions];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required int32 page = 2;
  if (has_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->page(), target);
  }
  
  // required int32 pageShow = 3;
  if (has_pageshow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pageshow(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqAuctionsMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqAuctions];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required int32 page = 2;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page());
    }
    
    // required int32 pageShow = 3;
    if (has_pageshow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pageshow());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAuctionsMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqAuctionsMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqAuctionsMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqAuctionsMessage::MergeFrom(const ReqAuctionsMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_page()) {
      set_page(from.page());
    }
    if (from.has_pageshow()) {
      set_pageshow(from.pageshow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqAuctionsMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAuctionsMessage::CopyFrom(const ReqAuctionsMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAuctionsMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  return true;
}

void ReqAuctionsMessage::Swap(ReqAuctionsMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(page_, other->page_);
    std::swap(pageshow_, other->pageshow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqAuctionsMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAuctionsMessage_descriptor_;
  metadata.reflection = ReqAuctionsMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResAuctionsMessage::kMsgIDFieldNumber;
const int ResAuctionsMessage::kPageFieldNumber;
const int ResAuctionsMessage::kPageTotalFieldNumber;
const int ResAuctionsMessage::kEntrysFieldNumber;
#endif  // !_MSC_VER

ResAuctionsMessage::ResAuctionsMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResAuctionsMessage::InitAsDefaultInstance() {
}

ResAuctionsMessage::ResAuctionsMessage(const ResAuctionsMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResAuctionsMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 687;
  page_ = 0;
  pagetotal_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResAuctionsMessage::~ResAuctionsMessage() {
  SharedDtor();
}

void ResAuctionsMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResAuctionsMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResAuctionsMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResAuctionsMessage_descriptor_;
}

const ResAuctionsMessage& ResAuctionsMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ResAuctionsMessage* ResAuctionsMessage::default_instance_ = NULL;

ResAuctionsMessage* ResAuctionsMessage::New() const {
  return new ResAuctionsMessage;
}

void ResAuctionsMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 687;
    page_ = 0;
    pagetotal_ = 0;
  }
  entrys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResAuctionsMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ResAuctions];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_page;
        break;
      }
      
      // required int32 page = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_)));
          set_has_page();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pageTotal;
        break;
      }
      
      // required int32 pageTotal = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pageTotal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pagetotal_)));
          set_has_pagetotal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_entrys;
        break;
      }
      
      // repeated .com.game.proto.AuctionEntry entrys = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entrys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entrys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_entrys;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResAuctionsMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResAuctions];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required int32 page = 2;
  if (has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->page(), output);
  }
  
  // required int32 pageTotal = 3;
  if (has_pagetotal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pagetotal(), output);
  }
  
  // repeated .com.game.proto.AuctionEntry entrys = 4;
  for (int i = 0; i < this->entrys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->entrys(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResAuctionsMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResAuctions];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required int32 page = 2;
  if (has_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->page(), target);
  }
  
  // required int32 pageTotal = 3;
  if (has_pagetotal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pagetotal(), target);
  }
  
  // repeated .com.game.proto.AuctionEntry entrys = 4;
  for (int i = 0; i < this->entrys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->entrys(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResAuctionsMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ResAuctions];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required int32 page = 2;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page());
    }
    
    // required int32 pageTotal = 3;
    if (has_pagetotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pagetotal());
    }
    
  }
  // repeated .com.game.proto.AuctionEntry entrys = 4;
  total_size += 1 * this->entrys_size();
  for (int i = 0; i < this->entrys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entrys(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResAuctionsMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResAuctionsMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResAuctionsMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResAuctionsMessage::MergeFrom(const ResAuctionsMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  entrys_.MergeFrom(from.entrys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_page()) {
      set_page(from.page());
    }
    if (from.has_pagetotal()) {
      set_pagetotal(from.pagetotal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResAuctionsMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResAuctionsMessage::CopyFrom(const ResAuctionsMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResAuctionsMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  return true;
}

void ResAuctionsMessage::Swap(ResAuctionsMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(page_, other->page_);
    std::swap(pagetotal_, other->pagetotal_);
    entrys_.Swap(&other->entrys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResAuctionsMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResAuctionsMessage_descriptor_;
  metadata.reflection = ResAuctionsMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqMyAuctionHistorysMessage::kMsgIDFieldNumber;
#endif  // !_MSC_VER

ReqMyAuctionHistorysMessage::ReqMyAuctionHistorysMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqMyAuctionHistorysMessage::InitAsDefaultInstance() {
}

ReqMyAuctionHistorysMessage::ReqMyAuctionHistorysMessage(const ReqMyAuctionHistorysMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqMyAuctionHistorysMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 688;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqMyAuctionHistorysMessage::~ReqMyAuctionHistorysMessage() {
  SharedDtor();
}

void ReqMyAuctionHistorysMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqMyAuctionHistorysMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqMyAuctionHistorysMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqMyAuctionHistorysMessage_descriptor_;
}

const ReqMyAuctionHistorysMessage& ReqMyAuctionHistorysMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ReqMyAuctionHistorysMessage* ReqMyAuctionHistorysMessage::default_instance_ = NULL;

ReqMyAuctionHistorysMessage* ReqMyAuctionHistorysMessage::New() const {
  return new ReqMyAuctionHistorysMessage;
}

void ReqMyAuctionHistorysMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 688;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqMyAuctionHistorysMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqMyAuctionHistorys];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqMyAuctionHistorysMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqMyAuctionHistorys];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqMyAuctionHistorysMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqMyAuctionHistorys];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqMyAuctionHistorysMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqMyAuctionHistorys];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqMyAuctionHistorysMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqMyAuctionHistorysMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqMyAuctionHistorysMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqMyAuctionHistorysMessage::MergeFrom(const ReqMyAuctionHistorysMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqMyAuctionHistorysMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqMyAuctionHistorysMessage::CopyFrom(const ReqMyAuctionHistorysMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqMyAuctionHistorysMessage::IsInitialized() const {
  
  return true;
}

void ReqMyAuctionHistorysMessage::Swap(ReqMyAuctionHistorysMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqMyAuctionHistorysMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqMyAuctionHistorysMessage_descriptor_;
  metadata.reflection = ReqMyAuctionHistorysMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResMyAuctionHistorysMessage::kMsgIDFieldNumber;
const int ResMyAuctionHistorysMessage::kLogsFieldNumber;
#endif  // !_MSC_VER

ResMyAuctionHistorysMessage::ResMyAuctionHistorysMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResMyAuctionHistorysMessage::InitAsDefaultInstance() {
}

ResMyAuctionHistorysMessage::ResMyAuctionHistorysMessage(const ResMyAuctionHistorysMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResMyAuctionHistorysMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 689;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResMyAuctionHistorysMessage::~ResMyAuctionHistorysMessage() {
  SharedDtor();
}

void ResMyAuctionHistorysMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResMyAuctionHistorysMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResMyAuctionHistorysMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResMyAuctionHistorysMessage_descriptor_;
}

const ResMyAuctionHistorysMessage& ResMyAuctionHistorysMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ResMyAuctionHistorysMessage* ResMyAuctionHistorysMessage::default_instance_ = NULL;

ResMyAuctionHistorysMessage* ResMyAuctionHistorysMessage::New() const {
  return new ResMyAuctionHistorysMessage;
}

void ResMyAuctionHistorysMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 689;
  }
  logs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResMyAuctionHistorysMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ResMyAuctionHistorys];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_logs;
        break;
      }
      
      // repeated .com.game.proto.AuctionLog logs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_logs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_logs;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResMyAuctionHistorysMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResMyAuctionHistorys];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // repeated .com.game.proto.AuctionLog logs = 2;
  for (int i = 0; i < this->logs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->logs(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResMyAuctionHistorysMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ResMyAuctionHistorys];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // repeated .com.game.proto.AuctionLog logs = 2;
  for (int i = 0; i < this->logs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->logs(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResMyAuctionHistorysMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ResMyAuctionHistorys];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
  }
  // repeated .com.game.proto.AuctionLog logs = 2;
  total_size += 1 * this->logs_size();
  for (int i = 0; i < this->logs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->logs(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResMyAuctionHistorysMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResMyAuctionHistorysMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResMyAuctionHistorysMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResMyAuctionHistorysMessage::MergeFrom(const ResMyAuctionHistorysMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  logs_.MergeFrom(from.logs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResMyAuctionHistorysMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResMyAuctionHistorysMessage::CopyFrom(const ResMyAuctionHistorysMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResMyAuctionHistorysMessage::IsInitialized() const {
  
  return true;
}

void ResMyAuctionHistorysMessage::Swap(ResMyAuctionHistorysMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    logs_.Swap(&other->logs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResMyAuctionHistorysMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResMyAuctionHistorysMessage_descriptor_;
  metadata.reflection = ResMyAuctionHistorysMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuctionEntry::kIdFieldNumber;
const int AuctionEntry::kItemModelIdFieldNumber;
const int AuctionEntry::kItemCountFieldNumber;
const int AuctionEntry::kItemPriceFieldNumber;
const int AuctionEntry::kOwnerFieldNumber;
const int AuctionEntry::kOwnerPhoneFieldNumber;
const int AuctionEntry::kOwnerIdFieldNumber;
const int AuctionEntry::kTotalPriceFieldNumber;
#endif  // !_MSC_VER

AuctionEntry::AuctionEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuctionEntry::InitAsDefaultInstance() {
}

AuctionEntry::AuctionEntry(const AuctionEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuctionEntry::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  itemmodelid_ = 0;
  itemcount_ = 0;
  itemprice_ = 0;
  owner_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ownerphone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ownerid_ = GOOGLE_LONGLONG(0);
  totalprice_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuctionEntry::~AuctionEntry() {
  SharedDtor();
}

void AuctionEntry::SharedDtor() {
  if (owner_ != &::google::protobuf::internal::kEmptyString) {
    delete owner_;
  }
  if (ownerphone_ != &::google::protobuf::internal::kEmptyString) {
    delete ownerphone_;
  }
  if (this != default_instance_) {
  }
}

void AuctionEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuctionEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuctionEntry_descriptor_;
}

const AuctionEntry& AuctionEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

AuctionEntry* AuctionEntry::default_instance_ = NULL;

AuctionEntry* AuctionEntry::New() const {
  return new AuctionEntry;
}

void AuctionEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    itemmodelid_ = 0;
    itemcount_ = 0;
    itemprice_ = 0;
    if (has_owner()) {
      if (owner_ != &::google::protobuf::internal::kEmptyString) {
        owner_->clear();
      }
    }
    if (has_ownerphone()) {
      if (ownerphone_ != &::google::protobuf::internal::kEmptyString) {
        ownerphone_->clear();
      }
    }
    ownerid_ = GOOGLE_LONGLONG(0);
    totalprice_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuctionEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemModelId;
        break;
      }
      
      // optional int32 itemModelId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemModelId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemmodelid_)));
          set_has_itemmodelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemCount;
        break;
      }
      
      // optional int32 itemCount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemcount_)));
          set_has_itemcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_itemPrice;
        break;
      }
      
      // optional int32 itemPrice = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemprice_)));
          set_has_itemprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_owner;
        break;
      }
      
      // optional string owner = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_owner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_owner()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->owner().data(), this->owner().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_ownerPhone;
        break;
      }
      
      // optional string ownerPhone = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ownerPhone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ownerphone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ownerphone().data(), this->ownerphone().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ownerId;
        break;
      }
      
      // optional int64 ownerId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ownerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ownerid_)));
          set_has_ownerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_totalPrice;
        break;
      }
      
      // optional double totalPrice = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_totalPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &totalprice_)));
          set_has_totalprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuctionEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }
  
  // optional int32 itemModelId = 2;
  if (has_itemmodelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemmodelid(), output);
  }
  
  // optional int32 itemCount = 3;
  if (has_itemcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->itemcount(), output);
  }
  
  // optional int32 itemPrice = 4;
  if (has_itemprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->itemprice(), output);
  }
  
  // optional string owner = 5;
  if (has_owner()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->owner().data(), this->owner().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->owner(), output);
  }
  
  // optional string ownerPhone = 6;
  if (has_ownerphone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ownerphone().data(), this->ownerphone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->ownerphone(), output);
  }
  
  // optional int64 ownerId = 7;
  if (has_ownerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->ownerid(), output);
  }
  
  // optional double totalPrice = 8;
  if (has_totalprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->totalprice(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuctionEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }
  
  // optional int32 itemModelId = 2;
  if (has_itemmodelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itemmodelid(), target);
  }
  
  // optional int32 itemCount = 3;
  if (has_itemcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->itemcount(), target);
  }
  
  // optional int32 itemPrice = 4;
  if (has_itemprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->itemprice(), target);
  }
  
  // optional string owner = 5;
  if (has_owner()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->owner().data(), this->owner().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->owner(), target);
  }
  
  // optional string ownerPhone = 6;
  if (has_ownerphone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ownerphone().data(), this->ownerphone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->ownerphone(), target);
  }
  
  // optional int64 ownerId = 7;
  if (has_ownerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->ownerid(), target);
  }
  
  // optional double totalPrice = 8;
  if (has_totalprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->totalprice(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuctionEntry::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }
    
    // optional int32 itemModelId = 2;
    if (has_itemmodelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemmodelid());
    }
    
    // optional int32 itemCount = 3;
    if (has_itemcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemcount());
    }
    
    // optional int32 itemPrice = 4;
    if (has_itemprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemprice());
    }
    
    // optional string owner = 5;
    if (has_owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->owner());
    }
    
    // optional string ownerPhone = 6;
    if (has_ownerphone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ownerphone());
    }
    
    // optional int64 ownerId = 7;
    if (has_ownerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ownerid());
    }
    
    // optional double totalPrice = 8;
    if (has_totalprice()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuctionEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuctionEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuctionEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuctionEntry::MergeFrom(const AuctionEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_itemmodelid()) {
      set_itemmodelid(from.itemmodelid());
    }
    if (from.has_itemcount()) {
      set_itemcount(from.itemcount());
    }
    if (from.has_itemprice()) {
      set_itemprice(from.itemprice());
    }
    if (from.has_owner()) {
      set_owner(from.owner());
    }
    if (from.has_ownerphone()) {
      set_ownerphone(from.ownerphone());
    }
    if (from.has_ownerid()) {
      set_ownerid(from.ownerid());
    }
    if (from.has_totalprice()) {
      set_totalprice(from.totalprice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuctionEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuctionEntry::CopyFrom(const AuctionEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuctionEntry::IsInitialized() const {
  
  return true;
}

void AuctionEntry::Swap(AuctionEntry* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(itemmodelid_, other->itemmodelid_);
    std::swap(itemcount_, other->itemcount_);
    std::swap(itemprice_, other->itemprice_);
    std::swap(owner_, other->owner_);
    std::swap(ownerphone_, other->ownerphone_);
    std::swap(ownerid_, other->ownerid_);
    std::swap(totalprice_, other->totalprice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuctionEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuctionEntry_descriptor_;
  metadata.reflection = AuctionEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuctionLog::kTypeFieldNumber;
const int AuctionLog::kTimeFieldNumber;
const int AuctionLog::kItemCountFieldNumber;
const int AuctionLog::kOwnerFieldNumber;
#endif  // !_MSC_VER

AuctionLog::AuctionLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuctionLog::InitAsDefaultInstance() {
}

AuctionLog::AuctionLog(const AuctionLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuctionLog::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  itemcount_ = 0;
  owner_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuctionLog::~AuctionLog() {
  SharedDtor();
}

void AuctionLog::SharedDtor() {
  if (owner_ != &::google::protobuf::internal::kEmptyString) {
    delete owner_;
  }
  if (this != default_instance_) {
  }
}

void AuctionLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuctionLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuctionLog_descriptor_;
}

const AuctionLog& AuctionLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

AuctionLog* AuctionLog::default_instance_ = NULL;

AuctionLog* AuctionLog::New() const {
  return new AuctionLog;
}

void AuctionLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    time_ = GOOGLE_LONGLONG(0);
    itemcount_ = 0;
    if (has_owner()) {
      if (owner_ != &::google::protobuf::internal::kEmptyString) {
        owner_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuctionLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }
      
      // optional int64 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemCount;
        break;
      }
      
      // optional int32 itemCount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemcount_)));
          set_has_itemcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_owner;
        break;
      }
      
      // optional string owner = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_owner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_owner()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->owner().data(), this->owner().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuctionLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // optional int64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time(), output);
  }
  
  // optional int32 itemCount = 3;
  if (has_itemcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->itemcount(), output);
  }
  
  // optional string owner = 4;
  if (has_owner()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->owner().data(), this->owner().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->owner(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuctionLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // optional int64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->time(), target);
  }
  
  // optional int32 itemCount = 3;
  if (has_itemcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->itemcount(), target);
  }
  
  // optional string owner = 4;
  if (has_owner()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->owner().data(), this->owner().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->owner(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuctionLog::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional int64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }
    
    // optional int32 itemCount = 3;
    if (has_itemcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemcount());
    }
    
    // optional string owner = 4;
    if (has_owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->owner());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuctionLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuctionLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuctionLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuctionLog::MergeFrom(const AuctionLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_itemcount()) {
      set_itemcount(from.itemcount());
    }
    if (from.has_owner()) {
      set_owner(from.owner());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuctionLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuctionLog::CopyFrom(const AuctionLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuctionLog::IsInitialized() const {
  
  return true;
}

void AuctionLog::Swap(AuctionLog* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(time_, other->time_);
    std::swap(itemcount_, other->itemcount_);
    std::swap(owner_, other->owner_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuctionLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuctionLog_descriptor_;
  metadata.reflection = AuctionLog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqCancelAuctionMessage::kMsgIDFieldNumber;
const int ReqCancelAuctionMessage::kItemIdFieldNumber;
const int ReqCancelAuctionMessage::kPageFieldNumber;
#endif  // !_MSC_VER

ReqCancelAuctionMessage::ReqCancelAuctionMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqCancelAuctionMessage::InitAsDefaultInstance() {
}

ReqCancelAuctionMessage::ReqCancelAuctionMessage(const ReqCancelAuctionMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqCancelAuctionMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 690;
  itemid_ = GOOGLE_LONGLONG(0);
  page_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqCancelAuctionMessage::~ReqCancelAuctionMessage() {
  SharedDtor();
}

void ReqCancelAuctionMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqCancelAuctionMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqCancelAuctionMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqCancelAuctionMessage_descriptor_;
}

const ReqCancelAuctionMessage& ReqCancelAuctionMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();  return *default_instance_;
}

ReqCancelAuctionMessage* ReqCancelAuctionMessage::default_instance_ = NULL;

ReqCancelAuctionMessage* ReqCancelAuctionMessage::New() const {
  return new ReqCancelAuctionMessage;
}

void ReqCancelAuctionMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 690;
    itemid_ = GOOGLE_LONGLONG(0);
    page_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqCancelAuctionMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqCancelAuction];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Login_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Login >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }
      
      // required int64 itemId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_page;
        break;
      }
      
      // required int32 page = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_)));
          set_has_page();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqCancelAuctionMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqCancelAuction];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required int64 itemId = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->itemid(), output);
  }
  
  // required int32 page = 3;
  if (has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->page(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqCancelAuctionMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqCancelAuction];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required int64 itemId = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->itemid(), target);
  }
  
  // required int32 page = 3;
  if (has_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->page(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqCancelAuctionMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Login msgID = 1 [default = ReqCancelAuction];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required int64 itemId = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->itemid());
    }
    
    // required int32 page = 3;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqCancelAuctionMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqCancelAuctionMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqCancelAuctionMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqCancelAuctionMessage::MergeFrom(const ReqCancelAuctionMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_page()) {
      set_page(from.page());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqCancelAuctionMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCancelAuctionMessage::CopyFrom(const ReqCancelAuctionMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCancelAuctionMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  return true;
}

void ReqCancelAuctionMessage::Swap(ReqCancelAuctionMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(itemid_, other->itemid_);
    std::swap(page_, other->page_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqCancelAuctionMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqCancelAuctionMessage_descriptor_;
  metadata.reflection = ReqCancelAuctionMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace game
}  // namespace com

// @@protoc_insertion_point(global_scope)
