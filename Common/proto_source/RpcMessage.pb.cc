// Generated by the protocol buffer compiler.  DO NOT EDIT!
#include "stdafx.h"
#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RpcMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace game {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* GLSendMailMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GLSendMailMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* LGLoginSubGameMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LGLoginSubGameMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* GLLoginSubGameMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GLLoginSubGameMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* LGQuitSubGameMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LGQuitSubGameMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* GLQuitSubGameMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GLQuitSubGameMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* LGUpdateMoney1Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LGUpdateMoney1Message_reflection_ = NULL;
const ::google::protobuf::Descriptor* GLUpdateRoundInfoMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GLUpdateRoundInfoMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* GLSystemNoticeMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GLSystemNoticeMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* LGPlayerBetZJHMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LGPlayerBetZJHMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* GLPlayerBetZJHMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GLPlayerBetZJHMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* GLSyncSSCZJHMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GLSyncSSCZJHMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* SSC_Winer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SSC_Winer_reflection_ = NULL;
const ::google::protobuf::Descriptor* SSC_Bet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SSC_Bet_reflection_ = NULL;
const ::google::protobuf::Descriptor* LGSyncTableDataMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LGSyncTableDataMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* LGStopFishServerMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LGStopFishServerMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* LGReloadFishTableMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LGReloadFishTableMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* LGStartFishServerMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LGStartFishServerMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* LGBuyGoodsMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LGBuyGoodsMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* LGUseGoodsMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LGUseGoodsMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* LGRemoveGoodsMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LGRemoveGoodsMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* GLFilishPresentCharmMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GLFilishPresentCharmMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Protos_Rpc_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_RpcMessage_2eproto() {
  protobuf_AddDesc_RpcMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RpcMessage.proto");
  GOOGLE_CHECK(file != NULL);
  GLSendMailMessage_descriptor_ = file->message_type(0);
  static const int GLSendMailMessage_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLSendMailMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLSendMailMessage, sendname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLSendMailMessage, receiverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLSendMailMessage, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLSendMailMessage, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLSendMailMessage, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLSendMailMessage, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLSendMailMessage, reason_),
  };
  GLSendMailMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GLSendMailMessage_descriptor_,
      GLSendMailMessage::default_instance_,
      GLSendMailMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLSendMailMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLSendMailMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GLSendMailMessage));
  LGLoginSubGameMessage_descriptor_ = file->message_type(1);
  static const int LGLoginSubGameMessage_offsets_[45] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGLoginSubGameMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGLoginSubGameMessage, rpcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGLoginSubGameMessage, money1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGLoginSubGameMessage, money2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGLoginSubGameMessage, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGLoginSubGameMessage, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGLoginSubGameMessage, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGLoginSubGameMessage, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGLoginSubGameMessage, fr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGLoginSubGameMessage, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGLoginSubGameMessage, loginid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGLoginSubGameMessage, loginip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGLoginSubGameMessage, deleteat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGLoginSubGameMessage, gmlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGLoginSubGameMessage, robot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGLoginSubGameMessage, others_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGLoginSubGameMessage, titleindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGLoginSubGameMessage, gamemaxwinmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGLoginSubGameMessage, charmvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGLoginSubGameMessage, vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGLoginSubGameMessage, barragenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGLoginSubGameMessage, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGLoginSubGameMessage, taxratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGLoginSubGameMessage, cardbg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGLoginSubGameMessage, headicon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGLoginSubGameMessage, signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGLoginSubGameMessage, achdatamap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGLoginSubGameMessage, taxfreecardendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGLoginSubGameMessage, taxfreecardrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGLoginSubGameMessage, bankmoney1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGLoginSubGameMessage, bankmoney2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGLoginSubGameMessage, agencyrechargemoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGLoginSubGameMessage, officialrechargemoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGLoginSubGameMessage, withdrawmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGLoginSubGameMessage, playgametime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGLoginSubGameMessage, onlinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGLoginSubGameMessage, dayonlinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGLoginSubGameMessage, ratiovalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGLoginSubGameMessage, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGLoginSubGameMessage, winmoney1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGLoginSubGameMessage, winmoney2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGLoginSubGameMessage, losemoney1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGLoginSubGameMessage, losemoney2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGLoginSubGameMessage, jipaiqilosetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGLoginSubGameMessage, gold_),
  };
  LGLoginSubGameMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LGLoginSubGameMessage_descriptor_,
      LGLoginSubGameMessage::default_instance_,
      LGLoginSubGameMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGLoginSubGameMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGLoginSubGameMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LGLoginSubGameMessage));
  GLLoginSubGameMessage_descriptor_ = file->message_type(2);
  static const int GLLoginSubGameMessage_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLLoginSubGameMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLLoginSubGameMessage, rpcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLLoginSubGameMessage, isreconnect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLLoginSubGameMessage, loginsubgame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLLoginSubGameMessage, mapmodelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLLoginSubGameMessage, fiship_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLLoginSubGameMessage, fishport_),
  };
  GLLoginSubGameMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GLLoginSubGameMessage_descriptor_,
      GLLoginSubGameMessage::default_instance_,
      GLLoginSubGameMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLLoginSubGameMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLLoginSubGameMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GLLoginSubGameMessage));
  LGQuitSubGameMessage_descriptor_ = file->message_type(3);
  static const int LGQuitSubGameMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGQuitSubGameMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGQuitSubGameMessage, rpcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGQuitSubGameMessage, offline_),
  };
  LGQuitSubGameMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LGQuitSubGameMessage_descriptor_,
      LGQuitSubGameMessage::default_instance_,
      LGQuitSubGameMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGQuitSubGameMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGQuitSubGameMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LGQuitSubGameMessage));
  GLQuitSubGameMessage_descriptor_ = file->message_type(4);
  static const int GLQuitSubGameMessage_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLQuitSubGameMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLQuitSubGameMessage, rpcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLQuitSubGameMessage, quitsubgame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLQuitSubGameMessage, money1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLQuitSubGameMessage, money2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLQuitSubGameMessage, winmoney1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLQuitSubGameMessage, winmoney2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLQuitSubGameMessage, losemoney1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLQuitSubGameMessage, losemoney2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLQuitSubGameMessage, playround_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLQuitSubGameMessage, daywinnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLQuitSubGameMessage, daylosenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLQuitSubGameMessage, mapmodelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLQuitSubGameMessage, continuewinnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLQuitSubGameMessage, gamemaxwinmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLQuitSubGameMessage, charmvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLQuitSubGameMessage, others_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLQuitSubGameMessage, achdatamap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLQuitSubGameMessage, sametablemap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLQuitSubGameMessage, taxmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLQuitSubGameMessage, offline_),
  };
  GLQuitSubGameMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GLQuitSubGameMessage_descriptor_,
      GLQuitSubGameMessage::default_instance_,
      GLQuitSubGameMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLQuitSubGameMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLQuitSubGameMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GLQuitSubGameMessage));
  LGUpdateMoney1Message_descriptor_ = file->message_type(5);
  static const int LGUpdateMoney1Message_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGUpdateMoney1Message, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGUpdateMoney1Message, money1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGUpdateMoney1Message, money2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGUpdateMoney1Message, reason_),
  };
  LGUpdateMoney1Message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LGUpdateMoney1Message_descriptor_,
      LGUpdateMoney1Message::default_instance_,
      LGUpdateMoney1Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGUpdateMoney1Message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGUpdateMoney1Message, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LGUpdateMoney1Message));
  GLUpdateRoundInfoMessage_descriptor_ = file->message_type(6);
  static const int GLUpdateRoundInfoMessage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLUpdateRoundInfoMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLUpdateRoundInfoMessage, money1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLUpdateRoundInfoMessage, money2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLUpdateRoundInfoMessage, playernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLUpdateRoundInfoMessage, gamerecord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLUpdateRoundInfoMessage, subgameid_),
  };
  GLUpdateRoundInfoMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GLUpdateRoundInfoMessage_descriptor_,
      GLUpdateRoundInfoMessage::default_instance_,
      GLUpdateRoundInfoMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLUpdateRoundInfoMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLUpdateRoundInfoMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GLUpdateRoundInfoMessage));
  GLSystemNoticeMessage_descriptor_ = file->message_type(7);
  static const int GLSystemNoticeMessage_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLSystemNoticeMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLSystemNoticeMessage, winmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLSystemNoticeMessage, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLSystemNoticeMessage, gamename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLSystemNoticeMessage, mapname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLSystemNoticeMessage, cardtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLSystemNoticeMessage, type_),
  };
  GLSystemNoticeMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GLSystemNoticeMessage_descriptor_,
      GLSystemNoticeMessage::default_instance_,
      GLSystemNoticeMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLSystemNoticeMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLSystemNoticeMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GLSystemNoticeMessage));
  LGPlayerBetZJHMessage_descriptor_ = file->message_type(8);
  static const int LGPlayerBetZJHMessage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGPlayerBetZJHMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGPlayerBetZJHMessage, rpcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGPlayerBetZJHMessage, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGPlayerBetZJHMessage, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGPlayerBetZJHMessage, bets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGPlayerBetZJHMessage, isrobot_),
  };
  LGPlayerBetZJHMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LGPlayerBetZJHMessage_descriptor_,
      LGPlayerBetZJHMessage::default_instance_,
      LGPlayerBetZJHMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGPlayerBetZJHMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGPlayerBetZJHMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LGPlayerBetZJHMessage));
  GLPlayerBetZJHMessage_descriptor_ = file->message_type(9);
  static const int GLPlayerBetZJHMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLPlayerBetZJHMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLPlayerBetZJHMessage, rpcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLPlayerBetZJHMessage, bets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLPlayerBetZJHMessage, issucceed_),
  };
  GLPlayerBetZJHMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GLPlayerBetZJHMessage_descriptor_,
      GLPlayerBetZJHMessage::default_instance_,
      GLPlayerBetZJHMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLPlayerBetZJHMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLPlayerBetZJHMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GLPlayerBetZJHMessage));
  GLSyncSSCZJHMessage_descriptor_ = file->message_type(10);
  static const int GLSyncSSCZJHMessage_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLSyncSSCZJHMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLSyncSSCZJHMessage, nextopentime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLSyncSSCZJHMessage, curresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLSyncSSCZJHMessage, curresulttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLSyncSSCZJHMessage, presantiaowiner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLSyncSSCZJHMessage, presantiaotime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLSyncSSCZJHMessage, prewiners_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLSyncSSCZJHMessage, bigwiners_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLSyncSSCZJHMessage, history_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLSyncSSCZJHMessage, curbetall_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLSyncSSCZJHMessage, sscserver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLSyncSSCZJHMessage, ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLSyncSSCZJHMessage, prebeforebigwiner_),
  };
  GLSyncSSCZJHMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GLSyncSSCZJHMessage_descriptor_,
      GLSyncSSCZJHMessage::default_instance_,
      GLSyncSSCZJHMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLSyncSSCZJHMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLSyncSSCZJHMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GLSyncSSCZJHMessage));
  SSC_Winer_descriptor_ = file->message_type(11);
  static const int SSC_Winer_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSC_Winer, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSC_Winer, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSC_Winer, winmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSC_Winer, wintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSC_Winer, spcialtype_),
  };
  SSC_Winer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SSC_Winer_descriptor_,
      SSC_Winer::default_instance_,
      SSC_Winer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSC_Winer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSC_Winer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SSC_Winer));
  SSC_Bet_descriptor_ = file->message_type(12);
  static const int SSC_Bet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSC_Bet, betindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSC_Bet, betmoney_),
  };
  SSC_Bet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SSC_Bet_descriptor_,
      SSC_Bet::default_instance_,
      SSC_Bet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSC_Bet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSC_Bet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SSC_Bet));
  LGSyncTableDataMessage_descriptor_ = file->message_type(13);
  static const int LGSyncTableDataMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGSyncTableDataMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGSyncTableDataMessage, rpcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGSyncTableDataMessage, loginid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGSyncTableDataMessage, tablejson_),
  };
  LGSyncTableDataMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LGSyncTableDataMessage_descriptor_,
      LGSyncTableDataMessage::default_instance_,
      LGSyncTableDataMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGSyncTableDataMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGSyncTableDataMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LGSyncTableDataMessage));
  LGStopFishServerMessage_descriptor_ = file->message_type(14);
  static const int LGStopFishServerMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGStopFishServerMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGStopFishServerMessage, rpcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGStopFishServerMessage, closetime_),
  };
  LGStopFishServerMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LGStopFishServerMessage_descriptor_,
      LGStopFishServerMessage::default_instance_,
      LGStopFishServerMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGStopFishServerMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGStopFishServerMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LGStopFishServerMessage));
  LGReloadFishTableMessage_descriptor_ = file->message_type(15);
  static const int LGReloadFishTableMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGReloadFishTableMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGReloadFishTableMessage, rpcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGReloadFishTableMessage, configstring_),
  };
  LGReloadFishTableMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LGReloadFishTableMessage_descriptor_,
      LGReloadFishTableMessage::default_instance_,
      LGReloadFishTableMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGReloadFishTableMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGReloadFishTableMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LGReloadFishTableMessage));
  LGStartFishServerMessage_descriptor_ = file->message_type(16);
  static const int LGStartFishServerMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGStartFishServerMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGStartFishServerMessage, rpcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGStartFishServerMessage, starttime_),
  };
  LGStartFishServerMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LGStartFishServerMessage_descriptor_,
      LGStartFishServerMessage::default_instance_,
      LGStartFishServerMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGStartFishServerMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGStartFishServerMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LGStartFishServerMessage));
  LGBuyGoodsMessage_descriptor_ = file->message_type(17);
  static const int LGBuyGoodsMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGBuyGoodsMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGBuyGoodsMessage, itemmodelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGBuyGoodsMessage, itemnum_),
  };
  LGBuyGoodsMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LGBuyGoodsMessage_descriptor_,
      LGBuyGoodsMessage::default_instance_,
      LGBuyGoodsMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGBuyGoodsMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGBuyGoodsMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LGBuyGoodsMessage));
  LGUseGoodsMessage_descriptor_ = file->message_type(18);
  static const int LGUseGoodsMessage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGUseGoodsMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGUseGoodsMessage, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGUseGoodsMessage, itemmodelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGUseGoodsMessage, itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGUseGoodsMessage, time_),
  };
  LGUseGoodsMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LGUseGoodsMessage_descriptor_,
      LGUseGoodsMessage::default_instance_,
      LGUseGoodsMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGUseGoodsMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGUseGoodsMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LGUseGoodsMessage));
  LGRemoveGoodsMessage_descriptor_ = file->message_type(19);
  static const int LGRemoveGoodsMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGRemoveGoodsMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGRemoveGoodsMessage, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGRemoveGoodsMessage, itemmodelid_),
  };
  LGRemoveGoodsMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LGRemoveGoodsMessage_descriptor_,
      LGRemoveGoodsMessage::default_instance_,
      LGRemoveGoodsMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGRemoveGoodsMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGRemoveGoodsMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LGRemoveGoodsMessage));
  GLFilishPresentCharmMessage_descriptor_ = file->message_type(20);
  static const int GLFilishPresentCharmMessage_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLFilishPresentCharmMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLFilishPresentCharmMessage, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLFilishPresentCharmMessage, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLFilishPresentCharmMessage, toplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLFilishPresentCharmMessage, subgameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLFilishPresentCharmMessage, presenttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLFilishPresentCharmMessage, presentvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLFilishPresentCharmMessage, num_),
  };
  GLFilishPresentCharmMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GLFilishPresentCharmMessage_descriptor_,
      GLFilishPresentCharmMessage::default_instance_,
      GLFilishPresentCharmMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLFilishPresentCharmMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLFilishPresentCharmMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GLFilishPresentCharmMessage));
  Protos_Rpc_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RpcMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GLSendMailMessage_descriptor_, &GLSendMailMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LGLoginSubGameMessage_descriptor_, &LGLoginSubGameMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GLLoginSubGameMessage_descriptor_, &GLLoginSubGameMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LGQuitSubGameMessage_descriptor_, &LGQuitSubGameMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GLQuitSubGameMessage_descriptor_, &GLQuitSubGameMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LGUpdateMoney1Message_descriptor_, &LGUpdateMoney1Message::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GLUpdateRoundInfoMessage_descriptor_, &GLUpdateRoundInfoMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GLSystemNoticeMessage_descriptor_, &GLSystemNoticeMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LGPlayerBetZJHMessage_descriptor_, &LGPlayerBetZJHMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GLPlayerBetZJHMessage_descriptor_, &GLPlayerBetZJHMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GLSyncSSCZJHMessage_descriptor_, &GLSyncSSCZJHMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SSC_Winer_descriptor_, &SSC_Winer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SSC_Bet_descriptor_, &SSC_Bet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LGSyncTableDataMessage_descriptor_, &LGSyncTableDataMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LGStopFishServerMessage_descriptor_, &LGStopFishServerMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LGReloadFishTableMessage_descriptor_, &LGReloadFishTableMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LGStartFishServerMessage_descriptor_, &LGStartFishServerMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LGBuyGoodsMessage_descriptor_, &LGBuyGoodsMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LGUseGoodsMessage_descriptor_, &LGUseGoodsMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LGRemoveGoodsMessage_descriptor_, &LGRemoveGoodsMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GLFilishPresentCharmMessage_descriptor_, &GLFilishPresentCharmMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RpcMessage_2eproto() {
  delete GLSendMailMessage::default_instance_;
  delete GLSendMailMessage_reflection_;
  delete LGLoginSubGameMessage::default_instance_;
  delete LGLoginSubGameMessage_reflection_;
  delete GLLoginSubGameMessage::default_instance_;
  delete GLLoginSubGameMessage_reflection_;
  delete LGQuitSubGameMessage::default_instance_;
  delete LGQuitSubGameMessage_reflection_;
  delete GLQuitSubGameMessage::default_instance_;
  delete GLQuitSubGameMessage_reflection_;
  delete LGUpdateMoney1Message::default_instance_;
  delete LGUpdateMoney1Message_reflection_;
  delete GLUpdateRoundInfoMessage::default_instance_;
  delete GLUpdateRoundInfoMessage_reflection_;
  delete GLSystemNoticeMessage::default_instance_;
  delete GLSystemNoticeMessage_reflection_;
  delete LGPlayerBetZJHMessage::default_instance_;
  delete LGPlayerBetZJHMessage_reflection_;
  delete GLPlayerBetZJHMessage::default_instance_;
  delete GLPlayerBetZJHMessage_reflection_;
  delete GLSyncSSCZJHMessage::default_instance_;
  delete GLSyncSSCZJHMessage_reflection_;
  delete SSC_Winer::default_instance_;
  delete SSC_Winer_reflection_;
  delete SSC_Bet::default_instance_;
  delete SSC_Bet_reflection_;
  delete LGSyncTableDataMessage::default_instance_;
  delete LGSyncTableDataMessage_reflection_;
  delete LGStopFishServerMessage::default_instance_;
  delete LGStopFishServerMessage_reflection_;
  delete LGReloadFishTableMessage::default_instance_;
  delete LGReloadFishTableMessage_reflection_;
  delete LGStartFishServerMessage::default_instance_;
  delete LGStartFishServerMessage_reflection_;
  delete LGBuyGoodsMessage::default_instance_;
  delete LGBuyGoodsMessage_reflection_;
  delete LGUseGoodsMessage::default_instance_;
  delete LGUseGoodsMessage_reflection_;
  delete LGRemoveGoodsMessage::default_instance_;
  delete LGRemoveGoodsMessage_reflection_;
  delete GLFilishPresentCharmMessage::default_instance_;
  delete GLFilishPresentCharmMessage_reflection_;
}

void protobuf_AddDesc_RpcMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020RpcMessage.proto\022\016com.game.proto\"\275\001\n\021G"
    "LSendMailMessage\0225\n\005msgID\030\001 \001(\0162\032.com.ga"
    "me.proto.Protos_Rpc:\nGLSendMail\022\020\n\010sendN"
    "ame\030\002 \001(\t\022\022\n\nreceiverId\030\003 \001(\003\022\014\n\004name\030\004 "
    "\001(\t\022\r\n\005title\030\005 \001(\t\022\017\n\007content\030\006 \001(\t\022\r\n\005m"
    "oney\030\007 \001(\001\022\016\n\006reason\030\010 \001(\005\"\225\007\n\025LGLoginSu"
    "bGameMessage\0229\n\005msgID\030\001 \001(\0162\032.com.game.p"
    "roto.Protos_Rpc:\016LGLoginSubGame\022\r\n\005rpcId"
    "\030\002 \001(\005\022\016\n\006money1\030\003 \002(\001\022\016\n\006money2\030\004 \002(\001\022\014"
    "\n\004name\030\005 \002(\t\022\017\n\007address\030\006 \002(\t\022\014\n\004icon\030\007 "
    "\002(\t\022\013\n\003sex\030\010 \002(\005\022\n\n\002fr\030\t \002(\t\022\020\n\010platform"
    "\030\n \002(\t\022\017\n\007loginid\030\013 \002(\005\022\017\n\007loginIp\030\014 \002(\t"
    "\022\020\n\010deleteAt\030\r \002(\005\022\017\n\007gmLevel\030\016 \002(\005\022\r\n\005r"
    "obot\030\017 \002(\005\022\016\n\006others\030\020 \001(\t\022\022\n\ntitleIndex"
    "\030\021 \002(\005\022\027\n\017gameMaxWinMoney\030\022 \002(\001\022\022\n\ncharm"
    "Value\030\023 \002(\005\022\013\n\003vip\030\024 \002(\005\022\022\n\nbarrageNum\030\025"
    " \002(\005\022\020\n\010userName\030\026 \002(\t\022\020\n\010taxRatio\030\027 \002(\001"
    "\022\016\n\006cardBg\030\030 \002(\005\022\020\n\010headIcon\030\031 \002(\005\022\021\n\tsi"
    "gnature\030\032 \002(\t\022\022\n\nachDataMap\030\033 \001(\t\022\032\n\022tax"
    "FreeCardEndTime\030\034 \002(\003\022\027\n\017taxFreeCardRate"
    "\030\035 \002(\001\022\022\n\nbankMoney1\030\036 \001(\001\022\022\n\nbankMoney2"
    "\030\037 \001(\001\022\033\n\023agencyRechargeMoney\030  \001(\001\022\035\n\025o"
    "fficialRechargeMoney\030! \001(\001\022\025\n\rwithdrawMo"
    "ney\030\" \001(\001\022\024\n\014playGameTime\030# \001(\003\022\022\n\nonlin"
    "eTime\030$ \001(\003\022\025\n\rdayOnlineTime\030% \001(\005\022\022\n\nra"
    "tioValue\030& \001(\005\022\r\n\005level\030\' \001(\005\022\021\n\twinMone"
    "y1\030( \001(\005\022\021\n\twinMoney2\030) \001(\005\022\022\n\nloseMoney"
    "1\030* \001(\005\022\022\n\nloseMoney2\030+ \001(\005\022\027\n\017jipaiqiLo"
    "seTime\030, \001(\003\022\014\n\004gold\030- \001(\001\"\302\001\n\025GLLoginSu"
    "bGameMessage\0229\n\005msgID\030\001 \001(\0162\032.com.game.p"
    "roto.Protos_Rpc:\016GLLoginSubGame\022\r\n\005rpcId"
    "\030\002 \001(\005\022\023\n\013isReconnect\030\003 \001(\005\022\024\n\014loginSubG"
    "ame\030\004 \001(\010\022\022\n\nmapModelId\030\005 \001(\005\022\016\n\006fishIp\030"
    "\006 \001(\t\022\020\n\010fishPort\030\007 \001(\005\"p\n\024LGQuitSubGame"
    "Message\0228\n\005msgID\030\001 \001(\0162\032.com.game.proto."
    "Protos_Rpc:\rLGQuitSubGame\022\r\n\005rpcId\030\002 \001(\005"
    "\022\017\n\007offLine\030\003 \001(\010\"\322\003\n\024GLQuitSubGameMessa"
    "ge\0228\n\005msgID\030\001 \001(\0162\032.com.game.proto.Proto"
    "s_Rpc:\rGLQuitSubGame\022\r\n\005rpcId\030\002 \001(\005\022\023\n\013q"
    "uitSubGame\030\003 \001(\010\022\016\n\006money1\030\004 \001(\001\022\016\n\006mone"
    "y2\030\005 \001(\001\022\021\n\twinMoney1\030\006 \001(\001\022\021\n\twinMoney2"
    "\030\007 \001(\001\022\022\n\nloseMoney1\030\010 \001(\001\022\022\n\nloseMoney2"
    "\030\t \001(\001\022\021\n\tplayround\030\n \001(\005\022\021\n\tdayWinNum\030\013"
    " \002(\005\022\022\n\ndayLoseNum\030\014 \002(\005\022\022\n\nmapModelId\030\r"
    " \001(\005\022\026\n\016continueWinNum\030\016 \002(\005\022\027\n\017gameMaxW"
    "inMoney\030\017 \002(\001\022\022\n\ncharmValue\030\020 \002(\005\022\016\n\006oth"
    "ers\030\021 \001(\t\022\022\n\nachDataMap\030\022 \001(\t\022\024\n\014sameTab"
    "leMap\030\023 \001(\t\022\020\n\010taxMoney\030\024 \001(\001\022\017\n\007offLine"
    "\030\025 \001(\010\"\202\001\n\025LGUpdateMoney1Message\0229\n\005msgI"
    "D\030\001 \001(\0162\032.com.game.proto.Protos_Rpc:\016LGU"
    "pdateMoney1\022\016\n\006money1\030\002 \002(\001\022\016\n\006money2\030\003 "
    "\002(\001\022\016\n\006reason\030\004 \002(\005\"\262\001\n\030GLUpdateRoundInf"
    "oMessage\022<\n\005msgID\030\001 \001(\0162\032.com.game.proto"
    ".Protos_Rpc:\021GLUpdateRoundInfo\022\016\n\006money1"
    "\030\002 \002(\001\022\016\n\006money2\030\003 \002(\001\022\021\n\tplayerNum\030\004 \001("
    "\005\022\022\n\ngameRecord\030\005 \001(\t\022\021\n\tsubGameId\030\006 \001(\005"
    "\"\265\001\n\025GLSystemNoticeMessage\0229\n\005msgID\030\001 \001("
    "\0162\032.com.game.proto.Protos_Rpc:\016GLSystemN"
    "otice\022\020\n\010winMoney\030\002 \001(\001\022\014\n\004name\030\003 \001(\t\022\020\n"
    "\010gameName\030\004 \001(\t\022\017\n\007mapName\030\005 \001(\t\022\020\n\010card"
    "Type\030\006 \001(\t\022\014\n\004type\030\007 \001(\005\"\265\001\n\025LGPlayerBet"
    "ZJHMessage\0229\n\005msgID\030\001 \001(\0162\032.com.game.pro"
    "to.Protos_Rpc:\016LGPlayerBetZJH\022\r\n\005rpcId\030\002"
    " \001(\005\022\014\n\004name\030\003 \002(\t\022\014\n\004icon\030\004 \002(\t\022%\n\004bets"
    "\030\005 \003(\0132\027.com.game.proto.SSC_Bet\022\017\n\007isRob"
    "ot\030\006 \002(\010\"\233\001\n\025GLPlayerBetZJHMessage\0229\n\005ms"
    "gID\030\001 \001(\0162\032.com.game.proto.Protos_Rpc:\016G"
    "LPlayerBetZJH\022\r\n\005rpcId\030\002 \001(\005\022%\n\004bets\030\003 \003"
    "(\0132\027.com.game.proto.SSC_Bet\022\021\n\tisSucceed"
    "\030\004 \001(\010\"\313\003\n\023GLSyncSSCZJHMessage\0227\n\005msgID\030"
    "\001 \001(\0162\032.com.game.proto.Protos_Rpc:\014GLSyn"
    "cSSCZJH\022\024\n\014nextOpenTime\030\002 \002(\005\022\021\n\tcurResu"
    "lt\030\003 \003(\005\022\025\n\rcurResultType\030\004 \001(\005\0222\n\017preSa"
    "ntiaoWiner\030\005 \001(\0132\031.com.game.proto.SSC_Wi"
    "ner\022\026\n\016preSantiaoTime\030\006 \001(\005\022,\n\tpreWiners"
    "\030\007 \003(\0132\031.com.game.proto.SSC_Winer\022,\n\tbig"
    "Winers\030\010 \003(\0132\031.com.game.proto.SSC_Winer\022"
    "\017\n\007history\030\t \003(\005\022*\n\tcurBetALL\030\n \003(\0132\027.co"
    "m.game.proto.SSC_Bet\022\021\n\tsscServer\030\013 \001(\005\022"
    "\r\n\005ratio\030\014 \001(\005\0224\n\021preBeforeBigWiner\030\r \003("
    "\0132\031.com.game.proto.SSC_Winer\"^\n\tSSC_Wine"
    "r\022\014\n\004name\030\001 \002(\t\022\014\n\004icon\030\002 \002(\t\022\020\n\010winMone"
    "y\030\003 \002(\005\022\017\n\007winTime\030\004 \001(\t\022\022\n\nspcialType\030\005"
    " \001(\t\"-\n\007SSC_Bet\022\020\n\010betIndex\030\001 \002(\005\022\020\n\010bet"
    "Money\030\002 \002(\005\"\207\001\n\026LGSyncTableDataMessage\022:"
    "\n\005msgID\030\001 \001(\0162\032.com.game.proto.Protos_Rp"
    "c:\017LGSyncTableData\022\r\n\005rpcId\030\002 \001(\005\022\017\n\007log"
    "inId\030\003 \002(\005\022\021\n\ttableJson\030\004 \001(\t\"x\n\027LGStopF"
    "ishServerMessage\022;\n\005msgID\030\001 \001(\0162\032.com.ga"
    "me.proto.Protos_Rpc:\020LGStopFishServer\022\r\n"
    "\005rpcId\030\002 \001(\005\022\021\n\tcloseTime\030\003 \002(\003\"}\n\030LGRel"
    "oadFishTableMessage\022<\n\005msgID\030\001 \001(\0162\032.com"
    ".game.proto.Protos_Rpc:\021LGReloadFishTabl"
    "e\022\r\n\005rpcId\030\002 \001(\005\022\024\n\014configString\030\003 \001(\t\"z"
    "\n\030LGStartFishServerMessage\022<\n\005msgID\030\001 \001("
    "\0162\032.com.game.proto.Protos_Rpc:\021LGStartFi"
    "shServer\022\r\n\005rpcId\030\002 \001(\005\022\021\n\tstartTime\030\003 \002"
    "(\003\"p\n\021LGBuyGoodsMessage\0225\n\005msgID\030\001 \001(\0162\032"
    ".com.game.proto.Protos_Rpc:\nLGBuyGoods\022\023"
    "\n\013itemModelId\030\002 \002(\005\022\017\n\007itemNum\030\003 \002(\005\"\216\001\n"
    "\021LGUseGoodsMessage\0225\n\005msgID\030\001 \001(\0162\032.com."
    "game.proto.Protos_Rpc:\nLGUseGoods\022\016\n\006ite"
    "mId\030\002 \002(\003\022\023\n\013itemModelId\030\003 \002(\005\022\017\n\007itemNu"
    "m\030\004 \002(\005\022\014\n\004time\030\005 \002(\003\"u\n\024LGRemoveGoodsMe"
    "ssage\0228\n\005msgID\030\001 \001(\0162\032.com.game.proto.Pr"
    "otos_Rpc:\rLGRemoveGoods\022\016\n\006itemId\030\002 \001(\003\022"
    "\023\n\013itemModelId\030\003 \001(\005\"\335\001\n\033GLFilishPresent"
    "CharmMessage\022\?\n\005msgID\030\001 \001(\0162\032.com.game.p"
    "roto.Protos_Rpc:\024GLFilishPresentCharm\022\014\n"
    "\004name\030\002 \002(\t\022\020\n\010playerId\030\003 \001(\003\022\022\n\ntoPlaye"
    "rId\030\004 \001(\003\022\021\n\tsubGameId\030\005 \001(\005\022\023\n\013presentT"
    "ype\030\006 \001(\005\022\024\n\014presentValue\030\007 \001(\005\022\013\n\003num\030\010"
    " \001(\005*\264\003\n\nProtos_Rpc\022\023\n\016LGLoginSubGame\020\2770"
    "\022\023\n\016GLLoginSubGame\020\3000\022\022\n\rLGQuitSubGame\020\301"
    "0\022\022\n\rGLQuitSubGame\020\3020\022\023\n\016LGUpdateMoney1\020"
    "\3030\022\026\n\021GLUpdateRoundInfo\020\3040\022\023\n\016GLSystemNo"
    "tice\020\3050\022\026\n\021GLQuitSubFishGame\020\3060\022\025\n\020LGSto"
    "pFishServer\020\3070\022\026\n\021LGReloadFishTable\020\3100\022\026"
    "\n\021LGStartFishServer\020\3110\022\023\n\016LGPlayerBetZJH"
    "\020\2341\022\023\n\016GLPlayerBetZJH\020\2351\022\021\n\014GLSyncSSCZJH"
    "\020\2361\022\024\n\017LGSyncTableData\020\2371\022\017\n\nGLSendMail\020"
    "\2401\022\017\n\nLGBuyGoods\020\2411\022\017\n\nLGUseGoods\020\2421\022\022\n\r"
    "LGRemoveGoods\020\2431\022\031\n\024GLFilishPresentCharm"
    "\020\2441", 4923);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RpcMessage.proto", &protobuf_RegisterTypes);
  GLSendMailMessage::default_instance_ = new GLSendMailMessage();
  LGLoginSubGameMessage::default_instance_ = new LGLoginSubGameMessage();
  GLLoginSubGameMessage::default_instance_ = new GLLoginSubGameMessage();
  LGQuitSubGameMessage::default_instance_ = new LGQuitSubGameMessage();
  GLQuitSubGameMessage::default_instance_ = new GLQuitSubGameMessage();
  LGUpdateMoney1Message::default_instance_ = new LGUpdateMoney1Message();
  GLUpdateRoundInfoMessage::default_instance_ = new GLUpdateRoundInfoMessage();
  GLSystemNoticeMessage::default_instance_ = new GLSystemNoticeMessage();
  LGPlayerBetZJHMessage::default_instance_ = new LGPlayerBetZJHMessage();
  GLPlayerBetZJHMessage::default_instance_ = new GLPlayerBetZJHMessage();
  GLSyncSSCZJHMessage::default_instance_ = new GLSyncSSCZJHMessage();
  SSC_Winer::default_instance_ = new SSC_Winer();
  SSC_Bet::default_instance_ = new SSC_Bet();
  LGSyncTableDataMessage::default_instance_ = new LGSyncTableDataMessage();
  LGStopFishServerMessage::default_instance_ = new LGStopFishServerMessage();
  LGReloadFishTableMessage::default_instance_ = new LGReloadFishTableMessage();
  LGStartFishServerMessage::default_instance_ = new LGStartFishServerMessage();
  LGBuyGoodsMessage::default_instance_ = new LGBuyGoodsMessage();
  LGUseGoodsMessage::default_instance_ = new LGUseGoodsMessage();
  LGRemoveGoodsMessage::default_instance_ = new LGRemoveGoodsMessage();
  GLFilishPresentCharmMessage::default_instance_ = new GLFilishPresentCharmMessage();
  GLSendMailMessage::default_instance_->InitAsDefaultInstance();
  LGLoginSubGameMessage::default_instance_->InitAsDefaultInstance();
  GLLoginSubGameMessage::default_instance_->InitAsDefaultInstance();
  LGQuitSubGameMessage::default_instance_->InitAsDefaultInstance();
  GLQuitSubGameMessage::default_instance_->InitAsDefaultInstance();
  LGUpdateMoney1Message::default_instance_->InitAsDefaultInstance();
  GLUpdateRoundInfoMessage::default_instance_->InitAsDefaultInstance();
  GLSystemNoticeMessage::default_instance_->InitAsDefaultInstance();
  LGPlayerBetZJHMessage::default_instance_->InitAsDefaultInstance();
  GLPlayerBetZJHMessage::default_instance_->InitAsDefaultInstance();
  GLSyncSSCZJHMessage::default_instance_->InitAsDefaultInstance();
  SSC_Winer::default_instance_->InitAsDefaultInstance();
  SSC_Bet::default_instance_->InitAsDefaultInstance();
  LGSyncTableDataMessage::default_instance_->InitAsDefaultInstance();
  LGStopFishServerMessage::default_instance_->InitAsDefaultInstance();
  LGReloadFishTableMessage::default_instance_->InitAsDefaultInstance();
  LGStartFishServerMessage::default_instance_->InitAsDefaultInstance();
  LGBuyGoodsMessage::default_instance_->InitAsDefaultInstance();
  LGUseGoodsMessage::default_instance_->InitAsDefaultInstance();
  LGRemoveGoodsMessage::default_instance_->InitAsDefaultInstance();
  GLFilishPresentCharmMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RpcMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RpcMessage_2eproto {
  StaticDescriptorInitializer_RpcMessage_2eproto() {
    protobuf_AddDesc_RpcMessage_2eproto();
  }
} static_descriptor_initializer_RpcMessage_2eproto_;

const ::google::protobuf::EnumDescriptor* Protos_Rpc_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Protos_Rpc_descriptor_;
}
bool Protos_Rpc_IsValid(int value) {
  switch(value) {
    case 6207:
    case 6208:
    case 6209:
    case 6210:
    case 6211:
    case 6212:
    case 6213:
    case 6214:
    case 6215:
    case 6216:
    case 6217:
    case 6300:
    case 6301:
    case 6302:
    case 6303:
    case 6304:
    case 6305:
    case 6306:
    case 6307:
    case 6308:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int GLSendMailMessage::kMsgIDFieldNumber;
const int GLSendMailMessage::kSendNameFieldNumber;
const int GLSendMailMessage::kReceiverIdFieldNumber;
const int GLSendMailMessage::kNameFieldNumber;
const int GLSendMailMessage::kTitleFieldNumber;
const int GLSendMailMessage::kContentFieldNumber;
const int GLSendMailMessage::kMoneyFieldNumber;
const int GLSendMailMessage::kReasonFieldNumber;
#endif  // !_MSC_VER

GLSendMailMessage::GLSendMailMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GLSendMailMessage::InitAsDefaultInstance() {
}

GLSendMailMessage::GLSendMailMessage(const GLSendMailMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GLSendMailMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 6304;
  sendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  receiverid_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  money_ = 0;
  reason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLSendMailMessage::~GLSendMailMessage() {
  SharedDtor();
}

void GLSendMailMessage::SharedDtor() {
  if (sendname_ != &::google::protobuf::internal::kEmptyString) {
    delete sendname_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void GLSendMailMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GLSendMailMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GLSendMailMessage_descriptor_;
}

const GLSendMailMessage& GLSendMailMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RpcMessage_2eproto();  return *default_instance_;
}

GLSendMailMessage* GLSendMailMessage::default_instance_ = NULL;

GLSendMailMessage* GLSendMailMessage::New() const {
  return new GLSendMailMessage;
}

void GLSendMailMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 6304;
    if (has_sendname()) {
      if (sendname_ != &::google::protobuf::internal::kEmptyString) {
        sendname_->clear();
      }
    }
    receiverid_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    money_ = 0;
    reason_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GLSendMailMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Rpc msgID = 1 [default = GLSendMail];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Rpc_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Rpc >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sendName;
        break;
      }
      
      // optional string sendName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sendName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sendname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sendname().data(), this->sendname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_receiverId;
        break;
      }
      
      // optional int64 receiverId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_receiverId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &receiverid_)));
          set_has_receiverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }
      
      // optional string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_title;
        break;
      }
      
      // optional string title = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_content;
        break;
      }
      
      // optional string content = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_money;
        break;
      }
      
      // optional double money = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_reason;
        break;
      }
      
      // optional int32 reason = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLSendMailMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Rpc msgID = 1 [default = GLSendMail];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // optional string sendName = 2;
  if (has_sendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendname().data(), this->sendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sendname(), output);
  }
  
  // optional int64 receiverId = 3;
  if (has_receiverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->receiverid(), output);
  }
  
  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }
  
  // optional string title = 5;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->title(), output);
  }
  
  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->content(), output);
  }
  
  // optional double money = 7;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->money(), output);
  }
  
  // optional int32 reason = 8;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->reason(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GLSendMailMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Rpc msgID = 1 [default = GLSendMail];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // optional string sendName = 2;
  if (has_sendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendname().data(), this->sendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sendname(), target);
  }
  
  // optional int64 receiverId = 3;
  if (has_receiverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->receiverid(), target);
  }
  
  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }
  
  // optional string title = 5;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->title(), target);
  }
  
  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->content(), target);
  }
  
  // optional double money = 7;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->money(), target);
  }
  
  // optional int32 reason = 8;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->reason(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GLSendMailMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Rpc msgID = 1 [default = GLSendMail];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional string sendName = 2;
    if (has_sendname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sendname());
    }
    
    // optional int64 receiverId = 3;
    if (has_receiverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->receiverid());
    }
    
    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string title = 5;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }
    
    // optional string content = 6;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }
    
    // optional double money = 7;
    if (has_money()) {
      total_size += 1 + 8;
    }
    
    // optional int32 reason = 8;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reason());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLSendMailMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GLSendMailMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GLSendMailMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GLSendMailMessage::MergeFrom(const GLSendMailMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_sendname()) {
      set_sendname(from.sendname());
    }
    if (from.has_receiverid()) {
      set_receiverid(from.receiverid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GLSendMailMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GLSendMailMessage::CopyFrom(const GLSendMailMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLSendMailMessage::IsInitialized() const {
  
  return true;
}

void GLSendMailMessage::Swap(GLSendMailMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(sendname_, other->sendname_);
    std::swap(receiverid_, other->receiverid_);
    std::swap(name_, other->name_);
    std::swap(title_, other->title_);
    std::swap(content_, other->content_);
    std::swap(money_, other->money_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GLSendMailMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GLSendMailMessage_descriptor_;
  metadata.reflection = GLSendMailMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LGLoginSubGameMessage::kMsgIDFieldNumber;
const int LGLoginSubGameMessage::kRpcIdFieldNumber;
const int LGLoginSubGameMessage::kMoney1FieldNumber;
const int LGLoginSubGameMessage::kMoney2FieldNumber;
const int LGLoginSubGameMessage::kNameFieldNumber;
const int LGLoginSubGameMessage::kAddressFieldNumber;
const int LGLoginSubGameMessage::kIconFieldNumber;
const int LGLoginSubGameMessage::kSexFieldNumber;
const int LGLoginSubGameMessage::kFrFieldNumber;
const int LGLoginSubGameMessage::kPlatformFieldNumber;
const int LGLoginSubGameMessage::kLoginidFieldNumber;
const int LGLoginSubGameMessage::kLoginIpFieldNumber;
const int LGLoginSubGameMessage::kDeleteAtFieldNumber;
const int LGLoginSubGameMessage::kGmLevelFieldNumber;
const int LGLoginSubGameMessage::kRobotFieldNumber;
const int LGLoginSubGameMessage::kOthersFieldNumber;
const int LGLoginSubGameMessage::kTitleIndexFieldNumber;
const int LGLoginSubGameMessage::kGameMaxWinMoneyFieldNumber;
const int LGLoginSubGameMessage::kCharmValueFieldNumber;
const int LGLoginSubGameMessage::kVipFieldNumber;
const int LGLoginSubGameMessage::kBarrageNumFieldNumber;
const int LGLoginSubGameMessage::kUserNameFieldNumber;
const int LGLoginSubGameMessage::kTaxRatioFieldNumber;
const int LGLoginSubGameMessage::kCardBgFieldNumber;
const int LGLoginSubGameMessage::kHeadIconFieldNumber;
const int LGLoginSubGameMessage::kSignatureFieldNumber;
const int LGLoginSubGameMessage::kAchDataMapFieldNumber;
const int LGLoginSubGameMessage::kTaxFreeCardEndTimeFieldNumber;
const int LGLoginSubGameMessage::kTaxFreeCardRateFieldNumber;
const int LGLoginSubGameMessage::kBankMoney1FieldNumber;
const int LGLoginSubGameMessage::kBankMoney2FieldNumber;
const int LGLoginSubGameMessage::kAgencyRechargeMoneyFieldNumber;
const int LGLoginSubGameMessage::kOfficialRechargeMoneyFieldNumber;
const int LGLoginSubGameMessage::kWithdrawMoneyFieldNumber;
const int LGLoginSubGameMessage::kPlayGameTimeFieldNumber;
const int LGLoginSubGameMessage::kOnlineTimeFieldNumber;
const int LGLoginSubGameMessage::kDayOnlineTimeFieldNumber;
const int LGLoginSubGameMessage::kRatioValueFieldNumber;
const int LGLoginSubGameMessage::kLevelFieldNumber;
const int LGLoginSubGameMessage::kWinMoney1FieldNumber;
const int LGLoginSubGameMessage::kWinMoney2FieldNumber;
const int LGLoginSubGameMessage::kLoseMoney1FieldNumber;
const int LGLoginSubGameMessage::kLoseMoney2FieldNumber;
const int LGLoginSubGameMessage::kJipaiqiLoseTimeFieldNumber;
const int LGLoginSubGameMessage::kGoldFieldNumber;
#endif  // !_MSC_VER

LGLoginSubGameMessage::LGLoginSubGameMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LGLoginSubGameMessage::InitAsDefaultInstance() {
}

LGLoginSubGameMessage::LGLoginSubGameMessage(const LGLoginSubGameMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LGLoginSubGameMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 6207;
  rpcid_ = 0;
  money1_ = 0;
  money2_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0;
  fr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  loginid_ = 0;
  loginip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deleteat_ = 0;
  gmlevel_ = 0;
  robot_ = 0;
  others_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  titleindex_ = 0;
  gamemaxwinmoney_ = 0;
  charmvalue_ = 0;
  vip_ = 0;
  barragenum_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  taxratio_ = 0;
  cardbg_ = 0;
  headicon_ = 0;
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  achdatamap_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  taxfreecardendtime_ = GOOGLE_LONGLONG(0);
  taxfreecardrate_ = 0;
  bankmoney1_ = 0;
  bankmoney2_ = 0;
  agencyrechargemoney_ = 0;
  officialrechargemoney_ = 0;
  withdrawmoney_ = 0;
  playgametime_ = GOOGLE_LONGLONG(0);
  onlinetime_ = GOOGLE_LONGLONG(0);
  dayonlinetime_ = 0;
  ratiovalue_ = 0;
  level_ = 0;
  winmoney1_ = 0;
  winmoney2_ = 0;
  losemoney1_ = 0;
  losemoney2_ = 0;
  jipaiqilosetime_ = GOOGLE_LONGLONG(0);
  gold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LGLoginSubGameMessage::~LGLoginSubGameMessage() {
  SharedDtor();
}

void LGLoginSubGameMessage::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (fr_ != &::google::protobuf::internal::kEmptyString) {
    delete fr_;
  }
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    delete platform_;
  }
  if (loginip_ != &::google::protobuf::internal::kEmptyString) {
    delete loginip_;
  }
  if (others_ != &::google::protobuf::internal::kEmptyString) {
    delete others_;
  }
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (achdatamap_ != &::google::protobuf::internal::kEmptyString) {
    delete achdatamap_;
  }
  if (this != default_instance_) {
  }
}

void LGLoginSubGameMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LGLoginSubGameMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LGLoginSubGameMessage_descriptor_;
}

const LGLoginSubGameMessage& LGLoginSubGameMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RpcMessage_2eproto();  return *default_instance_;
}

LGLoginSubGameMessage* LGLoginSubGameMessage::default_instance_ = NULL;

LGLoginSubGameMessage* LGLoginSubGameMessage::New() const {
  return new LGLoginSubGameMessage;
}

void LGLoginSubGameMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 6207;
    rpcid_ = 0;
    money1_ = 0;
    money2_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::kEmptyString) {
        address_->clear();
      }
    }
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
    sex_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_fr()) {
      if (fr_ != &::google::protobuf::internal::kEmptyString) {
        fr_->clear();
      }
    }
    if (has_platform()) {
      if (platform_ != &::google::protobuf::internal::kEmptyString) {
        platform_->clear();
      }
    }
    loginid_ = 0;
    if (has_loginip()) {
      if (loginip_ != &::google::protobuf::internal::kEmptyString) {
        loginip_->clear();
      }
    }
    deleteat_ = 0;
    gmlevel_ = 0;
    robot_ = 0;
    if (has_others()) {
      if (others_ != &::google::protobuf::internal::kEmptyString) {
        others_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    titleindex_ = 0;
    gamemaxwinmoney_ = 0;
    charmvalue_ = 0;
    vip_ = 0;
    barragenum_ = 0;
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    taxratio_ = 0;
    cardbg_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    headicon_ = 0;
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::kEmptyString) {
        signature_->clear();
      }
    }
    if (has_achdatamap()) {
      if (achdatamap_ != &::google::protobuf::internal::kEmptyString) {
        achdatamap_->clear();
      }
    }
    taxfreecardendtime_ = GOOGLE_LONGLONG(0);
    taxfreecardrate_ = 0;
    bankmoney1_ = 0;
    bankmoney2_ = 0;
    agencyrechargemoney_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    officialrechargemoney_ = 0;
    withdrawmoney_ = 0;
    playgametime_ = GOOGLE_LONGLONG(0);
    onlinetime_ = GOOGLE_LONGLONG(0);
    dayonlinetime_ = 0;
    ratiovalue_ = 0;
    level_ = 0;
    winmoney1_ = 0;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    winmoney2_ = 0;
    losemoney1_ = 0;
    losemoney2_ = 0;
    jipaiqilosetime_ = GOOGLE_LONGLONG(0);
    gold_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LGLoginSubGameMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Rpc msgID = 1 [default = LGLoginSubGame];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Rpc_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Rpc >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rpcId;
        break;
      }
      
      // optional int32 rpcId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rpcId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rpcid_)));
          set_has_rpcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_money1;
        break;
      }
      
      // required double money1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_money1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &money1_)));
          set_has_money1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_money2;
        break;
      }
      
      // required double money2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_money2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &money2_)));
          set_has_money2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }
      
      // required string name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_address;
        break;
      }
      
      // required string address = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_icon;
        break;
      }
      
      // required string icon = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_sex;
        break;
      }
      
      // required int32 sex = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_fr;
        break;
      }
      
      // required string fr = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fr().data(), this->fr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_platform;
        break;
      }
      
      // required string platform = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_platform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_loginid;
        break;
      }
      
      // required int32 loginid = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loginid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loginid_)));
          set_has_loginid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_loginIp;
        break;
      }
      
      // required string loginIp = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_loginIp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_loginip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->loginip().data(), this->loginip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_deleteAt;
        break;
      }
      
      // required int32 deleteAt = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deleteAt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deleteat_)));
          set_has_deleteat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_gmLevel;
        break;
      }
      
      // required int32 gmLevel = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gmLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gmlevel_)));
          set_has_gmlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_robot;
        break;
      }
      
      // required int32 robot = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_robot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &robot_)));
          set_has_robot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_others;
        break;
      }
      
      // optional string others = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_others:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_others()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->others().data(), this->others().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_titleIndex;
        break;
      }
      
      // required int32 titleIndex = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_titleIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &titleindex_)));
          set_has_titleindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(145)) goto parse_gameMaxWinMoney;
        break;
      }
      
      // required double gameMaxWinMoney = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_gameMaxWinMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gamemaxwinmoney_)));
          set_has_gamemaxwinmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_charmValue;
        break;
      }
      
      // required int32 charmValue = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charmValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &charmvalue_)));
          set_has_charmvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_vip;
        break;
      }
      
      // required int32 vip = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_barrageNum;
        break;
      }
      
      // required int32 barrageNum = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_barrageNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &barragenum_)));
          set_has_barragenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_userName;
        break;
      }
      
      // required string userName = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(185)) goto parse_taxRatio;
        break;
      }
      
      // required double taxRatio = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_taxRatio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &taxratio_)));
          set_has_taxratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_cardBg;
        break;
      }
      
      // required int32 cardBg = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardBg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardbg_)));
          set_has_cardbg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_headIcon;
        break;
      }
      
      // required int32 headIcon = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headIcon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headicon_)));
          set_has_headicon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_signature;
        break;
      }
      
      // required string signature = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_achDataMap;
        break;
      }
      
      // optional string achDataMap = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_achDataMap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_achdatamap()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->achdatamap().data(), this->achdatamap().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_taxFreeCardEndTime;
        break;
      }
      
      // required int64 taxFreeCardEndTime = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_taxFreeCardEndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &taxfreecardendtime_)));
          set_has_taxfreecardendtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(233)) goto parse_taxFreeCardRate;
        break;
      }
      
      // required double taxFreeCardRate = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_taxFreeCardRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &taxfreecardrate_)));
          set_has_taxfreecardrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(241)) goto parse_bankMoney1;
        break;
      }
      
      // optional double bankMoney1 = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_bankMoney1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bankmoney1_)));
          set_has_bankmoney1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(249)) goto parse_bankMoney2;
        break;
      }
      
      // optional double bankMoney2 = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_bankMoney2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bankmoney2_)));
          set_has_bankmoney2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(257)) goto parse_agencyRechargeMoney;
        break;
      }
      
      // optional double agencyRechargeMoney = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_agencyRechargeMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &agencyrechargemoney_)));
          set_has_agencyrechargemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(265)) goto parse_officialRechargeMoney;
        break;
      }
      
      // optional double officialRechargeMoney = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_officialRechargeMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &officialrechargemoney_)));
          set_has_officialrechargemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(273)) goto parse_withdrawMoney;
        break;
      }
      
      // optional double withdrawMoney = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_withdrawMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &withdrawmoney_)));
          set_has_withdrawmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_playGameTime;
        break;
      }
      
      // optional int64 playGameTime = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playGameTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playgametime_)));
          set_has_playgametime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_onlineTime;
        break;
      }
      
      // optional int64 onlineTime = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_onlineTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &onlinetime_)));
          set_has_onlinetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_dayOnlineTime;
        break;
      }
      
      // optional int32 dayOnlineTime = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dayOnlineTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dayonlinetime_)));
          set_has_dayonlinetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_ratioValue;
        break;
      }
      
      // optional int32 ratioValue = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ratioValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ratiovalue_)));
          set_has_ratiovalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_level;
        break;
      }
      
      // optional int32 level = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_winMoney1;
        break;
      }
      
      // optional int32 winMoney1 = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winMoney1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winmoney1_)));
          set_has_winmoney1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_winMoney2;
        break;
      }
      
      // optional int32 winMoney2 = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winMoney2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winmoney2_)));
          set_has_winmoney2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_loseMoney1;
        break;
      }
      
      // optional int32 loseMoney1 = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loseMoney1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &losemoney1_)));
          set_has_losemoney1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_loseMoney2;
        break;
      }
      
      // optional int32 loseMoney2 = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loseMoney2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &losemoney2_)));
          set_has_losemoney2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(352)) goto parse_jipaiqiLoseTime;
        break;
      }
      
      // optional int64 jipaiqiLoseTime = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jipaiqiLoseTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &jipaiqilosetime_)));
          set_has_jipaiqilosetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(361)) goto parse_gold;
        break;
      }
      
      // optional double gold = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LGLoginSubGameMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Rpc msgID = 1 [default = LGLoginSubGame];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // optional int32 rpcId = 2;
  if (has_rpcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rpcid(), output);
  }
  
  // required double money1 = 3;
  if (has_money1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->money1(), output);
  }
  
  // required double money2 = 4;
  if (has_money2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->money2(), output);
  }
  
  // required string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->name(), output);
  }
  
  // required string address = 6;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->address(), output);
  }
  
  // required string icon = 7;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->icon(), output);
  }
  
  // required int32 sex = 8;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->sex(), output);
  }
  
  // required string fr = 9;
  if (has_fr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fr().data(), this->fr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->fr(), output);
  }
  
  // required string platform = 10;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->platform(), output);
  }
  
  // required int32 loginid = 11;
  if (has_loginid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->loginid(), output);
  }
  
  // required string loginIp = 12;
  if (has_loginip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->loginip().data(), this->loginip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->loginip(), output);
  }
  
  // required int32 deleteAt = 13;
  if (has_deleteat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->deleteat(), output);
  }
  
  // required int32 gmLevel = 14;
  if (has_gmlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->gmlevel(), output);
  }
  
  // required int32 robot = 15;
  if (has_robot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->robot(), output);
  }
  
  // optional string others = 16;
  if (has_others()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->others().data(), this->others().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->others(), output);
  }
  
  // required int32 titleIndex = 17;
  if (has_titleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->titleindex(), output);
  }
  
  // required double gameMaxWinMoney = 18;
  if (has_gamemaxwinmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->gamemaxwinmoney(), output);
  }
  
  // required int32 charmValue = 19;
  if (has_charmvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->charmvalue(), output);
  }
  
  // required int32 vip = 20;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->vip(), output);
  }
  
  // required int32 barrageNum = 21;
  if (has_barragenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->barragenum(), output);
  }
  
  // required string userName = 22;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->username(), output);
  }
  
  // required double taxRatio = 23;
  if (has_taxratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->taxratio(), output);
  }
  
  // required int32 cardBg = 24;
  if (has_cardbg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->cardbg(), output);
  }
  
  // required int32 headIcon = 25;
  if (has_headicon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->headicon(), output);
  }
  
  // required string signature = 26;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      26, this->signature(), output);
  }
  
  // optional string achDataMap = 27;
  if (has_achdatamap()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->achdatamap().data(), this->achdatamap().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      27, this->achdatamap(), output);
  }
  
  // required int64 taxFreeCardEndTime = 28;
  if (has_taxfreecardendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(28, this->taxfreecardendtime(), output);
  }
  
  // required double taxFreeCardRate = 29;
  if (has_taxfreecardrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->taxfreecardrate(), output);
  }
  
  // optional double bankMoney1 = 30;
  if (has_bankmoney1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->bankmoney1(), output);
  }
  
  // optional double bankMoney2 = 31;
  if (has_bankmoney2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(31, this->bankmoney2(), output);
  }
  
  // optional double agencyRechargeMoney = 32;
  if (has_agencyrechargemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(32, this->agencyrechargemoney(), output);
  }
  
  // optional double officialRechargeMoney = 33;
  if (has_officialrechargemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(33, this->officialrechargemoney(), output);
  }
  
  // optional double withdrawMoney = 34;
  if (has_withdrawmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(34, this->withdrawmoney(), output);
  }
  
  // optional int64 playGameTime = 35;
  if (has_playgametime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(35, this->playgametime(), output);
  }
  
  // optional int64 onlineTime = 36;
  if (has_onlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(36, this->onlinetime(), output);
  }
  
  // optional int32 dayOnlineTime = 37;
  if (has_dayonlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->dayonlinetime(), output);
  }
  
  // optional int32 ratioValue = 38;
  if (has_ratiovalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->ratiovalue(), output);
  }
  
  // optional int32 level = 39;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->level(), output);
  }
  
  // optional int32 winMoney1 = 40;
  if (has_winmoney1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->winmoney1(), output);
  }
  
  // optional int32 winMoney2 = 41;
  if (has_winmoney2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->winmoney2(), output);
  }
  
  // optional int32 loseMoney1 = 42;
  if (has_losemoney1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->losemoney1(), output);
  }
  
  // optional int32 loseMoney2 = 43;
  if (has_losemoney2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(43, this->losemoney2(), output);
  }
  
  // optional int64 jipaiqiLoseTime = 44;
  if (has_jipaiqilosetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(44, this->jipaiqilosetime(), output);
  }
  
  // optional double gold = 45;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(45, this->gold(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LGLoginSubGameMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Rpc msgID = 1 [default = LGLoginSubGame];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // optional int32 rpcId = 2;
  if (has_rpcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rpcid(), target);
  }
  
  // required double money1 = 3;
  if (has_money1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->money1(), target);
  }
  
  // required double money2 = 4;
  if (has_money2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->money2(), target);
  }
  
  // required string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }
  
  // required string address = 6;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->address(), target);
  }
  
  // required string icon = 7;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->icon(), target);
  }
  
  // required int32 sex = 8;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->sex(), target);
  }
  
  // required string fr = 9;
  if (has_fr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fr().data(), this->fr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->fr(), target);
  }
  
  // required string platform = 10;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->platform(), target);
  }
  
  // required int32 loginid = 11;
  if (has_loginid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->loginid(), target);
  }
  
  // required string loginIp = 12;
  if (has_loginip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->loginip().data(), this->loginip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->loginip(), target);
  }
  
  // required int32 deleteAt = 13;
  if (has_deleteat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->deleteat(), target);
  }
  
  // required int32 gmLevel = 14;
  if (has_gmlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->gmlevel(), target);
  }
  
  // required int32 robot = 15;
  if (has_robot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->robot(), target);
  }
  
  // optional string others = 16;
  if (has_others()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->others().data(), this->others().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->others(), target);
  }
  
  // required int32 titleIndex = 17;
  if (has_titleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->titleindex(), target);
  }
  
  // required double gameMaxWinMoney = 18;
  if (has_gamemaxwinmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->gamemaxwinmoney(), target);
  }
  
  // required int32 charmValue = 19;
  if (has_charmvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->charmvalue(), target);
  }
  
  // required int32 vip = 20;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->vip(), target);
  }
  
  // required int32 barrageNum = 21;
  if (has_barragenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->barragenum(), target);
  }
  
  // required string userName = 22;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->username(), target);
  }
  
  // required double taxRatio = 23;
  if (has_taxratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->taxratio(), target);
  }
  
  // required int32 cardBg = 24;
  if (has_cardbg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->cardbg(), target);
  }
  
  // required int32 headIcon = 25;
  if (has_headicon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->headicon(), target);
  }
  
  // required string signature = 26;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->signature(), target);
  }
  
  // optional string achDataMap = 27;
  if (has_achdatamap()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->achdatamap().data(), this->achdatamap().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->achdatamap(), target);
  }
  
  // required int64 taxFreeCardEndTime = 28;
  if (has_taxfreecardendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(28, this->taxfreecardendtime(), target);
  }
  
  // required double taxFreeCardRate = 29;
  if (has_taxfreecardrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->taxfreecardrate(), target);
  }
  
  // optional double bankMoney1 = 30;
  if (has_bankmoney1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->bankmoney1(), target);
  }
  
  // optional double bankMoney2 = 31;
  if (has_bankmoney2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(31, this->bankmoney2(), target);
  }
  
  // optional double agencyRechargeMoney = 32;
  if (has_agencyrechargemoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(32, this->agencyrechargemoney(), target);
  }
  
  // optional double officialRechargeMoney = 33;
  if (has_officialrechargemoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(33, this->officialrechargemoney(), target);
  }
  
  // optional double withdrawMoney = 34;
  if (has_withdrawmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(34, this->withdrawmoney(), target);
  }
  
  // optional int64 playGameTime = 35;
  if (has_playgametime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(35, this->playgametime(), target);
  }
  
  // optional int64 onlineTime = 36;
  if (has_onlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(36, this->onlinetime(), target);
  }
  
  // optional int32 dayOnlineTime = 37;
  if (has_dayonlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->dayonlinetime(), target);
  }
  
  // optional int32 ratioValue = 38;
  if (has_ratiovalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->ratiovalue(), target);
  }
  
  // optional int32 level = 39;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(39, this->level(), target);
  }
  
  // optional int32 winMoney1 = 40;
  if (has_winmoney1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->winmoney1(), target);
  }
  
  // optional int32 winMoney2 = 41;
  if (has_winmoney2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(41, this->winmoney2(), target);
  }
  
  // optional int32 loseMoney1 = 42;
  if (has_losemoney1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(42, this->losemoney1(), target);
  }
  
  // optional int32 loseMoney2 = 43;
  if (has_losemoney2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(43, this->losemoney2(), target);
  }
  
  // optional int64 jipaiqiLoseTime = 44;
  if (has_jipaiqilosetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(44, this->jipaiqilosetime(), target);
  }
  
  // optional double gold = 45;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(45, this->gold(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LGLoginSubGameMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Rpc msgID = 1 [default = LGLoginSubGame];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional int32 rpcId = 2;
    if (has_rpcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rpcid());
    }
    
    // required double money1 = 3;
    if (has_money1()) {
      total_size += 1 + 8;
    }
    
    // required double money2 = 4;
    if (has_money2()) {
      total_size += 1 + 8;
    }
    
    // required string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string address = 6;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }
    
    // required string icon = 7;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }
    
    // required int32 sex = 8;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string fr = 9;
    if (has_fr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fr());
    }
    
    // required string platform = 10;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }
    
    // required int32 loginid = 11;
    if (has_loginid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loginid());
    }
    
    // required string loginIp = 12;
    if (has_loginip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->loginip());
    }
    
    // required int32 deleteAt = 13;
    if (has_deleteat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deleteat());
    }
    
    // required int32 gmLevel = 14;
    if (has_gmlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gmlevel());
    }
    
    // required int32 robot = 15;
    if (has_robot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->robot());
    }
    
    // optional string others = 16;
    if (has_others()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->others());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 titleIndex = 17;
    if (has_titleindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->titleindex());
    }
    
    // required double gameMaxWinMoney = 18;
    if (has_gamemaxwinmoney()) {
      total_size += 2 + 8;
    }
    
    // required int32 charmValue = 19;
    if (has_charmvalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->charmvalue());
    }
    
    // required int32 vip = 20;
    if (has_vip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip());
    }
    
    // required int32 barrageNum = 21;
    if (has_barragenum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->barragenum());
    }
    
    // required string userName = 22;
    if (has_username()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
    // required double taxRatio = 23;
    if (has_taxratio()) {
      total_size += 2 + 8;
    }
    
    // required int32 cardBg = 24;
    if (has_cardbg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardbg());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required int32 headIcon = 25;
    if (has_headicon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headicon());
    }
    
    // required string signature = 26;
    if (has_signature()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signature());
    }
    
    // optional string achDataMap = 27;
    if (has_achdatamap()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->achdatamap());
    }
    
    // required int64 taxFreeCardEndTime = 28;
    if (has_taxfreecardendtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->taxfreecardendtime());
    }
    
    // required double taxFreeCardRate = 29;
    if (has_taxfreecardrate()) {
      total_size += 2 + 8;
    }
    
    // optional double bankMoney1 = 30;
    if (has_bankmoney1()) {
      total_size += 2 + 8;
    }
    
    // optional double bankMoney2 = 31;
    if (has_bankmoney2()) {
      total_size += 2 + 8;
    }
    
    // optional double agencyRechargeMoney = 32;
    if (has_agencyrechargemoney()) {
      total_size += 2 + 8;
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional double officialRechargeMoney = 33;
    if (has_officialrechargemoney()) {
      total_size += 2 + 8;
    }
    
    // optional double withdrawMoney = 34;
    if (has_withdrawmoney()) {
      total_size += 2 + 8;
    }
    
    // optional int64 playGameTime = 35;
    if (has_playgametime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playgametime());
    }
    
    // optional int64 onlineTime = 36;
    if (has_onlinetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->onlinetime());
    }
    
    // optional int32 dayOnlineTime = 37;
    if (has_dayonlinetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dayonlinetime());
    }
    
    // optional int32 ratioValue = 38;
    if (has_ratiovalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ratiovalue());
    }
    
    // optional int32 level = 39;
    if (has_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 winMoney1 = 40;
    if (has_winmoney1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winmoney1());
    }
    
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional int32 winMoney2 = 41;
    if (has_winmoney2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winmoney2());
    }
    
    // optional int32 loseMoney1 = 42;
    if (has_losemoney1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->losemoney1());
    }
    
    // optional int32 loseMoney2 = 43;
    if (has_losemoney2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->losemoney2());
    }
    
    // optional int64 jipaiqiLoseTime = 44;
    if (has_jipaiqilosetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->jipaiqilosetime());
    }
    
    // optional double gold = 45;
    if (has_gold()) {
      total_size += 2 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LGLoginSubGameMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LGLoginSubGameMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LGLoginSubGameMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LGLoginSubGameMessage::MergeFrom(const LGLoginSubGameMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_rpcid()) {
      set_rpcid(from.rpcid());
    }
    if (from.has_money1()) {
      set_money1(from.money1());
    }
    if (from.has_money2()) {
      set_money2(from.money2());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fr()) {
      set_fr(from.fr());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_loginid()) {
      set_loginid(from.loginid());
    }
    if (from.has_loginip()) {
      set_loginip(from.loginip());
    }
    if (from.has_deleteat()) {
      set_deleteat(from.deleteat());
    }
    if (from.has_gmlevel()) {
      set_gmlevel(from.gmlevel());
    }
    if (from.has_robot()) {
      set_robot(from.robot());
    }
    if (from.has_others()) {
      set_others(from.others());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_titleindex()) {
      set_titleindex(from.titleindex());
    }
    if (from.has_gamemaxwinmoney()) {
      set_gamemaxwinmoney(from.gamemaxwinmoney());
    }
    if (from.has_charmvalue()) {
      set_charmvalue(from.charmvalue());
    }
    if (from.has_vip()) {
      set_vip(from.vip());
    }
    if (from.has_barragenum()) {
      set_barragenum(from.barragenum());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_taxratio()) {
      set_taxratio(from.taxratio());
    }
    if (from.has_cardbg()) {
      set_cardbg(from.cardbg());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_headicon()) {
      set_headicon(from.headicon());
    }
    if (from.has_signature()) {
      set_signature(from.signature());
    }
    if (from.has_achdatamap()) {
      set_achdatamap(from.achdatamap());
    }
    if (from.has_taxfreecardendtime()) {
      set_taxfreecardendtime(from.taxfreecardendtime());
    }
    if (from.has_taxfreecardrate()) {
      set_taxfreecardrate(from.taxfreecardrate());
    }
    if (from.has_bankmoney1()) {
      set_bankmoney1(from.bankmoney1());
    }
    if (from.has_bankmoney2()) {
      set_bankmoney2(from.bankmoney2());
    }
    if (from.has_agencyrechargemoney()) {
      set_agencyrechargemoney(from.agencyrechargemoney());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_officialrechargemoney()) {
      set_officialrechargemoney(from.officialrechargemoney());
    }
    if (from.has_withdrawmoney()) {
      set_withdrawmoney(from.withdrawmoney());
    }
    if (from.has_playgametime()) {
      set_playgametime(from.playgametime());
    }
    if (from.has_onlinetime()) {
      set_onlinetime(from.onlinetime());
    }
    if (from.has_dayonlinetime()) {
      set_dayonlinetime(from.dayonlinetime());
    }
    if (from.has_ratiovalue()) {
      set_ratiovalue(from.ratiovalue());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_winmoney1()) {
      set_winmoney1(from.winmoney1());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_winmoney2()) {
      set_winmoney2(from.winmoney2());
    }
    if (from.has_losemoney1()) {
      set_losemoney1(from.losemoney1());
    }
    if (from.has_losemoney2()) {
      set_losemoney2(from.losemoney2());
    }
    if (from.has_jipaiqilosetime()) {
      set_jipaiqilosetime(from.jipaiqilosetime());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LGLoginSubGameMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LGLoginSubGameMessage::CopyFrom(const LGLoginSubGameMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LGLoginSubGameMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x1bff7ffc) != 0x1bff7ffc) return false;
  
  return true;
}

void LGLoginSubGameMessage::Swap(LGLoginSubGameMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(rpcid_, other->rpcid_);
    std::swap(money1_, other->money1_);
    std::swap(money2_, other->money2_);
    std::swap(name_, other->name_);
    std::swap(address_, other->address_);
    std::swap(icon_, other->icon_);
    std::swap(sex_, other->sex_);
    std::swap(fr_, other->fr_);
    std::swap(platform_, other->platform_);
    std::swap(loginid_, other->loginid_);
    std::swap(loginip_, other->loginip_);
    std::swap(deleteat_, other->deleteat_);
    std::swap(gmlevel_, other->gmlevel_);
    std::swap(robot_, other->robot_);
    std::swap(others_, other->others_);
    std::swap(titleindex_, other->titleindex_);
    std::swap(gamemaxwinmoney_, other->gamemaxwinmoney_);
    std::swap(charmvalue_, other->charmvalue_);
    std::swap(vip_, other->vip_);
    std::swap(barragenum_, other->barragenum_);
    std::swap(username_, other->username_);
    std::swap(taxratio_, other->taxratio_);
    std::swap(cardbg_, other->cardbg_);
    std::swap(headicon_, other->headicon_);
    std::swap(signature_, other->signature_);
    std::swap(achdatamap_, other->achdatamap_);
    std::swap(taxfreecardendtime_, other->taxfreecardendtime_);
    std::swap(taxfreecardrate_, other->taxfreecardrate_);
    std::swap(bankmoney1_, other->bankmoney1_);
    std::swap(bankmoney2_, other->bankmoney2_);
    std::swap(agencyrechargemoney_, other->agencyrechargemoney_);
    std::swap(officialrechargemoney_, other->officialrechargemoney_);
    std::swap(withdrawmoney_, other->withdrawmoney_);
    std::swap(playgametime_, other->playgametime_);
    std::swap(onlinetime_, other->onlinetime_);
    std::swap(dayonlinetime_, other->dayonlinetime_);
    std::swap(ratiovalue_, other->ratiovalue_);
    std::swap(level_, other->level_);
    std::swap(winmoney1_, other->winmoney1_);
    std::swap(winmoney2_, other->winmoney2_);
    std::swap(losemoney1_, other->losemoney1_);
    std::swap(losemoney2_, other->losemoney2_);
    std::swap(jipaiqilosetime_, other->jipaiqilosetime_);
    std::swap(gold_, other->gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LGLoginSubGameMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LGLoginSubGameMessage_descriptor_;
  metadata.reflection = LGLoginSubGameMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GLLoginSubGameMessage::kMsgIDFieldNumber;
const int GLLoginSubGameMessage::kRpcIdFieldNumber;
const int GLLoginSubGameMessage::kIsReconnectFieldNumber;
const int GLLoginSubGameMessage::kLoginSubGameFieldNumber;
const int GLLoginSubGameMessage::kMapModelIdFieldNumber;
const int GLLoginSubGameMessage::kFishIpFieldNumber;
const int GLLoginSubGameMessage::kFishPortFieldNumber;
#endif  // !_MSC_VER

GLLoginSubGameMessage::GLLoginSubGameMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GLLoginSubGameMessage::InitAsDefaultInstance() {
}

GLLoginSubGameMessage::GLLoginSubGameMessage(const GLLoginSubGameMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GLLoginSubGameMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 6208;
  rpcid_ = 0;
  isreconnect_ = 0;
  loginsubgame_ = false;
  mapmodelid_ = 0;
  fiship_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fishport_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLLoginSubGameMessage::~GLLoginSubGameMessage() {
  SharedDtor();
}

void GLLoginSubGameMessage::SharedDtor() {
  if (fiship_ != &::google::protobuf::internal::kEmptyString) {
    delete fiship_;
  }
  if (this != default_instance_) {
  }
}

void GLLoginSubGameMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GLLoginSubGameMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GLLoginSubGameMessage_descriptor_;
}

const GLLoginSubGameMessage& GLLoginSubGameMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RpcMessage_2eproto();  return *default_instance_;
}

GLLoginSubGameMessage* GLLoginSubGameMessage::default_instance_ = NULL;

GLLoginSubGameMessage* GLLoginSubGameMessage::New() const {
  return new GLLoginSubGameMessage;
}

void GLLoginSubGameMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 6208;
    rpcid_ = 0;
    isreconnect_ = 0;
    loginsubgame_ = false;
    mapmodelid_ = 0;
    if (has_fiship()) {
      if (fiship_ != &::google::protobuf::internal::kEmptyString) {
        fiship_->clear();
      }
    }
    fishport_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GLLoginSubGameMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Rpc msgID = 1 [default = GLLoginSubGame];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Rpc_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Rpc >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rpcId;
        break;
      }
      
      // optional int32 rpcId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rpcId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rpcid_)));
          set_has_rpcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isReconnect;
        break;
      }
      
      // optional int32 isReconnect = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isReconnect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isreconnect_)));
          set_has_isreconnect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_loginSubGame;
        break;
      }
      
      // optional bool loginSubGame = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loginSubGame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &loginsubgame_)));
          set_has_loginsubgame();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_mapModelId;
        break;
      }
      
      // optional int32 mapModelId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapModelId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapmodelid_)));
          set_has_mapmodelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_fishIp;
        break;
      }
      
      // optional string fishIp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fishIp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fiship()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fiship().data(), this->fiship().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_fishPort;
        break;
      }
      
      // optional int32 fishPort = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fishPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fishport_)));
          set_has_fishport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLLoginSubGameMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Rpc msgID = 1 [default = GLLoginSubGame];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // optional int32 rpcId = 2;
  if (has_rpcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rpcid(), output);
  }
  
  // optional int32 isReconnect = 3;
  if (has_isreconnect()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->isreconnect(), output);
  }
  
  // optional bool loginSubGame = 4;
  if (has_loginsubgame()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->loginsubgame(), output);
  }
  
  // optional int32 mapModelId = 5;
  if (has_mapmodelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->mapmodelid(), output);
  }
  
  // optional string fishIp = 6;
  if (has_fiship()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fiship().data(), this->fiship().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->fiship(), output);
  }
  
  // optional int32 fishPort = 7;
  if (has_fishport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->fishport(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GLLoginSubGameMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Rpc msgID = 1 [default = GLLoginSubGame];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // optional int32 rpcId = 2;
  if (has_rpcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rpcid(), target);
  }
  
  // optional int32 isReconnect = 3;
  if (has_isreconnect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->isreconnect(), target);
  }
  
  // optional bool loginSubGame = 4;
  if (has_loginsubgame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->loginsubgame(), target);
  }
  
  // optional int32 mapModelId = 5;
  if (has_mapmodelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->mapmodelid(), target);
  }
  
  // optional string fishIp = 6;
  if (has_fiship()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fiship().data(), this->fiship().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->fiship(), target);
  }
  
  // optional int32 fishPort = 7;
  if (has_fishport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->fishport(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GLLoginSubGameMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Rpc msgID = 1 [default = GLLoginSubGame];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional int32 rpcId = 2;
    if (has_rpcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rpcid());
    }
    
    // optional int32 isReconnect = 3;
    if (has_isreconnect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isreconnect());
    }
    
    // optional bool loginSubGame = 4;
    if (has_loginsubgame()) {
      total_size += 1 + 1;
    }
    
    // optional int32 mapModelId = 5;
    if (has_mapmodelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapmodelid());
    }
    
    // optional string fishIp = 6;
    if (has_fiship()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fiship());
    }
    
    // optional int32 fishPort = 7;
    if (has_fishport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fishport());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLLoginSubGameMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GLLoginSubGameMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GLLoginSubGameMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GLLoginSubGameMessage::MergeFrom(const GLLoginSubGameMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_rpcid()) {
      set_rpcid(from.rpcid());
    }
    if (from.has_isreconnect()) {
      set_isreconnect(from.isreconnect());
    }
    if (from.has_loginsubgame()) {
      set_loginsubgame(from.loginsubgame());
    }
    if (from.has_mapmodelid()) {
      set_mapmodelid(from.mapmodelid());
    }
    if (from.has_fiship()) {
      set_fiship(from.fiship());
    }
    if (from.has_fishport()) {
      set_fishport(from.fishport());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GLLoginSubGameMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GLLoginSubGameMessage::CopyFrom(const GLLoginSubGameMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLLoginSubGameMessage::IsInitialized() const {
  
  return true;
}

void GLLoginSubGameMessage::Swap(GLLoginSubGameMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(rpcid_, other->rpcid_);
    std::swap(isreconnect_, other->isreconnect_);
    std::swap(loginsubgame_, other->loginsubgame_);
    std::swap(mapmodelid_, other->mapmodelid_);
    std::swap(fiship_, other->fiship_);
    std::swap(fishport_, other->fishport_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GLLoginSubGameMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GLLoginSubGameMessage_descriptor_;
  metadata.reflection = GLLoginSubGameMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LGQuitSubGameMessage::kMsgIDFieldNumber;
const int LGQuitSubGameMessage::kRpcIdFieldNumber;
const int LGQuitSubGameMessage::kOffLineFieldNumber;
#endif  // !_MSC_VER

LGQuitSubGameMessage::LGQuitSubGameMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LGQuitSubGameMessage::InitAsDefaultInstance() {
}

LGQuitSubGameMessage::LGQuitSubGameMessage(const LGQuitSubGameMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LGQuitSubGameMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 6209;
  rpcid_ = 0;
  offline_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LGQuitSubGameMessage::~LGQuitSubGameMessage() {
  SharedDtor();
}

void LGQuitSubGameMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LGQuitSubGameMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LGQuitSubGameMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LGQuitSubGameMessage_descriptor_;
}

const LGQuitSubGameMessage& LGQuitSubGameMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RpcMessage_2eproto();  return *default_instance_;
}

LGQuitSubGameMessage* LGQuitSubGameMessage::default_instance_ = NULL;

LGQuitSubGameMessage* LGQuitSubGameMessage::New() const {
  return new LGQuitSubGameMessage;
}

void LGQuitSubGameMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 6209;
    rpcid_ = 0;
    offline_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LGQuitSubGameMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Rpc msgID = 1 [default = LGQuitSubGame];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Rpc_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Rpc >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rpcId;
        break;
      }
      
      // optional int32 rpcId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rpcId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rpcid_)));
          set_has_rpcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_offLine;
        break;
      }
      
      // optional bool offLine = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offLine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &offline_)));
          set_has_offline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LGQuitSubGameMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Rpc msgID = 1 [default = LGQuitSubGame];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // optional int32 rpcId = 2;
  if (has_rpcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rpcid(), output);
  }
  
  // optional bool offLine = 3;
  if (has_offline()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->offline(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LGQuitSubGameMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Rpc msgID = 1 [default = LGQuitSubGame];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // optional int32 rpcId = 2;
  if (has_rpcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rpcid(), target);
  }
  
  // optional bool offLine = 3;
  if (has_offline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->offline(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LGQuitSubGameMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Rpc msgID = 1 [default = LGQuitSubGame];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional int32 rpcId = 2;
    if (has_rpcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rpcid());
    }
    
    // optional bool offLine = 3;
    if (has_offline()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LGQuitSubGameMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LGQuitSubGameMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LGQuitSubGameMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LGQuitSubGameMessage::MergeFrom(const LGQuitSubGameMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_rpcid()) {
      set_rpcid(from.rpcid());
    }
    if (from.has_offline()) {
      set_offline(from.offline());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LGQuitSubGameMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LGQuitSubGameMessage::CopyFrom(const LGQuitSubGameMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LGQuitSubGameMessage::IsInitialized() const {
  
  return true;
}

void LGQuitSubGameMessage::Swap(LGQuitSubGameMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(rpcid_, other->rpcid_);
    std::swap(offline_, other->offline_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LGQuitSubGameMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LGQuitSubGameMessage_descriptor_;
  metadata.reflection = LGQuitSubGameMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GLQuitSubGameMessage::kMsgIDFieldNumber;
const int GLQuitSubGameMessage::kRpcIdFieldNumber;
const int GLQuitSubGameMessage::kQuitSubGameFieldNumber;
const int GLQuitSubGameMessage::kMoney1FieldNumber;
const int GLQuitSubGameMessage::kMoney2FieldNumber;
const int GLQuitSubGameMessage::kWinMoney1FieldNumber;
const int GLQuitSubGameMessage::kWinMoney2FieldNumber;
const int GLQuitSubGameMessage::kLoseMoney1FieldNumber;
const int GLQuitSubGameMessage::kLoseMoney2FieldNumber;
const int GLQuitSubGameMessage::kPlayroundFieldNumber;
const int GLQuitSubGameMessage::kDayWinNumFieldNumber;
const int GLQuitSubGameMessage::kDayLoseNumFieldNumber;
const int GLQuitSubGameMessage::kMapModelIdFieldNumber;
const int GLQuitSubGameMessage::kContinueWinNumFieldNumber;
const int GLQuitSubGameMessage::kGameMaxWinMoneyFieldNumber;
const int GLQuitSubGameMessage::kCharmValueFieldNumber;
const int GLQuitSubGameMessage::kOthersFieldNumber;
const int GLQuitSubGameMessage::kAchDataMapFieldNumber;
const int GLQuitSubGameMessage::kSameTableMapFieldNumber;
const int GLQuitSubGameMessage::kTaxMoneyFieldNumber;
const int GLQuitSubGameMessage::kOffLineFieldNumber;
#endif  // !_MSC_VER

GLQuitSubGameMessage::GLQuitSubGameMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GLQuitSubGameMessage::InitAsDefaultInstance() {
}

GLQuitSubGameMessage::GLQuitSubGameMessage(const GLQuitSubGameMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GLQuitSubGameMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 6210;
  rpcid_ = 0;
  quitsubgame_ = false;
  money1_ = 0;
  money2_ = 0;
  winmoney1_ = 0;
  winmoney2_ = 0;
  losemoney1_ = 0;
  losemoney2_ = 0;
  playround_ = 0;
  daywinnum_ = 0;
  daylosenum_ = 0;
  mapmodelid_ = 0;
  continuewinnum_ = 0;
  gamemaxwinmoney_ = 0;
  charmvalue_ = 0;
  others_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  achdatamap_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sametablemap_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  taxmoney_ = 0;
  offline_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLQuitSubGameMessage::~GLQuitSubGameMessage() {
  SharedDtor();
}

void GLQuitSubGameMessage::SharedDtor() {
  if (others_ != &::google::protobuf::internal::kEmptyString) {
    delete others_;
  }
  if (achdatamap_ != &::google::protobuf::internal::kEmptyString) {
    delete achdatamap_;
  }
  if (sametablemap_ != &::google::protobuf::internal::kEmptyString) {
    delete sametablemap_;
  }
  if (this != default_instance_) {
  }
}

void GLQuitSubGameMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GLQuitSubGameMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GLQuitSubGameMessage_descriptor_;
}

const GLQuitSubGameMessage& GLQuitSubGameMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RpcMessage_2eproto();  return *default_instance_;
}

GLQuitSubGameMessage* GLQuitSubGameMessage::default_instance_ = NULL;

GLQuitSubGameMessage* GLQuitSubGameMessage::New() const {
  return new GLQuitSubGameMessage;
}

void GLQuitSubGameMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 6210;
    rpcid_ = 0;
    quitsubgame_ = false;
    money1_ = 0;
    money2_ = 0;
    winmoney1_ = 0;
    winmoney2_ = 0;
    losemoney1_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    losemoney2_ = 0;
    playround_ = 0;
    daywinnum_ = 0;
    daylosenum_ = 0;
    mapmodelid_ = 0;
    continuewinnum_ = 0;
    gamemaxwinmoney_ = 0;
    charmvalue_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_others()) {
      if (others_ != &::google::protobuf::internal::kEmptyString) {
        others_->clear();
      }
    }
    if (has_achdatamap()) {
      if (achdatamap_ != &::google::protobuf::internal::kEmptyString) {
        achdatamap_->clear();
      }
    }
    if (has_sametablemap()) {
      if (sametablemap_ != &::google::protobuf::internal::kEmptyString) {
        sametablemap_->clear();
      }
    }
    taxmoney_ = 0;
    offline_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GLQuitSubGameMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Rpc msgID = 1 [default = GLQuitSubGame];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Rpc_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Rpc >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rpcId;
        break;
      }
      
      // optional int32 rpcId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rpcId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rpcid_)));
          set_has_rpcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_quitSubGame;
        break;
      }
      
      // optional bool quitSubGame = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quitSubGame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &quitsubgame_)));
          set_has_quitsubgame();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_money1;
        break;
      }
      
      // optional double money1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_money1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &money1_)));
          set_has_money1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_money2;
        break;
      }
      
      // optional double money2 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_money2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &money2_)));
          set_has_money2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_winMoney1;
        break;
      }
      
      // optional double winMoney1 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_winMoney1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &winmoney1_)));
          set_has_winmoney1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_winMoney2;
        break;
      }
      
      // optional double winMoney2 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_winMoney2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &winmoney2_)));
          set_has_winmoney2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_loseMoney1;
        break;
      }
      
      // optional double loseMoney1 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_loseMoney1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &losemoney1_)));
          set_has_losemoney1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_loseMoney2;
        break;
      }
      
      // optional double loseMoney2 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_loseMoney2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &losemoney2_)));
          set_has_losemoney2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_playround;
        break;
      }
      
      // optional int32 playround = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playround:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playround_)));
          set_has_playround();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_dayWinNum;
        break;
      }
      
      // required int32 dayWinNum = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dayWinNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &daywinnum_)));
          set_has_daywinnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_dayLoseNum;
        break;
      }
      
      // required int32 dayLoseNum = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dayLoseNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &daylosenum_)));
          set_has_daylosenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_mapModelId;
        break;
      }
      
      // optional int32 mapModelId = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapModelId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapmodelid_)));
          set_has_mapmodelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_continueWinNum;
        break;
      }
      
      // required int32 continueWinNum = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_continueWinNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &continuewinnum_)));
          set_has_continuewinnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_gameMaxWinMoney;
        break;
      }
      
      // required double gameMaxWinMoney = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_gameMaxWinMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gamemaxwinmoney_)));
          set_has_gamemaxwinmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_charmValue;
        break;
      }
      
      // required int32 charmValue = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charmValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &charmvalue_)));
          set_has_charmvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_others;
        break;
      }
      
      // optional string others = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_others:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_others()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->others().data(), this->others().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_achDataMap;
        break;
      }
      
      // optional string achDataMap = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_achDataMap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_achdatamap()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->achdatamap().data(), this->achdatamap().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_sameTableMap;
        break;
      }
      
      // optional string sameTableMap = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sameTableMap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sametablemap()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sametablemap().data(), this->sametablemap().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(161)) goto parse_taxMoney;
        break;
      }
      
      // optional double taxMoney = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_taxMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &taxmoney_)));
          set_has_taxmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_offLine;
        break;
      }
      
      // optional bool offLine = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offLine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &offline_)));
          set_has_offline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLQuitSubGameMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Rpc msgID = 1 [default = GLQuitSubGame];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // optional int32 rpcId = 2;
  if (has_rpcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rpcid(), output);
  }
  
  // optional bool quitSubGame = 3;
  if (has_quitsubgame()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->quitsubgame(), output);
  }
  
  // optional double money1 = 4;
  if (has_money1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->money1(), output);
  }
  
  // optional double money2 = 5;
  if (has_money2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->money2(), output);
  }
  
  // optional double winMoney1 = 6;
  if (has_winmoney1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->winmoney1(), output);
  }
  
  // optional double winMoney2 = 7;
  if (has_winmoney2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->winmoney2(), output);
  }
  
  // optional double loseMoney1 = 8;
  if (has_losemoney1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->losemoney1(), output);
  }
  
  // optional double loseMoney2 = 9;
  if (has_losemoney2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->losemoney2(), output);
  }
  
  // optional int32 playround = 10;
  if (has_playround()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->playround(), output);
  }
  
  // required int32 dayWinNum = 11;
  if (has_daywinnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->daywinnum(), output);
  }
  
  // required int32 dayLoseNum = 12;
  if (has_daylosenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->daylosenum(), output);
  }
  
  // optional int32 mapModelId = 13;
  if (has_mapmodelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->mapmodelid(), output);
  }
  
  // required int32 continueWinNum = 14;
  if (has_continuewinnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->continuewinnum(), output);
  }
  
  // required double gameMaxWinMoney = 15;
  if (has_gamemaxwinmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->gamemaxwinmoney(), output);
  }
  
  // required int32 charmValue = 16;
  if (has_charmvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->charmvalue(), output);
  }
  
  // optional string others = 17;
  if (has_others()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->others().data(), this->others().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->others(), output);
  }
  
  // optional string achDataMap = 18;
  if (has_achdatamap()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->achdatamap().data(), this->achdatamap().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->achdatamap(), output);
  }
  
  // optional string sameTableMap = 19;
  if (has_sametablemap()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sametablemap().data(), this->sametablemap().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->sametablemap(), output);
  }
  
  // optional double taxMoney = 20;
  if (has_taxmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->taxmoney(), output);
  }
  
  // optional bool offLine = 21;
  if (has_offline()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->offline(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GLQuitSubGameMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Rpc msgID = 1 [default = GLQuitSubGame];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // optional int32 rpcId = 2;
  if (has_rpcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rpcid(), target);
  }
  
  // optional bool quitSubGame = 3;
  if (has_quitsubgame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->quitsubgame(), target);
  }
  
  // optional double money1 = 4;
  if (has_money1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->money1(), target);
  }
  
  // optional double money2 = 5;
  if (has_money2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->money2(), target);
  }
  
  // optional double winMoney1 = 6;
  if (has_winmoney1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->winmoney1(), target);
  }
  
  // optional double winMoney2 = 7;
  if (has_winmoney2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->winmoney2(), target);
  }
  
  // optional double loseMoney1 = 8;
  if (has_losemoney1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->losemoney1(), target);
  }
  
  // optional double loseMoney2 = 9;
  if (has_losemoney2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->losemoney2(), target);
  }
  
  // optional int32 playround = 10;
  if (has_playround()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->playround(), target);
  }
  
  // required int32 dayWinNum = 11;
  if (has_daywinnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->daywinnum(), target);
  }
  
  // required int32 dayLoseNum = 12;
  if (has_daylosenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->daylosenum(), target);
  }
  
  // optional int32 mapModelId = 13;
  if (has_mapmodelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->mapmodelid(), target);
  }
  
  // required int32 continueWinNum = 14;
  if (has_continuewinnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->continuewinnum(), target);
  }
  
  // required double gameMaxWinMoney = 15;
  if (has_gamemaxwinmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->gamemaxwinmoney(), target);
  }
  
  // required int32 charmValue = 16;
  if (has_charmvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->charmvalue(), target);
  }
  
  // optional string others = 17;
  if (has_others()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->others().data(), this->others().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->others(), target);
  }
  
  // optional string achDataMap = 18;
  if (has_achdatamap()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->achdatamap().data(), this->achdatamap().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->achdatamap(), target);
  }
  
  // optional string sameTableMap = 19;
  if (has_sametablemap()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sametablemap().data(), this->sametablemap().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->sametablemap(), target);
  }
  
  // optional double taxMoney = 20;
  if (has_taxmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->taxmoney(), target);
  }
  
  // optional bool offLine = 21;
  if (has_offline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->offline(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GLQuitSubGameMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Rpc msgID = 1 [default = GLQuitSubGame];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional int32 rpcId = 2;
    if (has_rpcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rpcid());
    }
    
    // optional bool quitSubGame = 3;
    if (has_quitsubgame()) {
      total_size += 1 + 1;
    }
    
    // optional double money1 = 4;
    if (has_money1()) {
      total_size += 1 + 8;
    }
    
    // optional double money2 = 5;
    if (has_money2()) {
      total_size += 1 + 8;
    }
    
    // optional double winMoney1 = 6;
    if (has_winmoney1()) {
      total_size += 1 + 8;
    }
    
    // optional double winMoney2 = 7;
    if (has_winmoney2()) {
      total_size += 1 + 8;
    }
    
    // optional double loseMoney1 = 8;
    if (has_losemoney1()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double loseMoney2 = 9;
    if (has_losemoney2()) {
      total_size += 1 + 8;
    }
    
    // optional int32 playround = 10;
    if (has_playround()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playround());
    }
    
    // required int32 dayWinNum = 11;
    if (has_daywinnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daywinnum());
    }
    
    // required int32 dayLoseNum = 12;
    if (has_daylosenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daylosenum());
    }
    
    // optional int32 mapModelId = 13;
    if (has_mapmodelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapmodelid());
    }
    
    // required int32 continueWinNum = 14;
    if (has_continuewinnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->continuewinnum());
    }
    
    // required double gameMaxWinMoney = 15;
    if (has_gamemaxwinmoney()) {
      total_size += 1 + 8;
    }
    
    // required int32 charmValue = 16;
    if (has_charmvalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->charmvalue());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string others = 17;
    if (has_others()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->others());
    }
    
    // optional string achDataMap = 18;
    if (has_achdatamap()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->achdatamap());
    }
    
    // optional string sameTableMap = 19;
    if (has_sametablemap()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sametablemap());
    }
    
    // optional double taxMoney = 20;
    if (has_taxmoney()) {
      total_size += 2 + 8;
    }
    
    // optional bool offLine = 21;
    if (has_offline()) {
      total_size += 2 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLQuitSubGameMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GLQuitSubGameMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GLQuitSubGameMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GLQuitSubGameMessage::MergeFrom(const GLQuitSubGameMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_rpcid()) {
      set_rpcid(from.rpcid());
    }
    if (from.has_quitsubgame()) {
      set_quitsubgame(from.quitsubgame());
    }
    if (from.has_money1()) {
      set_money1(from.money1());
    }
    if (from.has_money2()) {
      set_money2(from.money2());
    }
    if (from.has_winmoney1()) {
      set_winmoney1(from.winmoney1());
    }
    if (from.has_winmoney2()) {
      set_winmoney2(from.winmoney2());
    }
    if (from.has_losemoney1()) {
      set_losemoney1(from.losemoney1());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_losemoney2()) {
      set_losemoney2(from.losemoney2());
    }
    if (from.has_playround()) {
      set_playround(from.playround());
    }
    if (from.has_daywinnum()) {
      set_daywinnum(from.daywinnum());
    }
    if (from.has_daylosenum()) {
      set_daylosenum(from.daylosenum());
    }
    if (from.has_mapmodelid()) {
      set_mapmodelid(from.mapmodelid());
    }
    if (from.has_continuewinnum()) {
      set_continuewinnum(from.continuewinnum());
    }
    if (from.has_gamemaxwinmoney()) {
      set_gamemaxwinmoney(from.gamemaxwinmoney());
    }
    if (from.has_charmvalue()) {
      set_charmvalue(from.charmvalue());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_others()) {
      set_others(from.others());
    }
    if (from.has_achdatamap()) {
      set_achdatamap(from.achdatamap());
    }
    if (from.has_sametablemap()) {
      set_sametablemap(from.sametablemap());
    }
    if (from.has_taxmoney()) {
      set_taxmoney(from.taxmoney());
    }
    if (from.has_offline()) {
      set_offline(from.offline());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GLQuitSubGameMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GLQuitSubGameMessage::CopyFrom(const GLQuitSubGameMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLQuitSubGameMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000ec00) != 0x0000ec00) return false;
  
  return true;
}

void GLQuitSubGameMessage::Swap(GLQuitSubGameMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(rpcid_, other->rpcid_);
    std::swap(quitsubgame_, other->quitsubgame_);
    std::swap(money1_, other->money1_);
    std::swap(money2_, other->money2_);
    std::swap(winmoney1_, other->winmoney1_);
    std::swap(winmoney2_, other->winmoney2_);
    std::swap(losemoney1_, other->losemoney1_);
    std::swap(losemoney2_, other->losemoney2_);
    std::swap(playround_, other->playround_);
    std::swap(daywinnum_, other->daywinnum_);
    std::swap(daylosenum_, other->daylosenum_);
    std::swap(mapmodelid_, other->mapmodelid_);
    std::swap(continuewinnum_, other->continuewinnum_);
    std::swap(gamemaxwinmoney_, other->gamemaxwinmoney_);
    std::swap(charmvalue_, other->charmvalue_);
    std::swap(others_, other->others_);
    std::swap(achdatamap_, other->achdatamap_);
    std::swap(sametablemap_, other->sametablemap_);
    std::swap(taxmoney_, other->taxmoney_);
    std::swap(offline_, other->offline_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GLQuitSubGameMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GLQuitSubGameMessage_descriptor_;
  metadata.reflection = GLQuitSubGameMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LGUpdateMoney1Message::kMsgIDFieldNumber;
const int LGUpdateMoney1Message::kMoney1FieldNumber;
const int LGUpdateMoney1Message::kMoney2FieldNumber;
const int LGUpdateMoney1Message::kReasonFieldNumber;
#endif  // !_MSC_VER

LGUpdateMoney1Message::LGUpdateMoney1Message()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LGUpdateMoney1Message::InitAsDefaultInstance() {
}

LGUpdateMoney1Message::LGUpdateMoney1Message(const LGUpdateMoney1Message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LGUpdateMoney1Message::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 6211;
  money1_ = 0;
  money2_ = 0;
  reason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LGUpdateMoney1Message::~LGUpdateMoney1Message() {
  SharedDtor();
}

void LGUpdateMoney1Message::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LGUpdateMoney1Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LGUpdateMoney1Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LGUpdateMoney1Message_descriptor_;
}

const LGUpdateMoney1Message& LGUpdateMoney1Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RpcMessage_2eproto();  return *default_instance_;
}

LGUpdateMoney1Message* LGUpdateMoney1Message::default_instance_ = NULL;

LGUpdateMoney1Message* LGUpdateMoney1Message::New() const {
  return new LGUpdateMoney1Message;
}

void LGUpdateMoney1Message::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 6211;
    money1_ = 0;
    money2_ = 0;
    reason_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LGUpdateMoney1Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Rpc msgID = 1 [default = LGUpdateMoney1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Rpc_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Rpc >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_money1;
        break;
      }
      
      // required double money1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_money1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &money1_)));
          set_has_money1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_money2;
        break;
      }
      
      // required double money2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_money2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &money2_)));
          set_has_money2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_reason;
        break;
      }
      
      // required int32 reason = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LGUpdateMoney1Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Rpc msgID = 1 [default = LGUpdateMoney1];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required double money1 = 2;
  if (has_money1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->money1(), output);
  }
  
  // required double money2 = 3;
  if (has_money2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->money2(), output);
  }
  
  // required int32 reason = 4;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->reason(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LGUpdateMoney1Message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Rpc msgID = 1 [default = LGUpdateMoney1];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required double money1 = 2;
  if (has_money1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->money1(), target);
  }
  
  // required double money2 = 3;
  if (has_money2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->money2(), target);
  }
  
  // required int32 reason = 4;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->reason(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LGUpdateMoney1Message::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Rpc msgID = 1 [default = LGUpdateMoney1];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required double money1 = 2;
    if (has_money1()) {
      total_size += 1 + 8;
    }
    
    // required double money2 = 3;
    if (has_money2()) {
      total_size += 1 + 8;
    }
    
    // required int32 reason = 4;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reason());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LGUpdateMoney1Message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LGUpdateMoney1Message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LGUpdateMoney1Message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LGUpdateMoney1Message::MergeFrom(const LGUpdateMoney1Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_money1()) {
      set_money1(from.money1());
    }
    if (from.has_money2()) {
      set_money2(from.money2());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LGUpdateMoney1Message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LGUpdateMoney1Message::CopyFrom(const LGUpdateMoney1Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LGUpdateMoney1Message::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;
  
  return true;
}

void LGUpdateMoney1Message::Swap(LGUpdateMoney1Message* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(money1_, other->money1_);
    std::swap(money2_, other->money2_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LGUpdateMoney1Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LGUpdateMoney1Message_descriptor_;
  metadata.reflection = LGUpdateMoney1Message_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GLUpdateRoundInfoMessage::kMsgIDFieldNumber;
const int GLUpdateRoundInfoMessage::kMoney1FieldNumber;
const int GLUpdateRoundInfoMessage::kMoney2FieldNumber;
const int GLUpdateRoundInfoMessage::kPlayerNumFieldNumber;
const int GLUpdateRoundInfoMessage::kGameRecordFieldNumber;
const int GLUpdateRoundInfoMessage::kSubGameIdFieldNumber;
#endif  // !_MSC_VER

GLUpdateRoundInfoMessage::GLUpdateRoundInfoMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GLUpdateRoundInfoMessage::InitAsDefaultInstance() {
}

GLUpdateRoundInfoMessage::GLUpdateRoundInfoMessage(const GLUpdateRoundInfoMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GLUpdateRoundInfoMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 6212;
  money1_ = 0;
  money2_ = 0;
  playernum_ = 0;
  gamerecord_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  subgameid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLUpdateRoundInfoMessage::~GLUpdateRoundInfoMessage() {
  SharedDtor();
}

void GLUpdateRoundInfoMessage::SharedDtor() {
  if (gamerecord_ != &::google::protobuf::internal::kEmptyString) {
    delete gamerecord_;
  }
  if (this != default_instance_) {
  }
}

void GLUpdateRoundInfoMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GLUpdateRoundInfoMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GLUpdateRoundInfoMessage_descriptor_;
}

const GLUpdateRoundInfoMessage& GLUpdateRoundInfoMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RpcMessage_2eproto();  return *default_instance_;
}

GLUpdateRoundInfoMessage* GLUpdateRoundInfoMessage::default_instance_ = NULL;

GLUpdateRoundInfoMessage* GLUpdateRoundInfoMessage::New() const {
  return new GLUpdateRoundInfoMessage;
}

void GLUpdateRoundInfoMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 6212;
    money1_ = 0;
    money2_ = 0;
    playernum_ = 0;
    if (has_gamerecord()) {
      if (gamerecord_ != &::google::protobuf::internal::kEmptyString) {
        gamerecord_->clear();
      }
    }
    subgameid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GLUpdateRoundInfoMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Rpc msgID = 1 [default = GLUpdateRoundInfo];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Rpc_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Rpc >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_money1;
        break;
      }
      
      // required double money1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_money1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &money1_)));
          set_has_money1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_money2;
        break;
      }
      
      // required double money2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_money2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &money2_)));
          set_has_money2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_playerNum;
        break;
      }
      
      // optional int32 playerNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playernum_)));
          set_has_playernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_gameRecord;
        break;
      }
      
      // optional string gameRecord = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameRecord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamerecord()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gamerecord().data(), this->gamerecord().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_subGameId;
        break;
      }
      
      // optional int32 subGameId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subGameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subgameid_)));
          set_has_subgameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLUpdateRoundInfoMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Rpc msgID = 1 [default = GLUpdateRoundInfo];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required double money1 = 2;
  if (has_money1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->money1(), output);
  }
  
  // required double money2 = 3;
  if (has_money2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->money2(), output);
  }
  
  // optional int32 playerNum = 4;
  if (has_playernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->playernum(), output);
  }
  
  // optional string gameRecord = 5;
  if (has_gamerecord()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gamerecord().data(), this->gamerecord().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->gamerecord(), output);
  }
  
  // optional int32 subGameId = 6;
  if (has_subgameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->subgameid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GLUpdateRoundInfoMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Rpc msgID = 1 [default = GLUpdateRoundInfo];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required double money1 = 2;
  if (has_money1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->money1(), target);
  }
  
  // required double money2 = 3;
  if (has_money2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->money2(), target);
  }
  
  // optional int32 playerNum = 4;
  if (has_playernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->playernum(), target);
  }
  
  // optional string gameRecord = 5;
  if (has_gamerecord()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gamerecord().data(), this->gamerecord().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->gamerecord(), target);
  }
  
  // optional int32 subGameId = 6;
  if (has_subgameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->subgameid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GLUpdateRoundInfoMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Rpc msgID = 1 [default = GLUpdateRoundInfo];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required double money1 = 2;
    if (has_money1()) {
      total_size += 1 + 8;
    }
    
    // required double money2 = 3;
    if (has_money2()) {
      total_size += 1 + 8;
    }
    
    // optional int32 playerNum = 4;
    if (has_playernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playernum());
    }
    
    // optional string gameRecord = 5;
    if (has_gamerecord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gamerecord());
    }
    
    // optional int32 subGameId = 6;
    if (has_subgameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->subgameid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLUpdateRoundInfoMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GLUpdateRoundInfoMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GLUpdateRoundInfoMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GLUpdateRoundInfoMessage::MergeFrom(const GLUpdateRoundInfoMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_money1()) {
      set_money1(from.money1());
    }
    if (from.has_money2()) {
      set_money2(from.money2());
    }
    if (from.has_playernum()) {
      set_playernum(from.playernum());
    }
    if (from.has_gamerecord()) {
      set_gamerecord(from.gamerecord());
    }
    if (from.has_subgameid()) {
      set_subgameid(from.subgameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GLUpdateRoundInfoMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GLUpdateRoundInfoMessage::CopyFrom(const GLUpdateRoundInfoMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLUpdateRoundInfoMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  return true;
}

void GLUpdateRoundInfoMessage::Swap(GLUpdateRoundInfoMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(money1_, other->money1_);
    std::swap(money2_, other->money2_);
    std::swap(playernum_, other->playernum_);
    std::swap(gamerecord_, other->gamerecord_);
    std::swap(subgameid_, other->subgameid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GLUpdateRoundInfoMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GLUpdateRoundInfoMessage_descriptor_;
  metadata.reflection = GLUpdateRoundInfoMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GLSystemNoticeMessage::kMsgIDFieldNumber;
const int GLSystemNoticeMessage::kWinMoneyFieldNumber;
const int GLSystemNoticeMessage::kNameFieldNumber;
const int GLSystemNoticeMessage::kGameNameFieldNumber;
const int GLSystemNoticeMessage::kMapNameFieldNumber;
const int GLSystemNoticeMessage::kCardTypeFieldNumber;
const int GLSystemNoticeMessage::kTypeFieldNumber;
#endif  // !_MSC_VER

GLSystemNoticeMessage::GLSystemNoticeMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GLSystemNoticeMessage::InitAsDefaultInstance() {
}

GLSystemNoticeMessage::GLSystemNoticeMessage(const GLSystemNoticeMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GLSystemNoticeMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 6213;
  winmoney_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gamename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mapname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cardtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLSystemNoticeMessage::~GLSystemNoticeMessage() {
  SharedDtor();
}

void GLSystemNoticeMessage::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (gamename_ != &::google::protobuf::internal::kEmptyString) {
    delete gamename_;
  }
  if (mapname_ != &::google::protobuf::internal::kEmptyString) {
    delete mapname_;
  }
  if (cardtype_ != &::google::protobuf::internal::kEmptyString) {
    delete cardtype_;
  }
  if (this != default_instance_) {
  }
}

void GLSystemNoticeMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GLSystemNoticeMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GLSystemNoticeMessage_descriptor_;
}

const GLSystemNoticeMessage& GLSystemNoticeMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RpcMessage_2eproto();  return *default_instance_;
}

GLSystemNoticeMessage* GLSystemNoticeMessage::default_instance_ = NULL;

GLSystemNoticeMessage* GLSystemNoticeMessage::New() const {
  return new GLSystemNoticeMessage;
}

void GLSystemNoticeMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 6213;
    winmoney_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_gamename()) {
      if (gamename_ != &::google::protobuf::internal::kEmptyString) {
        gamename_->clear();
      }
    }
    if (has_mapname()) {
      if (mapname_ != &::google::protobuf::internal::kEmptyString) {
        mapname_->clear();
      }
    }
    if (has_cardtype()) {
      if (cardtype_ != &::google::protobuf::internal::kEmptyString) {
        cardtype_->clear();
      }
    }
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GLSystemNoticeMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Rpc msgID = 1 [default = GLSystemNotice];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Rpc_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Rpc >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_winMoney;
        break;
      }
      
      // optional double winMoney = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_winMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &winmoney_)));
          set_has_winmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }
      
      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_gameName;
        break;
      }
      
      // optional string gameName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gamename().data(), this->gamename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_mapName;
        break;
      }
      
      // optional string mapName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mapName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mapname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mapname().data(), this->mapname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_cardType;
        break;
      }
      
      // optional string cardType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cardType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cardtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cardtype().data(), this->cardtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_type;
        break;
      }
      
      // optional int32 type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLSystemNoticeMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Rpc msgID = 1 [default = GLSystemNotice];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // optional double winMoney = 2;
  if (has_winmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->winmoney(), output);
  }
  
  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }
  
  // optional string gameName = 4;
  if (has_gamename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gamename().data(), this->gamename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->gamename(), output);
  }
  
  // optional string mapName = 5;
  if (has_mapname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mapname().data(), this->mapname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->mapname(), output);
  }
  
  // optional string cardType = 6;
  if (has_cardtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cardtype().data(), this->cardtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->cardtype(), output);
  }
  
  // optional int32 type = 7;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GLSystemNoticeMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Rpc msgID = 1 [default = GLSystemNotice];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // optional double winMoney = 2;
  if (has_winmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->winmoney(), target);
  }
  
  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }
  
  // optional string gameName = 4;
  if (has_gamename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gamename().data(), this->gamename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->gamename(), target);
  }
  
  // optional string mapName = 5;
  if (has_mapname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mapname().data(), this->mapname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->mapname(), target);
  }
  
  // optional string cardType = 6;
  if (has_cardtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cardtype().data(), this->cardtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->cardtype(), target);
  }
  
  // optional int32 type = 7;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GLSystemNoticeMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Rpc msgID = 1 [default = GLSystemNotice];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional double winMoney = 2;
    if (has_winmoney()) {
      total_size += 1 + 8;
    }
    
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string gameName = 4;
    if (has_gamename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gamename());
    }
    
    // optional string mapName = 5;
    if (has_mapname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mapname());
    }
    
    // optional string cardType = 6;
    if (has_cardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cardtype());
    }
    
    // optional int32 type = 7;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLSystemNoticeMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GLSystemNoticeMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GLSystemNoticeMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GLSystemNoticeMessage::MergeFrom(const GLSystemNoticeMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_winmoney()) {
      set_winmoney(from.winmoney());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_gamename()) {
      set_gamename(from.gamename());
    }
    if (from.has_mapname()) {
      set_mapname(from.mapname());
    }
    if (from.has_cardtype()) {
      set_cardtype(from.cardtype());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GLSystemNoticeMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GLSystemNoticeMessage::CopyFrom(const GLSystemNoticeMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLSystemNoticeMessage::IsInitialized() const {
  
  return true;
}

void GLSystemNoticeMessage::Swap(GLSystemNoticeMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(winmoney_, other->winmoney_);
    std::swap(name_, other->name_);
    std::swap(gamename_, other->gamename_);
    std::swap(mapname_, other->mapname_);
    std::swap(cardtype_, other->cardtype_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GLSystemNoticeMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GLSystemNoticeMessage_descriptor_;
  metadata.reflection = GLSystemNoticeMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LGPlayerBetZJHMessage::kMsgIDFieldNumber;
const int LGPlayerBetZJHMessage::kRpcIdFieldNumber;
const int LGPlayerBetZJHMessage::kNameFieldNumber;
const int LGPlayerBetZJHMessage::kIconFieldNumber;
const int LGPlayerBetZJHMessage::kBetsFieldNumber;
const int LGPlayerBetZJHMessage::kIsRobotFieldNumber;
#endif  // !_MSC_VER

LGPlayerBetZJHMessage::LGPlayerBetZJHMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LGPlayerBetZJHMessage::InitAsDefaultInstance() {
}

LGPlayerBetZJHMessage::LGPlayerBetZJHMessage(const LGPlayerBetZJHMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LGPlayerBetZJHMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 6300;
  rpcid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isrobot_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LGPlayerBetZJHMessage::~LGPlayerBetZJHMessage() {
  SharedDtor();
}

void LGPlayerBetZJHMessage::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (this != default_instance_) {
  }
}

void LGPlayerBetZJHMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LGPlayerBetZJHMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LGPlayerBetZJHMessage_descriptor_;
}

const LGPlayerBetZJHMessage& LGPlayerBetZJHMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RpcMessage_2eproto();  return *default_instance_;
}

LGPlayerBetZJHMessage* LGPlayerBetZJHMessage::default_instance_ = NULL;

LGPlayerBetZJHMessage* LGPlayerBetZJHMessage::New() const {
  return new LGPlayerBetZJHMessage;
}

void LGPlayerBetZJHMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 6300;
    rpcid_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
    isrobot_ = false;
  }
  bets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LGPlayerBetZJHMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Rpc msgID = 1 [default = LGPlayerBetZJH];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Rpc_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Rpc >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rpcId;
        break;
      }
      
      // optional int32 rpcId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rpcId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rpcid_)));
          set_has_rpcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }
      
      // required string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_icon;
        break;
      }
      
      // required string icon = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_bets;
        break;
      }
      
      // repeated .com.game.proto.SSC_Bet bets = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_bets;
        if (input->ExpectTag(48)) goto parse_isRobot;
        break;
      }
      
      // required bool isRobot = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isRobot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isrobot_)));
          set_has_isrobot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LGPlayerBetZJHMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Rpc msgID = 1 [default = LGPlayerBetZJH];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // optional int32 rpcId = 2;
  if (has_rpcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rpcid(), output);
  }
  
  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }
  
  // required string icon = 4;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->icon(), output);
  }
  
  // repeated .com.game.proto.SSC_Bet bets = 5;
  for (int i = 0; i < this->bets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->bets(i), output);
  }
  
  // required bool isRobot = 6;
  if (has_isrobot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isrobot(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LGPlayerBetZJHMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Rpc msgID = 1 [default = LGPlayerBetZJH];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // optional int32 rpcId = 2;
  if (has_rpcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rpcid(), target);
  }
  
  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }
  
  // required string icon = 4;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->icon(), target);
  }
  
  // repeated .com.game.proto.SSC_Bet bets = 5;
  for (int i = 0; i < this->bets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->bets(i), target);
  }
  
  // required bool isRobot = 6;
  if (has_isrobot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isrobot(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LGPlayerBetZJHMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Rpc msgID = 1 [default = LGPlayerBetZJH];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional int32 rpcId = 2;
    if (has_rpcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rpcid());
    }
    
    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string icon = 4;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }
    
    // required bool isRobot = 6;
    if (has_isrobot()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .com.game.proto.SSC_Bet bets = 5;
  total_size += 1 * this->bets_size();
  for (int i = 0; i < this->bets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bets(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LGPlayerBetZJHMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LGPlayerBetZJHMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LGPlayerBetZJHMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LGPlayerBetZJHMessage::MergeFrom(const LGPlayerBetZJHMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  bets_.MergeFrom(from.bets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_rpcid()) {
      set_rpcid(from.rpcid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_isrobot()) {
      set_isrobot(from.isrobot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LGPlayerBetZJHMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LGPlayerBetZJHMessage::CopyFrom(const LGPlayerBetZJHMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LGPlayerBetZJHMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000002c) != 0x0000002c) return false;
  
  for (int i = 0; i < bets_size(); i++) {
    if (!this->bets(i).IsInitialized()) return false;
  }
  return true;
}

void LGPlayerBetZJHMessage::Swap(LGPlayerBetZJHMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(rpcid_, other->rpcid_);
    std::swap(name_, other->name_);
    std::swap(icon_, other->icon_);
    bets_.Swap(&other->bets_);
    std::swap(isrobot_, other->isrobot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LGPlayerBetZJHMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LGPlayerBetZJHMessage_descriptor_;
  metadata.reflection = LGPlayerBetZJHMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GLPlayerBetZJHMessage::kMsgIDFieldNumber;
const int GLPlayerBetZJHMessage::kRpcIdFieldNumber;
const int GLPlayerBetZJHMessage::kBetsFieldNumber;
const int GLPlayerBetZJHMessage::kIsSucceedFieldNumber;
#endif  // !_MSC_VER

GLPlayerBetZJHMessage::GLPlayerBetZJHMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GLPlayerBetZJHMessage::InitAsDefaultInstance() {
}

GLPlayerBetZJHMessage::GLPlayerBetZJHMessage(const GLPlayerBetZJHMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GLPlayerBetZJHMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 6301;
  rpcid_ = 0;
  issucceed_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLPlayerBetZJHMessage::~GLPlayerBetZJHMessage() {
  SharedDtor();
}

void GLPlayerBetZJHMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLPlayerBetZJHMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GLPlayerBetZJHMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GLPlayerBetZJHMessage_descriptor_;
}

const GLPlayerBetZJHMessage& GLPlayerBetZJHMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RpcMessage_2eproto();  return *default_instance_;
}

GLPlayerBetZJHMessage* GLPlayerBetZJHMessage::default_instance_ = NULL;

GLPlayerBetZJHMessage* GLPlayerBetZJHMessage::New() const {
  return new GLPlayerBetZJHMessage;
}

void GLPlayerBetZJHMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 6301;
    rpcid_ = 0;
    issucceed_ = false;
  }
  bets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GLPlayerBetZJHMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Rpc msgID = 1 [default = GLPlayerBetZJH];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Rpc_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Rpc >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rpcId;
        break;
      }
      
      // optional int32 rpcId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rpcId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rpcid_)));
          set_has_rpcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bets;
        break;
      }
      
      // repeated .com.game.proto.SSC_Bet bets = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bets;
        if (input->ExpectTag(32)) goto parse_isSucceed;
        break;
      }
      
      // optional bool isSucceed = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isSucceed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issucceed_)));
          set_has_issucceed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLPlayerBetZJHMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Rpc msgID = 1 [default = GLPlayerBetZJH];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // optional int32 rpcId = 2;
  if (has_rpcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rpcid(), output);
  }
  
  // repeated .com.game.proto.SSC_Bet bets = 3;
  for (int i = 0; i < this->bets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->bets(i), output);
  }
  
  // optional bool isSucceed = 4;
  if (has_issucceed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->issucceed(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GLPlayerBetZJHMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Rpc msgID = 1 [default = GLPlayerBetZJH];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // optional int32 rpcId = 2;
  if (has_rpcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rpcid(), target);
  }
  
  // repeated .com.game.proto.SSC_Bet bets = 3;
  for (int i = 0; i < this->bets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->bets(i), target);
  }
  
  // optional bool isSucceed = 4;
  if (has_issucceed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->issucceed(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GLPlayerBetZJHMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Rpc msgID = 1 [default = GLPlayerBetZJH];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional int32 rpcId = 2;
    if (has_rpcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rpcid());
    }
    
    // optional bool isSucceed = 4;
    if (has_issucceed()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .com.game.proto.SSC_Bet bets = 3;
  total_size += 1 * this->bets_size();
  for (int i = 0; i < this->bets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bets(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLPlayerBetZJHMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GLPlayerBetZJHMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GLPlayerBetZJHMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GLPlayerBetZJHMessage::MergeFrom(const GLPlayerBetZJHMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  bets_.MergeFrom(from.bets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_rpcid()) {
      set_rpcid(from.rpcid());
    }
    if (from.has_issucceed()) {
      set_issucceed(from.issucceed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GLPlayerBetZJHMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GLPlayerBetZJHMessage::CopyFrom(const GLPlayerBetZJHMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLPlayerBetZJHMessage::IsInitialized() const {
  
  for (int i = 0; i < bets_size(); i++) {
    if (!this->bets(i).IsInitialized()) return false;
  }
  return true;
}

void GLPlayerBetZJHMessage::Swap(GLPlayerBetZJHMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(rpcid_, other->rpcid_);
    bets_.Swap(&other->bets_);
    std::swap(issucceed_, other->issucceed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GLPlayerBetZJHMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GLPlayerBetZJHMessage_descriptor_;
  metadata.reflection = GLPlayerBetZJHMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GLSyncSSCZJHMessage::kMsgIDFieldNumber;
const int GLSyncSSCZJHMessage::kNextOpenTimeFieldNumber;
const int GLSyncSSCZJHMessage::kCurResultFieldNumber;
const int GLSyncSSCZJHMessage::kCurResultTypeFieldNumber;
const int GLSyncSSCZJHMessage::kPreSantiaoWinerFieldNumber;
const int GLSyncSSCZJHMessage::kPreSantiaoTimeFieldNumber;
const int GLSyncSSCZJHMessage::kPreWinersFieldNumber;
const int GLSyncSSCZJHMessage::kBigWinersFieldNumber;
const int GLSyncSSCZJHMessage::kHistoryFieldNumber;
const int GLSyncSSCZJHMessage::kCurBetALLFieldNumber;
const int GLSyncSSCZJHMessage::kSscServerFieldNumber;
const int GLSyncSSCZJHMessage::kRatioFieldNumber;
const int GLSyncSSCZJHMessage::kPreBeforeBigWinerFieldNumber;
#endif  // !_MSC_VER

GLSyncSSCZJHMessage::GLSyncSSCZJHMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GLSyncSSCZJHMessage::InitAsDefaultInstance() {
  presantiaowiner_ = const_cast< ::com::game::proto::SSC_Winer*>(&::com::game::proto::SSC_Winer::default_instance());
}

GLSyncSSCZJHMessage::GLSyncSSCZJHMessage(const GLSyncSSCZJHMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GLSyncSSCZJHMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 6302;
  nextopentime_ = 0;
  curresulttype_ = 0;
  presantiaowiner_ = NULL;
  presantiaotime_ = 0;
  sscserver_ = 0;
  ratio_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLSyncSSCZJHMessage::~GLSyncSSCZJHMessage() {
  SharedDtor();
}

void GLSyncSSCZJHMessage::SharedDtor() {
  if (this != default_instance_) {
    delete presantiaowiner_;
  }
}

void GLSyncSSCZJHMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GLSyncSSCZJHMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GLSyncSSCZJHMessage_descriptor_;
}

const GLSyncSSCZJHMessage& GLSyncSSCZJHMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RpcMessage_2eproto();  return *default_instance_;
}

GLSyncSSCZJHMessage* GLSyncSSCZJHMessage::default_instance_ = NULL;

GLSyncSSCZJHMessage* GLSyncSSCZJHMessage::New() const {
  return new GLSyncSSCZJHMessage;
}

void GLSyncSSCZJHMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 6302;
    nextopentime_ = 0;
    curresulttype_ = 0;
    if (has_presantiaowiner()) {
      if (presantiaowiner_ != NULL) presantiaowiner_->::com::game::proto::SSC_Winer::Clear();
    }
    presantiaotime_ = 0;
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    sscserver_ = 0;
    ratio_ = 0;
  }
  curresult_.Clear();
  prewiners_.Clear();
  bigwiners_.Clear();
  history_.Clear();
  curbetall_.Clear();
  prebeforebigwiner_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GLSyncSSCZJHMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Rpc msgID = 1 [default = GLSyncSSCZJH];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Rpc_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Rpc >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nextOpenTime;
        break;
      }
      
      // required int32 nextOpenTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nextOpenTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nextopentime_)));
          set_has_nextopentime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_curResult;
        break;
      }
      
      // repeated int32 curResult = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curResult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_curresult())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_curresult())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_curResult;
        if (input->ExpectTag(32)) goto parse_curResultType;
        break;
      }
      
      // optional int32 curResultType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curResultType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curresulttype_)));
          set_has_curresulttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_preSantiaoWiner;
        break;
      }
      
      // optional .com.game.proto.SSC_Winer preSantiaoWiner = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_preSantiaoWiner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_presantiaowiner()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_preSantiaoTime;
        break;
      }
      
      // optional int32 preSantiaoTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_preSantiaoTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &presantiaotime_)));
          set_has_presantiaotime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_preWiners;
        break;
      }
      
      // repeated .com.game.proto.SSC_Winer preWiners = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_preWiners:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_prewiners()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_preWiners;
        if (input->ExpectTag(66)) goto parse_bigWiners;
        break;
      }
      
      // repeated .com.game.proto.SSC_Winer bigWiners = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bigWiners:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bigwiners()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_bigWiners;
        if (input->ExpectTag(72)) goto parse_history;
        break;
      }
      
      // repeated int32 history = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_history:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_history())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_history())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_history;
        if (input->ExpectTag(82)) goto parse_curBetALL;
        break;
      }
      
      // repeated .com.game.proto.SSC_Bet curBetALL = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_curBetALL:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_curbetall()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_curBetALL;
        if (input->ExpectTag(88)) goto parse_sscServer;
        break;
      }
      
      // optional int32 sscServer = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sscServer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sscserver_)));
          set_has_sscserver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_ratio;
        break;
      }
      
      // optional int32 ratio = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ratio_)));
          set_has_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_preBeforeBigWiner;
        break;
      }
      
      // repeated .com.game.proto.SSC_Winer preBeforeBigWiner = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_preBeforeBigWiner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_prebeforebigwiner()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_preBeforeBigWiner;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLSyncSSCZJHMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Rpc msgID = 1 [default = GLSyncSSCZJH];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required int32 nextOpenTime = 2;
  if (has_nextopentime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nextopentime(), output);
  }
  
  // repeated int32 curResult = 3;
  for (int i = 0; i < this->curresult_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->curresult(i), output);
  }
  
  // optional int32 curResultType = 4;
  if (has_curresulttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->curresulttype(), output);
  }
  
  // optional .com.game.proto.SSC_Winer preSantiaoWiner = 5;
  if (has_presantiaowiner()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->presantiaowiner(), output);
  }
  
  // optional int32 preSantiaoTime = 6;
  if (has_presantiaotime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->presantiaotime(), output);
  }
  
  // repeated .com.game.proto.SSC_Winer preWiners = 7;
  for (int i = 0; i < this->prewiners_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->prewiners(i), output);
  }
  
  // repeated .com.game.proto.SSC_Winer bigWiners = 8;
  for (int i = 0; i < this->bigwiners_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->bigwiners(i), output);
  }
  
  // repeated int32 history = 9;
  for (int i = 0; i < this->history_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->history(i), output);
  }
  
  // repeated .com.game.proto.SSC_Bet curBetALL = 10;
  for (int i = 0; i < this->curbetall_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->curbetall(i), output);
  }
  
  // optional int32 sscServer = 11;
  if (has_sscserver()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->sscserver(), output);
  }
  
  // optional int32 ratio = 12;
  if (has_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->ratio(), output);
  }
  
  // repeated .com.game.proto.SSC_Winer preBeforeBigWiner = 13;
  for (int i = 0; i < this->prebeforebigwiner_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->prebeforebigwiner(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GLSyncSSCZJHMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Rpc msgID = 1 [default = GLSyncSSCZJH];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required int32 nextOpenTime = 2;
  if (has_nextopentime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nextopentime(), target);
  }
  
  // repeated int32 curResult = 3;
  for (int i = 0; i < this->curresult_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->curresult(i), target);
  }
  
  // optional int32 curResultType = 4;
  if (has_curresulttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->curresulttype(), target);
  }
  
  // optional .com.game.proto.SSC_Winer preSantiaoWiner = 5;
  if (has_presantiaowiner()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->presantiaowiner(), target);
  }
  
  // optional int32 preSantiaoTime = 6;
  if (has_presantiaotime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->presantiaotime(), target);
  }
  
  // repeated .com.game.proto.SSC_Winer preWiners = 7;
  for (int i = 0; i < this->prewiners_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->prewiners(i), target);
  }
  
  // repeated .com.game.proto.SSC_Winer bigWiners = 8;
  for (int i = 0; i < this->bigwiners_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->bigwiners(i), target);
  }
  
  // repeated int32 history = 9;
  for (int i = 0; i < this->history_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->history(i), target);
  }
  
  // repeated .com.game.proto.SSC_Bet curBetALL = 10;
  for (int i = 0; i < this->curbetall_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->curbetall(i), target);
  }
  
  // optional int32 sscServer = 11;
  if (has_sscserver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->sscserver(), target);
  }
  
  // optional int32 ratio = 12;
  if (has_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->ratio(), target);
  }
  
  // repeated .com.game.proto.SSC_Winer preBeforeBigWiner = 13;
  for (int i = 0; i < this->prebeforebigwiner_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->prebeforebigwiner(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GLSyncSSCZJHMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Rpc msgID = 1 [default = GLSyncSSCZJH];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required int32 nextOpenTime = 2;
    if (has_nextopentime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nextopentime());
    }
    
    // optional int32 curResultType = 4;
    if (has_curresulttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curresulttype());
    }
    
    // optional .com.game.proto.SSC_Winer preSantiaoWiner = 5;
    if (has_presantiaowiner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->presantiaowiner());
    }
    
    // optional int32 preSantiaoTime = 6;
    if (has_presantiaotime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->presantiaotime());
    }
    
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional int32 sscServer = 11;
    if (has_sscserver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sscserver());
    }
    
    // optional int32 ratio = 12;
    if (has_ratio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ratio());
    }
    
  }
  // repeated int32 curResult = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->curresult_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->curresult(i));
    }
    total_size += 1 * this->curresult_size() + data_size;
  }
  
  // repeated .com.game.proto.SSC_Winer preWiners = 7;
  total_size += 1 * this->prewiners_size();
  for (int i = 0; i < this->prewiners_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->prewiners(i));
  }
  
  // repeated .com.game.proto.SSC_Winer bigWiners = 8;
  total_size += 1 * this->bigwiners_size();
  for (int i = 0; i < this->bigwiners_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bigwiners(i));
  }
  
  // repeated int32 history = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->history_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->history(i));
    }
    total_size += 1 * this->history_size() + data_size;
  }
  
  // repeated .com.game.proto.SSC_Bet curBetALL = 10;
  total_size += 1 * this->curbetall_size();
  for (int i = 0; i < this->curbetall_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->curbetall(i));
  }
  
  // repeated .com.game.proto.SSC_Winer preBeforeBigWiner = 13;
  total_size += 1 * this->prebeforebigwiner_size();
  for (int i = 0; i < this->prebeforebigwiner_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->prebeforebigwiner(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLSyncSSCZJHMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GLSyncSSCZJHMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GLSyncSSCZJHMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GLSyncSSCZJHMessage::MergeFrom(const GLSyncSSCZJHMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  curresult_.MergeFrom(from.curresult_);
  prewiners_.MergeFrom(from.prewiners_);
  bigwiners_.MergeFrom(from.bigwiners_);
  history_.MergeFrom(from.history_);
  curbetall_.MergeFrom(from.curbetall_);
  prebeforebigwiner_.MergeFrom(from.prebeforebigwiner_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_nextopentime()) {
      set_nextopentime(from.nextopentime());
    }
    if (from.has_curresulttype()) {
      set_curresulttype(from.curresulttype());
    }
    if (from.has_presantiaowiner()) {
      mutable_presantiaowiner()->::com::game::proto::SSC_Winer::MergeFrom(from.presantiaowiner());
    }
    if (from.has_presantiaotime()) {
      set_presantiaotime(from.presantiaotime());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_sscserver()) {
      set_sscserver(from.sscserver());
    }
    if (from.has_ratio()) {
      set_ratio(from.ratio());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GLSyncSSCZJHMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GLSyncSSCZJHMessage::CopyFrom(const GLSyncSSCZJHMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLSyncSSCZJHMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  if (has_presantiaowiner()) {
    if (!this->presantiaowiner().IsInitialized()) return false;
  }
  for (int i = 0; i < prewiners_size(); i++) {
    if (!this->prewiners(i).IsInitialized()) return false;
  }
  for (int i = 0; i < bigwiners_size(); i++) {
    if (!this->bigwiners(i).IsInitialized()) return false;
  }
  for (int i = 0; i < curbetall_size(); i++) {
    if (!this->curbetall(i).IsInitialized()) return false;
  }
  for (int i = 0; i < prebeforebigwiner_size(); i++) {
    if (!this->prebeforebigwiner(i).IsInitialized()) return false;
  }
  return true;
}

void GLSyncSSCZJHMessage::Swap(GLSyncSSCZJHMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(nextopentime_, other->nextopentime_);
    curresult_.Swap(&other->curresult_);
    std::swap(curresulttype_, other->curresulttype_);
    std::swap(presantiaowiner_, other->presantiaowiner_);
    std::swap(presantiaotime_, other->presantiaotime_);
    prewiners_.Swap(&other->prewiners_);
    bigwiners_.Swap(&other->bigwiners_);
    history_.Swap(&other->history_);
    curbetall_.Swap(&other->curbetall_);
    std::swap(sscserver_, other->sscserver_);
    std::swap(ratio_, other->ratio_);
    prebeforebigwiner_.Swap(&other->prebeforebigwiner_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GLSyncSSCZJHMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GLSyncSSCZJHMessage_descriptor_;
  metadata.reflection = GLSyncSSCZJHMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SSC_Winer::kNameFieldNumber;
const int SSC_Winer::kIconFieldNumber;
const int SSC_Winer::kWinMoneyFieldNumber;
const int SSC_Winer::kWinTimeFieldNumber;
const int SSC_Winer::kSpcialTypeFieldNumber;
#endif  // !_MSC_VER

SSC_Winer::SSC_Winer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SSC_Winer::InitAsDefaultInstance() {
}

SSC_Winer::SSC_Winer(const SSC_Winer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SSC_Winer::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  winmoney_ = 0;
  wintime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  spcialtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SSC_Winer::~SSC_Winer() {
  SharedDtor();
}

void SSC_Winer::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (wintime_ != &::google::protobuf::internal::kEmptyString) {
    delete wintime_;
  }
  if (spcialtype_ != &::google::protobuf::internal::kEmptyString) {
    delete spcialtype_;
  }
  if (this != default_instance_) {
  }
}

void SSC_Winer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSC_Winer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SSC_Winer_descriptor_;
}

const SSC_Winer& SSC_Winer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RpcMessage_2eproto();  return *default_instance_;
}

SSC_Winer* SSC_Winer::default_instance_ = NULL;

SSC_Winer* SSC_Winer::New() const {
  return new SSC_Winer;
}

void SSC_Winer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
    winmoney_ = 0;
    if (has_wintime()) {
      if (wintime_ != &::google::protobuf::internal::kEmptyString) {
        wintime_->clear();
      }
    }
    if (has_spcialtype()) {
      if (spcialtype_ != &::google::protobuf::internal::kEmptyString) {
        spcialtype_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SSC_Winer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_icon;
        break;
      }
      
      // required string icon = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_winMoney;
        break;
      }
      
      // required int32 winMoney = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winmoney_)));
          set_has_winmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_winTime;
        break;
      }
      
      // optional string winTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_winTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wintime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->wintime().data(), this->wintime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_spcialType;
        break;
      }
      
      // optional string spcialType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spcialType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_spcialtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->spcialtype().data(), this->spcialtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SSC_Winer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required string icon = 2;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->icon(), output);
  }
  
  // required int32 winMoney = 3;
  if (has_winmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->winmoney(), output);
  }
  
  // optional string winTime = 4;
  if (has_wintime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wintime().data(), this->wintime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->wintime(), output);
  }
  
  // optional string spcialType = 5;
  if (has_spcialtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->spcialtype().data(), this->spcialtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->spcialtype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SSC_Winer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required string icon = 2;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->icon(), target);
  }
  
  // required int32 winMoney = 3;
  if (has_winmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->winmoney(), target);
  }
  
  // optional string winTime = 4;
  if (has_wintime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wintime().data(), this->wintime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->wintime(), target);
  }
  
  // optional string spcialType = 5;
  if (has_spcialtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->spcialtype().data(), this->spcialtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->spcialtype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SSC_Winer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string icon = 2;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }
    
    // required int32 winMoney = 3;
    if (has_winmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winmoney());
    }
    
    // optional string winTime = 4;
    if (has_wintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wintime());
    }
    
    // optional string spcialType = 5;
    if (has_spcialtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->spcialtype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSC_Winer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SSC_Winer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SSC_Winer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SSC_Winer::MergeFrom(const SSC_Winer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_winmoney()) {
      set_winmoney(from.winmoney());
    }
    if (from.has_wintime()) {
      set_wintime(from.wintime());
    }
    if (from.has_spcialtype()) {
      set_spcialtype(from.spcialtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SSC_Winer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSC_Winer::CopyFrom(const SSC_Winer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSC_Winer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void SSC_Winer::Swap(SSC_Winer* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(icon_, other->icon_);
    std::swap(winmoney_, other->winmoney_);
    std::swap(wintime_, other->wintime_);
    std::swap(spcialtype_, other->spcialtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SSC_Winer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SSC_Winer_descriptor_;
  metadata.reflection = SSC_Winer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SSC_Bet::kBetIndexFieldNumber;
const int SSC_Bet::kBetMoneyFieldNumber;
#endif  // !_MSC_VER

SSC_Bet::SSC_Bet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SSC_Bet::InitAsDefaultInstance() {
}

SSC_Bet::SSC_Bet(const SSC_Bet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SSC_Bet::SharedCtor() {
  _cached_size_ = 0;
  betindex_ = 0;
  betmoney_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SSC_Bet::~SSC_Bet() {
  SharedDtor();
}

void SSC_Bet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SSC_Bet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSC_Bet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SSC_Bet_descriptor_;
}

const SSC_Bet& SSC_Bet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RpcMessage_2eproto();  return *default_instance_;
}

SSC_Bet* SSC_Bet::default_instance_ = NULL;

SSC_Bet* SSC_Bet::New() const {
  return new SSC_Bet;
}

void SSC_Bet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    betindex_ = 0;
    betmoney_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SSC_Bet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 betIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &betindex_)));
          set_has_betindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_betMoney;
        break;
      }
      
      // required int32 betMoney = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_betMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &betmoney_)));
          set_has_betmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SSC_Bet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 betIndex = 1;
  if (has_betindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->betindex(), output);
  }
  
  // required int32 betMoney = 2;
  if (has_betmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->betmoney(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SSC_Bet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 betIndex = 1;
  if (has_betindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->betindex(), target);
  }
  
  // required int32 betMoney = 2;
  if (has_betmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->betmoney(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SSC_Bet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 betIndex = 1;
    if (has_betindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->betindex());
    }
    
    // required int32 betMoney = 2;
    if (has_betmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->betmoney());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSC_Bet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SSC_Bet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SSC_Bet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SSC_Bet::MergeFrom(const SSC_Bet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_betindex()) {
      set_betindex(from.betindex());
    }
    if (from.has_betmoney()) {
      set_betmoney(from.betmoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SSC_Bet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSC_Bet::CopyFrom(const SSC_Bet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSC_Bet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SSC_Bet::Swap(SSC_Bet* other) {
  if (other != this) {
    std::swap(betindex_, other->betindex_);
    std::swap(betmoney_, other->betmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SSC_Bet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SSC_Bet_descriptor_;
  metadata.reflection = SSC_Bet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LGSyncTableDataMessage::kMsgIDFieldNumber;
const int LGSyncTableDataMessage::kRpcIdFieldNumber;
const int LGSyncTableDataMessage::kLoginIdFieldNumber;
const int LGSyncTableDataMessage::kTableJsonFieldNumber;
#endif  // !_MSC_VER

LGSyncTableDataMessage::LGSyncTableDataMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LGSyncTableDataMessage::InitAsDefaultInstance() {
}

LGSyncTableDataMessage::LGSyncTableDataMessage(const LGSyncTableDataMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LGSyncTableDataMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 6303;
  rpcid_ = 0;
  loginid_ = 0;
  tablejson_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LGSyncTableDataMessage::~LGSyncTableDataMessage() {
  SharedDtor();
}

void LGSyncTableDataMessage::SharedDtor() {
  if (tablejson_ != &::google::protobuf::internal::kEmptyString) {
    delete tablejson_;
  }
  if (this != default_instance_) {
  }
}

void LGSyncTableDataMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LGSyncTableDataMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LGSyncTableDataMessage_descriptor_;
}

const LGSyncTableDataMessage& LGSyncTableDataMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RpcMessage_2eproto();  return *default_instance_;
}

LGSyncTableDataMessage* LGSyncTableDataMessage::default_instance_ = NULL;

LGSyncTableDataMessage* LGSyncTableDataMessage::New() const {
  return new LGSyncTableDataMessage;
}

void LGSyncTableDataMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 6303;
    rpcid_ = 0;
    loginid_ = 0;
    if (has_tablejson()) {
      if (tablejson_ != &::google::protobuf::internal::kEmptyString) {
        tablejson_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LGSyncTableDataMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Rpc msgID = 1 [default = LGSyncTableData];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Rpc_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Rpc >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rpcId;
        break;
      }
      
      // optional int32 rpcId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rpcId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rpcid_)));
          set_has_rpcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_loginId;
        break;
      }
      
      // required int32 loginId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loginId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loginid_)));
          set_has_loginid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_tableJson;
        break;
      }
      
      // optional string tableJson = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tableJson:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tablejson()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tablejson().data(), this->tablejson().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LGSyncTableDataMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Rpc msgID = 1 [default = LGSyncTableData];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // optional int32 rpcId = 2;
  if (has_rpcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rpcid(), output);
  }
  
  // required int32 loginId = 3;
  if (has_loginid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->loginid(), output);
  }
  
  // optional string tableJson = 4;
  if (has_tablejson()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tablejson().data(), this->tablejson().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->tablejson(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LGSyncTableDataMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Rpc msgID = 1 [default = LGSyncTableData];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // optional int32 rpcId = 2;
  if (has_rpcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rpcid(), target);
  }
  
  // required int32 loginId = 3;
  if (has_loginid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->loginid(), target);
  }
  
  // optional string tableJson = 4;
  if (has_tablejson()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tablejson().data(), this->tablejson().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->tablejson(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LGSyncTableDataMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Rpc msgID = 1 [default = LGSyncTableData];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional int32 rpcId = 2;
    if (has_rpcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rpcid());
    }
    
    // required int32 loginId = 3;
    if (has_loginid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loginid());
    }
    
    // optional string tableJson = 4;
    if (has_tablejson()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tablejson());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LGSyncTableDataMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LGSyncTableDataMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LGSyncTableDataMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LGSyncTableDataMessage::MergeFrom(const LGSyncTableDataMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_rpcid()) {
      set_rpcid(from.rpcid());
    }
    if (from.has_loginid()) {
      set_loginid(from.loginid());
    }
    if (from.has_tablejson()) {
      set_tablejson(from.tablejson());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LGSyncTableDataMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LGSyncTableDataMessage::CopyFrom(const LGSyncTableDataMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LGSyncTableDataMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  
  return true;
}

void LGSyncTableDataMessage::Swap(LGSyncTableDataMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(rpcid_, other->rpcid_);
    std::swap(loginid_, other->loginid_);
    std::swap(tablejson_, other->tablejson_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LGSyncTableDataMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LGSyncTableDataMessage_descriptor_;
  metadata.reflection = LGSyncTableDataMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LGStopFishServerMessage::kMsgIDFieldNumber;
const int LGStopFishServerMessage::kRpcIdFieldNumber;
const int LGStopFishServerMessage::kCloseTimeFieldNumber;
#endif  // !_MSC_VER

LGStopFishServerMessage::LGStopFishServerMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LGStopFishServerMessage::InitAsDefaultInstance() {
}

LGStopFishServerMessage::LGStopFishServerMessage(const LGStopFishServerMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LGStopFishServerMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 6215;
  rpcid_ = 0;
  closetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LGStopFishServerMessage::~LGStopFishServerMessage() {
  SharedDtor();
}

void LGStopFishServerMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LGStopFishServerMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LGStopFishServerMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LGStopFishServerMessage_descriptor_;
}

const LGStopFishServerMessage& LGStopFishServerMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RpcMessage_2eproto();  return *default_instance_;
}

LGStopFishServerMessage* LGStopFishServerMessage::default_instance_ = NULL;

LGStopFishServerMessage* LGStopFishServerMessage::New() const {
  return new LGStopFishServerMessage;
}

void LGStopFishServerMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 6215;
    rpcid_ = 0;
    closetime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LGStopFishServerMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Rpc msgID = 1 [default = LGStopFishServer];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Rpc_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Rpc >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rpcId;
        break;
      }
      
      // optional int32 rpcId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rpcId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rpcid_)));
          set_has_rpcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_closeTime;
        break;
      }
      
      // required int64 closeTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_closeTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &closetime_)));
          set_has_closetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LGStopFishServerMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Rpc msgID = 1 [default = LGStopFishServer];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // optional int32 rpcId = 2;
  if (has_rpcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rpcid(), output);
  }
  
  // required int64 closeTime = 3;
  if (has_closetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->closetime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LGStopFishServerMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Rpc msgID = 1 [default = LGStopFishServer];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // optional int32 rpcId = 2;
  if (has_rpcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rpcid(), target);
  }
  
  // required int64 closeTime = 3;
  if (has_closetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->closetime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LGStopFishServerMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Rpc msgID = 1 [default = LGStopFishServer];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional int32 rpcId = 2;
    if (has_rpcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rpcid());
    }
    
    // required int64 closeTime = 3;
    if (has_closetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->closetime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LGStopFishServerMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LGStopFishServerMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LGStopFishServerMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LGStopFishServerMessage::MergeFrom(const LGStopFishServerMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_rpcid()) {
      set_rpcid(from.rpcid());
    }
    if (from.has_closetime()) {
      set_closetime(from.closetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LGStopFishServerMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LGStopFishServerMessage::CopyFrom(const LGStopFishServerMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LGStopFishServerMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  
  return true;
}

void LGStopFishServerMessage::Swap(LGStopFishServerMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(rpcid_, other->rpcid_);
    std::swap(closetime_, other->closetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LGStopFishServerMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LGStopFishServerMessage_descriptor_;
  metadata.reflection = LGStopFishServerMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LGReloadFishTableMessage::kMsgIDFieldNumber;
const int LGReloadFishTableMessage::kRpcIdFieldNumber;
const int LGReloadFishTableMessage::kConfigStringFieldNumber;
#endif  // !_MSC_VER

LGReloadFishTableMessage::LGReloadFishTableMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LGReloadFishTableMessage::InitAsDefaultInstance() {
}

LGReloadFishTableMessage::LGReloadFishTableMessage(const LGReloadFishTableMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LGReloadFishTableMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 6216;
  rpcid_ = 0;
  configstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LGReloadFishTableMessage::~LGReloadFishTableMessage() {
  SharedDtor();
}

void LGReloadFishTableMessage::SharedDtor() {
  if (configstring_ != &::google::protobuf::internal::kEmptyString) {
    delete configstring_;
  }
  if (this != default_instance_) {
  }
}

void LGReloadFishTableMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LGReloadFishTableMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LGReloadFishTableMessage_descriptor_;
}

const LGReloadFishTableMessage& LGReloadFishTableMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RpcMessage_2eproto();  return *default_instance_;
}

LGReloadFishTableMessage* LGReloadFishTableMessage::default_instance_ = NULL;

LGReloadFishTableMessage* LGReloadFishTableMessage::New() const {
  return new LGReloadFishTableMessage;
}

void LGReloadFishTableMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 6216;
    rpcid_ = 0;
    if (has_configstring()) {
      if (configstring_ != &::google::protobuf::internal::kEmptyString) {
        configstring_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LGReloadFishTableMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Rpc msgID = 1 [default = LGReloadFishTable];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Rpc_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Rpc >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rpcId;
        break;
      }
      
      // optional int32 rpcId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rpcId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rpcid_)));
          set_has_rpcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_configString;
        break;
      }
      
      // optional string configString = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_configString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_configstring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->configstring().data(), this->configstring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LGReloadFishTableMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Rpc msgID = 1 [default = LGReloadFishTable];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // optional int32 rpcId = 2;
  if (has_rpcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rpcid(), output);
  }
  
  // optional string configString = 3;
  if (has_configstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->configstring().data(), this->configstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->configstring(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LGReloadFishTableMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Rpc msgID = 1 [default = LGReloadFishTable];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // optional int32 rpcId = 2;
  if (has_rpcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rpcid(), target);
  }
  
  // optional string configString = 3;
  if (has_configstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->configstring().data(), this->configstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->configstring(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LGReloadFishTableMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Rpc msgID = 1 [default = LGReloadFishTable];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional int32 rpcId = 2;
    if (has_rpcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rpcid());
    }
    
    // optional string configString = 3;
    if (has_configstring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->configstring());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LGReloadFishTableMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LGReloadFishTableMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LGReloadFishTableMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LGReloadFishTableMessage::MergeFrom(const LGReloadFishTableMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_rpcid()) {
      set_rpcid(from.rpcid());
    }
    if (from.has_configstring()) {
      set_configstring(from.configstring());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LGReloadFishTableMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LGReloadFishTableMessage::CopyFrom(const LGReloadFishTableMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LGReloadFishTableMessage::IsInitialized() const {
  
  return true;
}

void LGReloadFishTableMessage::Swap(LGReloadFishTableMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(rpcid_, other->rpcid_);
    std::swap(configstring_, other->configstring_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LGReloadFishTableMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LGReloadFishTableMessage_descriptor_;
  metadata.reflection = LGReloadFishTableMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LGStartFishServerMessage::kMsgIDFieldNumber;
const int LGStartFishServerMessage::kRpcIdFieldNumber;
const int LGStartFishServerMessage::kStartTimeFieldNumber;
#endif  // !_MSC_VER

LGStartFishServerMessage::LGStartFishServerMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LGStartFishServerMessage::InitAsDefaultInstance() {
}

LGStartFishServerMessage::LGStartFishServerMessage(const LGStartFishServerMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LGStartFishServerMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 6217;
  rpcid_ = 0;
  starttime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LGStartFishServerMessage::~LGStartFishServerMessage() {
  SharedDtor();
}

void LGStartFishServerMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LGStartFishServerMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LGStartFishServerMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LGStartFishServerMessage_descriptor_;
}

const LGStartFishServerMessage& LGStartFishServerMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RpcMessage_2eproto();  return *default_instance_;
}

LGStartFishServerMessage* LGStartFishServerMessage::default_instance_ = NULL;

LGStartFishServerMessage* LGStartFishServerMessage::New() const {
  return new LGStartFishServerMessage;
}

void LGStartFishServerMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 6217;
    rpcid_ = 0;
    starttime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LGStartFishServerMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Rpc msgID = 1 [default = LGStartFishServer];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Rpc_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Rpc >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rpcId;
        break;
      }
      
      // optional int32 rpcId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rpcId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rpcid_)));
          set_has_rpcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_startTime;
        break;
      }
      
      // required int64 startTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LGStartFishServerMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Rpc msgID = 1 [default = LGStartFishServer];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // optional int32 rpcId = 2;
  if (has_rpcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rpcid(), output);
  }
  
  // required int64 startTime = 3;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->starttime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LGStartFishServerMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Rpc msgID = 1 [default = LGStartFishServer];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // optional int32 rpcId = 2;
  if (has_rpcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rpcid(), target);
  }
  
  // required int64 startTime = 3;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->starttime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LGStartFishServerMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Rpc msgID = 1 [default = LGStartFishServer];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional int32 rpcId = 2;
    if (has_rpcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rpcid());
    }
    
    // required int64 startTime = 3;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->starttime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LGStartFishServerMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LGStartFishServerMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LGStartFishServerMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LGStartFishServerMessage::MergeFrom(const LGStartFishServerMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_rpcid()) {
      set_rpcid(from.rpcid());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LGStartFishServerMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LGStartFishServerMessage::CopyFrom(const LGStartFishServerMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LGStartFishServerMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  
  return true;
}

void LGStartFishServerMessage::Swap(LGStartFishServerMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(rpcid_, other->rpcid_);
    std::swap(starttime_, other->starttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LGStartFishServerMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LGStartFishServerMessage_descriptor_;
  metadata.reflection = LGStartFishServerMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LGBuyGoodsMessage::kMsgIDFieldNumber;
const int LGBuyGoodsMessage::kItemModelIdFieldNumber;
const int LGBuyGoodsMessage::kItemNumFieldNumber;
#endif  // !_MSC_VER

LGBuyGoodsMessage::LGBuyGoodsMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LGBuyGoodsMessage::InitAsDefaultInstance() {
}

LGBuyGoodsMessage::LGBuyGoodsMessage(const LGBuyGoodsMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LGBuyGoodsMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 6305;
  itemmodelid_ = 0;
  itemnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LGBuyGoodsMessage::~LGBuyGoodsMessage() {
  SharedDtor();
}

void LGBuyGoodsMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LGBuyGoodsMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LGBuyGoodsMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LGBuyGoodsMessage_descriptor_;
}

const LGBuyGoodsMessage& LGBuyGoodsMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RpcMessage_2eproto();  return *default_instance_;
}

LGBuyGoodsMessage* LGBuyGoodsMessage::default_instance_ = NULL;

LGBuyGoodsMessage* LGBuyGoodsMessage::New() const {
  return new LGBuyGoodsMessage;
}

void LGBuyGoodsMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 6305;
    itemmodelid_ = 0;
    itemnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LGBuyGoodsMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Rpc msgID = 1 [default = LGBuyGoods];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Rpc_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Rpc >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemModelId;
        break;
      }
      
      // required int32 itemModelId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemModelId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemmodelid_)));
          set_has_itemmodelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemNum;
        break;
      }
      
      // required int32 itemNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemnum_)));
          set_has_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LGBuyGoodsMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Rpc msgID = 1 [default = LGBuyGoods];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required int32 itemModelId = 2;
  if (has_itemmodelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemmodelid(), output);
  }
  
  // required int32 itemNum = 3;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->itemnum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LGBuyGoodsMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Rpc msgID = 1 [default = LGBuyGoods];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required int32 itemModelId = 2;
  if (has_itemmodelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itemmodelid(), target);
  }
  
  // required int32 itemNum = 3;
  if (has_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->itemnum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LGBuyGoodsMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Rpc msgID = 1 [default = LGBuyGoods];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required int32 itemModelId = 2;
    if (has_itemmodelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemmodelid());
    }
    
    // required int32 itemNum = 3;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemnum());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LGBuyGoodsMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LGBuyGoodsMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LGBuyGoodsMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LGBuyGoodsMessage::MergeFrom(const LGBuyGoodsMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_itemmodelid()) {
      set_itemmodelid(from.itemmodelid());
    }
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LGBuyGoodsMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LGBuyGoodsMessage::CopyFrom(const LGBuyGoodsMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LGBuyGoodsMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  return true;
}

void LGBuyGoodsMessage::Swap(LGBuyGoodsMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(itemmodelid_, other->itemmodelid_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LGBuyGoodsMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LGBuyGoodsMessage_descriptor_;
  metadata.reflection = LGBuyGoodsMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LGUseGoodsMessage::kMsgIDFieldNumber;
const int LGUseGoodsMessage::kItemIdFieldNumber;
const int LGUseGoodsMessage::kItemModelIdFieldNumber;
const int LGUseGoodsMessage::kItemNumFieldNumber;
const int LGUseGoodsMessage::kTimeFieldNumber;
#endif  // !_MSC_VER

LGUseGoodsMessage::LGUseGoodsMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LGUseGoodsMessage::InitAsDefaultInstance() {
}

LGUseGoodsMessage::LGUseGoodsMessage(const LGUseGoodsMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LGUseGoodsMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 6306;
  itemid_ = GOOGLE_LONGLONG(0);
  itemmodelid_ = 0;
  itemnum_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LGUseGoodsMessage::~LGUseGoodsMessage() {
  SharedDtor();
}

void LGUseGoodsMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LGUseGoodsMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LGUseGoodsMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LGUseGoodsMessage_descriptor_;
}

const LGUseGoodsMessage& LGUseGoodsMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RpcMessage_2eproto();  return *default_instance_;
}

LGUseGoodsMessage* LGUseGoodsMessage::default_instance_ = NULL;

LGUseGoodsMessage* LGUseGoodsMessage::New() const {
  return new LGUseGoodsMessage;
}

void LGUseGoodsMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 6306;
    itemid_ = GOOGLE_LONGLONG(0);
    itemmodelid_ = 0;
    itemnum_ = 0;
    time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LGUseGoodsMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Rpc msgID = 1 [default = LGUseGoods];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Rpc_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Rpc >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }
      
      // required int64 itemId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemModelId;
        break;
      }
      
      // required int32 itemModelId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemModelId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemmodelid_)));
          set_has_itemmodelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_itemNum;
        break;
      }
      
      // required int32 itemNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemnum_)));
          set_has_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }
      
      // required int64 time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LGUseGoodsMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Rpc msgID = 1 [default = LGUseGoods];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required int64 itemId = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->itemid(), output);
  }
  
  // required int32 itemModelId = 3;
  if (has_itemmodelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->itemmodelid(), output);
  }
  
  // required int32 itemNum = 4;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->itemnum(), output);
  }
  
  // required int64 time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LGUseGoodsMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Rpc msgID = 1 [default = LGUseGoods];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required int64 itemId = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->itemid(), target);
  }
  
  // required int32 itemModelId = 3;
  if (has_itemmodelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->itemmodelid(), target);
  }
  
  // required int32 itemNum = 4;
  if (has_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->itemnum(), target);
  }
  
  // required int64 time = 5;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LGUseGoodsMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Rpc msgID = 1 [default = LGUseGoods];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required int64 itemId = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->itemid());
    }
    
    // required int32 itemModelId = 3;
    if (has_itemmodelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemmodelid());
    }
    
    // required int32 itemNum = 4;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemnum());
    }
    
    // required int64 time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LGUseGoodsMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LGUseGoodsMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LGUseGoodsMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LGUseGoodsMessage::MergeFrom(const LGUseGoodsMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemmodelid()) {
      set_itemmodelid(from.itemmodelid());
    }
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LGUseGoodsMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LGUseGoodsMessage::CopyFrom(const LGUseGoodsMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LGUseGoodsMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001e) != 0x0000001e) return false;
  
  return true;
}

void LGUseGoodsMessage::Swap(LGUseGoodsMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(itemid_, other->itemid_);
    std::swap(itemmodelid_, other->itemmodelid_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LGUseGoodsMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LGUseGoodsMessage_descriptor_;
  metadata.reflection = LGUseGoodsMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LGRemoveGoodsMessage::kMsgIDFieldNumber;
const int LGRemoveGoodsMessage::kItemIdFieldNumber;
const int LGRemoveGoodsMessage::kItemModelIdFieldNumber;
#endif  // !_MSC_VER

LGRemoveGoodsMessage::LGRemoveGoodsMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LGRemoveGoodsMessage::InitAsDefaultInstance() {
}

LGRemoveGoodsMessage::LGRemoveGoodsMessage(const LGRemoveGoodsMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LGRemoveGoodsMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 6307;
  itemid_ = GOOGLE_LONGLONG(0);
  itemmodelid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LGRemoveGoodsMessage::~LGRemoveGoodsMessage() {
  SharedDtor();
}

void LGRemoveGoodsMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LGRemoveGoodsMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LGRemoveGoodsMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LGRemoveGoodsMessage_descriptor_;
}

const LGRemoveGoodsMessage& LGRemoveGoodsMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RpcMessage_2eproto();  return *default_instance_;
}

LGRemoveGoodsMessage* LGRemoveGoodsMessage::default_instance_ = NULL;

LGRemoveGoodsMessage* LGRemoveGoodsMessage::New() const {
  return new LGRemoveGoodsMessage;
}

void LGRemoveGoodsMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 6307;
    itemid_ = GOOGLE_LONGLONG(0);
    itemmodelid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LGRemoveGoodsMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Rpc msgID = 1 [default = LGRemoveGoods];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Rpc_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Rpc >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }
      
      // optional int64 itemId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemModelId;
        break;
      }
      
      // optional int32 itemModelId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemModelId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemmodelid_)));
          set_has_itemmodelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LGRemoveGoodsMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Rpc msgID = 1 [default = LGRemoveGoods];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // optional int64 itemId = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->itemid(), output);
  }
  
  // optional int32 itemModelId = 3;
  if (has_itemmodelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->itemmodelid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LGRemoveGoodsMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Rpc msgID = 1 [default = LGRemoveGoods];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // optional int64 itemId = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->itemid(), target);
  }
  
  // optional int32 itemModelId = 3;
  if (has_itemmodelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->itemmodelid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LGRemoveGoodsMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Rpc msgID = 1 [default = LGRemoveGoods];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional int64 itemId = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->itemid());
    }
    
    // optional int32 itemModelId = 3;
    if (has_itemmodelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemmodelid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LGRemoveGoodsMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LGRemoveGoodsMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LGRemoveGoodsMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LGRemoveGoodsMessage::MergeFrom(const LGRemoveGoodsMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemmodelid()) {
      set_itemmodelid(from.itemmodelid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LGRemoveGoodsMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LGRemoveGoodsMessage::CopyFrom(const LGRemoveGoodsMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LGRemoveGoodsMessage::IsInitialized() const {
  
  return true;
}

void LGRemoveGoodsMessage::Swap(LGRemoveGoodsMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(itemid_, other->itemid_);
    std::swap(itemmodelid_, other->itemmodelid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LGRemoveGoodsMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LGRemoveGoodsMessage_descriptor_;
  metadata.reflection = LGRemoveGoodsMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GLFilishPresentCharmMessage::kMsgIDFieldNumber;
const int GLFilishPresentCharmMessage::kNameFieldNumber;
const int GLFilishPresentCharmMessage::kPlayerIdFieldNumber;
const int GLFilishPresentCharmMessage::kToPlayerIdFieldNumber;
const int GLFilishPresentCharmMessage::kSubGameIdFieldNumber;
const int GLFilishPresentCharmMessage::kPresentTypeFieldNumber;
const int GLFilishPresentCharmMessage::kPresentValueFieldNumber;
const int GLFilishPresentCharmMessage::kNumFieldNumber;
#endif  // !_MSC_VER

GLFilishPresentCharmMessage::GLFilishPresentCharmMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GLFilishPresentCharmMessage::InitAsDefaultInstance() {
}

GLFilishPresentCharmMessage::GLFilishPresentCharmMessage(const GLFilishPresentCharmMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GLFilishPresentCharmMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 6308;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playerid_ = GOOGLE_LONGLONG(0);
  toplayerid_ = GOOGLE_LONGLONG(0);
  subgameid_ = 0;
  presenttype_ = 0;
  presentvalue_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLFilishPresentCharmMessage::~GLFilishPresentCharmMessage() {
  SharedDtor();
}

void GLFilishPresentCharmMessage::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GLFilishPresentCharmMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GLFilishPresentCharmMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GLFilishPresentCharmMessage_descriptor_;
}

const GLFilishPresentCharmMessage& GLFilishPresentCharmMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RpcMessage_2eproto();  return *default_instance_;
}

GLFilishPresentCharmMessage* GLFilishPresentCharmMessage::default_instance_ = NULL;

GLFilishPresentCharmMessage* GLFilishPresentCharmMessage::New() const {
  return new GLFilishPresentCharmMessage;
}

void GLFilishPresentCharmMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 6308;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    playerid_ = GOOGLE_LONGLONG(0);
    toplayerid_ = GOOGLE_LONGLONG(0);
    subgameid_ = 0;
    presenttype_ = 0;
    presentvalue_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GLFilishPresentCharmMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Rpc msgID = 1 [default = GLFilishPresentCharm];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Rpc_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Rpc >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_playerId;
        break;
      }
      
      // optional int64 playerId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_toPlayerId;
        break;
      }
      
      // optional int64 toPlayerId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_toPlayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &toplayerid_)));
          set_has_toplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_subGameId;
        break;
      }
      
      // optional int32 subGameId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subGameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subgameid_)));
          set_has_subgameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_presentType;
        break;
      }
      
      // optional int32 presentType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_presentType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &presenttype_)));
          set_has_presenttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_presentValue;
        break;
      }
      
      // optional int32 presentValue = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_presentValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &presentvalue_)));
          set_has_presentvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_num;
        break;
      }
      
      // optional int32 num = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLFilishPresentCharmMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Rpc msgID = 1 [default = GLFilishPresentCharm];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional int64 playerId = 3;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->playerid(), output);
  }
  
  // optional int64 toPlayerId = 4;
  if (has_toplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->toplayerid(), output);
  }
  
  // optional int32 subGameId = 5;
  if (has_subgameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->subgameid(), output);
  }
  
  // optional int32 presentType = 6;
  if (has_presenttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->presenttype(), output);
  }
  
  // optional int32 presentValue = 7;
  if (has_presentvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->presentvalue(), output);
  }
  
  // optional int32 num = 8;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GLFilishPresentCharmMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Rpc msgID = 1 [default = GLFilishPresentCharm];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional int64 playerId = 3;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->playerid(), target);
  }
  
  // optional int64 toPlayerId = 4;
  if (has_toplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->toplayerid(), target);
  }
  
  // optional int32 subGameId = 5;
  if (has_subgameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->subgameid(), target);
  }
  
  // optional int32 presentType = 6;
  if (has_presenttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->presenttype(), target);
  }
  
  // optional int32 presentValue = 7;
  if (has_presentvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->presentvalue(), target);
  }
  
  // optional int32 num = 8;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GLFilishPresentCharmMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Rpc msgID = 1 [default = GLFilishPresentCharm];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int64 playerId = 3;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }
    
    // optional int64 toPlayerId = 4;
    if (has_toplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->toplayerid());
    }
    
    // optional int32 subGameId = 5;
    if (has_subgameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->subgameid());
    }
    
    // optional int32 presentType = 6;
    if (has_presenttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->presenttype());
    }
    
    // optional int32 presentValue = 7;
    if (has_presentvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->presentvalue());
    }
    
    // optional int32 num = 8;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLFilishPresentCharmMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GLFilishPresentCharmMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GLFilishPresentCharmMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GLFilishPresentCharmMessage::MergeFrom(const GLFilishPresentCharmMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_toplayerid()) {
      set_toplayerid(from.toplayerid());
    }
    if (from.has_subgameid()) {
      set_subgameid(from.subgameid());
    }
    if (from.has_presenttype()) {
      set_presenttype(from.presenttype());
    }
    if (from.has_presentvalue()) {
      set_presentvalue(from.presentvalue());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GLFilishPresentCharmMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GLFilishPresentCharmMessage::CopyFrom(const GLFilishPresentCharmMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLFilishPresentCharmMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void GLFilishPresentCharmMessage::Swap(GLFilishPresentCharmMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(name_, other->name_);
    std::swap(playerid_, other->playerid_);
    std::swap(toplayerid_, other->toplayerid_);
    std::swap(subgameid_, other->subgameid_);
    std::swap(presenttype_, other->presenttype_);
    std::swap(presentvalue_, other->presentvalue_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GLFilishPresentCharmMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GLFilishPresentCharmMessage_descriptor_;
  metadata.reflection = GLFilishPresentCharmMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace game
}  // namespace com

// @@protoc_insertion_point(global_scope)
