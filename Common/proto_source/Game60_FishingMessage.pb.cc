// Generated by the protocol buffer compiler.  DO NOT EDIT!
#include "stdafx.h"
#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Game60_FishingMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace game {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* ResArenaStartInfoMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResArenaStartInfoMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqEnterFishServerMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqEnterFishServerMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResEnterFishServerMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResEnterFishServerMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqJoinRoomMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqJoinRoomMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResJoinRoomMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResJoinRoomMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResCmdFishMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResCmdFishMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResCmdSyncFishMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResCmdSyncFishMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqBulletMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqBulletMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResBulletMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResBulletMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResCatchedFreezeMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResCatchedFreezeMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResCatchedMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResCatchedMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* FishCatchedInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FishCatchedInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResClearSceneMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResClearSceneMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResPlayerJoinMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResPlayerJoinMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqChangeLauncherMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqChangeLauncherMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResChangeLauncherMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResChangeLauncherMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqChangeRateMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqChangeRateMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResChangeRateMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResChangeRateMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncBulletData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncBulletData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResSyncBulletDataMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResSyncBulletDataMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqLeaveGameMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqLeaveGameMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResLeaveGameMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResLeaveGameMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqLookUpPlayerInfoMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqLookUpPlayerInfoMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResLookUpPlayerInfoMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResLookUpPlayerInfoMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResConnectFinishMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResConnectFinishMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqStartSyncFishMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqStartSyncFishMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResPlayerTickOutMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResPlayerTickOutMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResSyncAddMoneyMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResSyncAddMoneyMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResUseGoodsKBMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResUseGoodsKBMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResUseGoodsBDMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResUseGoodsBDMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Protos_Game60Fishing_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Game60_5fFishingMessage_2eproto() {
  protobuf_AddDesc_Game60_5fFishingMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Game60_FishingMessage.proto");
  GOOGLE_CHECK(file != NULL);
  ResArenaStartInfoMessage_descriptor_ = file->message_type(0);
  static const int ResArenaStartInfoMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResArenaStartInfoMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResArenaStartInfoMessage, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResArenaStartInfoMessage, waitplayer_),
  };
  ResArenaStartInfoMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResArenaStartInfoMessage_descriptor_,
      ResArenaStartInfoMessage::default_instance_,
      ResArenaStartInfoMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResArenaStartInfoMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResArenaStartInfoMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResArenaStartInfoMessage));
  ReqEnterFishServerMessage_descriptor_ = file->message_type(1);
  static const int ReqEnterFishServerMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEnterFishServerMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEnterFishServerMessage, playeronlyid_),
  };
  ReqEnterFishServerMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqEnterFishServerMessage_descriptor_,
      ReqEnterFishServerMessage::default_instance_,
      ReqEnterFishServerMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEnterFishServerMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEnterFishServerMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqEnterFishServerMessage));
  ResEnterFishServerMessage_descriptor_ = file->message_type(2);
  static const int ResEnterFishServerMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResEnterFishServerMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResEnterFishServerMessage, serverstate_),
  };
  ResEnterFishServerMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResEnterFishServerMessage_descriptor_,
      ResEnterFishServerMessage::default_instance_,
      ResEnterFishServerMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResEnterFishServerMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResEnterFishServerMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResEnterFishServerMessage));
  ReqJoinRoomMessage_descriptor_ = file->message_type(3);
  static const int ReqJoinRoomMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqJoinRoomMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqJoinRoomMessage, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqJoinRoomMessage, isarena_),
  };
  ReqJoinRoomMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqJoinRoomMessage_descriptor_,
      ReqJoinRoomMessage::default_instance_,
      ReqJoinRoomMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqJoinRoomMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqJoinRoomMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqJoinRoomMessage));
  ResJoinRoomMessage_descriptor_ = file->message_type(4);
  static const int ResJoinRoomMessage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResJoinRoomMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResJoinRoomMessage, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResJoinRoomMessage, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResJoinRoomMessage, backgroundimage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResJoinRoomMessage, playerdata_),
  };
  ResJoinRoomMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResJoinRoomMessage_descriptor_,
      ResJoinRoomMessage::default_instance_,
      ResJoinRoomMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResJoinRoomMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResJoinRoomMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResJoinRoomMessage));
  ResCmdFishMessage_descriptor_ = file->message_type(5);
  static const int ResCmdFishMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCmdFishMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCmdFishMessage, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCmdFishMessage, startid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCmdFishMessage, pathid_),
  };
  ResCmdFishMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResCmdFishMessage_descriptor_,
      ResCmdFishMessage::default_instance_,
      ResCmdFishMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCmdFishMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCmdFishMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResCmdFishMessage));
  ResCmdSyncFishMessage_descriptor_ = file->message_type(6);
  static const int ResCmdSyncFishMessage_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCmdSyncFishMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCmdSyncFishMessage, fishid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCmdSyncFishMessage, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCmdSyncFishMessage, fishtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCmdSyncFishMessage, pathgroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCmdSyncFishMessage, pathidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCmdSyncFishMessage, isactiveevent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCmdSyncFishMessage, elapsedtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCmdSyncFishMessage, delaytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCmdSyncFishMessage, delayscaling_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCmdSyncFishMessage, delayduration1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCmdSyncFishMessage, delayduration2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCmdSyncFishMessage, delayduration3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCmdSyncFishMessage, delaycurrenttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCmdSyncFishMessage, package_),
  };
  ResCmdSyncFishMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResCmdSyncFishMessage_descriptor_,
      ResCmdSyncFishMessage::default_instance_,
      ResCmdSyncFishMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCmdSyncFishMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCmdSyncFishMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResCmdSyncFishMessage));
  ReqBulletMessage_descriptor_ = file->message_type(7);
  static const int ReqBulletMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBulletMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBulletMessage, angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBulletMessage, lockfishid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBulletMessage, launchertype_),
  };
  ReqBulletMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqBulletMessage_descriptor_,
      ReqBulletMessage::default_instance_,
      ReqBulletMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBulletMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBulletMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqBulletMessage));
  ResBulletMessage_descriptor_ = file->message_type(8);
  static const int ResBulletMessage_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResBulletMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResBulletMessage, bulletid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResBulletMessage, launchertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResBulletMessage, angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResBulletMessage, energy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResBulletMessage, reboundcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResBulletMessage, lockfishid_),
  };
  ResBulletMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResBulletMessage_descriptor_,
      ResBulletMessage::default_instance_,
      ResBulletMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResBulletMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResBulletMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResBulletMessage));
  ResCatchedFreezeMessage_descriptor_ = file->message_type(9);
  static const int ResCatchedFreezeMessage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCatchedFreezeMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCatchedFreezeMessage, bulletid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCatchedFreezeMessage, combo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCatchedFreezeMessage, goldnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCatchedFreezeMessage, totalnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCatchedFreezeMessage, fishcatchedlist_),
  };
  ResCatchedFreezeMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResCatchedFreezeMessage_descriptor_,
      ResCatchedFreezeMessage::default_instance_,
      ResCatchedFreezeMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCatchedFreezeMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCatchedFreezeMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResCatchedFreezeMessage));
  ResCatchedMessage_descriptor_ = file->message_type(10);
  static const int ResCatchedMessage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCatchedMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCatchedMessage, bulletid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCatchedMessage, combo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCatchedMessage, goldnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCatchedMessage, totalnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCatchedMessage, fishcatchedlist_),
  };
  ResCatchedMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResCatchedMessage_descriptor_,
      ResCatchedMessage::default_instance_,
      ResCatchedMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCatchedMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCatchedMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResCatchedMessage));
  FishCatchedInfo_descriptor_ = file->message_type(11);
  static const int FishCatchedInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishCatchedInfo, catchevent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishCatchedInfo, fishid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishCatchedInfo, nreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishCatchedInfo, lightingfishid_),
  };
  FishCatchedInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FishCatchedInfo_descriptor_,
      FishCatchedInfo::default_instance_,
      FishCatchedInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishCatchedInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishCatchedInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FishCatchedInfo));
  ResClearSceneMessage_descriptor_ = file->message_type(12);
  static const int ResClearSceneMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResClearSceneMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResClearSceneMessage, cleartype_),
  };
  ResClearSceneMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResClearSceneMessage_descriptor_,
      ResClearSceneMessage::default_instance_,
      ResClearSceneMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResClearSceneMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResClearSceneMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResClearSceneMessage));
  ResPlayerJoinMessage_descriptor_ = file->message_type(13);
  static const int ResPlayerJoinMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResPlayerJoinMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResPlayerJoinMessage, playerdata_),
  };
  ResPlayerJoinMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResPlayerJoinMessage_descriptor_,
      ResPlayerJoinMessage::default_instance_,
      ResPlayerJoinMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResPlayerJoinMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResPlayerJoinMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResPlayerJoinMessage));
  PlayerData_descriptor_ = file->message_type(14);
  static const int PlayerData_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, headicon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, goldnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, launchertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, rateindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, energy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, bulletcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, score_),
  };
  PlayerData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerData_descriptor_,
      PlayerData::default_instance_,
      PlayerData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerData));
  ReqChangeLauncherMessage_descriptor_ = file->message_type(15);
  static const int ReqChangeLauncherMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChangeLauncherMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChangeLauncherMessage, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChangeLauncherMessage, launchertype_),
  };
  ReqChangeLauncherMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqChangeLauncherMessage_descriptor_,
      ReqChangeLauncherMessage::default_instance_,
      ReqChangeLauncherMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChangeLauncherMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChangeLauncherMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqChangeLauncherMessage));
  ResChangeLauncherMessage_descriptor_ = file->message_type(16);
  static const int ResChangeLauncherMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResChangeLauncherMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResChangeLauncherMessage, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResChangeLauncherMessage, launchertype_),
  };
  ResChangeLauncherMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResChangeLauncherMessage_descriptor_,
      ResChangeLauncherMessage::default_instance_,
      ResChangeLauncherMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResChangeLauncherMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResChangeLauncherMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResChangeLauncherMessage));
  ReqChangeRateMessage_descriptor_ = file->message_type(17);
  static const int ReqChangeRateMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChangeRateMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChangeRateMessage, uprodownrate_),
  };
  ReqChangeRateMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqChangeRateMessage_descriptor_,
      ReqChangeRateMessage::default_instance_,
      ReqChangeRateMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChangeRateMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChangeRateMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqChangeRateMessage));
  ResChangeRateMessage_descriptor_ = file->message_type(18);
  static const int ResChangeRateMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResChangeRateMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResChangeRateMessage, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResChangeRateMessage, rateindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResChangeRateMessage, iscanuserate_),
  };
  ResChangeRateMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResChangeRateMessage_descriptor_,
      ResChangeRateMessage::default_instance_,
      ResChangeRateMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResChangeRateMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResChangeRateMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResChangeRateMessage));
  SyncBulletData_descriptor_ = file->message_type(19);
  static const int SyncBulletData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncBulletData, bulletid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncBulletData, degree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncBulletData, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncBulletData, bullettype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncBulletData, rateidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncBulletData, reboundcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncBulletData, lockfishid_),
  };
  SyncBulletData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncBulletData_descriptor_,
      SyncBulletData::default_instance_,
      SyncBulletData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncBulletData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncBulletData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncBulletData));
  ResSyncBulletDataMessage_descriptor_ = file->message_type(20);
  static const int ResSyncBulletDataMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResSyncBulletDataMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResSyncBulletDataMessage, syncbulletdata_),
  };
  ResSyncBulletDataMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResSyncBulletDataMessage_descriptor_,
      ResSyncBulletDataMessage::default_instance_,
      ResSyncBulletDataMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResSyncBulletDataMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResSyncBulletDataMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResSyncBulletDataMessage));
  ReqLeaveGameMessage_descriptor_ = file->message_type(21);
  static const int ReqLeaveGameMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLeaveGameMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLeaveGameMessage, seat_),
  };
  ReqLeaveGameMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqLeaveGameMessage_descriptor_,
      ReqLeaveGameMessage::default_instance_,
      ReqLeaveGameMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLeaveGameMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLeaveGameMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqLeaveGameMessage));
  ResLeaveGameMessage_descriptor_ = file->message_type(22);
  static const int ResLeaveGameMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResLeaveGameMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResLeaveGameMessage, seat_),
  };
  ResLeaveGameMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResLeaveGameMessage_descriptor_,
      ResLeaveGameMessage::default_instance_,
      ResLeaveGameMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResLeaveGameMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResLeaveGameMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResLeaveGameMessage));
  ReqLookUpPlayerInfoMessage_descriptor_ = file->message_type(23);
  static const int ReqLookUpPlayerInfoMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLookUpPlayerInfoMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLookUpPlayerInfoMessage, playerid_),
  };
  ReqLookUpPlayerInfoMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqLookUpPlayerInfoMessage_descriptor_,
      ReqLookUpPlayerInfoMessage::default_instance_,
      ReqLookUpPlayerInfoMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLookUpPlayerInfoMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLookUpPlayerInfoMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqLookUpPlayerInfoMessage));
  ResLookUpPlayerInfoMessage_descriptor_ = file->message_type(24);
  static const int ResLookUpPlayerInfoMessage_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResLookUpPlayerInfoMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResLookUpPlayerInfoMessage, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResLookUpPlayerInfoMessage, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResLookUpPlayerInfoMessage, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResLookUpPlayerInfoMessage, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResLookUpPlayerInfoMessage, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResLookUpPlayerInfoMessage, titleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResLookUpPlayerInfoMessage, gamewinmaxmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResLookUpPlayerInfoMessage, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResLookUpPlayerInfoMessage, charmvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResLookUpPlayerInfoMessage, signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResLookUpPlayerInfoMessage, headicon_),
  };
  ResLookUpPlayerInfoMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResLookUpPlayerInfoMessage_descriptor_,
      ResLookUpPlayerInfoMessage::default_instance_,
      ResLookUpPlayerInfoMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResLookUpPlayerInfoMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResLookUpPlayerInfoMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResLookUpPlayerInfoMessage));
  ResConnectFinishMessage_descriptor_ = file->message_type(25);
  static const int ResConnectFinishMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResConnectFinishMessage, msgid_),
  };
  ResConnectFinishMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResConnectFinishMessage_descriptor_,
      ResConnectFinishMessage::default_instance_,
      ResConnectFinishMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResConnectFinishMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResConnectFinishMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResConnectFinishMessage));
  ReqStartSyncFishMessage_descriptor_ = file->message_type(26);
  static const int ReqStartSyncFishMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqStartSyncFishMessage, msgid_),
  };
  ReqStartSyncFishMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqStartSyncFishMessage_descriptor_,
      ReqStartSyncFishMessage::default_instance_,
      ReqStartSyncFishMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqStartSyncFishMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqStartSyncFishMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqStartSyncFishMessage));
  ResPlayerTickOutMessage_descriptor_ = file->message_type(27);
  static const int ResPlayerTickOutMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResPlayerTickOutMessage, msgid_),
  };
  ResPlayerTickOutMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResPlayerTickOutMessage_descriptor_,
      ResPlayerTickOutMessage::default_instance_,
      ResPlayerTickOutMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResPlayerTickOutMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResPlayerTickOutMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResPlayerTickOutMessage));
  ResSyncAddMoneyMessage_descriptor_ = file->message_type(28);
  static const int ResSyncAddMoneyMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResSyncAddMoneyMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResSyncAddMoneyMessage, add_goldnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResSyncAddMoneyMessage, reason_),
  };
  ResSyncAddMoneyMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResSyncAddMoneyMessage_descriptor_,
      ResSyncAddMoneyMessage::default_instance_,
      ResSyncAddMoneyMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResSyncAddMoneyMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResSyncAddMoneyMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResSyncAddMoneyMessage));
  ResUseGoodsKBMessage_descriptor_ = file->message_type(29);
  static const int ResUseGoodsKBMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResUseGoodsKBMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResUseGoodsKBMessage, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResUseGoodsKBMessage, keeptime_),
  };
  ResUseGoodsKBMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResUseGoodsKBMessage_descriptor_,
      ResUseGoodsKBMessage::default_instance_,
      ResUseGoodsKBMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResUseGoodsKBMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResUseGoodsKBMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResUseGoodsKBMessage));
  ResUseGoodsBDMessage_descriptor_ = file->message_type(30);
  static const int ResUseGoodsBDMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResUseGoodsBDMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResUseGoodsBDMessage, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResUseGoodsBDMessage, keeptime_),
  };
  ResUseGoodsBDMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResUseGoodsBDMessage_descriptor_,
      ResUseGoodsBDMessage::default_instance_,
      ResUseGoodsBDMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResUseGoodsBDMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResUseGoodsBDMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResUseGoodsBDMessage));
  Protos_Game60Fishing_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Game60_5fFishingMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResArenaStartInfoMessage_descriptor_, &ResArenaStartInfoMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqEnterFishServerMessage_descriptor_, &ReqEnterFishServerMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResEnterFishServerMessage_descriptor_, &ResEnterFishServerMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqJoinRoomMessage_descriptor_, &ReqJoinRoomMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResJoinRoomMessage_descriptor_, &ResJoinRoomMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResCmdFishMessage_descriptor_, &ResCmdFishMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResCmdSyncFishMessage_descriptor_, &ResCmdSyncFishMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqBulletMessage_descriptor_, &ReqBulletMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResBulletMessage_descriptor_, &ResBulletMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResCatchedFreezeMessage_descriptor_, &ResCatchedFreezeMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResCatchedMessage_descriptor_, &ResCatchedMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FishCatchedInfo_descriptor_, &FishCatchedInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResClearSceneMessage_descriptor_, &ResClearSceneMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResPlayerJoinMessage_descriptor_, &ResPlayerJoinMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerData_descriptor_, &PlayerData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqChangeLauncherMessage_descriptor_, &ReqChangeLauncherMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResChangeLauncherMessage_descriptor_, &ResChangeLauncherMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqChangeRateMessage_descriptor_, &ReqChangeRateMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResChangeRateMessage_descriptor_, &ResChangeRateMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncBulletData_descriptor_, &SyncBulletData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResSyncBulletDataMessage_descriptor_, &ResSyncBulletDataMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqLeaveGameMessage_descriptor_, &ReqLeaveGameMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResLeaveGameMessage_descriptor_, &ResLeaveGameMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqLookUpPlayerInfoMessage_descriptor_, &ReqLookUpPlayerInfoMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResLookUpPlayerInfoMessage_descriptor_, &ResLookUpPlayerInfoMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResConnectFinishMessage_descriptor_, &ResConnectFinishMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqStartSyncFishMessage_descriptor_, &ReqStartSyncFishMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResPlayerTickOutMessage_descriptor_, &ResPlayerTickOutMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResSyncAddMoneyMessage_descriptor_, &ResSyncAddMoneyMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResUseGoodsKBMessage_descriptor_, &ResUseGoodsKBMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResUseGoodsBDMessage_descriptor_, &ResUseGoodsBDMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Game60_5fFishingMessage_2eproto() {
  delete ResArenaStartInfoMessage::default_instance_;
  delete ResArenaStartInfoMessage_reflection_;
  delete ReqEnterFishServerMessage::default_instance_;
  delete ReqEnterFishServerMessage_reflection_;
  delete ResEnterFishServerMessage::default_instance_;
  delete ResEnterFishServerMessage_reflection_;
  delete ReqJoinRoomMessage::default_instance_;
  delete ReqJoinRoomMessage_reflection_;
  delete ResJoinRoomMessage::default_instance_;
  delete ResJoinRoomMessage_reflection_;
  delete ResCmdFishMessage::default_instance_;
  delete ResCmdFishMessage_reflection_;
  delete ResCmdSyncFishMessage::default_instance_;
  delete ResCmdSyncFishMessage_reflection_;
  delete ReqBulletMessage::default_instance_;
  delete ReqBulletMessage_reflection_;
  delete ResBulletMessage::default_instance_;
  delete ResBulletMessage_reflection_;
  delete ResCatchedFreezeMessage::default_instance_;
  delete ResCatchedFreezeMessage_reflection_;
  delete ResCatchedMessage::default_instance_;
  delete ResCatchedMessage_reflection_;
  delete FishCatchedInfo::default_instance_;
  delete FishCatchedInfo_reflection_;
  delete ResClearSceneMessage::default_instance_;
  delete ResClearSceneMessage_reflection_;
  delete ResPlayerJoinMessage::default_instance_;
  delete ResPlayerJoinMessage_reflection_;
  delete PlayerData::default_instance_;
  delete PlayerData_reflection_;
  delete ReqChangeLauncherMessage::default_instance_;
  delete ReqChangeLauncherMessage_reflection_;
  delete ResChangeLauncherMessage::default_instance_;
  delete ResChangeLauncherMessage_reflection_;
  delete ReqChangeRateMessage::default_instance_;
  delete ReqChangeRateMessage_reflection_;
  delete ResChangeRateMessage::default_instance_;
  delete ResChangeRateMessage_reflection_;
  delete SyncBulletData::default_instance_;
  delete SyncBulletData_reflection_;
  delete ResSyncBulletDataMessage::default_instance_;
  delete ResSyncBulletDataMessage_reflection_;
  delete ReqLeaveGameMessage::default_instance_;
  delete ReqLeaveGameMessage_reflection_;
  delete ResLeaveGameMessage::default_instance_;
  delete ResLeaveGameMessage_reflection_;
  delete ReqLookUpPlayerInfoMessage::default_instance_;
  delete ReqLookUpPlayerInfoMessage_reflection_;
  delete ResLookUpPlayerInfoMessage::default_instance_;
  delete ResLookUpPlayerInfoMessage_reflection_;
  delete ResConnectFinishMessage::default_instance_;
  delete ResConnectFinishMessage_reflection_;
  delete ReqStartSyncFishMessage::default_instance_;
  delete ReqStartSyncFishMessage_reflection_;
  delete ResPlayerTickOutMessage::default_instance_;
  delete ResPlayerTickOutMessage_reflection_;
  delete ResSyncAddMoneyMessage::default_instance_;
  delete ResSyncAddMoneyMessage_reflection_;
  delete ResUseGoodsKBMessage::default_instance_;
  delete ResUseGoodsKBMessage_reflection_;
  delete ResUseGoodsBDMessage::default_instance_;
  delete ResUseGoodsBDMessage_reflection_;
}

void protobuf_AddDesc_Game60_5fFishingMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033Game60_FishingMessage.proto\022\016com.game."
    "proto\"\205\001\n\030ResArenaStartInfoMessage\022F\n\005ms"
    "gID\030\001 \001(\0162$.com.game.proto.Protos_Game60"
    "Fishing:\021ResArenaStartInfo\022\r\n\005start\030\002 \001("
    "\010\022\022\n\nwaitPlayer\030\003 \001(\005\"z\n\031ReqEnterFishSer"
    "verMessage\022G\n\005msgID\030\001 \001(\0162$.com.game.pro"
    "to.Protos_Game60Fishing:\022ReqEnterFishSer"
    "ver\022\024\n\014playerOnlyID\030\002 \002(\003\"y\n\031ResEnterFis"
    "hServerMessage\022G\n\005msgID\030\001 \001(\0162$.com.game"
    ".proto.Protos_Game60Fishing:\022ResEnterFis"
    "hServer\022\023\n\013serverState\030\002 \002(\005\"w\n\022ReqJoinR"
    "oomMessage\022@\n\005msgID\030\001 \001(\0162$.com.game.pro"
    "to.Protos_Game60Fishing:\013ReqJoinRoom\022\016\n\006"
    "roomID\030\002 \002(\005\022\017\n\007isArena\030\003 \001(\005\"\277\001\n\022ResJoi"
    "nRoomMessage\022@\n\005msgID\030\001 \001(\0162$.com.game.p"
    "roto.Protos_Game60Fishing:\013ResJoinRoom\022\016"
    "\n\006result\030\002 \002(\010\022\016\n\006roomID\030\003 \002(\005\022\027\n\017backgr"
    "oundImage\030\004 \001(\005\022.\n\nplayerData\030\005 \001(\0132\032.co"
    "m.game.proto.PlayerData\"\206\001\n\021ResCmdFishMe"
    "ssage\022\?\n\005msgID\030\001 \001(\0162$.com.game.proto.Pr"
    "otos_Game60Fishing:\nResCmdFish\022\017\n\007groupI"
    "D\030\002 \002(\005\022\017\n\007startID\030\003 \002(\005\022\016\n\006pathID\030\004 \002(\005"
    "\"\373\002\n\025ResCmdSyncFishMessage\022C\n\005msgID\030\001 \001("
    "\0162$.com.game.proto.Protos_Game60Fishing:"
    "\016ResCmdSyncFish\022\016\n\006fishID\030\002 \002(\005\022\017\n\007group"
    "ID\030\003 \002(\005\022\020\n\010fishTime\030\004 \002(\001\022\021\n\tpathGroup\030"
    "\005 \002(\005\022\017\n\007pathIdx\030\006 \002(\005\022\025\n\risActiveEvent\030"
    "\007 \001(\010\022\023\n\013elapsedTime\030\010 \001(\005\022\021\n\tdelayType\030"
    "\t \001(\005\022\024\n\014delayScaling\030\n \001(\005\022\026\n\016delayDura"
    "tion1\030\013 \001(\005\022\026\n\016delayDuration2\030\014 \001(\005\022\026\n\016d"
    "elayDuration3\030\r \001(\005\022\030\n\020delayCurrentTime\030"
    "\016 \001(\005\022\017\n\007package\030\017 \001(\005\"\213\001\n\020ReqBulletMess"
    "age\022>\n\005msgID\030\001 \001(\0162$.com.game.proto.Prot"
    "os_Game60Fishing:\tReqBullet\022\r\n\005angle\030\002 \002"
    "(\005\022\022\n\nlockFishID\030\003 \001(\005\022\024\n\014launcherType\030\004"
    " \002(\005\"\303\001\n\020ResBulletMessage\022>\n\005msgID\030\001 \001(\016"
    "2$.com.game.proto.Protos_Game60Fishing:\t"
    "ResBullet\022\020\n\010bulletID\030\002 \002(\005\022\024\n\014launcherT"
    "ype\030\003 \002(\005\022\r\n\005angle\030\004 \002(\005\022\016\n\006energy\030\005 \001(\005"
    "\022\024\n\014reboundCount\030\006 \001(\005\022\022\n\nlockFishID\030\007 \001"
    "(\005\"\336\001\n\027ResCatchedFreezeMessage\022E\n\005msgID\030"
    "\001 \001(\0162$.com.game.proto.Protos_Game60Fish"
    "ing:\020ResCatchedFreeze\022\020\n\010bulletID\030\002 \002(\005\022"
    "\r\n\005combo\030\003 \002(\005\022\017\n\007goldNum\030\004 \002(\005\022\020\n\010Total"
    "Num\030\005 \001(\005\0228\n\017fishCatchedList\030\006 \003(\0132\037.com"
    ".game.proto.FishCatchedInfo\"\322\001\n\021ResCatch"
    "edMessage\022\?\n\005msgID\030\001 \001(\0162$.com.game.prot"
    "o.Protos_Game60Fishing:\nResCatched\022\020\n\010bu"
    "lletID\030\002 \002(\005\022\r\n\005combo\030\003 \002(\005\022\017\n\007goldNum\030\004"
    " \002(\005\022\020\n\010TotalNum\030\005 \001(\005\0228\n\017fishCatchedLis"
    "t\030\006 \003(\0132\037.com.game.proto.FishCatchedInfo"
    "\"^\n\017FishCatchedInfo\022\022\n\ncatchEvent\030\001 \001(\005\022"
    "\016\n\006fishID\030\002 \002(\005\022\017\n\007nReward\030\003 \001(\005\022\026\n\016ligh"
    "tingFishID\030\004 \001(\005\"m\n\024ResClearSceneMessage"
    "\022B\n\005msgID\030\001 \001(\0162$.com.game.proto.Protos_"
    "Game60Fishing:\rResClearScene\022\021\n\tclearTyp"
    "e\030\002 \002(\005\"\212\001\n\024ResPlayerJoinMessage\022B\n\005msgI"
    "D\030\001 \001(\0162$.com.game.proto.Protos_Game60Fi"
    "shing:\rResPlayerJoin\022.\n\nplayerData\030\002 \002(\013"
    "2\032.com.game.proto.PlayerData\"\355\001\n\nPlayerD"
    "ata\022\020\n\010playerId\030\001 \001(\003\022\022\n\nplayerName\030\002 \001("
    "\t\022\013\n\003sex\030\003 \001(\005\022\020\n\010headicon\030\004 \001(\005\022\014\n\004icon"
    "\030\005 \001(\t\022\020\n\010vipLevel\030\006 \001(\005\022\017\n\007goldNum\030\007 \001("
    "\003\022\014\n\004seat\030\010 \001(\005\022\024\n\014launcherType\030\t \001(\005\022\021\n"
    "\trateIndex\030\n \001(\005\022\016\n\006energy\030\013 \001(\005\022\023\n\013bull"
    "etCount\030\014 \001(\005\022\r\n\005score\030\r \001(\003\"\206\001\n\030ReqChan"
    "geLauncherMessage\022F\n\005msgID\030\001 \001(\0162$.com.g"
    "ame.proto.Protos_Game60Fishing:\021ReqChang"
    "eLauncher\022\014\n\004seat\030\002 \002(\005\022\024\n\014launcherType\030"
    "\003 \002(\005\"\206\001\n\030ResChangeLauncherMessage\022F\n\005ms"
    "gID\030\001 \001(\0162$.com.game.proto.Protos_Game60"
    "Fishing:\021ResChangeLauncher\022\014\n\004seat\030\002 \002(\005"
    "\022\024\n\014launcherType\030\003 \002(\005\"p\n\024ReqChangeRateM"
    "essage\022B\n\005msgID\030\001 \001(\0162$.com.game.proto.P"
    "rotos_Game60Fishing:\rReqChangeRate\022\024\n\014Up"
    "RoDownRate\030\002 \002(\010\"\221\001\n\024ResChangeRateMessag"
    "e\022B\n\005msgID\030\001 \001(\0162$.com.game.proto.Protos"
    "_Game60Fishing:\rResChangeRate\022\014\n\004Seat\030\002 "
    "\002(\005\022\021\n\tRateIndex\030\003 \002(\005\022\024\n\014IsCanUseRate\030\004"
    " \002(\010\"\217\001\n\016SyncBulletData\022\020\n\010BulletID\030\001 \001("
    "\r\022\016\n\006Degree\030\002 \001(\005\022\014\n\004Time\030\003 \001(\r\022\022\n\nBulle"
    "tType\030\004 \001(\005\022\017\n\007RateIdx\030\005 \001(\005\022\024\n\014ReboundC"
    "ount\030\006 \001(\005\022\022\n\nLockFishID\030\007 \001(\r\"\232\001\n\030ResSy"
    "ncBulletDataMessage\022F\n\005msgID\030\001 \001(\0162$.com"
    ".game.proto.Protos_Game60Fishing:\021ResSyn"
    "cBulletData\0226\n\016syncBulletData\030\002 \003(\0132\036.co"
    "m.game.proto.SyncBulletData\"f\n\023ReqLeaveG"
    "ameMessage\022A\n\005msgID\030\001 \001(\0162$.com.game.pro"
    "to.Protos_Game60Fishing:\014ReqLeaveGame\022\014\n"
    "\004seat\030\002 \002(\005\"f\n\023ResLeaveGameMessage\022A\n\005ms"
    "gID\030\001 \001(\0162$.com.game.proto.Protos_Game60"
    "Fishing:\014ResLeaveGame\022\014\n\004seat\030\002 \002(\005\"x\n\032R"
    "eqLookUpPlayerInfoMessage\022H\n\005msgID\030\001 \001(\016"
    "2$.com.game.proto.Protos_Game60Fishing:\023"
    "ReqLookUpPlayerInfo\022\020\n\010playerId\030\002 \001(\003\"\245\002"
    "\n\032ResLookUpPlayerInfoMessage\022H\n\005msgID\030\001 "
    "\001(\0162$.com.game.proto.Protos_Game60Fishin"
    "g:\023ResLookUpPlayerInfo\022\020\n\010playerId\030\002 \001(\003"
    "\022\020\n\010vipLevel\030\003 \001(\005\022\014\n\004icon\030\004 \001(\t\022\014\n\004name"
    "\030\005 \001(\t\022\013\n\003sex\030\006 \001(\005\022\017\n\007titleId\030\007 \001(\005\022\027\n\017"
    "gameWinMaxMoney\030\010 \001(\001\022\r\n\005money\030\t \001(\001\022\022\n\n"
    "charmValue\030\n \001(\005\022\021\n\tsignature\030\013 \001(\t\022\020\n\010h"
    "eadIcon\030\014 \001(\005\"`\n\027ResConnectFinishMessage"
    "\022E\n\005msgID\030\001 \001(\0162$.com.game.proto.Protos_"
    "Game60Fishing:\020ResConnectFinish\"`\n\027ReqSt"
    "artSyncFishMessage\022E\n\005msgID\030\001 \001(\0162$.com."
    "game.proto.Protos_Game60Fishing:\020ReqStar"
    "tSyncFish\"`\n\027ResPlayerTickOutMessage\022E\n\005"
    "msgID\030\001 \001(\0162$.com.game.proto.Protos_Game"
    "60Fishing:\020ResPlayerTickOut\"\203\001\n\026ResSyncA"
    "ddMoneyMessage\022D\n\005msgID\030\001 \001(\0162$.com.game"
    ".proto.Protos_Game60Fishing:\017ResSyncAddM"
    "oney\022\023\n\013add_goldNum\030\002 \002(\003\022\016\n\006reason\030\004 \001("
    "\005\"|\n\024ResUseGoodsKBMessage\022B\n\005msgID\030\001 \001(\016"
    "2$.com.game.proto.Protos_Game60Fishing:\r"
    "ResUseGoodsKB\022\016\n\006seatID\030\002 \002(\005\022\020\n\010keepTim"
    "e\030\003 \002(\r\"|\n\024ResUseGoodsBDMessage\022B\n\005msgID"
    "\030\001 \001(\0162$.com.game.proto.Protos_Game60Fis"
    "hing:\rResUseGoodsBD\022\016\n\006seatID\030\002 \002(\005\022\020\n\010k"
    "eepTime\030\003 \002(\r*\347\004\n\024Protos_Game60Fishing\022\027"
    "\n\022ReqEnterFishServer\020\361.\022\027\n\022ResEnterFishS"
    "erver\020\362.\022\020\n\013ReqJoinRoom\020\363.\022\020\n\013ResJoinRoo"
    "m\020\364.\022\017\n\nResCmdFish\020\366.\022\023\n\016ResCmdSyncFish\020"
    "\370.\022\016\n\tReqBullet\020\371.\022\016\n\tResBullet\020\372.\022\017\n\nRe"
    "sCatched\020\374.\022\022\n\rResClearScene\020\376.\022\022\n\rResPl"
    "ayerJoin\020\200/\022\026\n\021ReqChangeLauncher\020\201/\022\026\n\021R"
    "esChangeLauncher\020\202/\022\022\n\rReqChangeRate\020\203/\022"
    "\022\n\rResChangeRate\020\204/\022\025\n\020ResCatchedFreeze\020"
    "\206/\022\026\n\021ResSyncBulletData\020\210/\022\021\n\014ReqLeaveGa"
    "me\020\211/\022\021\n\014ResLeaveGame\020\212/\022\030\n\023ReqLookUpPla"
    "yerInfo\020\213/\022\030\n\023ResLookUpPlayerInfo\020\214/\022\025\n\020"
    "ResConnectFinish\020\216/\022\025\n\020ReqStartSyncFish\020"
    "\217/\022\025\n\020ResPlayerTickOut\020\220/\022\024\n\017ResSyncAddM"
    "oney\020\222/\022\022\n\rResUseGoodsKB\020\224/\022\022\n\rResUseGoo"
    "dsBD\020\226/\022\026\n\021ResArenaStartInfo\020\230/", 5391);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Game60_FishingMessage.proto", &protobuf_RegisterTypes);
  ResArenaStartInfoMessage::default_instance_ = new ResArenaStartInfoMessage();
  ReqEnterFishServerMessage::default_instance_ = new ReqEnterFishServerMessage();
  ResEnterFishServerMessage::default_instance_ = new ResEnterFishServerMessage();
  ReqJoinRoomMessage::default_instance_ = new ReqJoinRoomMessage();
  ResJoinRoomMessage::default_instance_ = new ResJoinRoomMessage();
  ResCmdFishMessage::default_instance_ = new ResCmdFishMessage();
  ResCmdSyncFishMessage::default_instance_ = new ResCmdSyncFishMessage();
  ReqBulletMessage::default_instance_ = new ReqBulletMessage();
  ResBulletMessage::default_instance_ = new ResBulletMessage();
  ResCatchedFreezeMessage::default_instance_ = new ResCatchedFreezeMessage();
  ResCatchedMessage::default_instance_ = new ResCatchedMessage();
  FishCatchedInfo::default_instance_ = new FishCatchedInfo();
  ResClearSceneMessage::default_instance_ = new ResClearSceneMessage();
  ResPlayerJoinMessage::default_instance_ = new ResPlayerJoinMessage();
  PlayerData::default_instance_ = new PlayerData();
  ReqChangeLauncherMessage::default_instance_ = new ReqChangeLauncherMessage();
  ResChangeLauncherMessage::default_instance_ = new ResChangeLauncherMessage();
  ReqChangeRateMessage::default_instance_ = new ReqChangeRateMessage();
  ResChangeRateMessage::default_instance_ = new ResChangeRateMessage();
  SyncBulletData::default_instance_ = new SyncBulletData();
  ResSyncBulletDataMessage::default_instance_ = new ResSyncBulletDataMessage();
  ReqLeaveGameMessage::default_instance_ = new ReqLeaveGameMessage();
  ResLeaveGameMessage::default_instance_ = new ResLeaveGameMessage();
  ReqLookUpPlayerInfoMessage::default_instance_ = new ReqLookUpPlayerInfoMessage();
  ResLookUpPlayerInfoMessage::default_instance_ = new ResLookUpPlayerInfoMessage();
  ResConnectFinishMessage::default_instance_ = new ResConnectFinishMessage();
  ReqStartSyncFishMessage::default_instance_ = new ReqStartSyncFishMessage();
  ResPlayerTickOutMessage::default_instance_ = new ResPlayerTickOutMessage();
  ResSyncAddMoneyMessage::default_instance_ = new ResSyncAddMoneyMessage();
  ResUseGoodsKBMessage::default_instance_ = new ResUseGoodsKBMessage();
  ResUseGoodsBDMessage::default_instance_ = new ResUseGoodsBDMessage();
  ResArenaStartInfoMessage::default_instance_->InitAsDefaultInstance();
  ReqEnterFishServerMessage::default_instance_->InitAsDefaultInstance();
  ResEnterFishServerMessage::default_instance_->InitAsDefaultInstance();
  ReqJoinRoomMessage::default_instance_->InitAsDefaultInstance();
  ResJoinRoomMessage::default_instance_->InitAsDefaultInstance();
  ResCmdFishMessage::default_instance_->InitAsDefaultInstance();
  ResCmdSyncFishMessage::default_instance_->InitAsDefaultInstance();
  ReqBulletMessage::default_instance_->InitAsDefaultInstance();
  ResBulletMessage::default_instance_->InitAsDefaultInstance();
  ResCatchedFreezeMessage::default_instance_->InitAsDefaultInstance();
  ResCatchedMessage::default_instance_->InitAsDefaultInstance();
  FishCatchedInfo::default_instance_->InitAsDefaultInstance();
  ResClearSceneMessage::default_instance_->InitAsDefaultInstance();
  ResPlayerJoinMessage::default_instance_->InitAsDefaultInstance();
  PlayerData::default_instance_->InitAsDefaultInstance();
  ReqChangeLauncherMessage::default_instance_->InitAsDefaultInstance();
  ResChangeLauncherMessage::default_instance_->InitAsDefaultInstance();
  ReqChangeRateMessage::default_instance_->InitAsDefaultInstance();
  ResChangeRateMessage::default_instance_->InitAsDefaultInstance();
  SyncBulletData::default_instance_->InitAsDefaultInstance();
  ResSyncBulletDataMessage::default_instance_->InitAsDefaultInstance();
  ReqLeaveGameMessage::default_instance_->InitAsDefaultInstance();
  ResLeaveGameMessage::default_instance_->InitAsDefaultInstance();
  ReqLookUpPlayerInfoMessage::default_instance_->InitAsDefaultInstance();
  ResLookUpPlayerInfoMessage::default_instance_->InitAsDefaultInstance();
  ResConnectFinishMessage::default_instance_->InitAsDefaultInstance();
  ReqStartSyncFishMessage::default_instance_->InitAsDefaultInstance();
  ResPlayerTickOutMessage::default_instance_->InitAsDefaultInstance();
  ResSyncAddMoneyMessage::default_instance_->InitAsDefaultInstance();
  ResUseGoodsKBMessage::default_instance_->InitAsDefaultInstance();
  ResUseGoodsBDMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Game60_5fFishingMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Game60_5fFishingMessage_2eproto {
  StaticDescriptorInitializer_Game60_5fFishingMessage_2eproto() {
    protobuf_AddDesc_Game60_5fFishingMessage_2eproto();
  }
} static_descriptor_initializer_Game60_5fFishingMessage_2eproto_;

const ::google::protobuf::EnumDescriptor* Protos_Game60Fishing_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Protos_Game60Fishing_descriptor_;
}
bool Protos_Game60Fishing_IsValid(int value) {
  switch(value) {
    case 6001:
    case 6002:
    case 6003:
    case 6004:
    case 6006:
    case 6008:
    case 6009:
    case 6010:
    case 6012:
    case 6014:
    case 6016:
    case 6017:
    case 6018:
    case 6019:
    case 6020:
    case 6022:
    case 6024:
    case 6025:
    case 6026:
    case 6027:
    case 6028:
    case 6030:
    case 6031:
    case 6032:
    case 6034:
    case 6036:
    case 6038:
    case 6040:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ResArenaStartInfoMessage::kMsgIDFieldNumber;
const int ResArenaStartInfoMessage::kStartFieldNumber;
const int ResArenaStartInfoMessage::kWaitPlayerFieldNumber;
#endif  // !_MSC_VER

ResArenaStartInfoMessage::ResArenaStartInfoMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResArenaStartInfoMessage::InitAsDefaultInstance() {
}

ResArenaStartInfoMessage::ResArenaStartInfoMessage(const ResArenaStartInfoMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResArenaStartInfoMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 6040;
  start_ = false;
  waitplayer_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResArenaStartInfoMessage::~ResArenaStartInfoMessage() {
  SharedDtor();
}

void ResArenaStartInfoMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResArenaStartInfoMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResArenaStartInfoMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResArenaStartInfoMessage_descriptor_;
}

const ResArenaStartInfoMessage& ResArenaStartInfoMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game60_5fFishingMessage_2eproto();  return *default_instance_;
}

ResArenaStartInfoMessage* ResArenaStartInfoMessage::default_instance_ = NULL;

ResArenaStartInfoMessage* ResArenaStartInfoMessage::New() const {
  return new ResArenaStartInfoMessage;
}

void ResArenaStartInfoMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 6040;
    start_ = false;
    waitplayer_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResArenaStartInfoMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResArenaStartInfo];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Game60Fishing_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Game60Fishing >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_start;
        break;
      }
      
      // optional bool start = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &start_)));
          set_has_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_waitPlayer;
        break;
      }
      
      // optional int32 waitPlayer = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_waitPlayer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &waitplayer_)));
          set_has_waitplayer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResArenaStartInfoMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResArenaStartInfo];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // optional bool start = 2;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->start(), output);
  }
  
  // optional int32 waitPlayer = 3;
  if (has_waitplayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->waitplayer(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResArenaStartInfoMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResArenaStartInfo];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // optional bool start = 2;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->start(), target);
  }
  
  // optional int32 waitPlayer = 3;
  if (has_waitplayer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->waitplayer(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResArenaStartInfoMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResArenaStartInfo];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional bool start = 2;
    if (has_start()) {
      total_size += 1 + 1;
    }
    
    // optional int32 waitPlayer = 3;
    if (has_waitplayer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->waitplayer());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResArenaStartInfoMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResArenaStartInfoMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResArenaStartInfoMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResArenaStartInfoMessage::MergeFrom(const ResArenaStartInfoMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_waitplayer()) {
      set_waitplayer(from.waitplayer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResArenaStartInfoMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResArenaStartInfoMessage::CopyFrom(const ResArenaStartInfoMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResArenaStartInfoMessage::IsInitialized() const {
  
  return true;
}

void ResArenaStartInfoMessage::Swap(ResArenaStartInfoMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(start_, other->start_);
    std::swap(waitplayer_, other->waitplayer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResArenaStartInfoMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResArenaStartInfoMessage_descriptor_;
  metadata.reflection = ResArenaStartInfoMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqEnterFishServerMessage::kMsgIDFieldNumber;
const int ReqEnterFishServerMessage::kPlayerOnlyIDFieldNumber;
#endif  // !_MSC_VER

ReqEnterFishServerMessage::ReqEnterFishServerMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqEnterFishServerMessage::InitAsDefaultInstance() {
}

ReqEnterFishServerMessage::ReqEnterFishServerMessage(const ReqEnterFishServerMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqEnterFishServerMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 6001;
  playeronlyid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqEnterFishServerMessage::~ReqEnterFishServerMessage() {
  SharedDtor();
}

void ReqEnterFishServerMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqEnterFishServerMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqEnterFishServerMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqEnterFishServerMessage_descriptor_;
}

const ReqEnterFishServerMessage& ReqEnterFishServerMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game60_5fFishingMessage_2eproto();  return *default_instance_;
}

ReqEnterFishServerMessage* ReqEnterFishServerMessage::default_instance_ = NULL;

ReqEnterFishServerMessage* ReqEnterFishServerMessage::New() const {
  return new ReqEnterFishServerMessage;
}

void ReqEnterFishServerMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 6001;
    playeronlyid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqEnterFishServerMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ReqEnterFishServer];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Game60Fishing_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Game60Fishing >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerOnlyID;
        break;
      }
      
      // required int64 playerOnlyID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerOnlyID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playeronlyid_)));
          set_has_playeronlyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqEnterFishServerMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ReqEnterFishServer];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required int64 playerOnlyID = 2;
  if (has_playeronlyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->playeronlyid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqEnterFishServerMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ReqEnterFishServer];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required int64 playerOnlyID = 2;
  if (has_playeronlyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->playeronlyid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqEnterFishServerMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ReqEnterFishServer];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required int64 playerOnlyID = 2;
    if (has_playeronlyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playeronlyid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqEnterFishServerMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqEnterFishServerMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqEnterFishServerMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqEnterFishServerMessage::MergeFrom(const ReqEnterFishServerMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_playeronlyid()) {
      set_playeronlyid(from.playeronlyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqEnterFishServerMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqEnterFishServerMessage::CopyFrom(const ReqEnterFishServerMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqEnterFishServerMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void ReqEnterFishServerMessage::Swap(ReqEnterFishServerMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(playeronlyid_, other->playeronlyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqEnterFishServerMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqEnterFishServerMessage_descriptor_;
  metadata.reflection = ReqEnterFishServerMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResEnterFishServerMessage::kMsgIDFieldNumber;
const int ResEnterFishServerMessage::kServerStateFieldNumber;
#endif  // !_MSC_VER

ResEnterFishServerMessage::ResEnterFishServerMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResEnterFishServerMessage::InitAsDefaultInstance() {
}

ResEnterFishServerMessage::ResEnterFishServerMessage(const ResEnterFishServerMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResEnterFishServerMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 6002;
  serverstate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResEnterFishServerMessage::~ResEnterFishServerMessage() {
  SharedDtor();
}

void ResEnterFishServerMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResEnterFishServerMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResEnterFishServerMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResEnterFishServerMessage_descriptor_;
}

const ResEnterFishServerMessage& ResEnterFishServerMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game60_5fFishingMessage_2eproto();  return *default_instance_;
}

ResEnterFishServerMessage* ResEnterFishServerMessage::default_instance_ = NULL;

ResEnterFishServerMessage* ResEnterFishServerMessage::New() const {
  return new ResEnterFishServerMessage;
}

void ResEnterFishServerMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 6002;
    serverstate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResEnterFishServerMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResEnterFishServer];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Game60Fishing_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Game60Fishing >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_serverState;
        break;
      }
      
      // required int32 serverState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverstate_)));
          set_has_serverstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResEnterFishServerMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResEnterFishServer];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required int32 serverState = 2;
  if (has_serverstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->serverstate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResEnterFishServerMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResEnterFishServer];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required int32 serverState = 2;
  if (has_serverstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->serverstate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResEnterFishServerMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResEnterFishServer];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required int32 serverState = 2;
    if (has_serverstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverstate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResEnterFishServerMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResEnterFishServerMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResEnterFishServerMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResEnterFishServerMessage::MergeFrom(const ResEnterFishServerMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_serverstate()) {
      set_serverstate(from.serverstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResEnterFishServerMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResEnterFishServerMessage::CopyFrom(const ResEnterFishServerMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResEnterFishServerMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void ResEnterFishServerMessage::Swap(ResEnterFishServerMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(serverstate_, other->serverstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResEnterFishServerMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResEnterFishServerMessage_descriptor_;
  metadata.reflection = ResEnterFishServerMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqJoinRoomMessage::kMsgIDFieldNumber;
const int ReqJoinRoomMessage::kRoomIDFieldNumber;
const int ReqJoinRoomMessage::kIsArenaFieldNumber;
#endif  // !_MSC_VER

ReqJoinRoomMessage::ReqJoinRoomMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqJoinRoomMessage::InitAsDefaultInstance() {
}

ReqJoinRoomMessage::ReqJoinRoomMessage(const ReqJoinRoomMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqJoinRoomMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 6003;
  roomid_ = 0;
  isarena_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqJoinRoomMessage::~ReqJoinRoomMessage() {
  SharedDtor();
}

void ReqJoinRoomMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqJoinRoomMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqJoinRoomMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqJoinRoomMessage_descriptor_;
}

const ReqJoinRoomMessage& ReqJoinRoomMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game60_5fFishingMessage_2eproto();  return *default_instance_;
}

ReqJoinRoomMessage* ReqJoinRoomMessage::default_instance_ = NULL;

ReqJoinRoomMessage* ReqJoinRoomMessage::New() const {
  return new ReqJoinRoomMessage;
}

void ReqJoinRoomMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 6003;
    roomid_ = 0;
    isarena_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqJoinRoomMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ReqJoinRoom];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Game60Fishing_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Game60Fishing >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roomID;
        break;
      }
      
      // required int32 roomID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isArena;
        break;
      }
      
      // optional int32 isArena = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isArena:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isarena_)));
          set_has_isarena();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqJoinRoomMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ReqJoinRoom];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required int32 roomID = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }
  
  // optional int32 isArena = 3;
  if (has_isarena()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->isarena(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqJoinRoomMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ReqJoinRoom];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required int32 roomID = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }
  
  // optional int32 isArena = 3;
  if (has_isarena()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->isarena(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqJoinRoomMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ReqJoinRoom];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required int32 roomID = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }
    
    // optional int32 isArena = 3;
    if (has_isarena()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isarena());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqJoinRoomMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqJoinRoomMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqJoinRoomMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqJoinRoomMessage::MergeFrom(const ReqJoinRoomMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_isarena()) {
      set_isarena(from.isarena());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqJoinRoomMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqJoinRoomMessage::CopyFrom(const ReqJoinRoomMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqJoinRoomMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void ReqJoinRoomMessage::Swap(ReqJoinRoomMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(roomid_, other->roomid_);
    std::swap(isarena_, other->isarena_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqJoinRoomMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqJoinRoomMessage_descriptor_;
  metadata.reflection = ReqJoinRoomMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResJoinRoomMessage::kMsgIDFieldNumber;
const int ResJoinRoomMessage::kResultFieldNumber;
const int ResJoinRoomMessage::kRoomIDFieldNumber;
const int ResJoinRoomMessage::kBackgroundImageFieldNumber;
const int ResJoinRoomMessage::kPlayerDataFieldNumber;
#endif  // !_MSC_VER

ResJoinRoomMessage::ResJoinRoomMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResJoinRoomMessage::InitAsDefaultInstance() {
  playerdata_ = const_cast< ::com::game::proto::PlayerData*>(&::com::game::proto::PlayerData::default_instance());
}

ResJoinRoomMessage::ResJoinRoomMessage(const ResJoinRoomMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResJoinRoomMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 6004;
  result_ = false;
  roomid_ = 0;
  backgroundimage_ = 0;
  playerdata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResJoinRoomMessage::~ResJoinRoomMessage() {
  SharedDtor();
}

void ResJoinRoomMessage::SharedDtor() {
  if (this != default_instance_) {
    delete playerdata_;
  }
}

void ResJoinRoomMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResJoinRoomMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResJoinRoomMessage_descriptor_;
}

const ResJoinRoomMessage& ResJoinRoomMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game60_5fFishingMessage_2eproto();  return *default_instance_;
}

ResJoinRoomMessage* ResJoinRoomMessage::default_instance_ = NULL;

ResJoinRoomMessage* ResJoinRoomMessage::New() const {
  return new ResJoinRoomMessage;
}

void ResJoinRoomMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 6004;
    result_ = false;
    roomid_ = 0;
    backgroundimage_ = 0;
    if (has_playerdata()) {
      if (playerdata_ != NULL) playerdata_->::com::game::proto::PlayerData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResJoinRoomMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResJoinRoom];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Game60Fishing_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Game60Fishing >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }
      
      // required bool result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_roomID;
        break;
      }
      
      // required int32 roomID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_backgroundImage;
        break;
      }
      
      // optional int32 backgroundImage = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_backgroundImage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &backgroundimage_)));
          set_has_backgroundimage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_playerData;
        break;
      }
      
      // optional .com.game.proto.PlayerData playerData = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResJoinRoomMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResJoinRoom];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required bool result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->result(), output);
  }
  
  // required int32 roomID = 3;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->roomid(), output);
  }
  
  // optional int32 backgroundImage = 4;
  if (has_backgroundimage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->backgroundimage(), output);
  }
  
  // optional .com.game.proto.PlayerData playerData = 5;
  if (has_playerdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->playerdata(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResJoinRoomMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResJoinRoom];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required bool result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->result(), target);
  }
  
  // required int32 roomID = 3;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->roomid(), target);
  }
  
  // optional int32 backgroundImage = 4;
  if (has_backgroundimage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->backgroundimage(), target);
  }
  
  // optional .com.game.proto.PlayerData playerData = 5;
  if (has_playerdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->playerdata(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResJoinRoomMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResJoinRoom];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required bool result = 2;
    if (has_result()) {
      total_size += 1 + 1;
    }
    
    // required int32 roomID = 3;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }
    
    // optional int32 backgroundImage = 4;
    if (has_backgroundimage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->backgroundimage());
    }
    
    // optional .com.game.proto.PlayerData playerData = 5;
    if (has_playerdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerdata());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResJoinRoomMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResJoinRoomMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResJoinRoomMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResJoinRoomMessage::MergeFrom(const ResJoinRoomMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_backgroundimage()) {
      set_backgroundimage(from.backgroundimage());
    }
    if (from.has_playerdata()) {
      mutable_playerdata()->::com::game::proto::PlayerData::MergeFrom(from.playerdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResJoinRoomMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResJoinRoomMessage::CopyFrom(const ResJoinRoomMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResJoinRoomMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  return true;
}

void ResJoinRoomMessage::Swap(ResJoinRoomMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(result_, other->result_);
    std::swap(roomid_, other->roomid_);
    std::swap(backgroundimage_, other->backgroundimage_);
    std::swap(playerdata_, other->playerdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResJoinRoomMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResJoinRoomMessage_descriptor_;
  metadata.reflection = ResJoinRoomMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResCmdFishMessage::kMsgIDFieldNumber;
const int ResCmdFishMessage::kGroupIDFieldNumber;
const int ResCmdFishMessage::kStartIDFieldNumber;
const int ResCmdFishMessage::kPathIDFieldNumber;
#endif  // !_MSC_VER

ResCmdFishMessage::ResCmdFishMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResCmdFishMessage::InitAsDefaultInstance() {
}

ResCmdFishMessage::ResCmdFishMessage(const ResCmdFishMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResCmdFishMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 6006;
  groupid_ = 0;
  startid_ = 0;
  pathid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResCmdFishMessage::~ResCmdFishMessage() {
  SharedDtor();
}

void ResCmdFishMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResCmdFishMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResCmdFishMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResCmdFishMessage_descriptor_;
}

const ResCmdFishMessage& ResCmdFishMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game60_5fFishingMessage_2eproto();  return *default_instance_;
}

ResCmdFishMessage* ResCmdFishMessage::default_instance_ = NULL;

ResCmdFishMessage* ResCmdFishMessage::New() const {
  return new ResCmdFishMessage;
}

void ResCmdFishMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 6006;
    groupid_ = 0;
    startid_ = 0;
    pathid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResCmdFishMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResCmdFish];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Game60Fishing_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Game60Fishing >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_groupID;
        break;
      }
      
      // required int32 groupID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_startID;
        break;
      }
      
      // required int32 startID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startid_)));
          set_has_startid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pathID;
        break;
      }
      
      // required int32 pathID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pathID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pathid_)));
          set_has_pathid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResCmdFishMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResCmdFish];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required int32 groupID = 2;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->groupid(), output);
  }
  
  // required int32 startID = 3;
  if (has_startid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->startid(), output);
  }
  
  // required int32 pathID = 4;
  if (has_pathid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pathid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResCmdFishMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResCmdFish];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required int32 groupID = 2;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->groupid(), target);
  }
  
  // required int32 startID = 3;
  if (has_startid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->startid(), target);
  }
  
  // required int32 pathID = 4;
  if (has_pathid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pathid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResCmdFishMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResCmdFish];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required int32 groupID = 2;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }
    
    // required int32 startID = 3;
    if (has_startid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->startid());
    }
    
    // required int32 pathID = 4;
    if (has_pathid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pathid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResCmdFishMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResCmdFishMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResCmdFishMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResCmdFishMessage::MergeFrom(const ResCmdFishMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_startid()) {
      set_startid(from.startid());
    }
    if (from.has_pathid()) {
      set_pathid(from.pathid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResCmdFishMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResCmdFishMessage::CopyFrom(const ResCmdFishMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResCmdFishMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;
  
  return true;
}

void ResCmdFishMessage::Swap(ResCmdFishMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(groupid_, other->groupid_);
    std::swap(startid_, other->startid_);
    std::swap(pathid_, other->pathid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResCmdFishMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResCmdFishMessage_descriptor_;
  metadata.reflection = ResCmdFishMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResCmdSyncFishMessage::kMsgIDFieldNumber;
const int ResCmdSyncFishMessage::kFishIDFieldNumber;
const int ResCmdSyncFishMessage::kGroupIDFieldNumber;
const int ResCmdSyncFishMessage::kFishTimeFieldNumber;
const int ResCmdSyncFishMessage::kPathGroupFieldNumber;
const int ResCmdSyncFishMessage::kPathIdxFieldNumber;
const int ResCmdSyncFishMessage::kIsActiveEventFieldNumber;
const int ResCmdSyncFishMessage::kElapsedTimeFieldNumber;
const int ResCmdSyncFishMessage::kDelayTypeFieldNumber;
const int ResCmdSyncFishMessage::kDelayScalingFieldNumber;
const int ResCmdSyncFishMessage::kDelayDuration1FieldNumber;
const int ResCmdSyncFishMessage::kDelayDuration2FieldNumber;
const int ResCmdSyncFishMessage::kDelayDuration3FieldNumber;
const int ResCmdSyncFishMessage::kDelayCurrentTimeFieldNumber;
const int ResCmdSyncFishMessage::kPackageFieldNumber;
#endif  // !_MSC_VER

ResCmdSyncFishMessage::ResCmdSyncFishMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResCmdSyncFishMessage::InitAsDefaultInstance() {
}

ResCmdSyncFishMessage::ResCmdSyncFishMessage(const ResCmdSyncFishMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResCmdSyncFishMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 6008;
  fishid_ = 0;
  groupid_ = 0;
  fishtime_ = 0;
  pathgroup_ = 0;
  pathidx_ = 0;
  isactiveevent_ = false;
  elapsedtime_ = 0;
  delaytype_ = 0;
  delayscaling_ = 0;
  delayduration1_ = 0;
  delayduration2_ = 0;
  delayduration3_ = 0;
  delaycurrenttime_ = 0;
  package_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResCmdSyncFishMessage::~ResCmdSyncFishMessage() {
  SharedDtor();
}

void ResCmdSyncFishMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResCmdSyncFishMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResCmdSyncFishMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResCmdSyncFishMessage_descriptor_;
}

const ResCmdSyncFishMessage& ResCmdSyncFishMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game60_5fFishingMessage_2eproto();  return *default_instance_;
}

ResCmdSyncFishMessage* ResCmdSyncFishMessage::default_instance_ = NULL;

ResCmdSyncFishMessage* ResCmdSyncFishMessage::New() const {
  return new ResCmdSyncFishMessage;
}

void ResCmdSyncFishMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 6008;
    fishid_ = 0;
    groupid_ = 0;
    fishtime_ = 0;
    pathgroup_ = 0;
    pathidx_ = 0;
    isactiveevent_ = false;
    elapsedtime_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    delaytype_ = 0;
    delayscaling_ = 0;
    delayduration1_ = 0;
    delayduration2_ = 0;
    delayduration3_ = 0;
    delaycurrenttime_ = 0;
    package_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResCmdSyncFishMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResCmdSyncFish];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Game60Fishing_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Game60Fishing >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fishID;
        break;
      }
      
      // required int32 fishID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fishID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fishid_)));
          set_has_fishid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_groupID;
        break;
      }
      
      // required int32 groupID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_fishTime;
        break;
      }
      
      // required double fishTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_fishTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fishtime_)));
          set_has_fishtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_pathGroup;
        break;
      }
      
      // required int32 pathGroup = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pathGroup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pathgroup_)));
          set_has_pathgroup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_pathIdx;
        break;
      }
      
      // required int32 pathIdx = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pathIdx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pathidx_)));
          set_has_pathidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_isActiveEvent;
        break;
      }
      
      // optional bool isActiveEvent = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isActiveEvent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isactiveevent_)));
          set_has_isactiveevent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_elapsedTime;
        break;
      }
      
      // optional int32 elapsedTime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elapsedTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &elapsedtime_)));
          set_has_elapsedtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_delayType;
        break;
      }
      
      // optional int32 delayType = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delayType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delaytype_)));
          set_has_delaytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_delayScaling;
        break;
      }
      
      // optional int32 delayScaling = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delayScaling:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delayscaling_)));
          set_has_delayscaling();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_delayDuration1;
        break;
      }
      
      // optional int32 delayDuration1 = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delayDuration1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delayduration1_)));
          set_has_delayduration1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_delayDuration2;
        break;
      }
      
      // optional int32 delayDuration2 = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delayDuration2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delayduration2_)));
          set_has_delayduration2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_delayDuration3;
        break;
      }
      
      // optional int32 delayDuration3 = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delayDuration3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delayduration3_)));
          set_has_delayduration3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_delayCurrentTime;
        break;
      }
      
      // optional int32 delayCurrentTime = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delayCurrentTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delaycurrenttime_)));
          set_has_delaycurrenttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_package;
        break;
      }
      
      // optional int32 package = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_package:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &package_)));
          set_has_package();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResCmdSyncFishMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResCmdSyncFish];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required int32 fishID = 2;
  if (has_fishid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fishid(), output);
  }
  
  // required int32 groupID = 3;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->groupid(), output);
  }
  
  // required double fishTime = 4;
  if (has_fishtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->fishtime(), output);
  }
  
  // required int32 pathGroup = 5;
  if (has_pathgroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pathgroup(), output);
  }
  
  // required int32 pathIdx = 6;
  if (has_pathidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->pathidx(), output);
  }
  
  // optional bool isActiveEvent = 7;
  if (has_isactiveevent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->isactiveevent(), output);
  }
  
  // optional int32 elapsedTime = 8;
  if (has_elapsedtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->elapsedtime(), output);
  }
  
  // optional int32 delayType = 9;
  if (has_delaytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->delaytype(), output);
  }
  
  // optional int32 delayScaling = 10;
  if (has_delayscaling()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->delayscaling(), output);
  }
  
  // optional int32 delayDuration1 = 11;
  if (has_delayduration1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->delayduration1(), output);
  }
  
  // optional int32 delayDuration2 = 12;
  if (has_delayduration2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->delayduration2(), output);
  }
  
  // optional int32 delayDuration3 = 13;
  if (has_delayduration3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->delayduration3(), output);
  }
  
  // optional int32 delayCurrentTime = 14;
  if (has_delaycurrenttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->delaycurrenttime(), output);
  }
  
  // optional int32 package = 15;
  if (has_package()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->package(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResCmdSyncFishMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResCmdSyncFish];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required int32 fishID = 2;
  if (has_fishid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fishid(), target);
  }
  
  // required int32 groupID = 3;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->groupid(), target);
  }
  
  // required double fishTime = 4;
  if (has_fishtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->fishtime(), target);
  }
  
  // required int32 pathGroup = 5;
  if (has_pathgroup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->pathgroup(), target);
  }
  
  // required int32 pathIdx = 6;
  if (has_pathidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->pathidx(), target);
  }
  
  // optional bool isActiveEvent = 7;
  if (has_isactiveevent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->isactiveevent(), target);
  }
  
  // optional int32 elapsedTime = 8;
  if (has_elapsedtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->elapsedtime(), target);
  }
  
  // optional int32 delayType = 9;
  if (has_delaytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->delaytype(), target);
  }
  
  // optional int32 delayScaling = 10;
  if (has_delayscaling()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->delayscaling(), target);
  }
  
  // optional int32 delayDuration1 = 11;
  if (has_delayduration1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->delayduration1(), target);
  }
  
  // optional int32 delayDuration2 = 12;
  if (has_delayduration2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->delayduration2(), target);
  }
  
  // optional int32 delayDuration3 = 13;
  if (has_delayduration3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->delayduration3(), target);
  }
  
  // optional int32 delayCurrentTime = 14;
  if (has_delaycurrenttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->delaycurrenttime(), target);
  }
  
  // optional int32 package = 15;
  if (has_package()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->package(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResCmdSyncFishMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResCmdSyncFish];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required int32 fishID = 2;
    if (has_fishid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fishid());
    }
    
    // required int32 groupID = 3;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }
    
    // required double fishTime = 4;
    if (has_fishtime()) {
      total_size += 1 + 8;
    }
    
    // required int32 pathGroup = 5;
    if (has_pathgroup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pathgroup());
    }
    
    // required int32 pathIdx = 6;
    if (has_pathidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pathidx());
    }
    
    // optional bool isActiveEvent = 7;
    if (has_isactiveevent()) {
      total_size += 1 + 1;
    }
    
    // optional int32 elapsedTime = 8;
    if (has_elapsedtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->elapsedtime());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 delayType = 9;
    if (has_delaytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delaytype());
    }
    
    // optional int32 delayScaling = 10;
    if (has_delayscaling()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delayscaling());
    }
    
    // optional int32 delayDuration1 = 11;
    if (has_delayduration1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delayduration1());
    }
    
    // optional int32 delayDuration2 = 12;
    if (has_delayduration2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delayduration2());
    }
    
    // optional int32 delayDuration3 = 13;
    if (has_delayduration3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delayduration3());
    }
    
    // optional int32 delayCurrentTime = 14;
    if (has_delaycurrenttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delaycurrenttime());
    }
    
    // optional int32 package = 15;
    if (has_package()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->package());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResCmdSyncFishMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResCmdSyncFishMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResCmdSyncFishMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResCmdSyncFishMessage::MergeFrom(const ResCmdSyncFishMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_fishid()) {
      set_fishid(from.fishid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_fishtime()) {
      set_fishtime(from.fishtime());
    }
    if (from.has_pathgroup()) {
      set_pathgroup(from.pathgroup());
    }
    if (from.has_pathidx()) {
      set_pathidx(from.pathidx());
    }
    if (from.has_isactiveevent()) {
      set_isactiveevent(from.isactiveevent());
    }
    if (from.has_elapsedtime()) {
      set_elapsedtime(from.elapsedtime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_delaytype()) {
      set_delaytype(from.delaytype());
    }
    if (from.has_delayscaling()) {
      set_delayscaling(from.delayscaling());
    }
    if (from.has_delayduration1()) {
      set_delayduration1(from.delayduration1());
    }
    if (from.has_delayduration2()) {
      set_delayduration2(from.delayduration2());
    }
    if (from.has_delayduration3()) {
      set_delayduration3(from.delayduration3());
    }
    if (from.has_delaycurrenttime()) {
      set_delaycurrenttime(from.delaycurrenttime());
    }
    if (from.has_package()) {
      set_package(from.package());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResCmdSyncFishMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResCmdSyncFishMessage::CopyFrom(const ResCmdSyncFishMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResCmdSyncFishMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003e) != 0x0000003e) return false;
  
  return true;
}

void ResCmdSyncFishMessage::Swap(ResCmdSyncFishMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(fishid_, other->fishid_);
    std::swap(groupid_, other->groupid_);
    std::swap(fishtime_, other->fishtime_);
    std::swap(pathgroup_, other->pathgroup_);
    std::swap(pathidx_, other->pathidx_);
    std::swap(isactiveevent_, other->isactiveevent_);
    std::swap(elapsedtime_, other->elapsedtime_);
    std::swap(delaytype_, other->delaytype_);
    std::swap(delayscaling_, other->delayscaling_);
    std::swap(delayduration1_, other->delayduration1_);
    std::swap(delayduration2_, other->delayduration2_);
    std::swap(delayduration3_, other->delayduration3_);
    std::swap(delaycurrenttime_, other->delaycurrenttime_);
    std::swap(package_, other->package_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResCmdSyncFishMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResCmdSyncFishMessage_descriptor_;
  metadata.reflection = ResCmdSyncFishMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqBulletMessage::kMsgIDFieldNumber;
const int ReqBulletMessage::kAngleFieldNumber;
const int ReqBulletMessage::kLockFishIDFieldNumber;
const int ReqBulletMessage::kLauncherTypeFieldNumber;
#endif  // !_MSC_VER

ReqBulletMessage::ReqBulletMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqBulletMessage::InitAsDefaultInstance() {
}

ReqBulletMessage::ReqBulletMessage(const ReqBulletMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqBulletMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 6009;
  angle_ = 0;
  lockfishid_ = 0;
  launchertype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqBulletMessage::~ReqBulletMessage() {
  SharedDtor();
}

void ReqBulletMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqBulletMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqBulletMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqBulletMessage_descriptor_;
}

const ReqBulletMessage& ReqBulletMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game60_5fFishingMessage_2eproto();  return *default_instance_;
}

ReqBulletMessage* ReqBulletMessage::default_instance_ = NULL;

ReqBulletMessage* ReqBulletMessage::New() const {
  return new ReqBulletMessage;
}

void ReqBulletMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 6009;
    angle_ = 0;
    lockfishid_ = 0;
    launchertype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqBulletMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ReqBullet];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Game60Fishing_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Game60Fishing >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_angle;
        break;
      }
      
      // required int32 angle = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lockFishID;
        break;
      }
      
      // optional int32 lockFishID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lockFishID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lockfishid_)));
          set_has_lockfishid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_launcherType;
        break;
      }
      
      // required int32 launcherType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_launcherType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &launchertype_)));
          set_has_launchertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqBulletMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ReqBullet];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required int32 angle = 2;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->angle(), output);
  }
  
  // optional int32 lockFishID = 3;
  if (has_lockfishid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lockfishid(), output);
  }
  
  // required int32 launcherType = 4;
  if (has_launchertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->launchertype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqBulletMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ReqBullet];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required int32 angle = 2;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->angle(), target);
  }
  
  // optional int32 lockFishID = 3;
  if (has_lockfishid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lockfishid(), target);
  }
  
  // required int32 launcherType = 4;
  if (has_launchertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->launchertype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqBulletMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ReqBullet];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required int32 angle = 2;
    if (has_angle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->angle());
    }
    
    // optional int32 lockFishID = 3;
    if (has_lockfishid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lockfishid());
    }
    
    // required int32 launcherType = 4;
    if (has_launchertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->launchertype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqBulletMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqBulletMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqBulletMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqBulletMessage::MergeFrom(const ReqBulletMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_angle()) {
      set_angle(from.angle());
    }
    if (from.has_lockfishid()) {
      set_lockfishid(from.lockfishid());
    }
    if (from.has_launchertype()) {
      set_launchertype(from.launchertype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqBulletMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqBulletMessage::CopyFrom(const ReqBulletMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqBulletMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000a) != 0x0000000a) return false;
  
  return true;
}

void ReqBulletMessage::Swap(ReqBulletMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(angle_, other->angle_);
    std::swap(lockfishid_, other->lockfishid_);
    std::swap(launchertype_, other->launchertype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqBulletMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqBulletMessage_descriptor_;
  metadata.reflection = ReqBulletMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResBulletMessage::kMsgIDFieldNumber;
const int ResBulletMessage::kBulletIDFieldNumber;
const int ResBulletMessage::kLauncherTypeFieldNumber;
const int ResBulletMessage::kAngleFieldNumber;
const int ResBulletMessage::kEnergyFieldNumber;
const int ResBulletMessage::kReboundCountFieldNumber;
const int ResBulletMessage::kLockFishIDFieldNumber;
#endif  // !_MSC_VER

ResBulletMessage::ResBulletMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResBulletMessage::InitAsDefaultInstance() {
}

ResBulletMessage::ResBulletMessage(const ResBulletMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResBulletMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 6010;
  bulletid_ = 0;
  launchertype_ = 0;
  angle_ = 0;
  energy_ = 0;
  reboundcount_ = 0;
  lockfishid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResBulletMessage::~ResBulletMessage() {
  SharedDtor();
}

void ResBulletMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResBulletMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResBulletMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResBulletMessage_descriptor_;
}

const ResBulletMessage& ResBulletMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game60_5fFishingMessage_2eproto();  return *default_instance_;
}

ResBulletMessage* ResBulletMessage::default_instance_ = NULL;

ResBulletMessage* ResBulletMessage::New() const {
  return new ResBulletMessage;
}

void ResBulletMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 6010;
    bulletid_ = 0;
    launchertype_ = 0;
    angle_ = 0;
    energy_ = 0;
    reboundcount_ = 0;
    lockfishid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResBulletMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResBullet];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Game60Fishing_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Game60Fishing >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bulletID;
        break;
      }
      
      // required int32 bulletID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bulletID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bulletid_)));
          set_has_bulletid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_launcherType;
        break;
      }
      
      // required int32 launcherType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_launcherType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &launchertype_)));
          set_has_launchertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_angle;
        break;
      }
      
      // required int32 angle = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_energy;
        break;
      }
      
      // optional int32 energy = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_energy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &energy_)));
          set_has_energy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_reboundCount;
        break;
      }
      
      // optional int32 reboundCount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reboundCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reboundcount_)));
          set_has_reboundcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_lockFishID;
        break;
      }
      
      // optional int32 lockFishID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lockFishID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lockfishid_)));
          set_has_lockfishid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResBulletMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResBullet];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required int32 bulletID = 2;
  if (has_bulletid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bulletid(), output);
  }
  
  // required int32 launcherType = 3;
  if (has_launchertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->launchertype(), output);
  }
  
  // required int32 angle = 4;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->angle(), output);
  }
  
  // optional int32 energy = 5;
  if (has_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->energy(), output);
  }
  
  // optional int32 reboundCount = 6;
  if (has_reboundcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->reboundcount(), output);
  }
  
  // optional int32 lockFishID = 7;
  if (has_lockfishid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->lockfishid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResBulletMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResBullet];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required int32 bulletID = 2;
  if (has_bulletid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bulletid(), target);
  }
  
  // required int32 launcherType = 3;
  if (has_launchertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->launchertype(), target);
  }
  
  // required int32 angle = 4;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->angle(), target);
  }
  
  // optional int32 energy = 5;
  if (has_energy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->energy(), target);
  }
  
  // optional int32 reboundCount = 6;
  if (has_reboundcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->reboundcount(), target);
  }
  
  // optional int32 lockFishID = 7;
  if (has_lockfishid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->lockfishid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResBulletMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResBullet];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required int32 bulletID = 2;
    if (has_bulletid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bulletid());
    }
    
    // required int32 launcherType = 3;
    if (has_launchertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->launchertype());
    }
    
    // required int32 angle = 4;
    if (has_angle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->angle());
    }
    
    // optional int32 energy = 5;
    if (has_energy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->energy());
    }
    
    // optional int32 reboundCount = 6;
    if (has_reboundcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reboundcount());
    }
    
    // optional int32 lockFishID = 7;
    if (has_lockfishid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lockfishid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResBulletMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResBulletMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResBulletMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResBulletMessage::MergeFrom(const ResBulletMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_bulletid()) {
      set_bulletid(from.bulletid());
    }
    if (from.has_launchertype()) {
      set_launchertype(from.launchertype());
    }
    if (from.has_angle()) {
      set_angle(from.angle());
    }
    if (from.has_energy()) {
      set_energy(from.energy());
    }
    if (from.has_reboundcount()) {
      set_reboundcount(from.reboundcount());
    }
    if (from.has_lockfishid()) {
      set_lockfishid(from.lockfishid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResBulletMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResBulletMessage::CopyFrom(const ResBulletMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResBulletMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;
  
  return true;
}

void ResBulletMessage::Swap(ResBulletMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(bulletid_, other->bulletid_);
    std::swap(launchertype_, other->launchertype_);
    std::swap(angle_, other->angle_);
    std::swap(energy_, other->energy_);
    std::swap(reboundcount_, other->reboundcount_);
    std::swap(lockfishid_, other->lockfishid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResBulletMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResBulletMessage_descriptor_;
  metadata.reflection = ResBulletMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResCatchedFreezeMessage::kMsgIDFieldNumber;
const int ResCatchedFreezeMessage::kBulletIDFieldNumber;
const int ResCatchedFreezeMessage::kComboFieldNumber;
const int ResCatchedFreezeMessage::kGoldNumFieldNumber;
const int ResCatchedFreezeMessage::kTotalNumFieldNumber;
const int ResCatchedFreezeMessage::kFishCatchedListFieldNumber;
#endif  // !_MSC_VER

ResCatchedFreezeMessage::ResCatchedFreezeMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResCatchedFreezeMessage::InitAsDefaultInstance() {
}

ResCatchedFreezeMessage::ResCatchedFreezeMessage(const ResCatchedFreezeMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResCatchedFreezeMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 6022;
  bulletid_ = 0;
  combo_ = 0;
  goldnum_ = 0;
  totalnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResCatchedFreezeMessage::~ResCatchedFreezeMessage() {
  SharedDtor();
}

void ResCatchedFreezeMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResCatchedFreezeMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResCatchedFreezeMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResCatchedFreezeMessage_descriptor_;
}

const ResCatchedFreezeMessage& ResCatchedFreezeMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game60_5fFishingMessage_2eproto();  return *default_instance_;
}

ResCatchedFreezeMessage* ResCatchedFreezeMessage::default_instance_ = NULL;

ResCatchedFreezeMessage* ResCatchedFreezeMessage::New() const {
  return new ResCatchedFreezeMessage;
}

void ResCatchedFreezeMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 6022;
    bulletid_ = 0;
    combo_ = 0;
    goldnum_ = 0;
    totalnum_ = 0;
  }
  fishcatchedlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResCatchedFreezeMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResCatchedFreeze];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Game60Fishing_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Game60Fishing >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bulletID;
        break;
      }
      
      // required int32 bulletID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bulletID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bulletid_)));
          set_has_bulletid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_combo;
        break;
      }
      
      // required int32 combo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_combo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combo_)));
          set_has_combo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_goldNum;
        break;
      }
      
      // required int32 goldNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goldNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goldnum_)));
          set_has_goldnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_TotalNum;
        break;
      }
      
      // optional int32 TotalNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TotalNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalnum_)));
          set_has_totalnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_fishCatchedList;
        break;
      }
      
      // repeated .com.game.proto.FishCatchedInfo fishCatchedList = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fishCatchedList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fishcatchedlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_fishCatchedList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResCatchedFreezeMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResCatchedFreeze];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required int32 bulletID = 2;
  if (has_bulletid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bulletid(), output);
  }
  
  // required int32 combo = 3;
  if (has_combo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->combo(), output);
  }
  
  // required int32 goldNum = 4;
  if (has_goldnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->goldnum(), output);
  }
  
  // optional int32 TotalNum = 5;
  if (has_totalnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->totalnum(), output);
  }
  
  // repeated .com.game.proto.FishCatchedInfo fishCatchedList = 6;
  for (int i = 0; i < this->fishcatchedlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->fishcatchedlist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResCatchedFreezeMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResCatchedFreeze];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required int32 bulletID = 2;
  if (has_bulletid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bulletid(), target);
  }
  
  // required int32 combo = 3;
  if (has_combo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->combo(), target);
  }
  
  // required int32 goldNum = 4;
  if (has_goldnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->goldnum(), target);
  }
  
  // optional int32 TotalNum = 5;
  if (has_totalnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->totalnum(), target);
  }
  
  // repeated .com.game.proto.FishCatchedInfo fishCatchedList = 6;
  for (int i = 0; i < this->fishcatchedlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->fishcatchedlist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResCatchedFreezeMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResCatchedFreeze];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required int32 bulletID = 2;
    if (has_bulletid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bulletid());
    }
    
    // required int32 combo = 3;
    if (has_combo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->combo());
    }
    
    // required int32 goldNum = 4;
    if (has_goldnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goldnum());
    }
    
    // optional int32 TotalNum = 5;
    if (has_totalnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalnum());
    }
    
  }
  // repeated .com.game.proto.FishCatchedInfo fishCatchedList = 6;
  total_size += 1 * this->fishcatchedlist_size();
  for (int i = 0; i < this->fishcatchedlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fishcatchedlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResCatchedFreezeMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResCatchedFreezeMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResCatchedFreezeMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResCatchedFreezeMessage::MergeFrom(const ResCatchedFreezeMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  fishcatchedlist_.MergeFrom(from.fishcatchedlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_bulletid()) {
      set_bulletid(from.bulletid());
    }
    if (from.has_combo()) {
      set_combo(from.combo());
    }
    if (from.has_goldnum()) {
      set_goldnum(from.goldnum());
    }
    if (from.has_totalnum()) {
      set_totalnum(from.totalnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResCatchedFreezeMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResCatchedFreezeMessage::CopyFrom(const ResCatchedFreezeMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResCatchedFreezeMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;
  
  for (int i = 0; i < fishcatchedlist_size(); i++) {
    if (!this->fishcatchedlist(i).IsInitialized()) return false;
  }
  return true;
}

void ResCatchedFreezeMessage::Swap(ResCatchedFreezeMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(bulletid_, other->bulletid_);
    std::swap(combo_, other->combo_);
    std::swap(goldnum_, other->goldnum_);
    std::swap(totalnum_, other->totalnum_);
    fishcatchedlist_.Swap(&other->fishcatchedlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResCatchedFreezeMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResCatchedFreezeMessage_descriptor_;
  metadata.reflection = ResCatchedFreezeMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResCatchedMessage::kMsgIDFieldNumber;
const int ResCatchedMessage::kBulletIDFieldNumber;
const int ResCatchedMessage::kComboFieldNumber;
const int ResCatchedMessage::kGoldNumFieldNumber;
const int ResCatchedMessage::kTotalNumFieldNumber;
const int ResCatchedMessage::kFishCatchedListFieldNumber;
#endif  // !_MSC_VER

ResCatchedMessage::ResCatchedMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResCatchedMessage::InitAsDefaultInstance() {
}

ResCatchedMessage::ResCatchedMessage(const ResCatchedMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResCatchedMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 6012;
  bulletid_ = 0;
  combo_ = 0;
  goldnum_ = 0;
  totalnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResCatchedMessage::~ResCatchedMessage() {
  SharedDtor();
}

void ResCatchedMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResCatchedMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResCatchedMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResCatchedMessage_descriptor_;
}

const ResCatchedMessage& ResCatchedMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game60_5fFishingMessage_2eproto();  return *default_instance_;
}

ResCatchedMessage* ResCatchedMessage::default_instance_ = NULL;

ResCatchedMessage* ResCatchedMessage::New() const {
  return new ResCatchedMessage;
}

void ResCatchedMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 6012;
    bulletid_ = 0;
    combo_ = 0;
    goldnum_ = 0;
    totalnum_ = 0;
  }
  fishcatchedlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResCatchedMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResCatched];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Game60Fishing_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Game60Fishing >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bulletID;
        break;
      }
      
      // required int32 bulletID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bulletID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bulletid_)));
          set_has_bulletid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_combo;
        break;
      }
      
      // required int32 combo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_combo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combo_)));
          set_has_combo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_goldNum;
        break;
      }
      
      // required int32 goldNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goldNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goldnum_)));
          set_has_goldnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_TotalNum;
        break;
      }
      
      // optional int32 TotalNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TotalNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalnum_)));
          set_has_totalnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_fishCatchedList;
        break;
      }
      
      // repeated .com.game.proto.FishCatchedInfo fishCatchedList = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fishCatchedList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fishcatchedlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_fishCatchedList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResCatchedMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResCatched];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required int32 bulletID = 2;
  if (has_bulletid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bulletid(), output);
  }
  
  // required int32 combo = 3;
  if (has_combo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->combo(), output);
  }
  
  // required int32 goldNum = 4;
  if (has_goldnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->goldnum(), output);
  }
  
  // optional int32 TotalNum = 5;
  if (has_totalnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->totalnum(), output);
  }
  
  // repeated .com.game.proto.FishCatchedInfo fishCatchedList = 6;
  for (int i = 0; i < this->fishcatchedlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->fishcatchedlist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResCatchedMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResCatched];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required int32 bulletID = 2;
  if (has_bulletid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bulletid(), target);
  }
  
  // required int32 combo = 3;
  if (has_combo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->combo(), target);
  }
  
  // required int32 goldNum = 4;
  if (has_goldnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->goldnum(), target);
  }
  
  // optional int32 TotalNum = 5;
  if (has_totalnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->totalnum(), target);
  }
  
  // repeated .com.game.proto.FishCatchedInfo fishCatchedList = 6;
  for (int i = 0; i < this->fishcatchedlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->fishcatchedlist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResCatchedMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResCatched];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required int32 bulletID = 2;
    if (has_bulletid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bulletid());
    }
    
    // required int32 combo = 3;
    if (has_combo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->combo());
    }
    
    // required int32 goldNum = 4;
    if (has_goldnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goldnum());
    }
    
    // optional int32 TotalNum = 5;
    if (has_totalnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalnum());
    }
    
  }
  // repeated .com.game.proto.FishCatchedInfo fishCatchedList = 6;
  total_size += 1 * this->fishcatchedlist_size();
  for (int i = 0; i < this->fishcatchedlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fishcatchedlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResCatchedMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResCatchedMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResCatchedMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResCatchedMessage::MergeFrom(const ResCatchedMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  fishcatchedlist_.MergeFrom(from.fishcatchedlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_bulletid()) {
      set_bulletid(from.bulletid());
    }
    if (from.has_combo()) {
      set_combo(from.combo());
    }
    if (from.has_goldnum()) {
      set_goldnum(from.goldnum());
    }
    if (from.has_totalnum()) {
      set_totalnum(from.totalnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResCatchedMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResCatchedMessage::CopyFrom(const ResCatchedMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResCatchedMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;
  
  for (int i = 0; i < fishcatchedlist_size(); i++) {
    if (!this->fishcatchedlist(i).IsInitialized()) return false;
  }
  return true;
}

void ResCatchedMessage::Swap(ResCatchedMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(bulletid_, other->bulletid_);
    std::swap(combo_, other->combo_);
    std::swap(goldnum_, other->goldnum_);
    std::swap(totalnum_, other->totalnum_);
    fishcatchedlist_.Swap(&other->fishcatchedlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResCatchedMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResCatchedMessage_descriptor_;
  metadata.reflection = ResCatchedMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FishCatchedInfo::kCatchEventFieldNumber;
const int FishCatchedInfo::kFishIDFieldNumber;
const int FishCatchedInfo::kNRewardFieldNumber;
const int FishCatchedInfo::kLightingFishIDFieldNumber;
#endif  // !_MSC_VER

FishCatchedInfo::FishCatchedInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FishCatchedInfo::InitAsDefaultInstance() {
}

FishCatchedInfo::FishCatchedInfo(const FishCatchedInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FishCatchedInfo::SharedCtor() {
  _cached_size_ = 0;
  catchevent_ = 0;
  fishid_ = 0;
  nreward_ = 0;
  lightingfishid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FishCatchedInfo::~FishCatchedInfo() {
  SharedDtor();
}

void FishCatchedInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FishCatchedInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FishCatchedInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FishCatchedInfo_descriptor_;
}

const FishCatchedInfo& FishCatchedInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game60_5fFishingMessage_2eproto();  return *default_instance_;
}

FishCatchedInfo* FishCatchedInfo::default_instance_ = NULL;

FishCatchedInfo* FishCatchedInfo::New() const {
  return new FishCatchedInfo;
}

void FishCatchedInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    catchevent_ = 0;
    fishid_ = 0;
    nreward_ = 0;
    lightingfishid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FishCatchedInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 catchEvent = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &catchevent_)));
          set_has_catchevent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fishID;
        break;
      }
      
      // required int32 fishID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fishID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fishid_)));
          set_has_fishid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nReward;
        break;
      }
      
      // optional int32 nReward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nreward_)));
          set_has_nreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lightingFishID;
        break;
      }
      
      // optional int32 lightingFishID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lightingFishID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lightingfishid_)));
          set_has_lightingfishid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FishCatchedInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 catchEvent = 1;
  if (has_catchevent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->catchevent(), output);
  }
  
  // required int32 fishID = 2;
  if (has_fishid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fishid(), output);
  }
  
  // optional int32 nReward = 3;
  if (has_nreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nreward(), output);
  }
  
  // optional int32 lightingFishID = 4;
  if (has_lightingfishid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lightingfishid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FishCatchedInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 catchEvent = 1;
  if (has_catchevent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->catchevent(), target);
  }
  
  // required int32 fishID = 2;
  if (has_fishid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fishid(), target);
  }
  
  // optional int32 nReward = 3;
  if (has_nreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nreward(), target);
  }
  
  // optional int32 lightingFishID = 4;
  if (has_lightingfishid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lightingfishid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FishCatchedInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 catchEvent = 1;
    if (has_catchevent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->catchevent());
    }
    
    // required int32 fishID = 2;
    if (has_fishid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fishid());
    }
    
    // optional int32 nReward = 3;
    if (has_nreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nreward());
    }
    
    // optional int32 lightingFishID = 4;
    if (has_lightingfishid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lightingfishid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FishCatchedInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FishCatchedInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FishCatchedInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FishCatchedInfo::MergeFrom(const FishCatchedInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_catchevent()) {
      set_catchevent(from.catchevent());
    }
    if (from.has_fishid()) {
      set_fishid(from.fishid());
    }
    if (from.has_nreward()) {
      set_nreward(from.nreward());
    }
    if (from.has_lightingfishid()) {
      set_lightingfishid(from.lightingfishid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FishCatchedInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FishCatchedInfo::CopyFrom(const FishCatchedInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FishCatchedInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void FishCatchedInfo::Swap(FishCatchedInfo* other) {
  if (other != this) {
    std::swap(catchevent_, other->catchevent_);
    std::swap(fishid_, other->fishid_);
    std::swap(nreward_, other->nreward_);
    std::swap(lightingfishid_, other->lightingfishid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FishCatchedInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FishCatchedInfo_descriptor_;
  metadata.reflection = FishCatchedInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResClearSceneMessage::kMsgIDFieldNumber;
const int ResClearSceneMessage::kClearTypeFieldNumber;
#endif  // !_MSC_VER

ResClearSceneMessage::ResClearSceneMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResClearSceneMessage::InitAsDefaultInstance() {
}

ResClearSceneMessage::ResClearSceneMessage(const ResClearSceneMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResClearSceneMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 6014;
  cleartype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResClearSceneMessage::~ResClearSceneMessage() {
  SharedDtor();
}

void ResClearSceneMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResClearSceneMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResClearSceneMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResClearSceneMessage_descriptor_;
}

const ResClearSceneMessage& ResClearSceneMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game60_5fFishingMessage_2eproto();  return *default_instance_;
}

ResClearSceneMessage* ResClearSceneMessage::default_instance_ = NULL;

ResClearSceneMessage* ResClearSceneMessage::New() const {
  return new ResClearSceneMessage;
}

void ResClearSceneMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 6014;
    cleartype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResClearSceneMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResClearScene];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Game60Fishing_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Game60Fishing >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_clearType;
        break;
      }
      
      // required int32 clearType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clearType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cleartype_)));
          set_has_cleartype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResClearSceneMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResClearScene];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required int32 clearType = 2;
  if (has_cleartype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cleartype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResClearSceneMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResClearScene];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required int32 clearType = 2;
  if (has_cleartype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cleartype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResClearSceneMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResClearScene];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required int32 clearType = 2;
    if (has_cleartype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cleartype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResClearSceneMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResClearSceneMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResClearSceneMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResClearSceneMessage::MergeFrom(const ResClearSceneMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_cleartype()) {
      set_cleartype(from.cleartype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResClearSceneMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResClearSceneMessage::CopyFrom(const ResClearSceneMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResClearSceneMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void ResClearSceneMessage::Swap(ResClearSceneMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(cleartype_, other->cleartype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResClearSceneMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResClearSceneMessage_descriptor_;
  metadata.reflection = ResClearSceneMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResPlayerJoinMessage::kMsgIDFieldNumber;
const int ResPlayerJoinMessage::kPlayerDataFieldNumber;
#endif  // !_MSC_VER

ResPlayerJoinMessage::ResPlayerJoinMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResPlayerJoinMessage::InitAsDefaultInstance() {
  playerdata_ = const_cast< ::com::game::proto::PlayerData*>(&::com::game::proto::PlayerData::default_instance());
}

ResPlayerJoinMessage::ResPlayerJoinMessage(const ResPlayerJoinMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResPlayerJoinMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 6016;
  playerdata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResPlayerJoinMessage::~ResPlayerJoinMessage() {
  SharedDtor();
}

void ResPlayerJoinMessage::SharedDtor() {
  if (this != default_instance_) {
    delete playerdata_;
  }
}

void ResPlayerJoinMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResPlayerJoinMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResPlayerJoinMessage_descriptor_;
}

const ResPlayerJoinMessage& ResPlayerJoinMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game60_5fFishingMessage_2eproto();  return *default_instance_;
}

ResPlayerJoinMessage* ResPlayerJoinMessage::default_instance_ = NULL;

ResPlayerJoinMessage* ResPlayerJoinMessage::New() const {
  return new ResPlayerJoinMessage;
}

void ResPlayerJoinMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 6016;
    if (has_playerdata()) {
      if (playerdata_ != NULL) playerdata_->::com::game::proto::PlayerData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResPlayerJoinMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResPlayerJoin];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Game60Fishing_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Game60Fishing >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_playerData;
        break;
      }
      
      // required .com.game.proto.PlayerData playerData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResPlayerJoinMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResPlayerJoin];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required .com.game.proto.PlayerData playerData = 2;
  if (has_playerdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->playerdata(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResPlayerJoinMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResPlayerJoin];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required .com.game.proto.PlayerData playerData = 2;
  if (has_playerdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->playerdata(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResPlayerJoinMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResPlayerJoin];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required .com.game.proto.PlayerData playerData = 2;
    if (has_playerdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerdata());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResPlayerJoinMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResPlayerJoinMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResPlayerJoinMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResPlayerJoinMessage::MergeFrom(const ResPlayerJoinMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_playerdata()) {
      mutable_playerdata()->::com::game::proto::PlayerData::MergeFrom(from.playerdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResPlayerJoinMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResPlayerJoinMessage::CopyFrom(const ResPlayerJoinMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResPlayerJoinMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void ResPlayerJoinMessage::Swap(ResPlayerJoinMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(playerdata_, other->playerdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResPlayerJoinMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResPlayerJoinMessage_descriptor_;
  metadata.reflection = ResPlayerJoinMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerData::kPlayerIdFieldNumber;
const int PlayerData::kPlayerNameFieldNumber;
const int PlayerData::kSexFieldNumber;
const int PlayerData::kHeadiconFieldNumber;
const int PlayerData::kIconFieldNumber;
const int PlayerData::kVipLevelFieldNumber;
const int PlayerData::kGoldNumFieldNumber;
const int PlayerData::kSeatFieldNumber;
const int PlayerData::kLauncherTypeFieldNumber;
const int PlayerData::kRateIndexFieldNumber;
const int PlayerData::kEnergyFieldNumber;
const int PlayerData::kBulletCountFieldNumber;
const int PlayerData::kScoreFieldNumber;
#endif  // !_MSC_VER

PlayerData::PlayerData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerData::InitAsDefaultInstance() {
}

PlayerData::PlayerData(const PlayerData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerData::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0;
  headicon_ = 0;
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  viplevel_ = 0;
  goldnum_ = GOOGLE_LONGLONG(0);
  seat_ = 0;
  launchertype_ = 0;
  rateindex_ = 0;
  energy_ = 0;
  bulletcount_ = 0;
  score_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerData::~PlayerData() {
  SharedDtor();
}

void PlayerData::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (this != default_instance_) {
  }
}

void PlayerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerData_descriptor_;
}

const PlayerData& PlayerData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game60_5fFishingMessage_2eproto();  return *default_instance_;
}

PlayerData* PlayerData::default_instance_ = NULL;

PlayerData* PlayerData::New() const {
  return new PlayerData;
}

void PlayerData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_LONGLONG(0);
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::kEmptyString) {
        playername_->clear();
      }
    }
    sex_ = 0;
    headicon_ = 0;
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
    viplevel_ = 0;
    goldnum_ = GOOGLE_LONGLONG(0);
    seat_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    launchertype_ = 0;
    rateindex_ = 0;
    energy_ = 0;
    bulletcount_ = 0;
    score_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_playerName;
        break;
      }
      
      // optional string playerName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sex;
        break;
      }
      
      // optional int32 sex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_headicon;
        break;
      }
      
      // optional int32 headicon = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headicon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headicon_)));
          set_has_headicon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_icon;
        break;
      }
      
      // optional string icon = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_vipLevel;
        break;
      }
      
      // optional int32 vipLevel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_goldNum;
        break;
      }
      
      // optional int64 goldNum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goldNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &goldnum_)));
          set_has_goldnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_seat;
        break;
      }
      
      // optional int32 seat = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_launcherType;
        break;
      }
      
      // optional int32 launcherType = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_launcherType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &launchertype_)));
          set_has_launchertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_rateIndex;
        break;
      }
      
      // optional int32 rateIndex = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rateIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rateindex_)));
          set_has_rateindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_energy;
        break;
      }
      
      // optional int32 energy = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_energy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &energy_)));
          set_has_energy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_bulletCount;
        break;
      }
      
      // optional int32 bulletCount = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bulletCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bulletcount_)));
          set_has_bulletcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_score;
        break;
      }
      
      // optional int64 score = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }
  
  // optional string playerName = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->playername(), output);
  }
  
  // optional int32 sex = 3;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sex(), output);
  }
  
  // optional int32 headicon = 4;
  if (has_headicon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->headicon(), output);
  }
  
  // optional string icon = 5;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->icon(), output);
  }
  
  // optional int32 vipLevel = 6;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->viplevel(), output);
  }
  
  // optional int64 goldNum = 7;
  if (has_goldnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->goldnum(), output);
  }
  
  // optional int32 seat = 8;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->seat(), output);
  }
  
  // optional int32 launcherType = 9;
  if (has_launchertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->launchertype(), output);
  }
  
  // optional int32 rateIndex = 10;
  if (has_rateindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->rateindex(), output);
  }
  
  // optional int32 energy = 11;
  if (has_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->energy(), output);
  }
  
  // optional int32 bulletCount = 12;
  if (has_bulletcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->bulletcount(), output);
  }
  
  // optional int64 score = 13;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->score(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }
  
  // optional string playerName = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->playername(), target);
  }
  
  // optional int32 sex = 3;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sex(), target);
  }
  
  // optional int32 headicon = 4;
  if (has_headicon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->headicon(), target);
  }
  
  // optional string icon = 5;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->icon(), target);
  }
  
  // optional int32 vipLevel = 6;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->viplevel(), target);
  }
  
  // optional int64 goldNum = 7;
  if (has_goldnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->goldnum(), target);
  }
  
  // optional int32 seat = 8;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->seat(), target);
  }
  
  // optional int32 launcherType = 9;
  if (has_launchertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->launchertype(), target);
  }
  
  // optional int32 rateIndex = 10;
  if (has_rateindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->rateindex(), target);
  }
  
  // optional int32 energy = 11;
  if (has_energy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->energy(), target);
  }
  
  // optional int32 bulletCount = 12;
  if (has_bulletcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->bulletcount(), target);
  }
  
  // optional int64 score = 13;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->score(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }
    
    // optional string playerName = 2;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }
    
    // optional int32 sex = 3;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }
    
    // optional int32 headicon = 4;
    if (has_headicon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headicon());
    }
    
    // optional string icon = 5;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }
    
    // optional int32 vipLevel = 6;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplevel());
    }
    
    // optional int64 goldNum = 7;
    if (has_goldnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->goldnum());
    }
    
    // optional int32 seat = 8;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 launcherType = 9;
    if (has_launchertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->launchertype());
    }
    
    // optional int32 rateIndex = 10;
    if (has_rateindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rateindex());
    }
    
    // optional int32 energy = 11;
    if (has_energy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->energy());
    }
    
    // optional int32 bulletCount = 12;
    if (has_bulletcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bulletcount());
    }
    
    // optional int64 score = 13;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->score());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerData::MergeFrom(const PlayerData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_headicon()) {
      set_headicon(from.headicon());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_goldnum()) {
      set_goldnum(from.goldnum());
    }
    if (from.has_seat()) {
      set_seat(from.seat());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_launchertype()) {
      set_launchertype(from.launchertype());
    }
    if (from.has_rateindex()) {
      set_rateindex(from.rateindex());
    }
    if (from.has_energy()) {
      set_energy(from.energy());
    }
    if (from.has_bulletcount()) {
      set_bulletcount(from.bulletcount());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerData::CopyFrom(const PlayerData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerData::IsInitialized() const {
  
  return true;
}

void PlayerData::Swap(PlayerData* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(playername_, other->playername_);
    std::swap(sex_, other->sex_);
    std::swap(headicon_, other->headicon_);
    std::swap(icon_, other->icon_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(goldnum_, other->goldnum_);
    std::swap(seat_, other->seat_);
    std::swap(launchertype_, other->launchertype_);
    std::swap(rateindex_, other->rateindex_);
    std::swap(energy_, other->energy_);
    std::swap(bulletcount_, other->bulletcount_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerData_descriptor_;
  metadata.reflection = PlayerData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqChangeLauncherMessage::kMsgIDFieldNumber;
const int ReqChangeLauncherMessage::kSeatFieldNumber;
const int ReqChangeLauncherMessage::kLauncherTypeFieldNumber;
#endif  // !_MSC_VER

ReqChangeLauncherMessage::ReqChangeLauncherMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqChangeLauncherMessage::InitAsDefaultInstance() {
}

ReqChangeLauncherMessage::ReqChangeLauncherMessage(const ReqChangeLauncherMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqChangeLauncherMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 6017;
  seat_ = 0;
  launchertype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqChangeLauncherMessage::~ReqChangeLauncherMessage() {
  SharedDtor();
}

void ReqChangeLauncherMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqChangeLauncherMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqChangeLauncherMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqChangeLauncherMessage_descriptor_;
}

const ReqChangeLauncherMessage& ReqChangeLauncherMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game60_5fFishingMessage_2eproto();  return *default_instance_;
}

ReqChangeLauncherMessage* ReqChangeLauncherMessage::default_instance_ = NULL;

ReqChangeLauncherMessage* ReqChangeLauncherMessage::New() const {
  return new ReqChangeLauncherMessage;
}

void ReqChangeLauncherMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 6017;
    seat_ = 0;
    launchertype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqChangeLauncherMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ReqChangeLauncher];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Game60Fishing_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Game60Fishing >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_seat;
        break;
      }
      
      // required int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_launcherType;
        break;
      }
      
      // required int32 launcherType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_launcherType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &launchertype_)));
          set_has_launchertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqChangeLauncherMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ReqChangeLauncher];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }
  
  // required int32 launcherType = 3;
  if (has_launchertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->launchertype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqChangeLauncherMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ReqChangeLauncher];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }
  
  // required int32 launcherType = 3;
  if (has_launchertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->launchertype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqChangeLauncherMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ReqChangeLauncher];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }
    
    // required int32 launcherType = 3;
    if (has_launchertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->launchertype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqChangeLauncherMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqChangeLauncherMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqChangeLauncherMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqChangeLauncherMessage::MergeFrom(const ReqChangeLauncherMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_launchertype()) {
      set_launchertype(from.launchertype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqChangeLauncherMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqChangeLauncherMessage::CopyFrom(const ReqChangeLauncherMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqChangeLauncherMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  return true;
}

void ReqChangeLauncherMessage::Swap(ReqChangeLauncherMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(seat_, other->seat_);
    std::swap(launchertype_, other->launchertype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqChangeLauncherMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqChangeLauncherMessage_descriptor_;
  metadata.reflection = ReqChangeLauncherMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResChangeLauncherMessage::kMsgIDFieldNumber;
const int ResChangeLauncherMessage::kSeatFieldNumber;
const int ResChangeLauncherMessage::kLauncherTypeFieldNumber;
#endif  // !_MSC_VER

ResChangeLauncherMessage::ResChangeLauncherMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResChangeLauncherMessage::InitAsDefaultInstance() {
}

ResChangeLauncherMessage::ResChangeLauncherMessage(const ResChangeLauncherMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResChangeLauncherMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 6018;
  seat_ = 0;
  launchertype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResChangeLauncherMessage::~ResChangeLauncherMessage() {
  SharedDtor();
}

void ResChangeLauncherMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResChangeLauncherMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResChangeLauncherMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResChangeLauncherMessage_descriptor_;
}

const ResChangeLauncherMessage& ResChangeLauncherMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game60_5fFishingMessage_2eproto();  return *default_instance_;
}

ResChangeLauncherMessage* ResChangeLauncherMessage::default_instance_ = NULL;

ResChangeLauncherMessage* ResChangeLauncherMessage::New() const {
  return new ResChangeLauncherMessage;
}

void ResChangeLauncherMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 6018;
    seat_ = 0;
    launchertype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResChangeLauncherMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResChangeLauncher];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Game60Fishing_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Game60Fishing >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_seat;
        break;
      }
      
      // required int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_launcherType;
        break;
      }
      
      // required int32 launcherType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_launcherType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &launchertype_)));
          set_has_launchertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResChangeLauncherMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResChangeLauncher];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }
  
  // required int32 launcherType = 3;
  if (has_launchertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->launchertype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResChangeLauncherMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResChangeLauncher];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }
  
  // required int32 launcherType = 3;
  if (has_launchertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->launchertype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResChangeLauncherMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResChangeLauncher];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }
    
    // required int32 launcherType = 3;
    if (has_launchertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->launchertype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResChangeLauncherMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResChangeLauncherMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResChangeLauncherMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResChangeLauncherMessage::MergeFrom(const ResChangeLauncherMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_launchertype()) {
      set_launchertype(from.launchertype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResChangeLauncherMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResChangeLauncherMessage::CopyFrom(const ResChangeLauncherMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResChangeLauncherMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  return true;
}

void ResChangeLauncherMessage::Swap(ResChangeLauncherMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(seat_, other->seat_);
    std::swap(launchertype_, other->launchertype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResChangeLauncherMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResChangeLauncherMessage_descriptor_;
  metadata.reflection = ResChangeLauncherMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqChangeRateMessage::kMsgIDFieldNumber;
const int ReqChangeRateMessage::kUpRoDownRateFieldNumber;
#endif  // !_MSC_VER

ReqChangeRateMessage::ReqChangeRateMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqChangeRateMessage::InitAsDefaultInstance() {
}

ReqChangeRateMessage::ReqChangeRateMessage(const ReqChangeRateMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqChangeRateMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 6019;
  uprodownrate_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqChangeRateMessage::~ReqChangeRateMessage() {
  SharedDtor();
}

void ReqChangeRateMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqChangeRateMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqChangeRateMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqChangeRateMessage_descriptor_;
}

const ReqChangeRateMessage& ReqChangeRateMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game60_5fFishingMessage_2eproto();  return *default_instance_;
}

ReqChangeRateMessage* ReqChangeRateMessage::default_instance_ = NULL;

ReqChangeRateMessage* ReqChangeRateMessage::New() const {
  return new ReqChangeRateMessage;
}

void ReqChangeRateMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 6019;
    uprodownrate_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqChangeRateMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ReqChangeRate];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Game60Fishing_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Game60Fishing >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_UpRoDownRate;
        break;
      }
      
      // required bool UpRoDownRate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpRoDownRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &uprodownrate_)));
          set_has_uprodownrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqChangeRateMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ReqChangeRate];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required bool UpRoDownRate = 2;
  if (has_uprodownrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->uprodownrate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqChangeRateMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ReqChangeRate];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required bool UpRoDownRate = 2;
  if (has_uprodownrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->uprodownrate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqChangeRateMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ReqChangeRate];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required bool UpRoDownRate = 2;
    if (has_uprodownrate()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqChangeRateMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqChangeRateMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqChangeRateMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqChangeRateMessage::MergeFrom(const ReqChangeRateMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_uprodownrate()) {
      set_uprodownrate(from.uprodownrate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqChangeRateMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqChangeRateMessage::CopyFrom(const ReqChangeRateMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqChangeRateMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void ReqChangeRateMessage::Swap(ReqChangeRateMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(uprodownrate_, other->uprodownrate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqChangeRateMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqChangeRateMessage_descriptor_;
  metadata.reflection = ReqChangeRateMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResChangeRateMessage::kMsgIDFieldNumber;
const int ResChangeRateMessage::kSeatFieldNumber;
const int ResChangeRateMessage::kRateIndexFieldNumber;
const int ResChangeRateMessage::kIsCanUseRateFieldNumber;
#endif  // !_MSC_VER

ResChangeRateMessage::ResChangeRateMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResChangeRateMessage::InitAsDefaultInstance() {
}

ResChangeRateMessage::ResChangeRateMessage(const ResChangeRateMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResChangeRateMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 6020;
  seat_ = 0;
  rateindex_ = 0;
  iscanuserate_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResChangeRateMessage::~ResChangeRateMessage() {
  SharedDtor();
}

void ResChangeRateMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResChangeRateMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResChangeRateMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResChangeRateMessage_descriptor_;
}

const ResChangeRateMessage& ResChangeRateMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game60_5fFishingMessage_2eproto();  return *default_instance_;
}

ResChangeRateMessage* ResChangeRateMessage::default_instance_ = NULL;

ResChangeRateMessage* ResChangeRateMessage::New() const {
  return new ResChangeRateMessage;
}

void ResChangeRateMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 6020;
    seat_ = 0;
    rateindex_ = 0;
    iscanuserate_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResChangeRateMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResChangeRate];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Game60Fishing_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Game60Fishing >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Seat;
        break;
      }
      
      // required int32 Seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Seat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_RateIndex;
        break;
      }
      
      // required int32 RateIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RateIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rateindex_)));
          set_has_rateindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_IsCanUseRate;
        break;
      }
      
      // required bool IsCanUseRate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsCanUseRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscanuserate_)));
          set_has_iscanuserate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResChangeRateMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResChangeRate];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required int32 Seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }
  
  // required int32 RateIndex = 3;
  if (has_rateindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rateindex(), output);
  }
  
  // required bool IsCanUseRate = 4;
  if (has_iscanuserate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->iscanuserate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResChangeRateMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResChangeRate];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required int32 Seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }
  
  // required int32 RateIndex = 3;
  if (has_rateindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rateindex(), target);
  }
  
  // required bool IsCanUseRate = 4;
  if (has_iscanuserate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->iscanuserate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResChangeRateMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResChangeRate];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required int32 Seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }
    
    // required int32 RateIndex = 3;
    if (has_rateindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rateindex());
    }
    
    // required bool IsCanUseRate = 4;
    if (has_iscanuserate()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResChangeRateMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResChangeRateMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResChangeRateMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResChangeRateMessage::MergeFrom(const ResChangeRateMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_rateindex()) {
      set_rateindex(from.rateindex());
    }
    if (from.has_iscanuserate()) {
      set_iscanuserate(from.iscanuserate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResChangeRateMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResChangeRateMessage::CopyFrom(const ResChangeRateMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResChangeRateMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;
  
  return true;
}

void ResChangeRateMessage::Swap(ResChangeRateMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(seat_, other->seat_);
    std::swap(rateindex_, other->rateindex_);
    std::swap(iscanuserate_, other->iscanuserate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResChangeRateMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResChangeRateMessage_descriptor_;
  metadata.reflection = ResChangeRateMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncBulletData::kBulletIDFieldNumber;
const int SyncBulletData::kDegreeFieldNumber;
const int SyncBulletData::kTimeFieldNumber;
const int SyncBulletData::kBulletTypeFieldNumber;
const int SyncBulletData::kRateIdxFieldNumber;
const int SyncBulletData::kReboundCountFieldNumber;
const int SyncBulletData::kLockFishIDFieldNumber;
#endif  // !_MSC_VER

SyncBulletData::SyncBulletData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SyncBulletData::InitAsDefaultInstance() {
}

SyncBulletData::SyncBulletData(const SyncBulletData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SyncBulletData::SharedCtor() {
  _cached_size_ = 0;
  bulletid_ = 0u;
  degree_ = 0;
  time_ = 0u;
  bullettype_ = 0;
  rateidx_ = 0;
  reboundcount_ = 0;
  lockfishid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncBulletData::~SyncBulletData() {
  SharedDtor();
}

void SyncBulletData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SyncBulletData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncBulletData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncBulletData_descriptor_;
}

const SyncBulletData& SyncBulletData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game60_5fFishingMessage_2eproto();  return *default_instance_;
}

SyncBulletData* SyncBulletData::default_instance_ = NULL;

SyncBulletData* SyncBulletData::New() const {
  return new SyncBulletData;
}

void SyncBulletData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bulletid_ = 0u;
    degree_ = 0;
    time_ = 0u;
    bullettype_ = 0;
    rateidx_ = 0;
    reboundcount_ = 0;
    lockfishid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncBulletData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 BulletID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bulletid_)));
          set_has_bulletid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Degree;
        break;
      }
      
      // optional int32 Degree = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Degree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &degree_)));
          set_has_degree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Time;
        break;
      }
      
      // optional uint32 Time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_BulletType;
        break;
      }
      
      // optional int32 BulletType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BulletType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bullettype_)));
          set_has_bullettype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_RateIdx;
        break;
      }
      
      // optional int32 RateIdx = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RateIdx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rateidx_)));
          set_has_rateidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ReboundCount;
        break;
      }
      
      // optional int32 ReboundCount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ReboundCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reboundcount_)));
          set_has_reboundcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_LockFishID;
        break;
      }
      
      // optional uint32 LockFishID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LockFishID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lockfishid_)));
          set_has_lockfishid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncBulletData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 BulletID = 1;
  if (has_bulletid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bulletid(), output);
  }
  
  // optional int32 Degree = 2;
  if (has_degree()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->degree(), output);
  }
  
  // optional uint32 Time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time(), output);
  }
  
  // optional int32 BulletType = 4;
  if (has_bullettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bullettype(), output);
  }
  
  // optional int32 RateIdx = 5;
  if (has_rateidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->rateidx(), output);
  }
  
  // optional int32 ReboundCount = 6;
  if (has_reboundcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->reboundcount(), output);
  }
  
  // optional uint32 LockFishID = 7;
  if (has_lockfishid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->lockfishid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SyncBulletData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 BulletID = 1;
  if (has_bulletid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bulletid(), target);
  }
  
  // optional int32 Degree = 2;
  if (has_degree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->degree(), target);
  }
  
  // optional uint32 Time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time(), target);
  }
  
  // optional int32 BulletType = 4;
  if (has_bullettype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bullettype(), target);
  }
  
  // optional int32 RateIdx = 5;
  if (has_rateidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->rateidx(), target);
  }
  
  // optional int32 ReboundCount = 6;
  if (has_reboundcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->reboundcount(), target);
  }
  
  // optional uint32 LockFishID = 7;
  if (has_lockfishid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->lockfishid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SyncBulletData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BulletID = 1;
    if (has_bulletid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bulletid());
    }
    
    // optional int32 Degree = 2;
    if (has_degree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->degree());
    }
    
    // optional uint32 Time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }
    
    // optional int32 BulletType = 4;
    if (has_bullettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bullettype());
    }
    
    // optional int32 RateIdx = 5;
    if (has_rateidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rateidx());
    }
    
    // optional int32 ReboundCount = 6;
    if (has_reboundcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reboundcount());
    }
    
    // optional uint32 LockFishID = 7;
    if (has_lockfishid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lockfishid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncBulletData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncBulletData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncBulletData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncBulletData::MergeFrom(const SyncBulletData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bulletid()) {
      set_bulletid(from.bulletid());
    }
    if (from.has_degree()) {
      set_degree(from.degree());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_bullettype()) {
      set_bullettype(from.bullettype());
    }
    if (from.has_rateidx()) {
      set_rateidx(from.rateidx());
    }
    if (from.has_reboundcount()) {
      set_reboundcount(from.reboundcount());
    }
    if (from.has_lockfishid()) {
      set_lockfishid(from.lockfishid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncBulletData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncBulletData::CopyFrom(const SyncBulletData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncBulletData::IsInitialized() const {
  
  return true;
}

void SyncBulletData::Swap(SyncBulletData* other) {
  if (other != this) {
    std::swap(bulletid_, other->bulletid_);
    std::swap(degree_, other->degree_);
    std::swap(time_, other->time_);
    std::swap(bullettype_, other->bullettype_);
    std::swap(rateidx_, other->rateidx_);
    std::swap(reboundcount_, other->reboundcount_);
    std::swap(lockfishid_, other->lockfishid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncBulletData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncBulletData_descriptor_;
  metadata.reflection = SyncBulletData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResSyncBulletDataMessage::kMsgIDFieldNumber;
const int ResSyncBulletDataMessage::kSyncBulletDataFieldNumber;
#endif  // !_MSC_VER

ResSyncBulletDataMessage::ResSyncBulletDataMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResSyncBulletDataMessage::InitAsDefaultInstance() {
}

ResSyncBulletDataMessage::ResSyncBulletDataMessage(const ResSyncBulletDataMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResSyncBulletDataMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 6024;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResSyncBulletDataMessage::~ResSyncBulletDataMessage() {
  SharedDtor();
}

void ResSyncBulletDataMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResSyncBulletDataMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResSyncBulletDataMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResSyncBulletDataMessage_descriptor_;
}

const ResSyncBulletDataMessage& ResSyncBulletDataMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game60_5fFishingMessage_2eproto();  return *default_instance_;
}

ResSyncBulletDataMessage* ResSyncBulletDataMessage::default_instance_ = NULL;

ResSyncBulletDataMessage* ResSyncBulletDataMessage::New() const {
  return new ResSyncBulletDataMessage;
}

void ResSyncBulletDataMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 6024;
  }
  syncbulletdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResSyncBulletDataMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResSyncBulletData];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Game60Fishing_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Game60Fishing >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_syncBulletData;
        break;
      }
      
      // repeated .com.game.proto.SyncBulletData syncBulletData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_syncBulletData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_syncbulletdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_syncBulletData;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResSyncBulletDataMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResSyncBulletData];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // repeated .com.game.proto.SyncBulletData syncBulletData = 2;
  for (int i = 0; i < this->syncbulletdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->syncbulletdata(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResSyncBulletDataMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResSyncBulletData];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // repeated .com.game.proto.SyncBulletData syncBulletData = 2;
  for (int i = 0; i < this->syncbulletdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->syncbulletdata(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResSyncBulletDataMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResSyncBulletData];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
  }
  // repeated .com.game.proto.SyncBulletData syncBulletData = 2;
  total_size += 1 * this->syncbulletdata_size();
  for (int i = 0; i < this->syncbulletdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->syncbulletdata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResSyncBulletDataMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResSyncBulletDataMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResSyncBulletDataMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResSyncBulletDataMessage::MergeFrom(const ResSyncBulletDataMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  syncbulletdata_.MergeFrom(from.syncbulletdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResSyncBulletDataMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResSyncBulletDataMessage::CopyFrom(const ResSyncBulletDataMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResSyncBulletDataMessage::IsInitialized() const {
  
  return true;
}

void ResSyncBulletDataMessage::Swap(ResSyncBulletDataMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    syncbulletdata_.Swap(&other->syncbulletdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResSyncBulletDataMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResSyncBulletDataMessage_descriptor_;
  metadata.reflection = ResSyncBulletDataMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqLeaveGameMessage::kMsgIDFieldNumber;
const int ReqLeaveGameMessage::kSeatFieldNumber;
#endif  // !_MSC_VER

ReqLeaveGameMessage::ReqLeaveGameMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqLeaveGameMessage::InitAsDefaultInstance() {
}

ReqLeaveGameMessage::ReqLeaveGameMessage(const ReqLeaveGameMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqLeaveGameMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 6025;
  seat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqLeaveGameMessage::~ReqLeaveGameMessage() {
  SharedDtor();
}

void ReqLeaveGameMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqLeaveGameMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqLeaveGameMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqLeaveGameMessage_descriptor_;
}

const ReqLeaveGameMessage& ReqLeaveGameMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game60_5fFishingMessage_2eproto();  return *default_instance_;
}

ReqLeaveGameMessage* ReqLeaveGameMessage::default_instance_ = NULL;

ReqLeaveGameMessage* ReqLeaveGameMessage::New() const {
  return new ReqLeaveGameMessage;
}

void ReqLeaveGameMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 6025;
    seat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqLeaveGameMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ReqLeaveGame];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Game60Fishing_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Game60Fishing >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_seat;
        break;
      }
      
      // required int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqLeaveGameMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ReqLeaveGame];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqLeaveGameMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ReqLeaveGame];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqLeaveGameMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ReqLeaveGame];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqLeaveGameMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqLeaveGameMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqLeaveGameMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqLeaveGameMessage::MergeFrom(const ReqLeaveGameMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_seat()) {
      set_seat(from.seat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqLeaveGameMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLeaveGameMessage::CopyFrom(const ReqLeaveGameMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLeaveGameMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void ReqLeaveGameMessage::Swap(ReqLeaveGameMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(seat_, other->seat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqLeaveGameMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqLeaveGameMessage_descriptor_;
  metadata.reflection = ReqLeaveGameMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResLeaveGameMessage::kMsgIDFieldNumber;
const int ResLeaveGameMessage::kSeatFieldNumber;
#endif  // !_MSC_VER

ResLeaveGameMessage::ResLeaveGameMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResLeaveGameMessage::InitAsDefaultInstance() {
}

ResLeaveGameMessage::ResLeaveGameMessage(const ResLeaveGameMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResLeaveGameMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 6026;
  seat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResLeaveGameMessage::~ResLeaveGameMessage() {
  SharedDtor();
}

void ResLeaveGameMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResLeaveGameMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResLeaveGameMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResLeaveGameMessage_descriptor_;
}

const ResLeaveGameMessage& ResLeaveGameMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game60_5fFishingMessage_2eproto();  return *default_instance_;
}

ResLeaveGameMessage* ResLeaveGameMessage::default_instance_ = NULL;

ResLeaveGameMessage* ResLeaveGameMessage::New() const {
  return new ResLeaveGameMessage;
}

void ResLeaveGameMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 6026;
    seat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResLeaveGameMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResLeaveGame];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Game60Fishing_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Game60Fishing >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_seat;
        break;
      }
      
      // required int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResLeaveGameMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResLeaveGame];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResLeaveGameMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResLeaveGame];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResLeaveGameMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResLeaveGame];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResLeaveGameMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResLeaveGameMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResLeaveGameMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResLeaveGameMessage::MergeFrom(const ResLeaveGameMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_seat()) {
      set_seat(from.seat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResLeaveGameMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResLeaveGameMessage::CopyFrom(const ResLeaveGameMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResLeaveGameMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void ResLeaveGameMessage::Swap(ResLeaveGameMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(seat_, other->seat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResLeaveGameMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResLeaveGameMessage_descriptor_;
  metadata.reflection = ResLeaveGameMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqLookUpPlayerInfoMessage::kMsgIDFieldNumber;
const int ReqLookUpPlayerInfoMessage::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

ReqLookUpPlayerInfoMessage::ReqLookUpPlayerInfoMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqLookUpPlayerInfoMessage::InitAsDefaultInstance() {
}

ReqLookUpPlayerInfoMessage::ReqLookUpPlayerInfoMessage(const ReqLookUpPlayerInfoMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqLookUpPlayerInfoMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 6027;
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqLookUpPlayerInfoMessage::~ReqLookUpPlayerInfoMessage() {
  SharedDtor();
}

void ReqLookUpPlayerInfoMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqLookUpPlayerInfoMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqLookUpPlayerInfoMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqLookUpPlayerInfoMessage_descriptor_;
}

const ReqLookUpPlayerInfoMessage& ReqLookUpPlayerInfoMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game60_5fFishingMessage_2eproto();  return *default_instance_;
}

ReqLookUpPlayerInfoMessage* ReqLookUpPlayerInfoMessage::default_instance_ = NULL;

ReqLookUpPlayerInfoMessage* ReqLookUpPlayerInfoMessage::New() const {
  return new ReqLookUpPlayerInfoMessage;
}

void ReqLookUpPlayerInfoMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 6027;
    playerid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqLookUpPlayerInfoMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ReqLookUpPlayerInfo];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Game60Fishing_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Game60Fishing >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerId;
        break;
      }
      
      // optional int64 playerId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqLookUpPlayerInfoMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ReqLookUpPlayerInfo];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // optional int64 playerId = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->playerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqLookUpPlayerInfoMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ReqLookUpPlayerInfo];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // optional int64 playerId = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->playerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqLookUpPlayerInfoMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ReqLookUpPlayerInfo];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional int64 playerId = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqLookUpPlayerInfoMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqLookUpPlayerInfoMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqLookUpPlayerInfoMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqLookUpPlayerInfoMessage::MergeFrom(const ReqLookUpPlayerInfoMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqLookUpPlayerInfoMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLookUpPlayerInfoMessage::CopyFrom(const ReqLookUpPlayerInfoMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLookUpPlayerInfoMessage::IsInitialized() const {
  
  return true;
}

void ReqLookUpPlayerInfoMessage::Swap(ReqLookUpPlayerInfoMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqLookUpPlayerInfoMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqLookUpPlayerInfoMessage_descriptor_;
  metadata.reflection = ReqLookUpPlayerInfoMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResLookUpPlayerInfoMessage::kMsgIDFieldNumber;
const int ResLookUpPlayerInfoMessage::kPlayerIdFieldNumber;
const int ResLookUpPlayerInfoMessage::kVipLevelFieldNumber;
const int ResLookUpPlayerInfoMessage::kIconFieldNumber;
const int ResLookUpPlayerInfoMessage::kNameFieldNumber;
const int ResLookUpPlayerInfoMessage::kSexFieldNumber;
const int ResLookUpPlayerInfoMessage::kTitleIdFieldNumber;
const int ResLookUpPlayerInfoMessage::kGameWinMaxMoneyFieldNumber;
const int ResLookUpPlayerInfoMessage::kMoneyFieldNumber;
const int ResLookUpPlayerInfoMessage::kCharmValueFieldNumber;
const int ResLookUpPlayerInfoMessage::kSignatureFieldNumber;
const int ResLookUpPlayerInfoMessage::kHeadIconFieldNumber;
#endif  // !_MSC_VER

ResLookUpPlayerInfoMessage::ResLookUpPlayerInfoMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResLookUpPlayerInfoMessage::InitAsDefaultInstance() {
}

ResLookUpPlayerInfoMessage::ResLookUpPlayerInfoMessage(const ResLookUpPlayerInfoMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResLookUpPlayerInfoMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 6028;
  playerid_ = GOOGLE_LONGLONG(0);
  viplevel_ = 0;
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0;
  titleid_ = 0;
  gamewinmaxmoney_ = 0;
  money_ = 0;
  charmvalue_ = 0;
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  headicon_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResLookUpPlayerInfoMessage::~ResLookUpPlayerInfoMessage() {
  SharedDtor();
}

void ResLookUpPlayerInfoMessage::SharedDtor() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (this != default_instance_) {
  }
}

void ResLookUpPlayerInfoMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResLookUpPlayerInfoMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResLookUpPlayerInfoMessage_descriptor_;
}

const ResLookUpPlayerInfoMessage& ResLookUpPlayerInfoMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game60_5fFishingMessage_2eproto();  return *default_instance_;
}

ResLookUpPlayerInfoMessage* ResLookUpPlayerInfoMessage::default_instance_ = NULL;

ResLookUpPlayerInfoMessage* ResLookUpPlayerInfoMessage::New() const {
  return new ResLookUpPlayerInfoMessage;
}

void ResLookUpPlayerInfoMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 6028;
    playerid_ = GOOGLE_LONGLONG(0);
    viplevel_ = 0;
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    sex_ = 0;
    titleid_ = 0;
    gamewinmaxmoney_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    money_ = 0;
    charmvalue_ = 0;
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::kEmptyString) {
        signature_->clear();
      }
    }
    headicon_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResLookUpPlayerInfoMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResLookUpPlayerInfo];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Game60Fishing_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Game60Fishing >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerId;
        break;
      }
      
      // optional int64 playerId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_vipLevel;
        break;
      }
      
      // optional int32 vipLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_icon;
        break;
      }
      
      // optional string icon = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }
      
      // optional string name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sex;
        break;
      }
      
      // optional int32 sex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_titleId;
        break;
      }
      
      // optional int32 titleId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_titleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &titleid_)));
          set_has_titleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_gameWinMaxMoney;
        break;
      }
      
      // optional double gameWinMaxMoney = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_gameWinMaxMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gamewinmaxmoney_)));
          set_has_gamewinmaxmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_money;
        break;
      }
      
      // optional double money = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_charmValue;
        break;
      }
      
      // optional int32 charmValue = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charmValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &charmvalue_)));
          set_has_charmvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_signature;
        break;
      }
      
      // optional string signature = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_headIcon;
        break;
      }
      
      // optional int32 headIcon = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headIcon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headicon_)));
          set_has_headicon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResLookUpPlayerInfoMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResLookUpPlayerInfo];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // optional int64 playerId = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->playerid(), output);
  }
  
  // optional int32 vipLevel = 3;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->viplevel(), output);
  }
  
  // optional string icon = 4;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->icon(), output);
  }
  
  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->name(), output);
  }
  
  // optional int32 sex = 6;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sex(), output);
  }
  
  // optional int32 titleId = 7;
  if (has_titleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->titleid(), output);
  }
  
  // optional double gameWinMaxMoney = 8;
  if (has_gamewinmaxmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->gamewinmaxmoney(), output);
  }
  
  // optional double money = 9;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->money(), output);
  }
  
  // optional int32 charmValue = 10;
  if (has_charmvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->charmvalue(), output);
  }
  
  // optional string signature = 11;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->signature(), output);
  }
  
  // optional int32 headIcon = 12;
  if (has_headicon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->headicon(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResLookUpPlayerInfoMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResLookUpPlayerInfo];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // optional int64 playerId = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->playerid(), target);
  }
  
  // optional int32 vipLevel = 3;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->viplevel(), target);
  }
  
  // optional string icon = 4;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->icon(), target);
  }
  
  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }
  
  // optional int32 sex = 6;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sex(), target);
  }
  
  // optional int32 titleId = 7;
  if (has_titleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->titleid(), target);
  }
  
  // optional double gameWinMaxMoney = 8;
  if (has_gamewinmaxmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->gamewinmaxmoney(), target);
  }
  
  // optional double money = 9;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->money(), target);
  }
  
  // optional int32 charmValue = 10;
  if (has_charmvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->charmvalue(), target);
  }
  
  // optional string signature = 11;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->signature(), target);
  }
  
  // optional int32 headIcon = 12;
  if (has_headicon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->headicon(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResLookUpPlayerInfoMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResLookUpPlayerInfo];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // optional int64 playerId = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }
    
    // optional int32 vipLevel = 3;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplevel());
    }
    
    // optional string icon = 4;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }
    
    // optional string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 sex = 6;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }
    
    // optional int32 titleId = 7;
    if (has_titleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->titleid());
    }
    
    // optional double gameWinMaxMoney = 8;
    if (has_gamewinmaxmoney()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double money = 9;
    if (has_money()) {
      total_size += 1 + 8;
    }
    
    // optional int32 charmValue = 10;
    if (has_charmvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->charmvalue());
    }
    
    // optional string signature = 11;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signature());
    }
    
    // optional int32 headIcon = 12;
    if (has_headicon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headicon());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResLookUpPlayerInfoMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResLookUpPlayerInfoMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResLookUpPlayerInfoMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResLookUpPlayerInfoMessage::MergeFrom(const ResLookUpPlayerInfoMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_titleid()) {
      set_titleid(from.titleid());
    }
    if (from.has_gamewinmaxmoney()) {
      set_gamewinmaxmoney(from.gamewinmaxmoney());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_charmvalue()) {
      set_charmvalue(from.charmvalue());
    }
    if (from.has_signature()) {
      set_signature(from.signature());
    }
    if (from.has_headicon()) {
      set_headicon(from.headicon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResLookUpPlayerInfoMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResLookUpPlayerInfoMessage::CopyFrom(const ResLookUpPlayerInfoMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResLookUpPlayerInfoMessage::IsInitialized() const {
  
  return true;
}

void ResLookUpPlayerInfoMessage::Swap(ResLookUpPlayerInfoMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(playerid_, other->playerid_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(icon_, other->icon_);
    std::swap(name_, other->name_);
    std::swap(sex_, other->sex_);
    std::swap(titleid_, other->titleid_);
    std::swap(gamewinmaxmoney_, other->gamewinmaxmoney_);
    std::swap(money_, other->money_);
    std::swap(charmvalue_, other->charmvalue_);
    std::swap(signature_, other->signature_);
    std::swap(headicon_, other->headicon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResLookUpPlayerInfoMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResLookUpPlayerInfoMessage_descriptor_;
  metadata.reflection = ResLookUpPlayerInfoMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResConnectFinishMessage::kMsgIDFieldNumber;
#endif  // !_MSC_VER

ResConnectFinishMessage::ResConnectFinishMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResConnectFinishMessage::InitAsDefaultInstance() {
}

ResConnectFinishMessage::ResConnectFinishMessage(const ResConnectFinishMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResConnectFinishMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 6030;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResConnectFinishMessage::~ResConnectFinishMessage() {
  SharedDtor();
}

void ResConnectFinishMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResConnectFinishMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResConnectFinishMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResConnectFinishMessage_descriptor_;
}

const ResConnectFinishMessage& ResConnectFinishMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game60_5fFishingMessage_2eproto();  return *default_instance_;
}

ResConnectFinishMessage* ResConnectFinishMessage::default_instance_ = NULL;

ResConnectFinishMessage* ResConnectFinishMessage::New() const {
  return new ResConnectFinishMessage;
}

void ResConnectFinishMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 6030;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResConnectFinishMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResConnectFinish];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Game60Fishing_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Game60Fishing >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResConnectFinishMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResConnectFinish];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResConnectFinishMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResConnectFinish];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResConnectFinishMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResConnectFinish];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResConnectFinishMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResConnectFinishMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResConnectFinishMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResConnectFinishMessage::MergeFrom(const ResConnectFinishMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResConnectFinishMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResConnectFinishMessage::CopyFrom(const ResConnectFinishMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResConnectFinishMessage::IsInitialized() const {
  
  return true;
}

void ResConnectFinishMessage::Swap(ResConnectFinishMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResConnectFinishMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResConnectFinishMessage_descriptor_;
  metadata.reflection = ResConnectFinishMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqStartSyncFishMessage::kMsgIDFieldNumber;
#endif  // !_MSC_VER

ReqStartSyncFishMessage::ReqStartSyncFishMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqStartSyncFishMessage::InitAsDefaultInstance() {
}

ReqStartSyncFishMessage::ReqStartSyncFishMessage(const ReqStartSyncFishMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqStartSyncFishMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 6031;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqStartSyncFishMessage::~ReqStartSyncFishMessage() {
  SharedDtor();
}

void ReqStartSyncFishMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqStartSyncFishMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqStartSyncFishMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqStartSyncFishMessage_descriptor_;
}

const ReqStartSyncFishMessage& ReqStartSyncFishMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game60_5fFishingMessage_2eproto();  return *default_instance_;
}

ReqStartSyncFishMessage* ReqStartSyncFishMessage::default_instance_ = NULL;

ReqStartSyncFishMessage* ReqStartSyncFishMessage::New() const {
  return new ReqStartSyncFishMessage;
}

void ReqStartSyncFishMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 6031;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqStartSyncFishMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ReqStartSyncFish];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Game60Fishing_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Game60Fishing >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqStartSyncFishMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ReqStartSyncFish];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqStartSyncFishMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ReqStartSyncFish];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqStartSyncFishMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ReqStartSyncFish];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqStartSyncFishMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqStartSyncFishMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqStartSyncFishMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqStartSyncFishMessage::MergeFrom(const ReqStartSyncFishMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqStartSyncFishMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqStartSyncFishMessage::CopyFrom(const ReqStartSyncFishMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqStartSyncFishMessage::IsInitialized() const {
  
  return true;
}

void ReqStartSyncFishMessage::Swap(ReqStartSyncFishMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqStartSyncFishMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqStartSyncFishMessage_descriptor_;
  metadata.reflection = ReqStartSyncFishMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResPlayerTickOutMessage::kMsgIDFieldNumber;
#endif  // !_MSC_VER

ResPlayerTickOutMessage::ResPlayerTickOutMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResPlayerTickOutMessage::InitAsDefaultInstance() {
}

ResPlayerTickOutMessage::ResPlayerTickOutMessage(const ResPlayerTickOutMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResPlayerTickOutMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 6032;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResPlayerTickOutMessage::~ResPlayerTickOutMessage() {
  SharedDtor();
}

void ResPlayerTickOutMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResPlayerTickOutMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResPlayerTickOutMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResPlayerTickOutMessage_descriptor_;
}

const ResPlayerTickOutMessage& ResPlayerTickOutMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game60_5fFishingMessage_2eproto();  return *default_instance_;
}

ResPlayerTickOutMessage* ResPlayerTickOutMessage::default_instance_ = NULL;

ResPlayerTickOutMessage* ResPlayerTickOutMessage::New() const {
  return new ResPlayerTickOutMessage;
}

void ResPlayerTickOutMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 6032;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResPlayerTickOutMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResPlayerTickOut];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Game60Fishing_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Game60Fishing >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResPlayerTickOutMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResPlayerTickOut];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResPlayerTickOutMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResPlayerTickOut];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResPlayerTickOutMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResPlayerTickOut];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResPlayerTickOutMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResPlayerTickOutMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResPlayerTickOutMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResPlayerTickOutMessage::MergeFrom(const ResPlayerTickOutMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResPlayerTickOutMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResPlayerTickOutMessage::CopyFrom(const ResPlayerTickOutMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResPlayerTickOutMessage::IsInitialized() const {
  
  return true;
}

void ResPlayerTickOutMessage::Swap(ResPlayerTickOutMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResPlayerTickOutMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResPlayerTickOutMessage_descriptor_;
  metadata.reflection = ResPlayerTickOutMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResSyncAddMoneyMessage::kMsgIDFieldNumber;
const int ResSyncAddMoneyMessage::kAddGoldNumFieldNumber;
const int ResSyncAddMoneyMessage::kReasonFieldNumber;
#endif  // !_MSC_VER

ResSyncAddMoneyMessage::ResSyncAddMoneyMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResSyncAddMoneyMessage::InitAsDefaultInstance() {
}

ResSyncAddMoneyMessage::ResSyncAddMoneyMessage(const ResSyncAddMoneyMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResSyncAddMoneyMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 6034;
  add_goldnum_ = GOOGLE_LONGLONG(0);
  reason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResSyncAddMoneyMessage::~ResSyncAddMoneyMessage() {
  SharedDtor();
}

void ResSyncAddMoneyMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResSyncAddMoneyMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResSyncAddMoneyMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResSyncAddMoneyMessage_descriptor_;
}

const ResSyncAddMoneyMessage& ResSyncAddMoneyMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game60_5fFishingMessage_2eproto();  return *default_instance_;
}

ResSyncAddMoneyMessage* ResSyncAddMoneyMessage::default_instance_ = NULL;

ResSyncAddMoneyMessage* ResSyncAddMoneyMessage::New() const {
  return new ResSyncAddMoneyMessage;
}

void ResSyncAddMoneyMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 6034;
    add_goldnum_ = GOOGLE_LONGLONG(0);
    reason_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResSyncAddMoneyMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResSyncAddMoney];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Game60Fishing_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Game60Fishing >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_add_goldNum;
        break;
      }
      
      // required int64 add_goldNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_goldNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &add_goldnum_)));
          set_has_add_goldnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_reason;
        break;
      }
      
      // optional int32 reason = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResSyncAddMoneyMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResSyncAddMoney];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required int64 add_goldNum = 2;
  if (has_add_goldnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->add_goldnum(), output);
  }
  
  // optional int32 reason = 4;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->reason(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResSyncAddMoneyMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResSyncAddMoney];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required int64 add_goldNum = 2;
  if (has_add_goldnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->add_goldnum(), target);
  }
  
  // optional int32 reason = 4;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->reason(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResSyncAddMoneyMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResSyncAddMoney];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required int64 add_goldNum = 2;
    if (has_add_goldnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->add_goldnum());
    }
    
    // optional int32 reason = 4;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reason());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResSyncAddMoneyMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResSyncAddMoneyMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResSyncAddMoneyMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResSyncAddMoneyMessage::MergeFrom(const ResSyncAddMoneyMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_add_goldnum()) {
      set_add_goldnum(from.add_goldnum());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResSyncAddMoneyMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResSyncAddMoneyMessage::CopyFrom(const ResSyncAddMoneyMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResSyncAddMoneyMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void ResSyncAddMoneyMessage::Swap(ResSyncAddMoneyMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(add_goldnum_, other->add_goldnum_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResSyncAddMoneyMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResSyncAddMoneyMessage_descriptor_;
  metadata.reflection = ResSyncAddMoneyMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResUseGoodsKBMessage::kMsgIDFieldNumber;
const int ResUseGoodsKBMessage::kSeatIDFieldNumber;
const int ResUseGoodsKBMessage::kKeepTimeFieldNumber;
#endif  // !_MSC_VER

ResUseGoodsKBMessage::ResUseGoodsKBMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResUseGoodsKBMessage::InitAsDefaultInstance() {
}

ResUseGoodsKBMessage::ResUseGoodsKBMessage(const ResUseGoodsKBMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResUseGoodsKBMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 6036;
  seatid_ = 0;
  keeptime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResUseGoodsKBMessage::~ResUseGoodsKBMessage() {
  SharedDtor();
}

void ResUseGoodsKBMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResUseGoodsKBMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResUseGoodsKBMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResUseGoodsKBMessage_descriptor_;
}

const ResUseGoodsKBMessage& ResUseGoodsKBMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game60_5fFishingMessage_2eproto();  return *default_instance_;
}

ResUseGoodsKBMessage* ResUseGoodsKBMessage::default_instance_ = NULL;

ResUseGoodsKBMessage* ResUseGoodsKBMessage::New() const {
  return new ResUseGoodsKBMessage;
}

void ResUseGoodsKBMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 6036;
    seatid_ = 0;
    keeptime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResUseGoodsKBMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResUseGoodsKB];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Game60Fishing_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Game60Fishing >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_seatID;
        break;
      }
      
      // required int32 seatID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seatID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_keepTime;
        break;
      }
      
      // required uint32 keepTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_keepTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &keeptime_)));
          set_has_keeptime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResUseGoodsKBMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResUseGoodsKB];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required int32 seatID = 2;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seatid(), output);
  }
  
  // required uint32 keepTime = 3;
  if (has_keeptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->keeptime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResUseGoodsKBMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResUseGoodsKB];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required int32 seatID = 2;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seatid(), target);
  }
  
  // required uint32 keepTime = 3;
  if (has_keeptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->keeptime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResUseGoodsKBMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResUseGoodsKB];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required int32 seatID = 2;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }
    
    // required uint32 keepTime = 3;
    if (has_keeptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->keeptime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResUseGoodsKBMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResUseGoodsKBMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResUseGoodsKBMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResUseGoodsKBMessage::MergeFrom(const ResUseGoodsKBMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_keeptime()) {
      set_keeptime(from.keeptime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResUseGoodsKBMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResUseGoodsKBMessage::CopyFrom(const ResUseGoodsKBMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResUseGoodsKBMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  return true;
}

void ResUseGoodsKBMessage::Swap(ResUseGoodsKBMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(seatid_, other->seatid_);
    std::swap(keeptime_, other->keeptime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResUseGoodsKBMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResUseGoodsKBMessage_descriptor_;
  metadata.reflection = ResUseGoodsKBMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResUseGoodsBDMessage::kMsgIDFieldNumber;
const int ResUseGoodsBDMessage::kSeatIDFieldNumber;
const int ResUseGoodsBDMessage::kKeepTimeFieldNumber;
#endif  // !_MSC_VER

ResUseGoodsBDMessage::ResUseGoodsBDMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResUseGoodsBDMessage::InitAsDefaultInstance() {
}

ResUseGoodsBDMessage::ResUseGoodsBDMessage(const ResUseGoodsBDMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResUseGoodsBDMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 6038;
  seatid_ = 0;
  keeptime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResUseGoodsBDMessage::~ResUseGoodsBDMessage() {
  SharedDtor();
}

void ResUseGoodsBDMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResUseGoodsBDMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResUseGoodsBDMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResUseGoodsBDMessage_descriptor_;
}

const ResUseGoodsBDMessage& ResUseGoodsBDMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game60_5fFishingMessage_2eproto();  return *default_instance_;
}

ResUseGoodsBDMessage* ResUseGoodsBDMessage::default_instance_ = NULL;

ResUseGoodsBDMessage* ResUseGoodsBDMessage::New() const {
  return new ResUseGoodsBDMessage;
}

void ResUseGoodsBDMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 6038;
    seatid_ = 0;
    keeptime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResUseGoodsBDMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResUseGoodsBD];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (com::game::proto::Protos_Game60Fishing_IsValid(value)) {
            set_msgid(static_cast< com::game::proto::Protos_Game60Fishing >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_seatID;
        break;
      }
      
      // required int32 seatID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seatID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_keepTime;
        break;
      }
      
      // required uint32 keepTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_keepTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &keeptime_)));
          set_has_keeptime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResUseGoodsBDMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResUseGoodsBD];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }
  
  // required int32 seatID = 2;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seatid(), output);
  }
  
  // required uint32 keepTime = 3;
  if (has_keeptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->keeptime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResUseGoodsBDMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResUseGoodsBD];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }
  
  // required int32 seatID = 2;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seatid(), target);
  }
  
  // required uint32 keepTime = 3;
  if (has_keeptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->keeptime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResUseGoodsBDMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.game.proto.Protos_Game60Fishing msgID = 1 [default = ResUseGoodsBD];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }
    
    // required int32 seatID = 2;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }
    
    // required uint32 keepTime = 3;
    if (has_keeptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->keeptime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResUseGoodsBDMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResUseGoodsBDMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResUseGoodsBDMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResUseGoodsBDMessage::MergeFrom(const ResUseGoodsBDMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_keeptime()) {
      set_keeptime(from.keeptime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResUseGoodsBDMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResUseGoodsBDMessage::CopyFrom(const ResUseGoodsBDMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResUseGoodsBDMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  return true;
}

void ResUseGoodsBDMessage::Swap(ResUseGoodsBDMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(seatid_, other->seatid_);
    std::swap(keeptime_, other->keeptime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResUseGoodsBDMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResUseGoodsBDMessage_descriptor_;
  metadata.reflection = ResUseGoodsBDMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace game
}  // namespace com

// @@protoc_insertion_point(global_scope)
